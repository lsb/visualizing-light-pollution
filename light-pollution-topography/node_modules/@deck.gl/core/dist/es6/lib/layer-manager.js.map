{"version":3,"sources":["../../../src/lib/layer-manager.js"],"names":["assert","Timeline","Layer","LIFECYCLE","log","debug","flatten","Stats","Viewport","createProgramManager","TRACE_SET_LAYERS","TRACE_ACTIVATE_VIEWPORT","INITIAL_CONTEXT","Object","seal","layerManager","deck","gl","stats","shaderCache","pickingFBO","mousePosition","userData","layerName","layer","LayerManager","constructor","viewport","timeline","lastRenderedLayers","layers","context","assign","programManager","id","_needsRedraw","_needsUpdate","_debug","_onError","activateViewport","bind","finalize","_finalizeLayer","needsRedraw","opts","clearRedrawFlags","redraw","layerNeedsRedraw","getNeedsRedraw","needsUpdate","setNeedsRedraw","reason","setNeedsUpdate","getLayers","layerIds","filter","find","layerId","indexOf","setProps","props","setLayers","onError","newLayers","forceUpdate","shouldUpdate","Boolean","_updateLayers","updateLayers","oldViewport","viewportChanged","equals","changeFlags","setChangeFlags","_updateLayer","_handleError","stage","error","oldLayers","oldLayerMap","oldLayer","warn","generatedLayers","_updateSublayersRecursively","_finalizeOldLayers","hasUniformTransition","newLayer","sublayers","validateProps","_initializeLayer","_transferLayerState","push","isComposite","getSubLayers","err","_initialize","lifecycle","INITIALIZED","_transferState","MATCHED","AWAITING_GC","_update","AWAITING_FINALIZATION","_finalize","FINALIZED"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport assert from '../utils/assert';\nimport {Timeline} from '@luma.gl/core';\nimport Layer from './layer';\nimport {LIFECYCLE} from '../lifecycle/constants';\nimport log from '../utils/log';\nimport debug from '../debug';\nimport {flatten} from '../utils/flatten';\nimport {Stats} from 'probe.gl';\n\nimport Viewport from '../viewports/viewport';\nimport {createProgramManager} from '../shaderlib';\n\nconst TRACE_SET_LAYERS = 'layerManager.setLayers';\nconst TRACE_ACTIVATE_VIEWPORT = 'layerManager.activateViewport';\n\n// CONTEXT IS EXPOSED TO LAYERS\nconst INITIAL_CONTEXT = Object.seal({\n  layerManager: null,\n  deck: null,\n  gl: null,\n\n  // General resources\n  stats: null, // for tracking lifecycle performance\n\n  // GL Resources\n  shaderCache: null,\n  pickingFBO: null, // Screen-size framebuffer that layers can reuse\n\n  mousePosition: null,\n\n  userData: {} // Place for any custom app `context`\n});\n\nconst layerName = layer => (layer instanceof Layer ? `${layer}` : !layer ? 'null' : 'invalid');\n\nexport default class LayerManager {\n  // eslint-disable-next-line\n  constructor(gl, {deck, stats, viewport = null, timeline = null} = {}) {\n    // Currently deck.gl expects the DeckGL.layers array to be different\n    // whenever React rerenders. If the same layers array is used, the\n    // LayerManager's diffing algorithm will generate a fatal error and\n    // break the rendering.\n\n    // `this.lastRenderedLayers` stores the UNFILTERED layers sent\n    // down to LayerManager, so that `layers` reference can be compared.\n    // If it's the same across two React render calls, the diffing logic\n    // will be skipped.\n    this.lastRenderedLayers = [];\n    this.layers = [];\n\n    this.context = Object.assign({}, INITIAL_CONTEXT, {\n      layerManager: this,\n      deck,\n      gl,\n      // Enabling luma.gl Program caching using private API (_cachePrograms)\n      programManager: gl && createProgramManager(gl),\n      stats: stats || new Stats({id: 'deck.gl'}),\n      // Make sure context.viewport is not empty on the first layer initialization\n      viewport: viewport || new Viewport({id: 'DEFAULT-INITIAL-VIEWPORT'}), // Current viewport, exposed to layers for project* function\n      timeline: timeline || new Timeline()\n    });\n\n    this._needsRedraw = 'Initial render';\n    this._needsUpdate = false;\n    this._debug = false;\n    this._onError = null;\n\n    this.activateViewport = this.activateViewport.bind(this);\n\n    Object.seal(this);\n  }\n\n  // Method to call when the layer manager is not needed anymore.\n  finalize() {\n    // Finalize all layers\n    for (const layer of this.layers) {\n      this._finalizeLayer(layer);\n    }\n  }\n\n  // Check if a redraw is needed\n  needsRedraw(opts = {clearRedrawFlags: false}) {\n    let redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n\n    // This layers list doesn't include sublayers, relying on composite layers\n    for (const layer of this.layers) {\n      // Call every layer to clear their flags\n      const layerNeedsRedraw = layer.getNeedsRedraw(opts);\n      redraw = redraw || layerNeedsRedraw;\n    }\n\n    return redraw;\n  }\n\n  // Check if a deep update of all layers is needed\n  needsUpdate() {\n    return this._needsUpdate;\n  }\n\n  // Layers will be redrawn (in next animation frame)\n  setNeedsRedraw(reason) {\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n\n  // Layers will be updated deeply (in next animation frame)\n  // Potentially regenerating attributes and sub layers\n  setNeedsUpdate(reason) {\n    this._needsUpdate = this._needsUpdate || reason;\n  }\n\n  // Gets an (optionally) filtered list of layers\n  getLayers({layerIds = null} = {}) {\n    // Filtering by layerId compares beginning of strings, so that sublayers will be included\n    // Dependes on the convention of adding suffixes to the parent's layer name\n    return layerIds\n      ? this.layers.filter(layer => layerIds.find(layerId => layer.id.indexOf(layerId) === 0))\n      : this.layers;\n  }\n\n  // Set props needed for layer rendering and picking.\n  setProps(props) {\n    if ('debug' in props) {\n      this._debug = props.debug;\n    }\n\n    // A way for apps to add data to context that can be accessed in layers\n    if ('userData' in props) {\n      this.context.userData = props.userData;\n    }\n\n    // TODO - For now we set layers before viewports to preserve changeFlags\n    if ('layers' in props) {\n      this.setLayers(props.layers);\n    }\n\n    if ('onError' in props) {\n      this._onError = props.onError;\n    }\n  }\n\n  // Supply a new layer list, initiating sublayer generation and layer matching\n  setLayers(newLayers, forceUpdate = false) {\n    // TODO - something is generating state updates that cause rerender of the same\n    const shouldUpdate = forceUpdate || newLayers !== this.lastRenderedLayers;\n    debug(TRACE_SET_LAYERS, this, shouldUpdate, newLayers);\n\n    if (!shouldUpdate) {\n      return this;\n    }\n    this.lastRenderedLayers = newLayers;\n\n    newLayers = flatten(newLayers, Boolean);\n\n    for (const layer of newLayers) {\n      layer.context = this.context;\n    }\n\n    this._updateLayers(this.layers, newLayers);\n\n    return this;\n  }\n\n  // Update layers from last cycle if `setNeedsUpdate()` has been called\n  updateLayers() {\n    // NOTE: For now, even if only some layer has changed, we update all layers\n    // to ensure that layer id maps etc remain consistent even if different\n    // sublayers are rendered\n    const reason = this.needsUpdate();\n    if (reason) {\n      this.setNeedsRedraw(`updating layers: ${reason}`);\n      // Force a full update\n      const forceUpdate = true;\n      this.setLayers(this.lastRenderedLayers, forceUpdate);\n    }\n  }\n\n  //\n  // PRIVATE METHODS\n  //\n\n  // Make a viewport \"current\" in layer context, updating viewportChanged flags\n  activateViewport(viewport) {\n    assert(viewport, 'LayerManager: viewport not set');\n\n    const oldViewport = this.context.viewport;\n    const viewportChanged = !oldViewport || !viewport.equals(oldViewport);\n\n    if (viewportChanged) {\n      debug(TRACE_ACTIVATE_VIEWPORT, this, viewport);\n\n      this.context.viewport = viewport;\n      const changeFlags = {viewportChanged: true};\n\n      // Update layers states\n      // Let screen space layers update their state based on viewport\n      for (const layer of this.layers) {\n        layer.setChangeFlags(changeFlags);\n        this._updateLayer(layer);\n      }\n    }\n\n    return this;\n  }\n\n  _handleError(stage, error, layer) {\n    if (this._onError) {\n      this._onError(error, layer);\n    } else {\n      log.error(`error during ${stage} of ${layerName(layer)}`, error)();\n    }\n  }\n\n  // Match all layers, checking for caught errors\n  // To avoid having an exception in one layer disrupt other layers\n  // TODO - mark layers with exceptions as bad and remove from rendering cycle?\n  _updateLayers(oldLayers, newLayers) {\n    // Create old layer map\n    const oldLayerMap = {};\n    for (const oldLayer of oldLayers) {\n      if (oldLayerMap[oldLayer.id]) {\n        log.warn(`Multiple old layers with same id ${layerName(oldLayer)}`)();\n      } else {\n        oldLayerMap[oldLayer.id] = oldLayer;\n      }\n    }\n\n    // Allocate array for generated layers\n    const generatedLayers = [];\n\n    // Match sublayers\n    this._updateSublayersRecursively(newLayers, oldLayerMap, generatedLayers);\n\n    // Finalize unmatched layers\n    this._finalizeOldLayers(oldLayerMap);\n\n    let needsUpdate = false;\n    for (const layer of generatedLayers) {\n      if (layer.hasUniformTransition()) {\n        needsUpdate = true;\n        break;\n      }\n    }\n\n    this._needsUpdate = needsUpdate;\n    this.layers = generatedLayers;\n  }\n\n  /* eslint-disable complexity,max-statements */\n  // Note: adds generated layers to `generatedLayers` array parameter\n  _updateSublayersRecursively(newLayers, oldLayerMap, generatedLayers) {\n    for (const newLayer of newLayers) {\n      newLayer.context = this.context;\n\n      // Given a new coming layer, find its matching old layer (if any)\n      const oldLayer = oldLayerMap[newLayer.id];\n      if (oldLayer === null) {\n        // null, rather than undefined, means this id was originally there\n        log.warn(`Multiple new layers with same id ${layerName(newLayer)}`)();\n      }\n      // Remove the old layer from candidates, as it has been matched with this layer\n      oldLayerMap[newLayer.id] = null;\n\n      let sublayers = null;\n\n      // We must not generate exceptions until after layer matching is complete\n      try {\n        if (this._debug && oldLayer !== newLayer) {\n          newLayer.validateProps();\n        }\n\n        if (!oldLayer) {\n          this._initializeLayer(newLayer);\n        } else {\n          this._transferLayerState(oldLayer, newLayer);\n          this._updateLayer(newLayer);\n        }\n        generatedLayers.push(newLayer);\n\n        // Call layer lifecycle method: render sublayers\n        sublayers = newLayer.isComposite && newLayer.getSubLayers();\n        // End layer lifecycle method: render sublayers\n      } catch (err) {\n        this._handleError('matching', err, newLayer); // Record first exception\n      }\n\n      if (sublayers) {\n        this._updateSublayersRecursively(sublayers, oldLayerMap, generatedLayers);\n      }\n    }\n  }\n  /* eslint-enable complexity,max-statements */\n\n  // Finalize any old layers that were not matched\n  _finalizeOldLayers(oldLayerMap) {\n    for (const layerId in oldLayerMap) {\n      const layer = oldLayerMap[layerId];\n      if (layer) {\n        this._finalizeLayer(layer);\n      }\n    }\n  }\n\n  // EXCEPTION SAFE LAYER ACCESS\n\n  // Initializes a single layer, calling layer methods\n  _initializeLayer(layer) {\n    try {\n      layer._initialize();\n      layer.lifecycle = LIFECYCLE.INITIALIZED;\n    } catch (err) {\n      this._handleError('initialization', err, layer);\n      // TODO - what should the lifecycle state be here? LIFECYCLE.INITIALIZATION_FAILED?\n    }\n  }\n\n  _transferLayerState(oldLayer, newLayer) {\n    newLayer._transferState(oldLayer);\n    newLayer.lifecycle = LIFECYCLE.MATCHED;\n\n    if (newLayer !== oldLayer) {\n      oldLayer.lifecycle = LIFECYCLE.AWAITING_GC;\n    }\n  }\n\n  // Updates a single layer, cleaning all flags\n  _updateLayer(layer) {\n    try {\n      layer._update();\n    } catch (err) {\n      this._handleError('update', err, layer);\n    }\n  }\n\n  // Finalizes a single layer\n  _finalizeLayer(layer) {\n    this._needsRedraw = this._needsRedraw || `finalized ${layerName(layer)}`;\n\n    layer.lifecycle = LIFECYCLE.AWAITING_FINALIZATION;\n\n    try {\n      layer._finalize();\n      layer.lifecycle = LIFECYCLE.FINALIZED;\n    } catch (err) {\n      this._handleError('finalization', err, layer);\n    }\n  }\n}\n"],"file":"layer-manager.js"}