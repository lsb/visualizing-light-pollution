{"version":3,"sources":["../../../src/passes/layers-pass.js"],"names":["Pass","clear","setParameters","withParameters","cssToDeviceRatio","log","LayersPass","render","props","gl","framebuffer","target","_drawLayers","viewports","views","onViewportActive","clearCanvas","clearGLCanvas","renderStats","viewportOrDescriptor","viewport","view","id","subViewports","subViewport","stats","_drawLayersInViewport","push","layers","layerFilter","onError","pass","effects","moduleParameters","glViewport","getGLViewport","clearOpts","color","depth","scissorTest","scissor","renderStatus","totalCount","length","visibleCount","compositeCount","pickableCount","indexResolver","layerIndexResolver","layerIndex","layer","shouldDrawLayer","_shouldDrawLayer","layerRenderIndex","pickable","isComposite","_moduleParameters","_getModuleParameters","layerParameters","getLayerParameters","drawLayer","uniforms","parameters","err","error","getModuleParameters","visible","isPicking","startsWith","renderPass","overrides","Object","assign","create","context","mousePosition","pickingActive","devicePixelRatio","effect","startIndex","layerIndices","resolvers","isDrawn","indexOverride","_offset","layerId","parentId","parent","index","resolver","Number","isFinite","height","canvas","clientHeight","dimensions","pixelRatio","x","y","width","drawingBufferWidth","drawingBufferHeight"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport Pass from './pass';\nimport {clear, setParameters, withParameters, cssToDeviceRatio} from '@luma.gl/core';\nimport log from '../utils/log';\n\nexport default class LayersPass extends Pass {\n  render(props) {\n    const gl = this.gl;\n\n    setParameters(gl, {framebuffer: props.target});\n    return this._drawLayers(props);\n  }\n\n  // PRIVATE\n  // Draw a list of layers in a list of viewports\n  _drawLayers(props) {\n    const {viewports, views, onViewportActive, clearCanvas = true} = props;\n\n    const gl = this.gl;\n    if (clearCanvas) {\n      clearGLCanvas(gl);\n    }\n\n    const renderStats = [];\n\n    for (const viewportOrDescriptor of viewports) {\n      // Get a viewport from a viewport descriptor (which can be a plain viewport)\n      const viewport = viewportOrDescriptor.viewport || viewportOrDescriptor;\n      const view = views && views[viewport.id];\n\n      // Update context to point to this viewport\n      onViewportActive(viewport);\n\n      props.view = view;\n\n      // render this viewport\n      const subViewports = viewport.subViewports || [viewport];\n      for (const subViewport of subViewports) {\n        props.viewport = subViewport;\n\n        const stats = this._drawLayersInViewport(gl, props);\n        renderStats.push(stats);\n      }\n    }\n    return renderStats;\n  }\n\n  // Draws a list of layers in one viewport\n  // TODO - when picking we could completely skip rendering viewports that dont\n  // intersect with the picking rect\n  /* eslint-disable max-depth, max-statements */\n  _drawLayersInViewport(\n    gl,\n    {layers, layerFilter, onError, viewport, view, pass = 'unknown', effects, moduleParameters}\n  ) {\n    const glViewport = getGLViewport(gl, {viewport});\n\n    if (view && view.props.clear) {\n      const clearOpts = view.props.clear === true ? {color: true, depth: true} : view.props.clear;\n      withParameters(\n        gl,\n        {\n          scissorTest: true,\n          scissor: glViewport\n        },\n        () => clear(gl, clearOpts)\n      );\n    }\n\n    // render layers in normal colors\n    const renderStatus = {\n      totalCount: layers.length,\n      visibleCount: 0,\n      compositeCount: 0,\n      pickableCount: 0\n    };\n\n    setParameters(gl, {viewport: glViewport});\n\n    const indexResolver = layerIndexResolver();\n    // render layers in normal colors\n    for (let layerIndex = 0; layerIndex < layers.length; layerIndex++) {\n      const layer = layers[layerIndex];\n      // Check if we should draw layer\n      const shouldDrawLayer = this._shouldDrawLayer(layer, viewport, pass, layerFilter);\n\n      // This is the \"logical\" index for ordering this layer in the stack\n      // used to calculate polygon offsets\n      // It can be the same as another layer\n      const layerRenderIndex = indexResolver(layer, shouldDrawLayer);\n\n      // Calculate stats\n      if (shouldDrawLayer && layer.props.pickable) {\n        renderStatus.pickableCount++;\n      }\n      if (layer.isComposite) {\n        renderStatus.compositeCount++;\n      }\n\n      // Draw the layer\n      if (shouldDrawLayer) {\n        renderStatus.visibleCount++;\n\n        const _moduleParameters = this._getModuleParameters(layer, effects, pass, moduleParameters);\n        const layerParameters = this.getLayerParameters(layer, layerIndex);\n        // overwrite layer.context.viewport with the sub viewport\n        _moduleParameters.viewport = viewport;\n\n        try {\n          layer.drawLayer({\n            moduleParameters: _moduleParameters,\n            uniforms: {layerIndex: layerRenderIndex},\n            parameters: layerParameters\n          });\n        } catch (err) {\n          if (onError) {\n            onError(err, layer);\n          } else {\n            log.error(`error during drawing of ${layer}`, err)();\n          }\n        }\n      }\n    }\n\n    return renderStatus;\n  }\n  /* eslint-enable max-depth, max-statements */\n\n  /* Methods for subclass overrides */\n  shouldDrawLayer(layer) {\n    return true;\n  }\n\n  getModuleParameters(layer, effects) {\n    return null;\n  }\n\n  getLayerParameters(layer, layerIndex) {\n    return layer.props.parameters;\n  }\n\n  /* Private */\n  _shouldDrawLayer(layer, viewport, pass, layerFilter) {\n    let shouldDrawLayer = this.shouldDrawLayer(layer) && !layer.isComposite && layer.props.visible;\n\n    if (shouldDrawLayer && layerFilter) {\n      shouldDrawLayer = layerFilter({\n        layer,\n        viewport,\n        isPicking: pass.startsWith('picking'),\n        renderPass: pass\n      });\n    }\n    return shouldDrawLayer;\n  }\n\n  _getModuleParameters(layer, effects, pass, overrides) {\n    const moduleParameters = Object.assign(Object.create(layer.props), {\n      viewport: layer.context.viewport,\n      mousePosition: layer.context.mousePosition,\n      pickingActive: 0,\n      devicePixelRatio: cssToDeviceRatio(this.gl)\n    });\n\n    if (effects) {\n      for (const effect of effects) {\n        Object.assign(moduleParameters, effect.getModuleParameters(layer));\n      }\n    }\n\n    return Object.assign(moduleParameters, this.getModuleParameters(layer, effects), overrides);\n  }\n}\n\n// If the _index prop is defined, return a layer index that's relative to its parent\n// Otherwise return the index of the layer among all rendered layers\n// This is done recursively, i.e. if the user overrides a layer's default index,\n// all its descendants will be resolved relative to that index.\n// This implementation assumes that parent layers always appear before its children\n// which is true if the layer array comes from the LayerManager\nexport function layerIndexResolver(startIndex = 0, layerIndices = {}) {\n  const resolvers = {};\n\n  return (layer, isDrawn) => {\n    const indexOverride = layer.props._offset;\n    const layerId = layer.id;\n    const parentId = layer.parent && layer.parent.id;\n\n    let index;\n\n    if (parentId in resolvers) {\n      const resolver = (resolvers[parentId] =\n        resolvers[parentId] || layerIndexResolver(layerIndices[parentId], layerIndices));\n      index = resolver(layer, isDrawn);\n      resolvers[layerId] = resolver;\n    } else if (Number.isFinite(indexOverride)) {\n      index = indexOverride + (layerIndices[parentId] || 0);\n      // Mark layer as needing its own resolver\n      // We don't actually create it until it's used for the first time\n      resolvers[layerId] = null;\n    } else {\n      index = startIndex;\n    }\n\n    if (isDrawn && index >= startIndex) {\n      startIndex = index + 1;\n    }\n\n    layerIndices[layerId] = index;\n    return index;\n  };\n}\n\n// Convert viewport top-left CSS coordinates to bottom up WebGL coordinates\nfunction getGLViewport(gl, {viewport}) {\n  // TODO - dummy default for node\n  // Fallback to width/height when clientWidth/clientHeight are 0 or undefined.\n  const height = gl.canvas ? gl.canvas.clientHeight || gl.canvas.height : 100;\n  // Convert viewport top-left CSS coordinates to bottom up WebGL coordinates\n  const dimensions = viewport;\n  const pixelRatio = cssToDeviceRatio(gl);\n  return [\n    dimensions.x * pixelRatio,\n    (height - dimensions.y - dimensions.height) * pixelRatio,\n    dimensions.width * pixelRatio,\n    dimensions.height * pixelRatio\n  ];\n}\n\nfunction clearGLCanvas(gl) {\n  const width = gl.drawingBufferWidth;\n  const height = gl.drawingBufferHeight;\n  // clear depth and color buffers, restoring transparency\n  setParameters(gl, {viewport: [0, 0, width, height]});\n  gl.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n}\n"],"file":"layers-pass.js"}