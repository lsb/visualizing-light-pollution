{"version":3,"sources":["../../../src/lifecycle/component-state.js"],"names":["log","isAsyncIterable","PROP_SYMBOLS","ASYNC_ORIGINAL","ASYNC_RESOLVED","ASYNC_DEFAULTS","EMPTY_PROPS","Object","freeze","ComponentState","constructor","component","asyncProps","onAsyncPropUpdated","oldProps","oldAsyncProps","getOldProps","resetOldProps","props","freezeAsyncOldProps","create","propName","defineProperty","enumerable","value","hasAsyncProp","getAsyncProp","asyncProp","resolvedValue","isAsyncPropLoading","Boolean","pendingLoadCount","resolvedLoadCount","key","setAsyncProps","resolvedValues","originalValues","defaultValues","_createAsyncPropData","_updateAsyncProp","_didAsyncInputValueChange","fetch","layer","url","Promise","_watchPromise","_resolveAsyncIterable","_setPropValue","lastValue","_setAsyncPropValue","loadCount","undefined","promise","then","data","_postProcessValue","onDataLoad","catch","error","iterable","count","chunk","startRow","endRow","length","previousValue","dataTransform","concat","defaultValue"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport log from '../utils/log';\nimport {isAsyncIterable} from '../utils/iterable-utils';\nimport {PROP_SYMBOLS} from './constants';\nconst {ASYNC_ORIGINAL, ASYNC_RESOLVED, ASYNC_DEFAULTS} = PROP_SYMBOLS;\n\nconst EMPTY_PROPS = Object.freeze({});\n\nexport default class ComponentState {\n  constructor(component = null) {\n    this.component = component;\n    this.asyncProps = {}; // Prop values that the layer sees\n    this.onAsyncPropUpdated = () => {};\n    this.oldProps = EMPTY_PROPS; // Last props before update\n    this.oldAsyncProps = null; // Last props before update, with async values copied.\n  }\n\n  getOldProps() {\n    return this.oldAsyncProps || this.oldProps;\n  }\n\n  resetOldProps() {\n    this.oldAsyncProps = null;\n    this.oldProps = this.component.props;\n  }\n\n  // Whenever async props are changing, we need to make a copy of oldProps\n  // otherwise the prop rewriting will affect the value both in props and oldProps.\n  // While the copy is relatively expensive, this only happens on load completion.\n  freezeAsyncOldProps() {\n    if (!this.oldAsyncProps) {\n      // Make sure oldProps is set\n      this.oldProps = this.oldProps || this.component.props;\n\n      // 1. inherit all synchronous props from oldProps\n      // 2. reconfigure the async prop descriptors to fixed values\n      this.oldAsyncProps = Object.create(this.oldProps);\n      for (const propName in this.asyncProps) {\n        Object.defineProperty(this.oldAsyncProps, propName, {\n          enumerable: true,\n          value: this.oldProps[propName]\n        });\n      }\n    }\n  }\n\n  // ASYNC PROP HANDLING\n  //\n\n  // Checks if a prop is overridden\n  hasAsyncProp(propName) {\n    return propName in this.asyncProps;\n  }\n\n  // Returns value of an overriden prop\n  getAsyncProp(propName) {\n    const asyncProp = this.asyncProps[propName];\n    return asyncProp && asyncProp.resolvedValue;\n  }\n\n  isAsyncPropLoading(propName) {\n    if (propName) {\n      const asyncProp = this.asyncProps[propName];\n      return Boolean(\n        asyncProp &&\n          asyncProp.pendingLoadCount > 0 &&\n          asyncProp.pendingLoadCount !== asyncProp.resolvedLoadCount\n      );\n    }\n    for (const key in this.asyncProps) {\n      if (this.isAsyncPropLoading(key)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Updates all async/overridden props (when new props come in)\n  // Checks if urls have changed, starts loading, or removes override\n  setAsyncProps(props) {\n    // NOTE: prop param and default values are only support for testing\n    const resolvedValues = props[ASYNC_RESOLVED] || {};\n    const originalValues = props[ASYNC_ORIGINAL] || props;\n    const defaultValues = props[ASYNC_DEFAULTS] || {};\n\n    // TODO - use async props from the layer's prop types\n    for (const propName in resolvedValues) {\n      const value = resolvedValues[propName];\n      this._createAsyncPropData(propName, value, defaultValues[propName]);\n      this._updateAsyncProp(propName, value);\n    }\n\n    for (const propName in originalValues) {\n      const value = originalValues[propName];\n      // Makes sure a record exists for this prop\n      this._createAsyncPropData(propName, value, defaultValues[propName]);\n      this._updateAsyncProp(propName, value);\n    }\n  }\n\n  // Intercept strings (URLs) and Promises and activates loading and prop rewriting\n  _updateAsyncProp(propName, value) {\n    if (!this._didAsyncInputValueChange(propName, value)) {\n      return;\n    }\n\n    // interpret value string as url and start a new load tracked by a promise\n    if (typeof value === 'string') {\n      const fetch = this.layer && this.layer.props.fetch;\n      const url = value;\n      if (fetch) {\n        value = fetch(url, {propName, layer: this.layer});\n      }\n    }\n\n    // interprets promise and track the \"loading\"\n    if (value instanceof Promise) {\n      this._watchPromise(propName, value);\n      return;\n    }\n\n    if (isAsyncIterable(value)) {\n      this._resolveAsyncIterable(propName, value);\n      return;\n    }\n\n    // else, normal, non-async value. Just store value for now\n    this._setPropValue(propName, value);\n  }\n\n  // Checks if an input value actually changed (to avoid reloading/rewatching promises/urls)\n  _didAsyncInputValueChange(propName, value) {\n    const asyncProp = this.asyncProps[propName];\n    if (value === asyncProp.lastValue) {\n      return false;\n    }\n    asyncProp.lastValue = value;\n    return true;\n  }\n\n  // Set normal, non-async value\n  _setPropValue(propName, value) {\n    const asyncProp = this.asyncProps[propName];\n    asyncProp.value = value;\n    asyncProp.resolvedValue = value;\n    asyncProp.pendingLoadCount++;\n    asyncProp.resolvedLoadCount = asyncProp.pendingLoadCount;\n  }\n\n  // Set a just resolved async value, calling onAsyncPropUpdates if value changes asynchronously\n  _setAsyncPropValue(propName, value, loadCount) {\n    // Only update if loadCount is larger or equal to resolvedLoadCount\n    // otherwise a more recent load has already completed\n    const asyncProp = this.asyncProps[propName];\n    if (asyncProp && loadCount >= asyncProp.resolvedLoadCount && value !== undefined) {\n      // A chance to copy old props before updating\n      this.freezeAsyncOldProps();\n\n      asyncProp.resolvedValue = value;\n      asyncProp.resolvedLoadCount = loadCount;\n\n      // Call callback to inform listener\n      this.onAsyncPropUpdated(propName, value);\n    }\n  }\n\n  // Tracks a promise, sets the prop when loaded, handles load count\n  _watchPromise(propName, promise) {\n    const asyncProp = this.asyncProps[propName];\n    asyncProp.pendingLoadCount++;\n    const loadCount = asyncProp.pendingLoadCount;\n    promise\n      .then(data => {\n        data = this._postProcessValue(propName, data);\n        this._setAsyncPropValue(propName, data, loadCount);\n\n        const onDataLoad = this.layer && this.layer.props.onDataLoad;\n        if (propName === 'data' && onDataLoad) {\n          onDataLoad(data, {propName, layer: this.layer});\n        }\n      })\n      .catch(error => log.error(error)());\n  }\n\n  async _resolveAsyncIterable(propName, iterable) {\n    if (propName !== 'data') {\n      // we only support data as async iterable\n      this._setPropValue(propName, iterable);\n    }\n\n    const asyncProp = this.asyncProps[propName];\n    asyncProp.pendingLoadCount++;\n    const loadCount = asyncProp.pendingLoadCount;\n    let data = [];\n    let count = 0;\n\n    for await (const chunk of iterable) {\n      data = this._postProcessValue(propName, chunk, data);\n\n      // Used by the default _dataDiff function\n      Object.defineProperty(data, '__diff', {\n        enumerable: false,\n        value: [{startRow: count, endRow: data.length}]\n      });\n\n      count = data.length;\n      this._setAsyncPropValue(propName, data, loadCount);\n    }\n\n    const onDataLoad = this.layer && this.layer.props.onDataLoad;\n    if (onDataLoad) {\n      onDataLoad(data, {propName, layer: this.layer});\n    }\n  }\n\n  // Give the app a chance to post process the loaded data\n  _postProcessValue(propName, value, previousValue) {\n    const {dataTransform} = this.component ? this.component.props : {};\n    if (propName !== 'data') {\n      return value;\n    }\n    if (dataTransform) {\n      return dataTransform(value, previousValue);\n    }\n    // previousValue is assigned if loaded with async iterator\n    return previousValue ? previousValue.concat(value) : value;\n  }\n\n  // Creating an asyncProp record if needed\n  _createAsyncPropData(propName, value, defaultValue) {\n    const asyncProp = this.asyncProps[propName];\n    if (!asyncProp) {\n      // assert(defaultValue !== undefined);\n      this.asyncProps[propName] = {\n        lastValue: null, // Supplied prop value (can be url/promise, not visible to layer)\n        resolvedValue: defaultValue, // Resolved prop value (valid data, can be \"shown\" to layer)\n        pendingLoadCount: 0, // How many loads have been issued\n        resolvedLoadCount: 0 // Latest resolved load, (earlier loads will be ignored)\n      };\n    }\n  }\n}\n"],"file":"component-state.js"}