{"version":3,"sources":["../../../src/lib/deck-picker.js"],"names":["Framebuffer","Texture2D","isWebGL2","readPixelsToArray","cssToDeviceRatio","cssToDevicePixels","assert","PickLayersPass","getClosestObject","getUniqueObjects","processPickInfo","getLayerPickingInfo","DeckPicker","gl","pickingFBO","pickLayersPass","layerFilter","lastPickedInfo","index","layerId","info","_onError","props","onError","depthFBO","color","opts","_pickClosestObject","_pickVisibleObjects","x","y","layers","viewports","lastPickedLayerId","layer","id","find","l","coordinate","unproject","lngLat","Object","assign","object","isSupported","colorBufferFloat","attach","format","type","resize","width","canvas","height","radius","depth","mode","unproject3D","onViewportActive","_resizeBuffer","pixelRatio","devicePixelRange","devicePixel","Math","floor","deviceRadius","round","deviceRect","_getPickingRect","deviceX","deviceY","deviceWidth","deviceHeight","infos","result","affectedLayers","i","pickedColors","_drawAndSample","pass","redrawReason","pickInfo","z","pickedLayer","zValues","pickedX","pickedY","pickZ","distanceScales","metersPerUnit","position","pickedColor","clearPickingColor","values","push","restorePickingColors","emptyInfo","get","leftTop","deviceLeft","deviceTop","rightBottom","deviceRight","deviceBottom","pickInfos","uniqueInfos","Map","forEach","pickedObjectIndex","picked","has","set","Array","from","pickableLayers","filter","isPickable","length","render","Float32Array","Uint8Array","sourceX","sourceY","sourceWidth","sourceHeight","target","max","min"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Framebuffer,\n  Texture2D,\n  isWebGL2,\n  readPixelsToArray,\n  cssToDeviceRatio,\n  cssToDevicePixels\n} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\nimport assert from '../utils/assert';\nimport PickLayersPass from '../passes/pick-layers-pass';\nimport {getClosestObject, getUniqueObjects} from './picking/query-object';\nimport {processPickInfo, getLayerPickingInfo} from './picking/pick-info';\n\nexport default class DeckPicker {\n  constructor(gl) {\n    this.gl = gl;\n    this.pickingFBO = null;\n    this.pickLayersPass = new PickLayersPass(gl);\n    this.layerFilter = null;\n    this.lastPickedInfo = {\n      // For callback tracking and auto highlight\n      index: -1,\n      layerId: null,\n      info: null\n    };\n    this._onError = null;\n  }\n\n  setProps(props) {\n    if ('layerFilter' in props) {\n      this.layerFilter = props.layerFilter;\n    }\n\n    if ('onError' in props) {\n      this._onError = props.onError;\n    }\n  }\n\n  finalize() {\n    if (this.pickingFBO) {\n      this.pickingFBO.delete();\n    }\n    if (this.depthFBO) {\n      this.depthFBO.color.delete();\n      this.depthFBO.delete();\n    }\n  }\n\n  // Pick the closest info at given coordinate\n  pickObject(opts) {\n    return this._pickClosestObject(opts);\n  }\n\n  // Get all unique infos within a bounding box\n  pickObjects(opts) {\n    return this._pickVisibleObjects(opts);\n  }\n\n  // Returns a new picking info object by assuming the last picked object is still picked\n  getLastPickedObject({x, y, layers, viewports}, lastPickedInfo = this.lastPickedInfo.info) {\n    const lastPickedLayerId = lastPickedInfo && lastPickedInfo.layer && lastPickedInfo.layer.id;\n    const layer = lastPickedLayerId ? layers.find(l => l.id === lastPickedLayerId) : null;\n    const coordinate = viewports[0] && viewports[0].unproject([x, y]);\n\n    const info = {\n      x,\n      y,\n      coordinate,\n      // TODO remove the lngLat prop after compatibility check\n      lngLat: coordinate,\n      layer\n    };\n\n    if (layer) {\n      return Object.assign({}, lastPickedInfo, info);\n    }\n    return Object.assign(info, {color: null, object: null, index: -1});\n  }\n\n  // Private\n  _resizeBuffer() {\n    const {gl} = this;\n    // Create a frame buffer if not already available\n    if (!this.pickingFBO) {\n      this.pickingFBO = new Framebuffer(gl);\n      if (Framebuffer.isSupported(gl, {colorBufferFloat: true})) {\n        this.depthFBO = new Framebuffer(gl);\n        this.depthFBO.attach({\n          [GL.COLOR_ATTACHMENT0]: new Texture2D(gl, {\n            format: isWebGL2(gl) ? GL.RGBA32F : GL.RGBA,\n            type: GL.FLOAT\n          })\n        });\n      }\n    }\n    // Resize it to current canvas size (this is a noop if size hasn't changed)\n    this.pickingFBO.resize({width: gl.canvas.width, height: gl.canvas.height});\n    this.depthFBO.resize({width: gl.canvas.width, height: gl.canvas.height});\n    return this.pickingFBO;\n  }\n\n  // Pick the closest object at the given (x,y) coordinate\n  // eslint-disable-next-line max-statements,complexity\n  _pickClosestObject({\n    layers,\n    viewports,\n    x,\n    y,\n    radius = 0,\n    depth = 1,\n    mode = 'query',\n    unproject3D,\n    onViewportActive\n  }) {\n    this._resizeBuffer();\n    // Convert from canvas top-left to WebGL bottom-left coordinates\n    // Top-left coordinates [x, y] to bottom-left coordinates [deviceX, deviceY]\n    // And compensate for pixelRatio\n    const pixelRatio = cssToDeviceRatio(this.gl);\n    const devicePixelRange = cssToDevicePixels(this.gl, [x, y], true);\n    const devicePixel = [\n      devicePixelRange.x + Math.floor(devicePixelRange.width / 2),\n      devicePixelRange.y + Math.floor(devicePixelRange.height / 2)\n    ];\n\n    const deviceRadius = Math.round(radius * pixelRatio);\n    const {width, height} = this.pickingFBO;\n    const deviceRect = this._getPickingRect({\n      deviceX: devicePixel[0],\n      deviceY: devicePixel[1],\n      deviceRadius,\n      deviceWidth: width,\n      deviceHeight: height\n    });\n\n    let infos;\n    const result = [];\n    const affectedLayers = {};\n\n    for (let i = 0; i < depth; i++) {\n      const pickedColors =\n        deviceRect &&\n        this._drawAndSample({\n          layers,\n          viewports,\n          onViewportActive,\n          deviceRect,\n          pass: `picking:${mode}`,\n          redrawReason: mode\n        });\n\n      const pickInfo = getClosestObject({\n        pickedColors,\n        layers,\n        deviceX: devicePixel[0],\n        deviceY: devicePixel[1],\n        deviceRadius,\n        deviceRect\n      });\n\n      let z;\n      if (pickInfo.pickedLayer && unproject3D && this.depthFBO) {\n        const zValues = this._drawAndSample({\n          layers: [pickInfo.pickedLayer],\n          viewports,\n          onViewportActive,\n          deviceRect: {x: pickInfo.pickedX, y: pickInfo.pickedY, width: 1, height: 1},\n          pass: `picking:${mode}`,\n          redrawReason: 'pick-z',\n          pickZ: true\n        });\n        // picked value is in common space (pixels) from the camera target (viewport.position)\n        // convert it to meters from the ground\n        z = zValues[0] * viewports[0].distanceScales.metersPerUnit[2] + viewports[0].position[2];\n      }\n\n      // Only exclude if we need to run picking again.\n      // We need to run picking again if an object is detected AND\n      // we have not exhausted the requested depth.\n      if (pickInfo.pickedColor && i + 1 < depth) {\n        const layerId = pickInfo.pickedColor[3] - 1;\n        affectedLayers[layerId] = true;\n        layers[layerId].clearPickingColor(pickInfo.pickedColor);\n      }\n\n      // This logic needs to run even if no object is picked.\n      infos = processPickInfo({\n        pickInfo,\n        lastPickedInfo: this.lastPickedInfo,\n        mode,\n        layers,\n        viewports,\n        x,\n        y,\n        z,\n        pixelRatio\n      });\n\n      for (const info of infos.values()) {\n        if (info.layer) {\n          result.push(info);\n        }\n      }\n\n      // If no object is picked stop.\n      if (!pickInfo.pickedColor) {\n        break;\n      }\n    }\n\n    // reset only affected buffers\n    for (const layerId in affectedLayers) {\n      layers[layerId].restorePickingColors();\n    }\n\n    return {result, emptyInfo: infos && infos.get(null)};\n  }\n\n  // Pick all objects within the given bounding box\n  _pickVisibleObjects({\n    layers,\n    viewports,\n    x,\n    y,\n    width = 1,\n    height = 1,\n    mode = 'query',\n    onViewportActive\n  }) {\n    this._resizeBuffer();\n    // Convert from canvas top-left to WebGL bottom-left coordinates\n    // And compensate for pixelRatio\n    const pixelRatio = cssToDeviceRatio(this.gl);\n    const leftTop = cssToDevicePixels(this.gl, [x, y], true);\n\n    // take left and top (y inverted in device pixels) from start location\n    const deviceLeft = leftTop.x;\n    const deviceTop = leftTop.y + leftTop.height;\n\n    // take right and bottom (y inverted in device pixels) from end location\n    const rightBottom = cssToDevicePixels(this.gl, [x + width, y + height], true);\n    const deviceRight = rightBottom.x + rightBottom.width;\n    const deviceBottom = rightBottom.y;\n\n    const deviceRect = {\n      x: deviceLeft,\n      y: deviceBottom,\n      // deviceTop and deviceRight represent the first pixel outside the desired rect\n      width: deviceRight - deviceLeft,\n      height: deviceTop - deviceBottom\n    };\n\n    const pickedColors = this._drawAndSample({\n      layers,\n      viewports,\n      onViewportActive,\n      deviceRect,\n      pass: `picking:${mode}`,\n      redrawReason: mode\n    });\n\n    const pickInfos = getUniqueObjects({pickedColors, layers});\n\n    // Only return unique infos, identified by info.object\n    const uniqueInfos = new Map();\n\n    pickInfos.forEach(pickInfo => {\n      let info = {\n        color: pickInfo.pickedColor,\n        layer: null,\n        index: pickInfo.pickedObjectIndex,\n        picked: true,\n        x,\n        y,\n        width,\n        height,\n        pixelRatio\n      };\n\n      info = getLayerPickingInfo({layer: pickInfo.pickedLayer, info, mode});\n      if (!uniqueInfos.has(info.object)) {\n        uniqueInfos.set(info.object, info);\n      }\n    });\n\n    return Array.from(uniqueInfos.values());\n  }\n\n  // returns pickedColor or null if no pickable layers found.\n  _drawAndSample({layers, viewports, onViewportActive, deviceRect, pass, redrawReason, pickZ}) {\n    assert(deviceRect.width > 0 && deviceRect.height > 0);\n\n    const pickableLayers = layers.filter(layer => layer.isPickable());\n    if (pickableLayers.length < 1) {\n      return null;\n    }\n\n    const pickingFBO = pickZ ? this.depthFBO : this.pickingFBO;\n\n    this.pickLayersPass.render({\n      layers,\n      layerFilter: this.layerFilter,\n      onError: this._onError,\n      viewports,\n      onViewportActive,\n      pickingFBO,\n      deviceRect,\n      pass,\n      redrawReason,\n      pickZ\n    });\n\n    // Read from an already rendered picking buffer\n    // Returns an Uint8ClampedArray of picked pixels\n    const {x, y, width, height} = deviceRect;\n    const pickedColors = new (pickZ ? Float32Array : Uint8Array)(width * height * 4);\n    readPixelsToArray(pickingFBO, {\n      sourceX: x,\n      sourceY: y,\n      sourceWidth: width,\n      sourceHeight: height,\n      target: pickedColors\n    });\n\n    return pickedColors;\n  }\n\n  // Calculate a picking rect centered on deviceX and deviceY and clipped to device\n  // Returns null if pixel is outside of device\n  _getPickingRect({deviceX, deviceY, deviceRadius, deviceWidth, deviceHeight}) {\n    // Create a box of size `radius * 2 + 1` centered at [deviceX, deviceY]\n    const x = Math.max(0, deviceX - deviceRadius);\n    const y = Math.max(0, deviceY - deviceRadius);\n    const width = Math.min(deviceWidth, deviceX + deviceRadius + 1) - x;\n    const height = Math.min(deviceHeight, deviceY + deviceRadius + 1) - y;\n\n    // x, y out of bounds.\n    if (width <= 0 || height <= 0) {\n      return null;\n    }\n\n    return {x, y, width, height};\n  }\n}\n"],"file":"deck-picker.js"}