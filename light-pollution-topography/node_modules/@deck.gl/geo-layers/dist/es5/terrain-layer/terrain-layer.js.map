{"version":3,"sources":["../../../src/terrain-layer/terrain-layer.js"],"names":["DUMMY_DATA","defaultProps","TileLayer","elevationData","urlType","texture","meshMaxError","type","value","bounds","optional","compare","color","elevationDecoder","rScaler","gScaler","bScaler","offset","workerUrl","wireframe","material","urlTemplateToUpdateTrigger","template","Array","isArray","join","TerrainLayer","props","oldProps","elevationDataChanged","isTiled","includes","setState","shouldReload","state","terrain","loadTerrain","options","TerrainLoader","tile","dataUrl","textureUrl","bbox","z","viewport","WebMercatorViewport","longitude","west","east","latitude","north","south","zoom","bottomLeft","projectFlat","topRight","surface","_","Promise","resolve","all","SubLayerClass","getSubLayerClass","SimpleMeshLayer","data","mesh","then","result","coordinateSystem","COORDINATE_SYSTEM","CARTESIAN","getPosition","d","getColor","getSubLayerProps","id","getTileData","getTiledTerrainData","bind","renderSubLayers","updateTriggers","_instanced","CompositeLayer","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer} from '@deck.gl/core';\nimport {SimpleMeshLayer} from '@deck.gl/mesh-layers';\nimport {WebMercatorViewport, COORDINATE_SYSTEM} from '@deck.gl/core';\nimport {load} from '@loaders.gl/core';\nimport {TerrainLoader} from '@loaders.gl/terrain';\nimport TileLayer from '../tile-layer/tile-layer';\nimport {urlType, getURLFromTemplate} from '../tile-layer/utils';\n\nconst DUMMY_DATA = [1];\n\nconst defaultProps = {\n  ...TileLayer.defaultProps,\n  // Image url that encodes height data\n  elevationData: urlType,\n  // Image url to use as texture\n  texture: urlType,\n  // Martini error tolerance in meters, smaller number -> more detailed mesh\n  meshMaxError: {type: 'number', value: 4.0},\n  // Bounding box of the terrain image, [minX, minY, maxX, maxY] in world coordinates\n  bounds: {type: 'array', value: null, optional: true, compare: true},\n  // Color to use if texture is unavailable\n  color: {type: 'color', value: [255, 255, 255]},\n  // Object to decode height data, from (r, g, b) to height in meters\n  elevationDecoder: {\n    type: 'object',\n    value: {\n      rScaler: 1,\n      gScaler: 0,\n      bScaler: 0,\n      offset: 0\n    }\n  },\n  // Supply url to local terrain worker bundle. Only required if running offline and cannot access CDN.\n  workerUrl: {type: 'string', value: null},\n  // Same as SimpleMeshLayer wireframe\n  wireframe: false,\n  material: true\n};\n\n// Turns array of templates into a single string to work around shallow change\nfunction urlTemplateToUpdateTrigger(template) {\n  if (Array.isArray(template)) {\n    return template.join(';');\n  }\n  return template;\n}\n\n/**\n * state: {\n *   isTiled: True renders TileLayer of many SimpleMeshLayers, false renders one SimpleMeshLayer\n *   terrain: Mesh object. Only defined when isTiled is false.\n * }\n */\nexport default class TerrainLayer extends CompositeLayer {\n  updateState({props, oldProps}) {\n    const elevationDataChanged = props.elevationData !== oldProps.elevationData;\n    if (elevationDataChanged) {\n      const {elevationData} = props;\n      const isTiled =\n        elevationData &&\n        (Array.isArray(elevationData) ||\n          (elevationData.includes('{x}') && elevationData.includes('{y}')));\n      this.setState({isTiled});\n    }\n\n    // Reloading for single terrain mesh\n    const shouldReload =\n      elevationDataChanged ||\n      props.meshMaxError !== oldProps.meshMaxError ||\n      props.elevationDecoder !== oldProps.elevationDecoder ||\n      props.bounds !== oldProps.bounds;\n\n    if (!this.state.isTiled && shouldReload) {\n      const terrain = this.loadTerrain(props);\n      this.setState({terrain});\n    }\n  }\n\n  loadTerrain({elevationData, bounds, elevationDecoder, meshMaxError, workerUrl}) {\n    if (!elevationData) {\n      return null;\n    }\n    const options = {\n      terrain: {\n        bounds,\n        meshMaxError,\n        elevationDecoder\n      }\n    };\n    if (workerUrl !== null) {\n      options.terrain.workerUrl = workerUrl;\n    }\n    return load(elevationData, TerrainLoader, options);\n  }\n\n  getTiledTerrainData(tile) {\n    const {elevationData, texture, elevationDecoder, meshMaxError, workerUrl} = this.props;\n    const dataUrl = getURLFromTemplate(elevationData, tile);\n    const textureUrl = getURLFromTemplate(texture, tile);\n\n    const {bbox, z} = tile;\n    const viewport = new WebMercatorViewport({\n      longitude: (bbox.west + bbox.east) / 2,\n      latitude: (bbox.north + bbox.south) / 2,\n      zoom: z\n    });\n    const bottomLeft = viewport.projectFlat([bbox.west, bbox.south]);\n    const topRight = viewport.projectFlat([bbox.east, bbox.north]);\n    const bounds = [bottomLeft[0], bottomLeft[1], topRight[0], topRight[1]];\n\n    const terrain = this.loadTerrain({\n      elevationData: dataUrl,\n      bounds,\n      elevationDecoder,\n      meshMaxError,\n      workerUrl\n    });\n    const surface = textureUrl\n      ? // If surface image fails to load, the tile should still be displayed\n        load(textureUrl).catch(_ => null)\n      : Promise.resolve(null);\n\n    return Promise.all([terrain, surface]);\n  }\n\n  renderSubLayers(props) {\n    const SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n    const {data, color} = props;\n    let mesh = null;\n    let texture = null;\n\n    if (Array.isArray(data)) {\n      mesh = data[0];\n      texture = data[1];\n    } else if (data) {\n      mesh = data.then(result => result && result[0]);\n      texture = data.then(result => result && result[1]);\n    }\n\n    return new SubLayerClass(props, {\n      data: DUMMY_DATA,\n      mesh,\n      texture,\n      coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n      getPosition: d => [0, 0, 0],\n      getColor: color\n    });\n  }\n\n  renderLayers() {\n    const {\n      color,\n      material,\n      elevationData,\n      texture,\n      wireframe,\n      meshMaxError,\n      elevationDecoder\n    } = this.props;\n\n    if (this.state.isTiled) {\n      return new TileLayer(\n        this.getSubLayerProps({\n          id: 'tiles'\n        }),\n        {\n          wireframe,\n          color,\n          material,\n          getTileData: this.getTiledTerrainData.bind(this),\n          renderSubLayers: this.renderSubLayers.bind(this),\n          updateTriggers: {\n            getTileData: {\n              elevationData: urlTemplateToUpdateTrigger(elevationData),\n              texture: urlTemplateToUpdateTrigger(texture),\n              meshMaxError,\n              elevationDecoder\n            }\n          }\n        }\n      );\n    }\n\n    const SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n    return new SubLayerClass(\n      this.getSubLayerProps({\n        id: 'mesh'\n      }),\n      {\n        data: DUMMY_DATA,\n        mesh: this.state.terrain,\n        texture,\n        _instanced: false,\n        getPosition: d => [0, 0, 0],\n        getColor: color,\n        material,\n        wireframe\n      }\n    );\n  }\n}\n\nTerrainLayer.layerName = 'TerrainLayer';\nTerrainLayer.defaultProps = defaultProps;\n"],"file":"terrain-layer.js"}