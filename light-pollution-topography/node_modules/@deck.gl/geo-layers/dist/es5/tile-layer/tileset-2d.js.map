{"version":3,"sources":["../../../src/tile-layer/tileset-2d.js"],"names":["TILE_STATE_UNKNOWN","TILE_STATE_VISIBLE","TILE_STATE_PLACEHOLDER","TILE_STATE_HIDDEN","TILE_STATE_SELECTED","STRATEGY_NEVER","STRATEGY_REPLACE","STRATEGY_DEFAULT","DEFAULT_CACHE_SCALE","Tileset2D","opts","_getTileData","getTileData","onTileError","onTileLoad","tile","maxCacheByteSize","_cacheByteSize","byteLength","_resizeCache","_cache","Map","_tiles","_dirty","_viewport","_selectedTiles","_frameNumber","setOptions","Object","assign","Number","isFinite","maxZoom","_maxZoom","Math","floor","minZoom","_minZoom","ceil","viewport","tileIndices","getTileIndices","map","index","_getTile","_rebuildTree","changed","updateTileStates","tileSize","x","y","z","bbox","tileIndex","_updateTileStates","selectedTiles","values","isVisible","Boolean","state","parent","children","length","_getNearestAncestor","push","refinementStrategy","getPlaceholderInAncestors","needsPlaceholder","getPlaceholderInChildren","maxCacheSize","Infinity","overflown","size","tileId","Array","from","sort","t1","t2","create","get","Tile2DHeader","getTileMetadata","loadData","set","getParentIndex","every","isLoaded","t","max","child"],"mappings":"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","sourcesContent":["import Tile2DHeader from './tile-2d-header';\nimport {getTileIndices, tileToBoundingBox} from './utils';\n\nconst TILE_STATE_UNKNOWN = 0;\nconst TILE_STATE_VISIBLE = 1;\n/*\n   show cached parent tile if children are loading\n   +-----------+       +-----+            +-----+-----+\n   |           |       |     |            |     |     |\n   |           |       |     |            |     |     |\n   |           |  -->  +-----+-----+  ->  +-----+-----+\n   |           |             |     |      |     |     |\n   |           |             |     |      |     |     |\n   +-----------+             +-----+      +-----+-----+\n\n   show cached children tiles when parent is loading\n   +-------+----       +------------\n   |       |           |\n   |       |           |\n   |       |           |\n   +-------+----  -->  |\n   |       |           |\n */\nconst TILE_STATE_PLACEHOLDER = 3;\nconst TILE_STATE_HIDDEN = 4;\n// tiles that should be displayed in the current viewport\nconst TILE_STATE_SELECTED = 5;\n\nexport const STRATEGY_NEVER = 'never';\nexport const STRATEGY_REPLACE = 'no-overlap';\nexport const STRATEGY_DEFAULT = 'best-available';\n\nconst DEFAULT_CACHE_SCALE = 5;\n\n/**\n * Manages loading and purging of tiles data. This class caches recently visited tiles\n * and only create new tiles if they are present.\n */\n\nexport default class Tileset2D {\n  /**\n   * Takes in a function that returns tile data, a cache size, and a max and a min zoom level.\n   * Cache size defaults to 5 * number of tiles in the current viewport\n   */\n  constructor(opts) {\n    this.opts = opts;\n    this._getTileData = opts.getTileData;\n\n    this.onTileError = opts.onTileError;\n    this.onTileLoad = tile => {\n      opts.onTileLoad(tile);\n      if (this.opts.maxCacheByteSize) {\n        this._cacheByteSize += tile.byteLength;\n        this._resizeCache();\n      }\n    };\n\n    // Maps tile id in string {z}-{x}-{y} to a Tile object\n    this._cache = new Map();\n    this._tiles = [];\n    this._dirty = false;\n    this._cacheByteSize = 0;\n\n    // Cache the last processed viewport\n    this._viewport = null;\n    this._selectedTiles = null;\n    this._frameNumber = 0;\n\n    this.setOptions(opts);\n  }\n\n  /* Public API */\n  get tiles() {\n    return this._tiles;\n  }\n\n  get selectedTiles() {\n    return this._selectedTiles;\n  }\n\n  get isLoaded() {\n    return this._selectedTiles.every(tile => tile.isLoaded);\n  }\n\n  setOptions(opts) {\n    Object.assign(this.opts, opts);\n    if (Number.isFinite(opts.maxZoom)) {\n      this._maxZoom = Math.floor(opts.maxZoom);\n    }\n    if (Number.isFinite(opts.minZoom)) {\n      this._minZoom = Math.ceil(opts.minZoom);\n    }\n  }\n\n  /**\n   * Update the cache with the given viewport and triggers callback onUpdate.\n   * @param {*} viewport\n   * @param {*} onUpdate\n   */\n  update(viewport) {\n    if (viewport !== this._viewport) {\n      this._viewport = viewport;\n      const tileIndices = this.getTileIndices({\n        viewport,\n        maxZoom: this._maxZoom,\n        minZoom: this._minZoom\n      });\n      this._selectedTiles = tileIndices.map(index => this._getTile(index, true));\n\n      if (this._dirty) {\n        // Some new tiles are added\n        this._rebuildTree();\n      }\n    }\n\n    // Update tile states\n    const changed = this.updateTileStates();\n\n    if (this._dirty) {\n      // cache size is either the user defined maxSize or 5 * number of current tiles in the viewport.\n      this._resizeCache();\n    }\n\n    if (changed) {\n      this._frameNumber++;\n    }\n    return this._frameNumber;\n  }\n\n  /* Public interface for subclassing */\n\n  // Returns array of {x, y, z}\n  getTileIndices({viewport, maxZoom, minZoom}) {\n    return getTileIndices(viewport, maxZoom, minZoom, this.opts.tileSize);\n  }\n\n  // Add custom metadata to tiles\n  getTileMetadata({x, y, z}) {\n    return {\n      bbox: tileToBoundingBox(this._viewport, x, y, z, this.opts.tileSize)\n    };\n  }\n\n  // Returns {x, y, z} of the parent tile\n  getParentIndex(tileIndex) {\n    // Perf: mutate the input object to avoid GC\n    tileIndex.x = Math.floor(tileIndex.x / 2);\n    tileIndex.y = Math.floor(tileIndex.y / 2);\n    tileIndex.z -= 1;\n    return tileIndex;\n  }\n\n  // Returns true if any tile's visibility changed\n  updateTileStates() {\n    this._updateTileStates(this.selectedTiles);\n\n    let changed = false;\n    for (const tile of this._cache.values()) {\n      const isVisible = Boolean(tile.state & TILE_STATE_VISIBLE);\n      if (tile.isVisible !== isVisible) {\n        changed = true;\n        tile.isVisible = isVisible;\n      }\n    }\n\n    return changed;\n  }\n\n  /* Private methods */\n\n  // This needs to be called every time some tiles have been added/removed from cache\n  _rebuildTree() {\n    const {_cache} = this;\n\n    // Reset states\n    for (const tile of _cache.values()) {\n      tile.parent = null;\n      tile.children.length = 0;\n    }\n\n    // Rebuild tree\n    for (const tile of _cache.values()) {\n      const parent = this._getNearestAncestor(tile.x, tile.y, tile.z);\n      tile.parent = parent;\n      if (parent) {\n        parent.children.push(tile);\n      }\n    }\n  }\n\n  // A selected tile is always visible.\n  // Never show two overlapping tiles.\n  // If a selected tile is loading, try showing a cached ancester with the closest z\n  // If a selected tile is loading, and no ancester is shown - try showing cached\n  // descendants with the closest z\n  _updateTileStates(selectedTiles) {\n    const {_cache} = this;\n    const refinementStrategy = this.opts.refinementStrategy || STRATEGY_DEFAULT;\n\n    // Reset states\n    for (const tile of _cache.values()) {\n      tile.state = TILE_STATE_UNKNOWN;\n    }\n\n    // For all the selected && pending tiles:\n    // - pick the closest ancestor as placeholder\n    // - if no ancestor is visible, pick the closest children as placeholder\n    for (const tile of selectedTiles) {\n      tile.state = TILE_STATE_SELECTED;\n    }\n\n    if (refinementStrategy === STRATEGY_NEVER) {\n      return;\n    }\n    for (const tile of selectedTiles) {\n      getPlaceholderInAncestors(tile, refinementStrategy);\n    }\n    for (const tile of selectedTiles) {\n      if (needsPlaceholder(tile)) {\n        getPlaceholderInChildren(tile);\n      }\n    }\n  }\n\n  /**\n   * Clear tiles that are not visible when the cache is full\n   */\n  /* eslint-disable complexity */\n  _resizeCache() {\n    const {_cache, opts} = this;\n\n    const maxCacheSize =\n      opts.maxCacheSize ||\n      (opts.maxCacheByteSize ? Infinity : DEFAULT_CACHE_SCALE * this.selectedTiles.length);\n    const maxCacheByteSize = opts.maxCacheByteSize || Infinity;\n\n    const overflown = _cache.size > maxCacheSize || this._cacheByteSize > maxCacheByteSize;\n\n    if (overflown) {\n      for (const [tileId, tile] of _cache) {\n        if (!tile.isVisible) {\n          // delete tile\n          this._cacheByteSize -= opts.maxCacheByteSize ? tile.byteLength : 0;\n          _cache.delete(tileId);\n        }\n        if (_cache.size <= maxCacheSize && this._cacheByteSize <= maxCacheByteSize) {\n          break;\n        }\n      }\n      this._rebuildTree();\n      this._dirty = true;\n    }\n    if (this._dirty) {\n      this._tiles = Array.from(this._cache.values())\n        // sort by zoom level so that smaller tiles are displayed on top\n        .sort((t1, t2) => t1.z - t2.z);\n\n      this._dirty = false;\n    }\n  }\n  /* eslint-enable complexity */\n\n  _getTile({x, y, z}, create) {\n    const tileId = `${x},${y},${z}`;\n    let tile = this._cache.get(tileId);\n\n    if (!tile && create) {\n      tile = new Tile2DHeader({\n        x,\n        y,\n        z,\n        onTileLoad: this.onTileLoad,\n        onTileError: this.onTileError\n      });\n      Object.assign(tile, this.getTileMetadata(tile));\n      tile.loadData(this._getTileData);\n      this._cache.set(tileId, tile);\n      this._dirty = true;\n    }\n    return tile;\n  }\n\n  _getNearestAncestor(x, y, z) {\n    const {_minZoom = 0} = this;\n    let index = {x, y, z};\n\n    while (index.z > _minZoom) {\n      index = this.getParentIndex(index);\n      const parent = this._getTile(index);\n      if (parent) {\n        return parent;\n      }\n    }\n    return null;\n  }\n}\n\n// A selected tile needs placeholder from its children if\n// - it is not loaded\n// - none of its ancestors is visible and loaded\nfunction needsPlaceholder(tile) {\n  let t = tile;\n  while (t) {\n    if (t.state & (TILE_STATE_VISIBLE === 0)) {\n      return true;\n    }\n    if (t.isLoaded) {\n      return false;\n    }\n    t = t.parent;\n  }\n  return true;\n}\n\nfunction getPlaceholderInAncestors(tile, refinementStrategy) {\n  let parent;\n  let state = TILE_STATE_PLACEHOLDER;\n  while ((parent = tile.parent)) {\n    if (tile.isLoaded) {\n      // If a tile is loaded, mark all its ancestors as hidden\n      state = TILE_STATE_HIDDEN;\n      if (refinementStrategy === STRATEGY_DEFAULT) {\n        return;\n      }\n    }\n    parent.state = Math.max(parent.state, state);\n    tile = parent;\n  }\n}\n\n// Recursively set children as placeholder\nfunction getPlaceholderInChildren(tile) {\n  for (const child of tile.children) {\n    child.state = Math.max(child.state, TILE_STATE_PLACEHOLDER);\n    if (!child.isLoaded) {\n      getPlaceholderInChildren(child);\n    }\n  }\n}\n"],"file":"tileset-2d.js"}