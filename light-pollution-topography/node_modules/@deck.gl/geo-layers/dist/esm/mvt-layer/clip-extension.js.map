{"version":3,"sources":["../../../src/mvt-layer/clip-extension.js"],"names":["LayerExtension","defaultProps","clipBounds","shaderFunction","shaderModuleVs","name","vs","injectionVs","shaderModuleFs","fs","injectionFs","ClipExtension","opts","hasAnchor","getAttributeManager","attributes","modules","inject","uniforms","props","corner0","projectPosition","corner1","clip_bounds","Math","min","max","extensionName"],"mappings":";;;;;AAoBA,SAAQA,cAAR,QAA6B,eAA7B;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV;AADO,CAArB;AAIA,IAAMC,cAAc,oNAApB;AAYA,IAAMC,cAAc,GAAG;AACrBC,EAAAA,IAAI,EAAE,SADe;AAErBC,EAAAA,EAAE,EAAEH;AAFiB,CAAvB;AAKA,IAAMI,WAAW,GAAG;AAClB,iDADkB;AAIlB,wGAJkB;AAOlB,iDAPkB;AAUlB;AAVkB,CAApB;AAmBA,IAAMC,cAAc,GAAG;AACrBH,EAAAA,IAAI,EAAE,SADe;AAErBI,EAAAA,EAAE,EAAEN;AAFiB,CAAvB;AAKA,IAAMO,WAAW,GAAG;AAClB,qDADkB;AAIlB,qFAJkB;AAOlB,qDAPkB;AAUlB;AAVkB,CAApB;;IAeqBC,a;;;;;;;;;;;+BACRC,I,EAAM;AACf,UAAMC,SAAS,GAAG,uBAAuB,KAAKC,mBAAL,GAA2BC,UAApE;AAEA,aAAOF,SAAS,GACZ;AACEG,QAAAA,OAAO,EAAE,CAACZ,cAAD,CADX;AAEEa,QAAAA,MAAM,EAAEV;AAFV,OADY,GAKZ;AACES,QAAAA,OAAO,EAAE,CAACR,cAAD,CADX;AAEES,QAAAA,MAAM,EAAEP;AAFV,OALJ;AASD;;;+BAEgB;AAAA,UAAXQ,QAAW,QAAXA,QAAW;AAAA,kCACgC,KAAKC,KADrC,CACRjB,UADQ;AAAA,UACRA,UADQ,sCACKD,YAAY,CAACC,UADlB;AAEf,UAAMkB,OAAO,GAAG,KAAKC,eAAL,CAAqB,CAACnB,UAAU,CAAC,CAAD,CAAX,EAAgBA,UAAU,CAAC,CAAD,CAA1B,EAA+B,CAA/B,CAArB,CAAhB;AACA,UAAMoB,OAAO,GAAG,KAAKD,eAAL,CAAqB,CAACnB,UAAU,CAAC,CAAD,CAAX,EAAgBA,UAAU,CAAC,CAAD,CAA1B,EAA+B,CAA/B,CAArB,CAAhB;AAEAgB,MAAAA,QAAQ,CAACK,WAAT,GAAuB,CACrBC,IAAI,CAACC,GAAL,CAASL,OAAO,CAAC,CAAD,CAAhB,EAAqBE,OAAO,CAAC,CAAD,CAA5B,CADqB,EAErBE,IAAI,CAACC,GAAL,CAASL,OAAO,CAAC,CAAD,CAAhB,EAAqBE,OAAO,CAAC,CAAD,CAA5B,CAFqB,EAGrBE,IAAI,CAACE,GAAL,CAASN,OAAO,CAAC,CAAD,CAAhB,EAAqBE,OAAO,CAAC,CAAD,CAA5B,CAHqB,EAIrBE,IAAI,CAACE,GAAL,CAASN,OAAO,CAAC,CAAD,CAAhB,EAAqBE,OAAO,CAAC,CAAD,CAA5B,CAJqB,CAAvB;AAMD;;;;EA1BwCtB,c;;SAAtBW,a;AA6BrBA,aAAa,CAACgB,aAAd,GAA8B,eAA9B;AACAhB,aAAa,CAACV,YAAd,GAA6BA,YAA7B","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {LayerExtension} from '@deck.gl/core';\n\nconst defaultProps = {\n  clipBounds: [0, 0, 1, 1]\n};\n\nconst shaderFunction = `\nuniform vec4 clip_bounds;\n\nbool clip_isInBounds(vec2 position) {\n  return position.x >= clip_bounds[0] && position.y >= clip_bounds[1] && position.x < clip_bounds[2] && position.y < clip_bounds[3];\n}\n`;\n\n/*\n * The vertex-shader version clips geometries by their anchor position\n * e.g. ScatterplotLayer - show if the center of a circle is within bounds\n */\nconst shaderModuleVs = {\n  name: 'clip-vs',\n  vs: shaderFunction\n};\n\nconst injectionVs = {\n  'vs:#decl': `\nvarying float clip_isVisible;\n`,\n  'vs:DECKGL_FILTER_GL_POSITION': `\n  clip_isVisible = float(clip_isInBounds(geometry.position.xy));\n`,\n  'fs:#decl': `\nvarying float clip_isVisible;\n`,\n  'fs:DECKGL_FILTER_COLOR': `\n  if (clip_isVisible < 0.5) discard;\n`\n};\n\n/*\n * The fragment-shader version clips pixels at the bounds\n * e.g. PolygonLayer - show the part of the polygon that intersect with the bounds \n */\nconst shaderModuleFs = {\n  name: 'clip-fs',\n  fs: shaderFunction\n};\n\nconst injectionFs = {\n  'vs:#decl': `\nvarying vec2 clip_commonPosition;\n`,\n  'vs:DECKGL_FILTER_GL_POSITION': `\n  clip_commonPosition = geometry.position.xy;\n`,\n  'fs:#decl': `\nvarying vec2 clip_commonPosition;\n`,\n  'fs:DECKGL_FILTER_COLOR': `\n  if (!clip_isInBounds(clip_commonPosition)) discard;\n`\n};\n\nexport default class ClipExtension extends LayerExtension {\n  getShaders(opts) {\n    const hasAnchor = 'instancePositions' in this.getAttributeManager().attributes;\n\n    return hasAnchor\n      ? {\n          modules: [shaderModuleVs],\n          inject: injectionVs\n        }\n      : {\n          modules: [shaderModuleFs],\n          inject: injectionFs\n        };\n  }\n\n  draw({uniforms}) {\n    const {clipBounds = defaultProps.clipBounds} = this.props;\n    const corner0 = this.projectPosition([clipBounds[0], clipBounds[1], 0]);\n    const corner1 = this.projectPosition([clipBounds[2], clipBounds[3], 0]);\n\n    uniforms.clip_bounds = [\n      Math.min(corner0[0], corner1[0]),\n      Math.min(corner0[1], corner1[1]),\n      Math.max(corner0[0], corner1[0]),\n      Math.max(corner0[1], corner1[1])\n    ];\n  }\n}\n\nClipExtension.extensionName = 'ClipExtension';\nClipExtension.defaultProps = defaultProps;\n"],"file":"clip-extension.js"}