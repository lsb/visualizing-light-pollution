import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _get from "@babel/runtime/helpers/esm/get";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import { Matrix4 } from 'math.gl';
import { MVTLoader } from '@loaders.gl/mvt';
import { load } from '@loaders.gl/core';
import { COORDINATE_SYSTEM } from '@deck.gl/core';
import TileLayer from '../tile-layer/tile-layer';
import { getURLFromTemplate } from '../tile-layer/utils';
import ClipExtension from './clip-extension';
var WORLD_SIZE = 512;

var MVTLayer = function (_TileLayer) {
  _inherits(MVTLayer, _TileLayer);

  function MVTLayer() {
    _classCallCheck(this, MVTLayer);

    return _possibleConstructorReturn(this, _getPrototypeOf(MVTLayer).apply(this, arguments));
  }

  _createClass(MVTLayer, [{
    key: "getTileData",
    value: function getTileData(tile) {
      var url = getURLFromTemplate(this.props.data, tile);

      if (!url) {
        return Promise.reject('Invalid URL');
      }

      return load(url, MVTLoader, this.getLoadOptions());
    }
  }, {
    key: "renderSubLayers",
    value: function renderSubLayers(props) {
      var tile = props.tile;
      var worldScale = Math.pow(2, tile.z);
      var xScale = WORLD_SIZE / worldScale;
      var yScale = -xScale;
      var xOffset = WORLD_SIZE * tile.x / worldScale;
      var yOffset = WORLD_SIZE * (1 - tile.y / worldScale);
      var modelMatrix = new Matrix4().translate([xOffset, yOffset, 0]).scale([xScale, yScale, 1]);
      props.modelMatrix = modelMatrix;
      props.coordinateSystem = COORDINATE_SYSTEM.CARTESIAN;
      props.extensions = [].concat(_toConsumableArray(props.extensions || []), [new ClipExtension()]);
      return _get(_getPrototypeOf(MVTLayer.prototype), "renderSubLayers", this).call(this, props);
    }
  }]);

  return MVTLayer;
}(TileLayer);

export { MVTLayer as default };
MVTLayer.layerName = 'MVTLayer';
//# sourceMappingURL=mvt-layer.js.map