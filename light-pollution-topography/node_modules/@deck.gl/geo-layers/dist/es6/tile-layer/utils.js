import { lngLatToWorld } from '@math.gl/web-mercator';
const TILE_SIZE = 512;
export const urlType = {
  type: 'url',
  value: '',
  validate: value => typeof value === 'string' || Array.isArray(value) && value.every(url => typeof url === 'string'),
  equals: (value1, value2) => {
    if (value1 === value2) {
      return true;
    }

    if (!Array.isArray(value1) || !Array.isArray(value2)) {
      return false;
    }

    const len = value1.length;

    if (len !== value2.length) {
      return false;
    }

    for (let i = 0; i < len; i++) {
      if (value1[i] !== value2[i]) {
        return false;
      }
    }

    return true;
  }
};
export function getURLFromTemplate(template, properties) {
  if (!template || !template.length) {
    return null;
  }

  if (Array.isArray(template)) {
    const index = Math.abs(properties.x + properties.y) % template.length;
    template = template[index];
  }

  return template.replace(/\{ *([\w_-]+) *\}/g, (_, property) => properties[property]);
}

function getBoundingBox(viewport) {
  const corners = [viewport.unproject([0, 0]), viewport.unproject([viewport.width, 0]), viewport.unproject([0, viewport.height]), viewport.unproject([viewport.width, viewport.height])];
  return [Math.min(corners[0][0], corners[1][0], corners[2][0], corners[3][0]), Math.min(corners[0][1], corners[1][1], corners[2][1], corners[3][1]), Math.max(corners[0][0], corners[1][0], corners[2][0], corners[3][0]), Math.max(corners[0][1], corners[1][1], corners[2][1], corners[3][1])];
}

function getOSMTileIndex(lngLat, scale) {
  let [x, y] = lngLatToWorld(lngLat);
  x *= scale / TILE_SIZE;
  y = (1 - y / TILE_SIZE) * scale;
  return [x, y];
}

function getTileIndex([x, y], scale) {
  return [x * scale / TILE_SIZE, y * scale / TILE_SIZE];
}

function getScale(z, tileSize = TILE_SIZE) {
  return Math.pow(2, z) * TILE_SIZE / tileSize;
}

function osmTile2lngLat(x, y, z) {
  const scale = getScale(z);
  const lng = x / scale * 360 - 180;
  const n = Math.PI - 2 * Math.PI * y / scale;
  const lat = 180 / Math.PI * Math.atan(0.5 * (Math.exp(n) - Math.exp(-n)));
  return [lng, lat];
}

function tile2XY(x, y, z, tileSize) {
  const scale = getScale(z, tileSize);
  return [x / scale * TILE_SIZE, y / scale * TILE_SIZE];
}

export function tileToBoundingBox(viewport, x, y, z, tileSize = TILE_SIZE) {
  if (viewport.isGeospatial) {
    const [west, north] = osmTile2lngLat(x, y, z);
    const [east, south] = osmTile2lngLat(x + 1, y + 1, z);
    return {
      west,
      north,
      east,
      south
    };
  }

  const [left, top] = tile2XY(x, y, z, tileSize);
  const [right, bottom] = tile2XY(x + 1, y + 1, z, tileSize);
  return {
    left,
    top,
    right,
    bottom
  };
}

function getIdentityTileIndices(viewport, z, tileSize) {
  const bbox = getBoundingBox(viewport);
  const scale = getScale(z, tileSize);
  const [minX, minY] = getTileIndex([bbox[0], bbox[1]], scale);
  const [maxX, maxY] = getTileIndex([bbox[2], bbox[3]], scale);
  const indices = [];

  for (let x = Math.floor(minX); x < maxX; x++) {
    for (let y = Math.floor(minY); y < maxY; y++) {
      indices.push({
        x,
        y,
        z
      });
    }
  }

  return indices;
}

function getOSMTileIndices(viewport, z) {
  const bbox = getBoundingBox(viewport);
  const scale = getScale(z);
  let [minX, minY] = getOSMTileIndex([bbox[0], bbox[3]], scale);
  let [maxX, maxY] = getOSMTileIndex([bbox[2], bbox[1]], scale);
  const indices = [];
  minX = Math.floor(minX);
  maxX = Math.min(minX + scale, maxX);
  minY = Math.max(0, Math.floor(minY));
  maxY = Math.min(scale, maxY);

  for (let x = minX; x < maxX; x++) {
    for (let y = minY; y < maxY; y++) {
      const normalizedX = x - Math.floor(x / scale) * scale;
      indices.push({
        x: normalizedX,
        y,
        z
      });
    }
  }

  return indices;
}

export function getTileIndices(viewport, maxZoom, minZoom, tileSize = TILE_SIZE) {
  let z = Math.ceil(viewport.zoom);

  if (Number.isFinite(minZoom) && z < minZoom) {
    return [];
  }

  if (Number.isFinite(maxZoom) && z > maxZoom) {
    z = maxZoom;
  }

  return viewport.isGeospatial ? getOSMTileIndices(viewport, z) : getIdentityTileIndices(viewport, z, tileSize);
}
//# sourceMappingURL=utils.js.map