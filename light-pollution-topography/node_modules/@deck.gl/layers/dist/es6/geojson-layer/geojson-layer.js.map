{"version":3,"sources":["../../../src/geojson-layer/geojson-layer.js"],"names":["CompositeLayer","log","ScatterplotLayer","PathLayer","SolidPolygonLayer","replaceInRange","getGeojsonFeatures","separateGeojsonFeatures","defaultLineColor","defaultFillColor","defaultProps","stroked","filled","extruded","wireframe","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","MAX_SAFE_INTEGER","lineJointRounded","lineMiterLimit","elevationScale","pointRadiusScale","pointRadiusMinPixels","pointRadiusMaxPixels","getLineColor","type","value","getFillColor","getRadius","getLineWidth","getElevation","material","getCoordinates","f","geometry","coordinates","GeoJsonLayer","initializeState","state","features","props","getLineDashArray","removed","updateState","changeFlags","dataChanged","data","wrapFeature","getSubLayerRow","bind","Array","isArray","oldFeatures","newFeatures","featuresDiff","key","slice","dataRange","partialFeatures","push","getIndex","__source","index","replace","setState","renderLayers","pointFeatures","lineFeatures","polygonFeatures","polygonOutlineFeatures","transitions","lineDashJustified","updateTriggers","PolygonFillLayer","getSubLayerClass","PolygonStrokeLayer","LineStringsLayer","PointsLayer","polygonFillLayer","shouldRenderSubLayer","_dataDiff","getSubLayerAccessor","getPolygon","getSubLayerProps","id","highlightedObjectIndex","_getHighlightedIndex","polygonLineLayer","widthUnits","widthScale","widthMinPixels","widthMaxPixels","rounded","miterLimit","dashJustified","getColor","getWidth","getDashArray","getPath","pathLayer","pointLayer","radiusScale","radiusMinPixels","radiusMaxPixels","getPosition","isFinite","findIndex","d","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer, log} from '@deck.gl/core';\nimport ScatterplotLayer from '../scatterplot-layer/scatterplot-layer';\nimport PathLayer from '../path-layer/path-layer';\n// Use primitive layer to avoid \"Composite Composite\" layers for now\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nimport {replaceInRange} from '../utils';\n\nimport {getGeojsonFeatures, separateGeojsonFeatures} from './geojson';\n\nconst defaultLineColor = [0, 0, 0, 255];\nconst defaultFillColor = [0, 0, 0, 255];\n\nconst defaultProps = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  wireframe: false,\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n\n  elevationScale: 1,\n\n  pointRadiusScale: 1,\n  pointRadiusMinPixels: 0, //  min point radius in pixels\n  pointRadiusMaxPixels: Number.MAX_SAFE_INTEGER, // max point radius in pixels\n\n  // Line and polygon outline color\n  getLineColor: {type: 'accessor', value: defaultLineColor},\n  // Point and polygon fill color\n  getFillColor: {type: 'accessor', value: defaultFillColor},\n  // Point radius\n  getRadius: {type: 'accessor', value: 1},\n  // Line and polygon outline accessors\n  getLineWidth: {type: 'accessor', value: 1},\n  // Polygon extrusion accessor\n  getElevation: {type: 'accessor', value: 1000},\n  // Optional material for 'lighting' shader module\n  material: true\n};\n\nfunction getCoordinates(f) {\n  return f.geometry.coordinates;\n}\n\nexport default class GeoJsonLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      features: {}\n    };\n\n    if (this.props.getLineDashArray) {\n      log.removed('getLineDashArray', 'PathStyleExtension')();\n    }\n  }\n\n  updateState({props, changeFlags}) {\n    if (!changeFlags.dataChanged) {\n      return;\n    }\n    const features = getGeojsonFeatures(props.data);\n    const wrapFeature = this.getSubLayerRow.bind(this);\n\n    if (Array.isArray(changeFlags.dataChanged)) {\n      const oldFeatures = this.state.features;\n      const newFeatures = {};\n      const featuresDiff = {};\n      for (const key in oldFeatures) {\n        newFeatures[key] = oldFeatures[key].slice();\n        featuresDiff[key] = [];\n      }\n\n      for (const dataRange of changeFlags.dataChanged) {\n        const partialFeatures = separateGeojsonFeatures(features, wrapFeature, dataRange);\n        for (const key in oldFeatures) {\n          featuresDiff[key].push(\n            replaceInRange({\n              data: newFeatures[key],\n              getIndex: f => f.__source.index,\n              dataRange,\n              replace: partialFeatures[key]\n            })\n          );\n        }\n      }\n      this.setState({features: newFeatures, featuresDiff});\n    } else {\n      this.setState({\n        features: separateGeojsonFeatures(features, wrapFeature),\n        featuresDiff: {}\n      });\n    }\n  }\n\n  /* eslint-disable complexity */\n  renderLayers() {\n    const {features, featuresDiff} = this.state;\n    const {pointFeatures, lineFeatures, polygonFeatures, polygonOutlineFeatures} = features;\n\n    // Layer composition props\n    const {stroked, filled, extruded, wireframe, material, transitions} = this.props;\n\n    // Rendering props underlying layer\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      pointRadiusScale,\n      pointRadiusMinPixels,\n      pointRadiusMaxPixels,\n      elevationScale,\n      lineDashJustified\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {\n      getLineColor,\n      getFillColor,\n      getRadius,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      updateTriggers\n    } = this.props;\n\n    const PolygonFillLayer = this.getSubLayerClass('polygons-fill', SolidPolygonLayer);\n    const PolygonStrokeLayer = this.getSubLayerClass('polygons-stroke', PathLayer);\n    const LineStringsLayer = this.getSubLayerClass('line-strings', PathLayer);\n    const PointsLayer = this.getSubLayerClass('points', ScatterplotLayer);\n\n    // Filled Polygon Layer\n    const polygonFillLayer =\n      this.shouldRenderSubLayer('polygons-fill', polygonFeatures) &&\n      new PolygonFillLayer(\n        {\n          _dataDiff: featuresDiff.polygonFeatures && (() => featuresDiff.polygonFeatures),\n\n          extruded,\n          elevationScale,\n          filled,\n          wireframe,\n          material,\n          getElevation: this.getSubLayerAccessor(getElevation),\n          getFillColor: this.getSubLayerAccessor(getFillColor),\n          getLineColor: this.getSubLayerAccessor(getLineColor),\n\n          transitions: transitions && {\n            getPolygon: transitions.geometry,\n            getElevation: transitions.getElevation,\n            getFillColor: transitions.getFillColor,\n            getLineColor: transitions.getLineColor\n          }\n        },\n        this.getSubLayerProps({\n          id: 'polygons-fill',\n          updateTriggers: {\n            getElevation: updateTriggers.getElevation,\n            getFillColor: updateTriggers.getFillColor,\n            getLineColor: updateTriggers.getLineColor\n          }\n        }),\n        {\n          data: polygonFeatures,\n          getPolygon: getCoordinates,\n          highlightedObjectIndex: this._getHighlightedIndex(polygonFeatures)\n        }\n      );\n\n    const polygonLineLayer =\n      !extruded &&\n      stroked &&\n      this.shouldRenderSubLayer('polygons-stroke', polygonOutlineFeatures) &&\n      new PolygonStrokeLayer(\n        {\n          _dataDiff:\n            featuresDiff.polygonOutlineFeatures && (() => featuresDiff.polygonOutlineFeatures),\n\n          widthUnits: lineWidthUnits,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          rounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          getColor: this.getSubLayerAccessor(getLineColor),\n          getWidth: this.getSubLayerAccessor(getLineWidth),\n          getDashArray: this.getSubLayerAccessor(getLineDashArray),\n\n          transitions: transitions && {\n            getPath: transitions.geometry,\n            getColor: transitions.getLineColor,\n            getWidth: transitions.getLineWidth\n          }\n        },\n        this.getSubLayerProps({\n          id: 'polygons-stroke',\n          updateTriggers: {\n            getColor: updateTriggers.getLineColor,\n            getWidth: updateTriggers.getLineWidth,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        {\n          data: polygonOutlineFeatures,\n          getPath: getCoordinates,\n          highlightedObjectIndex: this._getHighlightedIndex(polygonOutlineFeatures)\n        }\n      );\n\n    const pathLayer =\n      this.shouldRenderSubLayer('linestrings', lineFeatures) &&\n      new LineStringsLayer(\n        {\n          _dataDiff: featuresDiff.lineFeatures && (() => featuresDiff.lineFeatures),\n\n          widthUnits: lineWidthUnits,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          rounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          getColor: this.getSubLayerAccessor(getLineColor),\n          getWidth: this.getSubLayerAccessor(getLineWidth),\n          getDashArray: this.getSubLayerAccessor(getLineDashArray),\n\n          transitions: transitions && {\n            getPath: transitions.geometry,\n            getColor: transitions.getLineColor,\n            getWidth: transitions.getLineWidth\n          }\n        },\n        this.getSubLayerProps({\n          id: 'line-strings',\n          updateTriggers: {\n            getColor: updateTriggers.getLineColor,\n            getWidth: updateTriggers.getLineWidth,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        {\n          data: lineFeatures,\n          getPath: getCoordinates,\n          highlightedObjectIndex: this._getHighlightedIndex(lineFeatures)\n        }\n      );\n\n    const pointLayer =\n      this.shouldRenderSubLayer('points', pointFeatures) &&\n      new PointsLayer(\n        {\n          _dataDiff: featuresDiff.pointFeatures && (() => featuresDiff.pointFeatures),\n\n          stroked,\n          filled,\n          radiusScale: pointRadiusScale,\n          radiusMinPixels: pointRadiusMinPixels,\n          radiusMaxPixels: pointRadiusMaxPixels,\n          lineWidthUnits,\n          lineWidthScale,\n          lineWidthMinPixels,\n          lineWidthMaxPixels,\n\n          getFillColor: this.getSubLayerAccessor(getFillColor),\n          getLineColor: this.getSubLayerAccessor(getLineColor),\n          getRadius: this.getSubLayerAccessor(getRadius),\n          getLineWidth: this.getSubLayerAccessor(getLineWidth),\n\n          transitions: transitions && {\n            getPosition: transitions.geometry,\n            getFillColor: transitions.getFillColor,\n            getLineColor: transitions.getLineColor,\n            getRadius: transitions.getRadius,\n            getLineWidth: transitions.getLineWidth\n          }\n        },\n        this.getSubLayerProps({\n          id: 'points',\n          updateTriggers: {\n            getFillColor: updateTriggers.getFillColor,\n            getLineColor: updateTriggers.getLineColor,\n            getRadius: updateTriggers.getRadius,\n            getLineWidth: updateTriggers.getLineWidth\n          }\n        }),\n        {\n          data: pointFeatures,\n          getPosition: getCoordinates,\n          highlightedObjectIndex: this._getHighlightedIndex(pointFeatures)\n        }\n      );\n\n    return [\n      // If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonFillLayer,\n      polygonLineLayer,\n      pathLayer,\n      pointLayer,\n      // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonFillLayer\n    ];\n  }\n  /* eslint-enable complexity */\n\n  _getHighlightedIndex(data) {\n    const {highlightedObjectIndex} = this.props;\n    return Number.isFinite(highlightedObjectIndex)\n      ? data.findIndex(d => d.__source.index === highlightedObjectIndex)\n      : null;\n  }\n}\n\nGeoJsonLayer.layerName = 'GeoJsonLayer';\nGeoJsonLayer.defaultProps = defaultProps;\n"],"file":"geojson-layer.js"}