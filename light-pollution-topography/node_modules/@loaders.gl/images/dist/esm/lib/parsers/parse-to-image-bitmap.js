import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import { getBlob } from './get-blob';
var imagebitmapOptionsSupported = true;
export default function parseToImageBitmap(_x, _x2, _x3) {
  return _parseToImageBitmap.apply(this, arguments);
}

function _parseToImageBitmap() {
  _parseToImageBitmap = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(arrayBuffer, options, url) {
    var blob, imagebitmapOptions;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            blob = getBlob(arrayBuffer, url);
            imagebitmapOptions = options && options.imagebitmap;

            if (isEmptyObject(imagebitmapOptions) || !imagebitmapOptionsSupported) {
              imagebitmapOptions = null;
            }

            if (!imagebitmapOptions) {
              _context.next = 14;
              break;
            }

            _context.prev = 4;
            _context.next = 7;
            return createImageBitmap(blob, imagebitmapOptions);

          case 7:
            return _context.abrupt("return", _context.sent);

          case 10:
            _context.prev = 10;
            _context.t0 = _context["catch"](4);
            console.warn(_context.t0);
            imagebitmapOptionsSupported = false;

          case 14:
            _context.next = 16;
            return createImageBitmap(blob);

          case 16:
            return _context.abrupt("return", _context.sent);

          case 17:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[4, 10]]);
  }));
  return _parseToImageBitmap.apply(this, arguments);
}

var EMPTY_OBJECT = {};

function isEmptyObject(object) {
  for (var key in object || EMPTY_OBJECT) {
    return true;
  }

  return false;
}
//# sourceMappingURL=parse-to-image-bitmap.js.map