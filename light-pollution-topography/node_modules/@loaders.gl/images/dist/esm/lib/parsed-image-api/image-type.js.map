{"version":3,"sources":["../../../../src/lib/parsed-image-api/image-type.js"],"names":["global","isBrowser","_parseImageNode","IMAGE_SUPPORTED","Image","IMAGE_BITMAP_SUPPORTED","ImageBitmap","NODE_IMAGE_SUPPORTED","Boolean","isImageTypeSupported","type","Error","getDefaultImageType"],"mappings":"AACA,SAAQA,MAAR,EAAgBC,SAAhB,QAAgC,kBAAhC;IAGOC,e,GAAmBF,M,CAAnBE,e;AAEP,IAAMC,eAAe,GAAG,OAAOC,KAAP,KAAiB,WAAzC;AACA,IAAMC,sBAAsB,GAAG,OAAOC,WAAP,KAAuB,WAAtD;AACA,IAAMC,oBAAoB,GAAGC,OAAO,CAACN,eAAD,CAApC;AAGA,OAAO,SAASO,oBAAT,CAA8BC,IAA9B,EAAoC;AACzC,UAAQA,IAAR;AACE,SAAK,MAAL;AAEE,aAAOL,sBAAsB,IAAIF,eAA1B,IAA6CI,oBAApD;;AAEF,SAAK,aAAL;AACE,aAAOF,sBAAP;;AAEF,SAAK,MAAL;AAEA,SAAK,OAAL;AACE,aAAOF,eAAP;;AAEF,SAAK,SAAL;AAEA,SAAK,MAAL;AACE,aAAOF,SAAS,GAAG,IAAH,GAAUM,oBAA1B;;AAEF;AACE,YAAM,IAAII,KAAJ,qCAAuCD,IAAvC,wCAAN;AAnBJ;AAqBD;AAGD,OAAO,SAASE,mBAAT,GAA+B;AAEpC,MAAIH,oBAAoB,CAAC,OAAD,CAAxB,EAAmC;AACjC,WAAO,OAAP;AACD;;AACD,MAAIA,oBAAoB,CAAC,aAAD,CAAxB,EAAyC;AACvC,WAAO,aAAP;AACD;;AACD,MAAIA,oBAAoB,CAAC,MAAD,CAAxB,EAAkC;AAChC,WAAO,MAAP;AACD;;AAGD,QAAM,IAAIE,KAAJ,iEAAN;AACD","sourcesContent":["/* global ImageBitmap, Image */\nimport {global, isBrowser} from '../utils/globals';\n\n// @ts-ignore TS2339: Property does not exist on type\nconst {_parseImageNode} = global;\n\nconst IMAGE_SUPPORTED = typeof Image !== 'undefined'; // NOTE: \"false\" positives if jsdom is installed\nconst IMAGE_BITMAP_SUPPORTED = typeof ImageBitmap !== 'undefined';\nconst NODE_IMAGE_SUPPORTED = Boolean(_parseImageNode);\n\n// Checks if a loaders.gl image type is supported\nexport function isImageTypeSupported(type) {\n  switch (type) {\n    case 'auto':\n      // Should only ever be false in Node.js, if polyfills have not been installed...\n      return IMAGE_BITMAP_SUPPORTED || IMAGE_SUPPORTED || NODE_IMAGE_SUPPORTED;\n\n    case 'imagebitmap':\n      return IMAGE_BITMAP_SUPPORTED;\n\n    case 'html': // type `html` is deprecated, use `image`\n    // eslint-disable-next-line no-fallthrough\n    case 'image':\n      return IMAGE_SUPPORTED;\n\n    case 'ndarray': // type `ndarray` is deprecated, use 'data'\n    // eslint-disable-next-line no-fallthrough\n    case 'data':\n      return isBrowser ? true : NODE_IMAGE_SUPPORTED;\n\n    default:\n      throw new Error(`@loaders.gl/images: image ${type} not supported in this environment`);\n  }\n}\n\n// Returns the best loaders.gl image type supported on current run-time environment\nexport function getDefaultImageType() {\n  // TODO - switch order... we want to return imagebitmap by default\n  if (isImageTypeSupported('image')) {\n    return 'image';\n  }\n  if (isImageTypeSupported('imagebitmap')) {\n    return 'imagebitmap';\n  }\n  if (isImageTypeSupported('data')) {\n    return 'data';\n  }\n\n  // This should only happen in Node.js\n  throw new Error(`Install '@loaders.gl/polyfills' to parse images under Node.js`);\n}\n"],"file":"image-type.js"}