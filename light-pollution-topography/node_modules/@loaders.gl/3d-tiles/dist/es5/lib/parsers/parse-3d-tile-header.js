"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.normalizeTileData = normalizeTileData;
exports.normalizeTileHeaders = normalizeTileHeaders;

var _tiles = require("@loaders.gl/tiles");

function getTileType(tile) {
  if (!tile.contentUrl) {
    return _tiles.TILE_TYPE.EMPTY;
  }

  var contentUrl = tile.contentUrl;
  var fileExtension = contentUrl.split('.').pop();

  switch (fileExtension) {
    case 'pnts':
      return _tiles.TILE_TYPE.POINTCLOUD;

    case 'i3dm':
    case 'b3dm':
      return _tiles.TILE_TYPE.SCENEGRAPH;

    default:
      return fileExtension;
  }
}

function getRefine(refine) {
  switch (refine) {
    case 'REPLACE':
    case 'replace':
      return _tiles.TILE_REFINEMENT.REPLACE;

    case 'ADD':
    case 'add':
      return _tiles.TILE_REFINEMENT.ADD;

    default:
      return refine;
  }
}

function normalizeTileData(tile, options) {
  if (tile.content) {
    tile.contentUrl = "".concat(options.basePath, "/").concat(tile.content.uri);
  }

  tile.id = tile.contentUrl;
  tile.lodMetricType = _tiles.LOD_METRIC_TYPE.GEOMETRIC_ERROR;
  tile.lodMetricValue = tile.geometricError;
  tile.transformMatrix = tile.transform;
  tile.type = getTileType(tile);
  tile.refine = getRefine(tile.refine);
  return tile;
}

function normalizeTileHeaders(tileset) {
  var basePath = tileset.basePath;
  var root = normalizeTileData(tileset.root, tileset);
  var stack = [];
  stack.push(root);

  while (stack.length > 0) {
    var tile = stack.pop();
    var children = tile.children || [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var childHeader = _step.value;
        normalizeTileData(childHeader, {
          basePath: basePath
        });
        stack.push(childHeader);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  return root;
}
//# sourceMappingURL=parse-3d-tile-header.js.map