{"version":3,"sources":["../../../src/iterator-utils/async-iteration.js"],"names":["forEach","iterator","visitor","done","value","next","return","cancel","textDecoderAsyncIterator","arrayBufferIterator","options","textDecoder","TextDecoder","arrayBuffer","decode","stream","textEncoderAsyncIterator","textIterator","textEncoder","TextEncoder","text","encode","lineAsyncIterator","previous","textChunk","eolIndex","indexOf","line","slice","length","numberedLineAsyncIterator","lineIterator","counter"],"mappings":";;;AAgBA,OAAO,eAAeA,OAAf,CAAuBC,QAAvB,EAAiCC,OAAjC,EAA0C;AAE/C,SAAO,IAAP,EAAa;AACX,UAAM;AAACC,MAAAA,IAAD;AAAOC,MAAAA;AAAP,QAAgB,MAAMH,QAAQ,CAACI,IAAT,EAA5B;;AACA,QAAIF,IAAJ,EAAU;AACRF,MAAAA,QAAQ,CAACK,MAAT;AACA;AACD;;AACD,UAAMC,MAAM,GAAGL,OAAO,CAACE,KAAD,CAAtB;;AACA,QAAIG,MAAJ,EAAY;AACV;AACD;AACF;AACF;AAOD,gBAAuBC,wBAAvB;AAAA;AAAA;;;kDAAO,WAAyCC,mBAAzC,EAA8DC,OAA9D,EAAuE;AAC5E,UAAMC,WAAW,GAAG,IAAIC,WAAJ,CAAgBF,OAAhB,CAApB;AAD4E;AAAA;;AAAA;;AAAA;AAE5E,0CAAgCD,mBAAhC,gOAAqD;AAAA,cAApCI,WAAoC;AACnD,cAAM,OAAOA,WAAP,KAAuB,QAAvB,GACFA,WADE,GAEFF,WAAW,CAACG,MAAZ,CAAmBD,WAAnB,EAAgC;AAACE,UAAAA,MAAM,EAAE;AAAT,SAAhC,CAFJ;AAGD;AAN2E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAO7E,G;;;;AAOD,gBAAuBC,wBAAvB;AAAA;AAAA;;;kDAAO,WAAyCC,YAAzC,EAAuDP,OAAvD,EAAgE;AACrE,UAAMQ,WAAW,GAAG,IAAIC,WAAJ,EAApB;AADqE;AAAA;;AAAA;;AAAA;AAErE,2CAAyBF,YAAzB,0OAAuC;AAAA,cAAtBG,IAAsB;AACrC,cAAM,OAAOA,IAAP,KAAgB,QAAhB,GAA2BF,WAAW,CAACG,MAAZ,CAAmBD,IAAnB,CAA3B,GAAsDA,IAA5D;AACD;AAJoE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKtE,G;;;;AAQD,gBAAuBE,iBAAvB;AAAA;AAAA;;;2CAAO,WAAkCL,YAAlC,EAAgD;AACrD,QAAIM,QAAQ,GAAG,EAAf;AADqD;AAAA;;AAAA;;AAAA;AAErD,2CAA8BN,YAA9B,0OAA4C;AAAA,cAA3BO,SAA2B;AAC1CD,QAAAA,QAAQ,IAAIC,SAAZ;AACA,YAAIC,QAAJ;;AACA,eAAO,CAACA,QAAQ,GAAGF,QAAQ,CAACG,OAAT,CAAiB,IAAjB,CAAZ,KAAuC,CAA9C,EAAiD;AAE/C,gBAAMC,IAAI,GAAGJ,QAAQ,CAACK,KAAT,CAAe,CAAf,EAAkBH,QAAQ,GAAG,CAA7B,CAAb;AACAF,UAAAA,QAAQ,GAAGA,QAAQ,CAACK,KAAT,CAAeH,QAAQ,GAAG,CAA1B,CAAX;AACA,gBAAME,IAAN;AACD;AACF;AAXoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAarD,QAAIJ,QAAQ,CAACM,MAAT,GAAkB,CAAtB,EAAyB;AACvB,YAAMN,QAAN;AACD;AACF,G;;;;AAQD,gBAAuBO,yBAAvB;AAAA;AAAA;;;mDAAO,WAA0CC,YAA1C,EAAwD;AAC7D,QAAIC,OAAO,GAAG,CAAd;AAD6D;AAAA;;AAAA;;AAAA;AAE7D,2CAAyBD,YAAzB,0OAAuC;AAAA,cAAtBJ,IAAsB;AACrC,cAAM;AAACK,UAAAA,OAAD;AAAUL,UAAAA;AAAV,SAAN;AACAK,QAAAA,OAAO;AACR;AAL4D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAM9D,G","sourcesContent":["/* global TextDecoder, TextEncoder */\n\n// GENERAL UTILITIES\n\n/**\n * Iterate over async iterator, without resetting iterator if end is not reached\n * - forEach intentionally does not reset iterator if exiting loop prematurely\n *   so that iteration can continue in a second loop\n * - It is recommended to use a standard for-await as last loop to ensure\n *   iterator gets properly reset\n *\n * TODO - optimize using sync iteration if argument is an Iterable?\n *\n * @param iterator\n * @param visitor\n */\nexport async function forEach(iterator, visitor) {\n  // eslint-disable-next-line\n  while (true) {\n    const {done, value} = await iterator.next();\n    if (done) {\n      iterator.return();\n      return;\n    }\n    const cancel = visitor(value);\n    if (cancel) {\n      return;\n    }\n  }\n}\n\n// ITERATOR GENERATORS\n\n// TextDecoder iterators\n// TextDecoder will keep any partial undecoded bytes between calls to `decode`\n\nexport async function* textDecoderAsyncIterator(arrayBufferIterator, options) {\n  const textDecoder = new TextDecoder(options);\n  for await (const arrayBuffer of arrayBufferIterator) {\n    yield typeof arrayBuffer === 'string'\n      ? arrayBuffer\n      : textDecoder.decode(arrayBuffer, {stream: true});\n  }\n}\n\n// TextEncoder iterator\n// TODO - this is not useful unless min chunk size is given\n// TextEncoder will keep any partial undecoded bytes between calls to `encode`\n// If iterator does not yield strings, assume arrayBuffer and return unencoded\n\nexport async function* textEncoderAsyncIterator(textIterator, options) {\n  const textEncoder = new TextEncoder();\n  for await (const text of textIterator) {\n    yield typeof text === 'string' ? textEncoder.encode(text) : text;\n  }\n}\n\n/**\n * @param textIterator async iterable yielding strings\n * @returns an async iterable over lines\n * See http://2ality.com/2018/04/async-iter-nodejs.html\n */\n\nexport async function* lineAsyncIterator(textIterator) {\n  let previous = '';\n  for await (const textChunk of textIterator) {\n    previous += textChunk;\n    let eolIndex;\n    while ((eolIndex = previous.indexOf('\\n')) >= 0) {\n      // line includes the EOL\n      const line = previous.slice(0, eolIndex + 1);\n      previous = previous.slice(eolIndex + 1);\n      yield line;\n    }\n  }\n\n  if (previous.length > 0) {\n    yield previous;\n  }\n}\n\n/**\n * @param lineIterator async iterable yielding lines\n * @returns async iterable yielding numbered lines\n *\n * See http://2ality.com/2018/04/async-iter-nodejs.html\n */\nexport async function* numberedLineAsyncIterator(lineIterator) {\n  let counter = 1;\n  for await (const line of lineIterator) {\n    yield {counter, line};\n    counter++;\n  }\n}\n"],"file":"async-iteration.js"}