import _asyncIterator from "@babel/runtime/helpers/esm/asyncIterator";
import { concatenateArrayBuffers } from '../javascript-utils/memory-copy-utils';
export async function concatenateChunksAsync(asyncIterator) {
  let arrayBuffer = new ArrayBuffer(0);
  let string = '';
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;

  var _iteratorError;

  try {
    for (var _iterator = _asyncIterator(asyncIterator), _step, _value; _step = await _iterator.next(), _iteratorNormalCompletion = _step.done, _value = await _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
      const chunk = _value;

      if (typeof chunk === 'string') {
        string += chunk;
      } else {
        arrayBuffer = concatenateArrayBuffers(arrayBuffer, chunk);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        await _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return string || arrayBuffer;
}
export function* makeChunkIterator(bigArrayBufferOrString, options = {}) {
  if (typeof bigArrayBufferOrString === 'string') {
    yield* makeStringChunkIterator(bigArrayBufferOrString, options);
    return;
  }

  if (bigArrayBufferOrString instanceof ArrayBuffer) {
    yield* makeArrayBufferChunkIterator(bigArrayBufferOrString, options);
    return;
  }

  throw new Error('assert');
}

function* makeArrayBufferChunkIterator(arrayBuffer, options = {}) {
  const {
    chunkSize = 256 * 1024
  } = options;
  let byteOffset = 0;

  while (byteOffset < arrayBuffer.byteLength) {
    const chunkByteLength = Math.min(arrayBuffer.byteLength - byteOffset, chunkSize);
    const chunk = new ArrayBuffer(chunkByteLength);
    const sourceArray = new Uint8Array(arrayBuffer, byteOffset, chunkByteLength);
    const chunkArray = new Uint8Array(chunk);
    chunkArray.set(sourceArray);
    byteOffset += chunkByteLength;
    yield chunk;
  }
}

function* makeStringChunkIterator(string, options = {}) {
  const {
    chunkSize = 256 * 1024
  } = options;
  let offset = 0;

  while (offset < string.length) {
    const chunkLength = Math.min(string.length - offset, chunkSize);
    const chunk = string.slice(offset, offset + chunkLength);
    offset += chunkLength;
    yield chunk;
  }
}
//# sourceMappingURL=chunk-iteration.js.map