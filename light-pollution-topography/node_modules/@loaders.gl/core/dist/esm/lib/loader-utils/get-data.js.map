{"version":3,"sources":["../../../../src/lib/loader-utils/get-data.js"],"names":["isFetchResponse","isReadableStream","isAsyncIterable","isIterable","isIterator","isFileReadable","isBuffer","makeStreamIterator","concatenateChunksAsync","fetchFileReadable","checkFetchResponseStatus","checkFetchResponseStatusSync","ERR_DATA","getUrlFromData","data","url","name","replace","getArrayBufferOrStringFromDataSync","loader","text","ArrayBuffer","arrayBuffer","binary","textDecoder","TextDecoder","decode","isView","buffer","byteLength","length","byteOffset","slice","Error","getArrayBufferOrStringFromData","isArrayBuffer","response","getAsyncIteratorFromData","body","Symbol","asyncIterator","getIteratorFromData","oneChunk","iterator"],"mappings":"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","sourcesContent":["/* global TextDecoder */\nimport {\n  isFetchResponse,\n  isReadableStream,\n  isAsyncIterable,\n  isIterable,\n  isIterator,\n  isFileReadable,\n  isBuffer\n} from '../../javascript-utils/is-type';\nimport {makeStreamIterator} from '../../iterator-utils/stream-iteration';\nimport {concatenateChunksAsync} from '../../iterator-utils/chunk-iteration';\nimport fetchFileReadable from '../fetch/fetch-file.browser';\nimport {checkFetchResponseStatus, checkFetchResponseStatusSync} from './check-errors';\n\nconst ERR_DATA = 'Cannot convert supplied data type';\n\n// Extract a URL from `parse` arguments if possible\n// If a fetch Response object or File/Blob were passed in get URL from those objects\nexport function getUrlFromData(data, url) {\n  if (isFetchResponse(data)) {\n    url = url || data.url;\n  } else if (isFileReadable(url)) {\n    // File or Blob\n    url = url.name;\n  }\n  // Strip any query string\n  return typeof url === 'string' ? url.replace(/\\?.*/, '') : url;\n}\n\n// eslint-disable-next-line complexity\nexport function getArrayBufferOrStringFromDataSync(data, loader) {\n  if (loader.text && typeof data === 'string') {\n    return data;\n  }\n\n  if (data instanceof ArrayBuffer) {\n    const arrayBuffer = data;\n    if (loader.text && !loader.binary) {\n      const textDecoder = new TextDecoder('utf8');\n      return textDecoder.decode(arrayBuffer);\n    }\n    return arrayBuffer;\n  }\n\n  // We may need to handle offsets\n  if (ArrayBuffer.isView(data) || isBuffer(data)) {\n    // TextDecoder is invoked on typed arrays and will handle offsets\n    if (loader.text && !loader.binary) {\n      const textDecoder = new TextDecoder('utf8');\n      return textDecoder.decode(data);\n    }\n\n    let arrayBuffer = data.buffer;\n\n    // Since we are returning the underlying arrayBuffer, we must create a new copy\n    // if this typed array / Buffer is a partial view into the ArryayBuffer\n    // TODO - this is a potentially unnecessary copy\n    const byteLength = data.byteLength || data.length;\n    if (data.byteOffset !== 0 || byteLength !== arrayBuffer.byteLength) {\n      // console.warn(`loaders.gl copying arraybuffer of length ${byteLength}`);\n      arrayBuffer = arrayBuffer.slice(data.byteOffset, data.byteOffset + byteLength);\n    }\n    return arrayBuffer;\n  }\n\n  throw new Error(ERR_DATA);\n}\n\n// Convert async iterator to a promise\nexport async function getArrayBufferOrStringFromData(data, loader) {\n  // Resolve any promise\n  data = await data;\n\n  const isArrayBuffer = data instanceof ArrayBuffer || ArrayBuffer.isView(data);\n  if (typeof data === 'string' || isArrayBuffer) {\n    return getArrayBufferOrStringFromDataSync(data, loader);\n  }\n\n  // Blobs and files are FileReader compatible\n  if (isFileReadable(data)) {\n    data = await fetchFileReadable(data);\n  }\n\n  if (isFetchResponse(data)) {\n    const response = data;\n    await checkFetchResponseStatus(response);\n    return loader.binary ? await response.arrayBuffer() : await response.text();\n  }\n\n  if (isReadableStream(data)) {\n    data = makeStreamIterator(data);\n  }\n\n  if (isIterable(data) || isAsyncIterable(data)) {\n    // Assume arrayBuffer iterator - attempt to concatenate\n    return concatenateChunksAsync(data);\n  }\n\n  throw new Error(ERR_DATA);\n}\n\nexport function getAsyncIteratorFromData(data) {\n  if (isIterator(data)) {\n    return data;\n  }\n\n  // TODO: Our fetchFileReaderObject response does not yet support a body stream\n  if (isFetchResponse(data) && data.body) {\n    // Note Since this function is not async, we currently can't load error message, just status\n    checkFetchResponseStatusSync(data);\n    return makeStreamIterator(data.body);\n  }\n\n  if (isReadableStream(data)) {\n    return makeStreamIterator(data);\n  }\n\n  if (isAsyncIterable(data)) {\n    return data[Symbol.asyncIterator]();\n  }\n\n  return getIteratorFromData(data);\n}\n\nexport function getIteratorFromData(data) {\n  // generate an iterator that emits a single chunk\n  if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {\n    return (function* oneChunk() {\n      yield data.buffer || data;\n    })();\n  }\n\n  if (isIterator(data)) {\n    return data;\n  }\n\n  if (isIterable(data)) {\n    return data[Symbol.iterator]();\n  }\n\n  throw new Error(ERR_DATA);\n}\n"],"file":"get-data.js"}