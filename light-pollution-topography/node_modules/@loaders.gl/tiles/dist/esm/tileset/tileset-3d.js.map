{"version":3,"sources":["../../../src/tileset/tileset-3d.js"],"names":["Matrix4","Vector3","Ellipsoid","Stats","RequestScheduler","assert","path","TilesetCache","calculateTransformProps","getFrameState","getZoomFromBoundingVolume","Tile3D","Tileset3DTraverser","TilesetTraverser","I3SetTraverser","TILESET_TYPE","TILES_TOTAL","TILES_IN_MEMORY","TILES_IN_VIEW","TILES_RENDERABLE","TILES_LOADED","TILES_LOADING","TILES_UNLOADED","TILES_LOAD_FAILED","POINTS_COUNT","TILES_GPU_MEMORY","getQueryParamString","queryParams","queryParamStrings","Object","keys","key","push","length","join","DEFAULT_OPTIONS","ellipsoid","WGS84","modelMatrix","throttleRequests","maximumMemoryUsage","onTileLoad","onTileUnload","onTileError","tile","message","url","maximumScreenSpaceError","Tileset3D","json","options","tileset","loader","type","basePath","dirname","lodMetricType","lodMetricValue","refine","root","fetchOptions","headers","token","cartographicCenter","cartesianCenter","zoom","boundingVolume","_traverser","_initializeTraverser","_cache","_requestScheduler","_frameNumber","_updateFrameNumber","_pendingCount","_tiles","selectedTiles","_emptyTiles","_requestedTiles","_selectedTilesToStyle","_queryParams","_queryParamsString","gpuMemoryUsageInBytes","stats","id","_initializeStats","_hasMixedContent","_maximumScreenSpaceError","_properties","undefined","_extensionsUsed","_gltfUpAxis","_dynamicScreenSpaceErrorComputedDensity","extras","asset","credits","description","_defaultGeometrySchema","_initializeTileSet","_destroy","viewport","reset","frameState","traverse","values","_tilesChanged","requestedTiles","emptyTiles","_loadTiles","_unloadTiles","_updateStats","tilePath","isDataUrl","startsWith","oldSelectedTiles","set1","Set","map","t","set2","changed","filter","x","has","_loadTile","unloadTiles","_unloadTile","tilesRenderable","pointsRenderable","contentAvailable","content","pointCount","get","count","tilesetJson","_initializeTileHeaders","TILES3D","_initializeCesiumTileset","I3S","_initializeI3STileset","_calculateViewProps","center","console","warn","cartesianToCartographic","parentTileHeader","rootTile","children","depth","stack","pop","incrementCount","header","childHeader","childTile","TraverserClass","parentTile","_destroySubtree","_onStartTileLoading","loadContent","loaded","_onTileLoadError","_onEndTileLoading","_onTileLoad","error","toString","_addTileToCache","decrementCount","add","_updateCacheStats","byteLength","unloadContent","child","_destroyTile","unloadTile","destroy","Error","version","v","tilesetVersion","attributions","properties","geometricError","extensionsUsed","store","defaultGeometrySchema","extensionName","Boolean","indexOf"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {Matrix4, Vector3} from '@math.gl/core';\nimport {Ellipsoid} from '@math.gl/geospatial';\nimport {Stats} from '@probe.gl/stats';\nimport {RequestScheduler, assert, path} from '@loaders.gl/loader-utils';\n\nimport TilesetCache from './tileset-cache';\nimport {calculateTransformProps} from './helpers/transform-utils';\nimport {getFrameState} from './helpers/frame-state';\nimport {getZoomFromBoundingVolume} from './helpers/zoom';\nimport Tile3D from './tile-3d';\nimport Tileset3DTraverser from './traversers/tileset-3d-traverser';\nimport TilesetTraverser from './traversers/tileset-traverser';\nimport I3SetTraverser from './traversers/i3s-tilset-traverser';\nimport {TILESET_TYPE} from '../constants';\n\n// Tracked Stats\nconst TILES_TOTAL = 'Tiles In Tileset(s)';\nconst TILES_IN_MEMORY = 'Tiles In Memory';\nconst TILES_IN_VIEW = 'Tiles In View';\nconst TILES_RENDERABLE = 'Tiles To Render';\nconst TILES_LOADED = 'Tiles Loaded';\nconst TILES_LOADING = 'Tiles Loading';\nconst TILES_UNLOADED = 'Tiles Unloaded';\nconst TILES_LOAD_FAILED = 'Failed Tile Loads';\nconst POINTS_COUNT = 'Points';\nconst TILES_GPU_MEMORY = 'Tile Memory Use';\n\nfunction getQueryParamString(queryParams) {\n  const queryParamStrings = [];\n  for (const key of Object.keys(queryParams)) {\n    queryParamStrings.push(`${key}=${queryParams[key]}`);\n  }\n  switch (queryParamStrings.length) {\n    case 0:\n      return '';\n    case 1:\n      return `?${queryParamStrings[0]}`;\n    default:\n      return `?${queryParamStrings.join('&')}`;\n  }\n}\n\nconst DEFAULT_OPTIONS = {\n  ellipsoid: Ellipsoid.WGS84,\n  // A 4x4 transformation matrix this transforms the entire tileset.\n  modelMatrix: new Matrix4(),\n\n  // Set to true to enable experimental request throttling, for improved performance\n  throttleRequests: false,\n\n  maximumMemoryUsage: 32,\n\n  // Indicates this a tile's content was loaded\n  onTileLoad: () => {},\n  // Indicates this a tile's content was unloaded\n  onTileUnload: () => {},\n  onTileError: (tile, message, url) => {},\n\n  // TODO CESIUM\n  // The maximum screen space error used to drive level of detail refinement.\n  maximumScreenSpaceError: 8\n  // dynamicScreenSpaceError: false,\n  // dynamicScreenSpaceErrorDensity: 0.00278,\n  // dynamicScreenSpaceErrorFactor: 4.0,\n  // Optimization option. Determines if level of detail skipping should be applied during the traversal.\n  // skipLevelOfDetail: false,\n  // The screen space error this must be reached before skipping levels of detail.\n  // baseScreenSpaceError: 1024\n};\n\nexport default class Tileset3D {\n  // eslint-disable-next-line max-statements\n  constructor(json, options = {}) {\n    assert(json);\n\n    // PUBLIC MEMBERS\n    this.options = {...DEFAULT_OPTIONS, ...options};\n    // raw data\n    this.tileset = json;\n    this.loader = json.loader;\n    // could be  3d tiles, i3s\n    this.type = json.type;\n    // The url to a tileset JSON file.\n    this.url = json.url;\n    this.basePath = json.basePath || path.dirname(this.url);\n    this.modelMatrix = this.options.modelMatrix;\n    this.ellipsoid = this.options.ellipsoid;\n\n    // Geometric error when the tree is not rendered at all\n    this.lodMetricType = json.lodMetricType;\n    this.lodMetricValue = json.lodMetricValue;\n    this.refine = json.root.refine;\n\n    // TODO add to loader context?\n    this.fetchOptions = this.options.fetchOptions || {};\n    if (this.options.headers) {\n      this.fetchOptions.headers = this.options.headers;\n    }\n    if (this.options.token) {\n      this.fetchOptions.token = this.options.token;\n    }\n\n    this.root = null;\n    // view props\n    this.cartographicCenter = null;\n    this.cartesianCenter = null;\n    this.zoom = 1;\n    this.boundingVolume = null;\n\n    // TRAVERSAL\n    this._traverser = this._initializeTraverser();\n    this._cache = new TilesetCache();\n    this._requestScheduler = new RequestScheduler({\n      throttleRequests: this.options.throttleRequests\n    });\n    // update tracker\n    // increase in each update cycle\n    this._frameNumber = 0;\n    // increase when tiles selected for rendering changed\n    this._updateFrameNumber = 0;\n    // counter for tracking tiles requests\n    this._pendingCount = 0;\n\n    // HOLD TRAVERSAL RESULTS\n    this._tiles = {};\n    this.selectedTiles = [];\n    this._emptyTiles = [];\n    this._requestedTiles = [];\n    this._selectedTilesToStyle = [];\n\n    this._queryParams = {};\n    this._queryParamsString = null;\n\n    // METRICS\n    // The maximum amount of GPU memory (in MB) that may be used to cache tiles.\n    // Tiles not in view are unloaded to enforce this.\n    this.maximumMemoryUsage = this.options.maximumMemoryUsage;\n    // The total amount of GPU memory in bytes used by the tileset.\n    this.gpuMemoryUsageInBytes = 0;\n    this.stats = new Stats({id: this.url});\n    this._initializeStats();\n\n    // TODO CESIUM specific\n    this._hasMixedContent = false;\n    this._maximumScreenSpaceError = this.options.maximumScreenSpaceError;\n    // EXTRACTED FROM TILESET\n    this._properties = undefined; // Metadata for per-model/point/etc properties\n    this._extensionsUsed = undefined;\n    this._gltfUpAxis = undefined;\n    this._dynamicScreenSpaceErrorComputedDensity = 0.0; // Updated based on the camera position and direction\n    // Metadata for the entire tileset\n    this.extras = null;\n    this.asset = {};\n    this.credits = {};\n    this.description = this.options.description;\n\n    // TODO I3S Specific\n    this._defaultGeometrySchema = [];\n\n    this._initializeTileSet(json, this.options);\n  }\n\n  isLoaded() {\n    return this._pendingCount === 0;\n  }\n\n  destroy() {\n    this._destroy();\n  }\n\n  get tiles() {\n    return Object.values(this._tiles);\n  }\n\n  update(viewport) {\n    this._cache.reset();\n    this._frameNumber++;\n    const frameState = getFrameState(viewport, this._frameNumber);\n    this._traverser.traverse(this.root, frameState, this.options);\n\n    // populate traversal results\n    const selectedTiles = Object.values(this._traverser.selectedTiles);\n    if (this._tilesChanged(this.selectedTiles, selectedTiles)) {\n      this._updateFrameNumber++;\n    }\n\n    this.selectedTiles = selectedTiles;\n    for (const tile of this.selectedTiles) {\n      this._tiles[tile.id] = tile;\n    }\n    this._requestedTiles = Object.values(this._traverser.requestedTiles);\n    this._emptyTiles = Object.values(this._traverser.emptyTiles);\n\n    this._loadTiles(frameState);\n    this._unloadTiles();\n    this._updateStats();\n\n    return this._updateFrameNumber;\n  }\n\n  getTileUrl(tilePath) {\n    const isDataUrl = tilePath.startsWith('data:');\n    if (isDataUrl) {\n      return tilePath;\n    }\n    return `${tilePath}${this.queryParams}`;\n  }\n\n  _tilesChanged(oldSelectedTiles, selectedTiles) {\n    if (oldSelectedTiles.length !== selectedTiles.length) {\n      return true;\n    }\n    const set1 = new Set(oldSelectedTiles.map(t => t.id));\n    const set2 = new Set(selectedTiles.map(t => t.id));\n    let changed = oldSelectedTiles.filter(x => !set2.has(x.id)).length > 0;\n    changed = changed || selectedTiles.filter(x => !set1.has(x.id)).length > 0;\n    return changed;\n  }\n\n  _loadTiles(frameState) {\n    // Sort requests by priority before making any requests.\n    // This makes it less likely this requests will be cancelled after being issued.\n    // requestedTiles.sort((a, b) => a._priority - b._priority);\n    for (const tile of this._requestedTiles) {\n      this._loadTile(tile, frameState);\n    }\n  }\n\n  _unloadTiles() {\n    // unload tiles from cache when hit maximumMemoryUsage\n    this._cache.unloadTiles(this, (tileset, tile) => tileset._unloadTile(tile));\n  }\n\n  _updateStats() {\n    let tilesRenderable = 0;\n    let pointsRenderable = 0;\n    for (const tile of this.selectedTiles) {\n      if (tile.contentAvailable) {\n        tilesRenderable++;\n        if (tile.content.pointCount) {\n          pointsRenderable += tile.content.pointCount;\n        }\n      }\n    }\n\n    this.stats.get(TILES_IN_VIEW).count = this.selectedTiles.length;\n    this.stats.get(TILES_RENDERABLE).count = tilesRenderable;\n    this.stats.get(POINTS_COUNT).count = pointsRenderable;\n  }\n\n  _initializeTileSet(tilesetJson) {\n    this.root = this._initializeTileHeaders(tilesetJson, null, this.basePath);\n\n    // TODO CESIUM Specific\n    if (this.type === TILESET_TYPE.TILES3D) {\n      this._initializeCesiumTileset(tilesetJson);\n    }\n\n    if (this.type === TILESET_TYPE.I3S) {\n      this._initializeI3STileset(tilesetJson);\n    }\n    // Calculate cartographicCenter & zoom props to help apps center view on tileset\n    this._calculateViewProps();\n  }\n\n  // Called during initialize Tileset to initialize the tileset's cartographic center (longitude, latitude) and zoom.\n  _calculateViewProps() {\n    const root = this.root;\n    const {center} = root.boundingVolume;\n    // TODO - handle all cases\n    if (!center) {\n      // eslint-disable-next-line\n      console.warn('center was not pre-calculated for the root tile');\n      this.cartographicCenter = new Vector3();\n      this.zoom = 1;\n      return;\n    }\n    this.cartographicCenter = Ellipsoid.WGS84.cartesianToCartographic(center, new Vector3());\n    this.cartesianCenter = center;\n    this.zoom = getZoomFromBoundingVolume(root.boundingVolume);\n  }\n\n  _initializeStats() {\n    this.stats.get(TILES_TOTAL);\n    this.stats.get(TILES_LOADING);\n    this.stats.get(TILES_IN_MEMORY);\n    this.stats.get(TILES_IN_VIEW);\n    this.stats.get(TILES_RENDERABLE);\n    this.stats.get(TILES_LOADED);\n    this.stats.get(TILES_UNLOADED);\n    this.stats.get(TILES_LOAD_FAILED);\n    this.stats.get(POINTS_COUNT, 'memory');\n    this.stats.get(TILES_GPU_MEMORY, 'memory');\n  }\n\n  // Installs the main tileset JSON file or a tileset JSON file referenced from a tile.\n  // eslint-disable-next-line max-statements\n  _initializeTileHeaders(tilesetJson, parentTileHeader, basePath) {\n    // A tileset JSON file referenced from a tile may exist in a different directory than the root tileset.\n    // Get the basePath relative to the external tileset.\n    const rootTile = new Tile3D(this, tilesetJson.root, parentTileHeader, basePath); // resource\n\n    // If there is a parentTileHeader, add the root of the currently loading tileset\n    // to parentTileHeader's children, and update its depth.\n    if (parentTileHeader) {\n      parentTileHeader.children.push(rootTile);\n      rootTile.depth = parentTileHeader.depth + 1;\n    }\n\n    // Cesium 3d tiles knows the hierarchy beforehand\n    if (this.type === TILESET_TYPE.TILES3D) {\n      const stack = [];\n      stack.push(rootTile);\n\n      while (stack.length > 0) {\n        const tile = stack.pop();\n        this.stats.get(TILES_TOTAL).incrementCount();\n        const children = tile.header.children || [];\n        for (const childHeader of children) {\n          const childTile = new Tile3D(this, childHeader, tile, basePath);\n          tile.children.push(childTile);\n          childTile.depth = tile.depth + 1;\n          stack.push(childTile);\n        }\n      }\n    }\n\n    return rootTile;\n  }\n\n  _initializeTraverser() {\n    let TraverserClass;\n    const type = this.type;\n    switch (type) {\n      case TILESET_TYPE.TILES3D:\n        TraverserClass = Tileset3DTraverser;\n        break;\n      case TILESET_TYPE.I3S:\n        TraverserClass = I3SetTraverser;\n        break;\n      default:\n        TraverserClass = TilesetTraverser;\n    }\n\n    return new TraverserClass({\n      basePath: this.basePath\n    });\n  }\n\n  _destroyTileHeaders(parentTile) {\n    this._destroySubtree(parentTile);\n  }\n\n  async _loadTile(tile, frameState) {\n    let loaded;\n    try {\n      this._onStartTileLoading();\n      loaded = await tile.loadContent(frameState);\n    } catch (error) {\n      this._onTileLoadError(tile, error);\n    } finally {\n      this._onEndTileLoading();\n      this._onTileLoad(tile, loaded);\n    }\n  }\n\n  _onTileLoadError(tile, error) {\n    this.stats.get(TILES_LOAD_FAILED).incrementCount();\n\n    const message = error.message || error.toString();\n    const url = tile.url;\n    // TODO - Allow for probe log to be injected instead of console?\n    console.error(`A 3D tile failed to load: ${tile.url} ${message}`); // eslint-disable-line\n    this.options.onTileError(tile, message, url);\n  }\n\n  _onTileLoad(tile, loaded) {\n    if (!loaded) {\n      return;\n    }\n\n    // add coordinateOrigin and modelMatrix to tile\n    if (tile && tile.content) {\n      calculateTransformProps(tile, tile.content);\n    }\n\n    this._addTileToCache(tile);\n    this.options.onTileLoad(tile);\n  }\n\n  _onStartTileLoading() {\n    this._pendingCount++;\n    this.stats.get(TILES_LOADING).incrementCount();\n  }\n\n  _onEndTileLoading() {\n    this._pendingCount--;\n    this.stats.get(TILES_LOADING).decrementCount();\n  }\n\n  _addTileToCache(tile) {\n    this._cache.add(this, tile, tileset => tileset._updateCacheStats(tile));\n  }\n\n  _updateCacheStats(tile) {\n    this.stats.get(TILES_LOADED).incrementCount();\n    this.stats.get(TILES_IN_MEMORY).incrementCount();\n\n    // Good enough? Just use the raw binary ArrayBuffer's byte length.\n    this.gpuMemoryUsageInBytes += tile.content.byteLength || 0;\n    this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;\n  }\n\n  _unloadTile(tile) {\n    this.gpuMemoryUsageInBytes -= tile.content.byteLength || 0;\n\n    this.stats.get(TILES_IN_MEMORY).decrementCount();\n    this.stats.get(TILES_UNLOADED).incrementCount();\n    this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;\n\n    this.options.onTileUnload(tile);\n    tile.unloadContent();\n  }\n\n  // Traverse the tree and destroy all tiles\n  _destroy() {\n    const stack = [];\n\n    if (this.root) {\n      stack.push(this.root);\n    }\n\n    while (stack.length > 0) {\n      const tile = stack.pop();\n\n      for (const child of tile.children) {\n        stack.push(child);\n      }\n\n      this._destroyTile(tile);\n    }\n    this.root = null;\n  }\n\n  // Traverse the tree and destroy all sub tiles\n  _destroySubtree(tile) {\n    const root = tile;\n    const stack = [];\n    stack.push(root);\n    while (stack.length > 0) {\n      tile = stack.pop();\n      for (const child of tile.children) {\n        stack.push(child);\n      }\n      if (tile !== root) {\n        this._destroyTile(tile);\n      }\n    }\n    root.children = [];\n  }\n\n  _destroyTile(tile) {\n    this._cache.unloadTile(this, tile);\n    this._unloadTile(tile);\n    tile.destroy();\n  }\n\n  _initializeCesiumTileset(tilesetJson) {\n    this.asset = tilesetJson.asset;\n    if (!this.asset) {\n      throw new Error('Tileset must have an asset property.');\n    }\n    if (this.asset.version !== '0.0' && this.asset.version !== '1.0') {\n      throw new Error('The tileset must be 3D Tiles version 0.0 or 1.0.');\n    }\n\n    // Note: `asset.tilesetVersion` is version of the tileset itself (not the version of the 3D TILES standard)\n    // We add this version as a `v=1.0` query param to fetch the right version and not get an older cached version\n    if ('tilesetVersion' in this.asset) {\n      this._queryParams.v = this.asset.tilesetVersion;\n    }\n\n    // TODO - ion resources have a credits property we can use for additional attribution.\n    this.credits = {\n      attributions: this.options.attributions || []\n    };\n    this.description = this.options.description;\n\n    // Gets the tileset's properties dictionary object, which contains metadata about per-feature properties.\n    this.properties = tilesetJson.properties;\n    this.geometricError = tilesetJson.geometricError;\n    this._extensionsUsed = tilesetJson.extensionsUsed;\n    // Returns the extras property at the top of the tileset JSON (application specific metadata).\n    this.extras = tilesetJson.extras;\n  }\n\n  _initializeI3STileset(tilesetJson) {\n    if ('token' in this.options) {\n      this._queryParams.token = this.options.token;\n    }\n    // Initialize default Geometry schema\n    this._defaultGeometrySchema = tilesetJson.store.defaultGeometrySchema;\n  }\n\n  // TODO CESIUM specific\n  hasExtension(extensionName) {\n    return Boolean(this._extensionsUsed && this._extensionsUsed.indexOf(extensionName) > -1);\n  }\n\n  get queryParams() {\n    if (!this._queryParamsString) {\n      this._queryParamsString = getQueryParamString(this._queryParams);\n    }\n    return this._queryParamsString;\n  }\n}\n"],"file":"tileset-3d.js"}