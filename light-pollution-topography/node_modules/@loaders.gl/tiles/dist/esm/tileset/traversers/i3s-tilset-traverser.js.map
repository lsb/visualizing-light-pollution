{"version":3,"sources":["../../../../src/tileset/traversers/i3s-tilset-traverser.js"],"names":["load","TilesetTraverser","lodJudge","TileHeader","I3STileManager","I3STilesetTraverser","options","_tileManager","tile","frameState","_lodJudge","children","header","childTiles","tileset","child","childTile","find","t","id","request","_loadTile","cachedRequest","add","_onTileLoad","frameNumber","update","updateTile","nodeId","loader","nodeUrl","getTileUrl","url","i3s","fetchOptions","isHeader","loadContent","basePath","push","_frameNumber","executeTraversal"],"mappings":"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","sourcesContent":["import {load} from '@loaders.gl/core';\nimport TilesetTraverser from './tileset-traverser';\n\nimport {lodJudge} from '../helpers/i3s-lod';\nimport TileHeader from '../tile-3d';\nimport I3STileManager from './i3s-tile-manager';\n\nexport default class I3STilesetTraverser extends TilesetTraverser {\n  constructor(options) {\n    super(options);\n    this._tileManager = new I3STileManager();\n  }\n\n  shouldRefine(tile, frameState) {\n    // TODO refactor loaJudge\n    tile._lodJudge = lodJudge(tile, frameState);\n    return tile._lodJudge === 'DIG';\n  }\n\n  // eslint-disable-next-line complexity\n  updateChildTiles(tile, frameState) {\n    const children = tile.header.children || [];\n    // child which are already fetched and constructed as Tile3D instances\n    const childTiles = tile.children;\n    const tileset = tile.tileset;\n\n    for (const child of children) {\n      // if child tile is not requested or fetched\n      const childTile = childTiles && childTiles.find(t => t.id === child.id);\n      if (!childTile) {\n        const request = () => this._loadTile(child.id, tileset);\n        const cachedRequest = this._tileManager.find(child.id);\n        if (!cachedRequest) {\n          this._tileManager.add(\n            request,\n            child.id,\n            header => this._onTileLoad(header, tile, frameState),\n            {frameNumber: frameState.frameNumber}\n          );\n        } else {\n          // update frameNumber since it is still needed in current frame\n          this._tileManager.update(child.id, {frameNumber: frameState.frameNumber});\n        }\n      } else if (childTile) {\n        // if child tile is fetched and available\n        this.updateTile(childTile, frameState);\n      }\n    }\n  }\n\n  async _loadTile(nodeId, tileset) {\n    const {loader} = tileset;\n    const nodeUrl = tileset.getTileUrl(`${tileset.url}/nodes/${nodeId}`);\n    // load metadata\n    const options = {\n      i3s: {\n        ...tileset.fetchOptions,\n        isHeader: true,\n        loadContent: false\n      }\n    };\n    return await load(nodeUrl, loader, options);\n  }\n\n  _onTileLoad(header, tile, frameState) {\n    const basePath = this.options.basePath;\n    // after child tile is fetched\n    const childTile = new TileHeader(tile.tileset, header, tile, basePath);\n    tile.children.push(childTile);\n    this.updateTile(childTile, frameState);\n\n    // after tile fetcher, resume traversal if still in current update/traversal frame\n    if (this._frameNumber === frameState.frameNumber) {\n      this.executeTraversal(childTile, frameState);\n    }\n  }\n}\n"],"file":"i3s-tilset-traverser.js"}