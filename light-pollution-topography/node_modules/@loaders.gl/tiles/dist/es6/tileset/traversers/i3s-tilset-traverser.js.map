{"version":3,"sources":["../../../../src/tileset/traversers/i3s-tilset-traverser.js"],"names":["load","TilesetTraverser","lodJudge","TileHeader","I3STileManager","I3STilesetTraverser","constructor","options","_tileManager","shouldRefine","tile","frameState","_lodJudge","updateChildTiles","children","header","childTiles","tileset","child","childTile","find","t","id","request","_loadTile","cachedRequest","add","_onTileLoad","frameNumber","update","updateTile","nodeId","loader","nodeUrl","getTileUrl","url","i3s","fetchOptions","isHeader","loadContent","basePath","push","_frameNumber","executeTraversal"],"mappings":"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","sourcesContent":["import {load} from '@loaders.gl/core';\nimport TilesetTraverser from './tileset-traverser';\n\nimport {lodJudge} from '../helpers/i3s-lod';\nimport TileHeader from '../tile-3d';\nimport I3STileManager from './i3s-tile-manager';\n\nexport default class I3STilesetTraverser extends TilesetTraverser {\n  constructor(options) {\n    super(options);\n    this._tileManager = new I3STileManager();\n  }\n\n  shouldRefine(tile, frameState) {\n    // TODO refactor loaJudge\n    tile._lodJudge = lodJudge(tile, frameState);\n    return tile._lodJudge === 'DIG';\n  }\n\n  // eslint-disable-next-line complexity\n  updateChildTiles(tile, frameState) {\n    const children = tile.header.children || [];\n    // child which are already fetched and constructed as Tile3D instances\n    const childTiles = tile.children;\n    const tileset = tile.tileset;\n\n    for (const child of children) {\n      // if child tile is not requested or fetched\n      const childTile = childTiles && childTiles.find(t => t.id === child.id);\n      if (!childTile) {\n        const request = () => this._loadTile(child.id, tileset);\n        const cachedRequest = this._tileManager.find(child.id);\n        if (!cachedRequest) {\n          this._tileManager.add(\n            request,\n            child.id,\n            header => this._onTileLoad(header, tile, frameState),\n            {frameNumber: frameState.frameNumber}\n          );\n        } else {\n          // update frameNumber since it is still needed in current frame\n          this._tileManager.update(child.id, {frameNumber: frameState.frameNumber});\n        }\n      } else if (childTile) {\n        // if child tile is fetched and available\n        this.updateTile(childTile, frameState);\n      }\n    }\n  }\n\n  async _loadTile(nodeId, tileset) {\n    const {loader} = tileset;\n    const nodeUrl = tileset.getTileUrl(`${tileset.url}/nodes/${nodeId}`);\n    // load metadata\n    const options = {\n      i3s: {\n        ...tileset.fetchOptions,\n        isHeader: true,\n        loadContent: false\n      }\n    };\n    return await load(nodeUrl, loader, options);\n  }\n\n  _onTileLoad(header, tile, frameState) {\n    const basePath = this.options.basePath;\n    // after child tile is fetched\n    const childTile = new TileHeader(tile.tileset, header, tile, basePath);\n    tile.children.push(childTile);\n    this.updateTile(childTile, frameState);\n\n    // after tile fetcher, resume traversal if still in current update/traversal frame\n    if (this._frameNumber === frameState.frameNumber) {\n      this.executeTraversal(childTile, frameState);\n    }\n  }\n}\n"],"file":"i3s-tilset-traverser.js"}