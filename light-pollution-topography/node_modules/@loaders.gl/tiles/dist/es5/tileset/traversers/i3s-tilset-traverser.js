"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _core = require("@loaders.gl/core");

var _tilesetTraverser = _interopRequireDefault(require("./tileset-traverser"));

var _i3sLod = require("../helpers/i3s-lod");

var _tile3d = _interopRequireDefault(require("../tile-3d"));

var _i3sTileManager = _interopRequireDefault(require("./i3s-tile-manager"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var I3STilesetTraverser = function (_TilesetTraverser) {
  (0, _inherits2["default"])(I3STilesetTraverser, _TilesetTraverser);

  function I3STilesetTraverser(options) {
    var _this;

    (0, _classCallCheck2["default"])(this, I3STilesetTraverser);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(I3STilesetTraverser).call(this, options));
    _this._tileManager = new _i3sTileManager["default"]();
    return _this;
  }

  (0, _createClass2["default"])(I3STilesetTraverser, [{
    key: "shouldRefine",
    value: function shouldRefine(tile, frameState) {
      tile._lodJudge = (0, _i3sLod.lodJudge)(tile, frameState);
      return tile._lodJudge === 'DIG';
    }
  }, {
    key: "updateChildTiles",
    value: function updateChildTiles(tile, frameState) {
      var _this2 = this;

      var children = tile.header.children || [];
      var childTiles = tile.children;
      var tileset = tile.tileset;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        var _loop = function _loop() {
          var child = _step.value;
          var childTile = childTiles && childTiles.find(function (t) {
            return t.id === child.id;
          });

          if (!childTile) {
            var request = function request() {
              return _this2._loadTile(child.id, tileset);
            };

            var cachedRequest = _this2._tileManager.find(child.id);

            if (!cachedRequest) {
              _this2._tileManager.add(request, child.id, function (header) {
                return _this2._onTileLoad(header, tile, frameState);
              }, {
                frameNumber: frameState.frameNumber
              });
            } else {
              _this2._tileManager.update(child.id, {
                frameNumber: frameState.frameNumber
              });
            }
          } else if (childTile) {
            _this2.updateTile(childTile, frameState);
          }
        };

        for (var _iterator = children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          _loop();
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }, {
    key: "_loadTile",
    value: function () {
      var _loadTile2 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(nodeId, tileset) {
        var loader, nodeUrl, options;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                loader = tileset.loader;
                nodeUrl = tileset.getTileUrl("".concat(tileset.url, "/nodes/").concat(nodeId));
                options = {
                  i3s: _objectSpread({}, tileset.fetchOptions, {
                    isHeader: true,
                    loadContent: false
                  })
                };
                _context.next = 5;
                return (0, _core.load)(nodeUrl, loader, options);

              case 5:
                return _context.abrupt("return", _context.sent);

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function _loadTile(_x, _x2) {
        return _loadTile2.apply(this, arguments);
      }

      return _loadTile;
    }()
  }, {
    key: "_onTileLoad",
    value: function _onTileLoad(header, tile, frameState) {
      var basePath = this.options.basePath;
      var childTile = new _tile3d["default"](tile.tileset, header, tile, basePath);
      tile.children.push(childTile);
      this.updateTile(childTile, frameState);

      if (this._frameNumber === frameState.frameNumber) {
        this.executeTraversal(childTile, frameState);
      }
    }
  }]);
  return I3STilesetTraverser;
}(_tilesetTraverser["default"]);

exports["default"] = I3STilesetTraverser;
//# sourceMappingURL=i3s-tilset-traverser.js.map