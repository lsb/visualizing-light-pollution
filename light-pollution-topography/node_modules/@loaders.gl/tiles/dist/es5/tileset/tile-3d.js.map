{"version":3,"sources":["../../../src/tileset/tile-3d.js"],"names":["scratchVector","Vector3","defined","x","undefined","updatePriority","tile","isVisible","contentState","TILE_CONTENT_STATE","UNLOADED","Math","max","_priority","TileHeader","tileset","header","parentHeader","id","url","parent","refine","_getRefine","type","contentUrl","lodMetricType","lodMetricValue","boundingVolume","content","gpuMemoryUsageInBytes","children","depth","_cacheNode","_frameNumber","_initializeLodMetric","_initializeTransforms","_initializeBoundingVolumes","_initializeContent","_initializeRenderingState","_lodJudge","_expireDate","_expiredContent","Object","seal","frameState","useParentLodMetric","TILESET_TYPE","I3S","TILES3D","console","error","hasEmptyContent","expired","contentExpired","LOADING","_requestScheduler","scheduleRequest","cancelled","getTileUrl","startRequest","fetchOptions","loader","options","_isTileset","_initializeTileHeaders","path","dirname","READY","_onContentLoaded","FAILED","endRequest","destroy","frameNumber","parentTransform","computedTransform","modelMatrix","parentVisibilityPlaneMask","_visibilityPlaneMask","CullingVolume","MASK_INDETERMINATE","_updateTransform","_distanceToCamera","distanceToTile","_screenSpaceError","getScreenSpaceError","visibility","_visible","MASK_OUTSIDE","_inRequestVolume","insideViewerRequestVolume","cullingVolume","computeVisibilityWithPlaneMask","sqrt","distanceSquaredTo","camera","position","subVectors","center","direction","dot","viewerRequestVolume","_viewerRequestVolume","distanceToCamera","warn","tileHeader","transform","Matrix4","clone","multiplyRight","parentInitialTransform","_initialTransform","_contentBoundingVolume","_updateBoundingVolume","_tileset","_tile","hasTilesetContent","level","_shouldRefine","_centerZDepth","_stackLength","_selectionDepth","_touchedFrame","_visitedFrame","_selectedFrame","_requestedFrame","TILE_REFINEMENT","REPLACE","indexOf","traverser","disableSkipLevelOfDetail","didTransformChange","equals","contentReady","now","Date","lessThan","EXPIRED","length","Boolean","hasRenderContent","contentFailed","contentUnloaded","extras"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\nimport {Vector3, Matrix4} from '@math.gl/core';\nimport {CullingVolume} from '@math.gl/culling';\n\nimport {load} from '@loaders.gl/core';\nimport {assert, path} from '@loaders.gl/loader-utils';\nimport {TILE_REFINEMENT, TILE_CONTENT_STATE, TILESET_TYPE} from '../constants';\n\nimport {createBoundingVolume} from './helpers/bounding-volume';\nimport {getTiles3DScreenSpaceError} from './helpers/tiles-3d-lod';\nimport {getI3ScreenSize} from './helpers/i3s-lod';\n\nconst scratchVector = new Vector3();\n\nfunction defined(x) {\n  return x !== undefined && x !== null;\n}\n\nfunction updatePriority(tile) {\n  // Check if any reason to abort\n  if (!tile.isVisible) {\n    return -1;\n  }\n  if (tile.contentState === TILE_CONTENT_STATE.UNLOADED) {\n    return -1;\n  }\n\n  return Math.max(1e7 - tile._priority, 0) || 0;\n}\n\n// A Tile3DHeader represents a tile as Tileset3D. When a tile is first created, its content is not loaded;\n// the content is loaded on-demand when needed based on the view.\n// Do not construct this directly, instead access tiles through {@link Tileset3D#tileVisible}.\nexport default class TileHeader {\n  // eslint-disable-next-line max-statements\n  constructor(tileset, header, parentHeader) {\n    assert(typeof header === 'object');\n\n    // PUBLIC MEMBERS\n    // original tile data\n    this.header = header;\n    // The tileset containing this tile.\n    this.tileset = tileset;\n    this.id = header.id;\n    this.url = header.url;\n    // This tile's parent or `undefined` if this tile is the root.\n    this.parent = parentHeader;\n    this.refine = this._getRefine(header.refine);\n    this.type = header.type;\n    this.contentUrl = header.contentUrl;\n    // The error, in meters, introduced if this tile is rendered and its children are not.\n    this.lodMetricType = null;\n    this.lodMetricValue = null;\n    // Specifies the type of refine that is used when traversing this tile for rendering.\n    this.boundingVolume = null;\n    // The tile's content.  This represents the actual tile's payload,\n    // not the content's metadata in the tileset JSON file.\n    this.content = null;\n    this.contentState = TILE_CONTENT_STATE.UNLOADED;\n    this.gpuMemoryUsageInBytes = 0;\n    // The tile's children - an array of Tile3D objects.\n    this.children = [];\n\n    this.depth = 0;\n\n    // PRIVATE MEMBERS\n    this._cacheNode = null;\n    this._frameNumber = null;\n    this._cacheNode = null;\n\n    this._initializeLodMetric(header);\n    this._initializeTransforms(header);\n    this._initializeBoundingVolumes(header);\n    this._initializeContent(header);\n    this._initializeRenderingState(header);\n\n    // TODO i3s specific, needs to remove\n    this._lodJudge = null;\n\n    // TODO Cesium 3d tiles specific\n    this._expireDate = null;\n    this._expiredContent = null;\n\n    Object.seal(this);\n  }\n\n  destroy() {\n    this.header = null;\n  }\n\n  isDestroyed() {\n    return this.header === null;\n  }\n\n  get selected() {\n    return this._selectedFrame === this.tileset._frameNumber;\n  }\n\n  get isVisible() {\n    return this._visible;\n  }\n\n  get isVisibleAndInRequestVolume() {\n    return this._visible && this._inRequestVolume;\n  }\n\n  // Returns true if tile is not an empty tile and not an external tileset\n  get hasRenderContent() {\n    return !this.hasEmptyContent && !this.hasTilesetContent;\n  }\n\n  get hasChildren() {\n    return this.children.length > 0 || (this.header.children && this.header.children.length > 0);\n  }\n\n  // Determines if the tile's content is ready. This is automatically `true` for\n  // tile's with empty content.\n  get contentReady() {\n    return this.contentState === TILE_CONTENT_STATE.READY || this.hasEmptyContent;\n  }\n\n  // Determines if the tile has available content to render.  `true` if the tile's\n  // content is ready or if it has expired content this renders while new content loads; otherwise,\n  get contentAvailable() {\n    return Boolean(\n      (this.contentReady && this.hasRenderContent) || (this._expiredContent && !this.contentFailed)\n    );\n  }\n\n  // Returns true if tile has renderable content but it's unloaded\n  get hasUnloadedContent() {\n    return this.hasRenderContent && this.contentUnloaded;\n  }\n\n  // Determines if the tile's content has not be requested. `true` if tile's\n  // content has not be requested; otherwise, `false`.\n  get contentUnloaded() {\n    return this.contentState === TILE_CONTENT_STATE.UNLOADED;\n  }\n\n  // Determines if the tile's content is expired. `true` if tile's\n  // content is expired; otherwise, `false`.\n  get contentExpired() {\n    return this.contentState === TILE_CONTENT_STATE.EXPIRED;\n  }\n\n  // Determines if the tile's content failed to load.  `true` if the tile's\n  // content failed to load; otherwise, `false`.\n  get contentFailed() {\n    return this.contentState === TILE_CONTENT_STATE.FAILED;\n  }\n\n  // Get the tile's screen space error.\n  getScreenSpaceError(frameState, useParentLodMetric) {\n    switch (this.tileset.type) {\n      case TILESET_TYPE.I3S:\n        return getI3ScreenSize(this, frameState);\n      case TILESET_TYPE.TILES3D:\n        return getTiles3DScreenSpaceError(this, frameState, useParentLodMetric);\n      default:\n        // eslint-disable-next-line\n        console.error('Unsupported tileset type');\n        return null;\n    }\n  }\n\n  // Requests the tile's content.\n  // The request may not be made if the Request Scheduler can't prioritize it.\n  // eslint-disable-next-line max-statements\n  async loadContent() {\n    if (this.hasEmptyContent) {\n      return false;\n    }\n\n    if (this.content) {\n      return true;\n    }\n\n    const expired = this.contentExpired;\n\n    if (expired) {\n      this._expireDate = null;\n    }\n\n    this.contentState = TILE_CONTENT_STATE.LOADING;\n\n    const cancelled = !(await this.tileset._requestScheduler.scheduleRequest(this, updatePriority));\n\n    if (cancelled) {\n      this.contentState = TILE_CONTENT_STATE.UNLOADED;\n      return false;\n    }\n\n    try {\n      const contentUrl = this.tileset.getTileUrl(this.contentUrl);\n      this.tileset._requestScheduler.startRequest(this);\n      // The content can be a binary tile ot a JSON tileset\n      const fetchOptions = this.tileset.fetchOptions;\n      const loader = this.tileset.loader;\n      const options = {\n        ...fetchOptions,\n        [loader.id]: {\n          tile: this.header,\n          tileset: this.tileset.tileset\n        }\n      };\n\n      this.content = await load(contentUrl, loader, options);\n      if (this._isTileset()) {\n        // Add tile headers for the nested tilset's subtree\n        // Async update of the tree should be fine since there would never be edits to the same node\n        // TODO - we need to capture the child tileset's URL\n        this.tileset._initializeTileHeaders(this.content, this, path.dirname(this.contentUrl));\n      }\n\n      this.contentState = TILE_CONTENT_STATE.READY;\n      this._onContentLoaded();\n      return true;\n    } catch (error) {\n      // Tile is unloaded before the content finishes loading\n      this.contentState = TILE_CONTENT_STATE.FAILED;\n      throw error;\n    } finally {\n      this.tileset._requestScheduler.endRequest(this);\n    }\n  }\n\n  // Unloads the tile's content.\n  unloadContent() {\n    if (this.content && this.content.destroy) {\n      this.content.destroy();\n    }\n    this.content = null;\n    this.contentState = TILE_CONTENT_STATE.UNLOADED;\n    return true;\n  }\n\n  // Update the tile's visibility.\n  updateVisibility(frameState) {\n    if (this._frameNumber === frameState.frameNumber) {\n      // Return early if visibility has already been checked during the traversal.\n      // The visibility may have already been checked if the cullWithChildrenBounds optimization is used.\n      return;\n    }\n\n    const parent = this.parent;\n    const parentTransform = parent ? parent.computedTransform : this.tileset.modelMatrix;\n    const parentVisibilityPlaneMask = parent\n      ? parent._visibilityPlaneMask\n      : CullingVolume.MASK_INDETERMINATE;\n\n    this._updateTransform(parentTransform);\n    this._distanceToCamera = this.distanceToTile(frameState);\n    this._screenSpaceError = this.getScreenSpaceError(frameState, false);\n    this._visibilityPlaneMask = this.visibility(frameState, parentVisibilityPlaneMask); // Use parent's plane mask to speed up visibility test\n    this._visible = this._visibilityPlaneMask !== CullingVolume.MASK_OUTSIDE;\n    this._inRequestVolume = this.insideViewerRequestVolume(frameState);\n\n    this._priority = this.lodMetricValue;\n    this._frameNumber = frameState.frameNumber;\n  }\n\n  // Determines whether the tile's bounding volume intersects the culling volume.\n  // @param {FrameState} frameState The frame state.\n  // @param {Number} parentVisibilityPlaneMask The parent's plane mask to speed up the visibility check.\n  // @returns {Number} A plane mask as described above in {@link CullingVolume#computeVisibilityWithPlaneMask}.\n  visibility(frameState, parentVisibilityPlaneMask) {\n    const {cullingVolume} = frameState;\n    const {boundingVolume} = this;\n\n    // TODO Cesium specific - restore clippingPlanes\n    // const {clippingPlanes, clippingPlanesOriginMatrix} = tileset;\n    // if (clippingPlanes && clippingPlanes.enabled) {\n    //   const intersection = clippingPlanes.computeIntersectionWithBoundingVolume(\n    //     boundingVolume,\n    //     clippingPlanesOriginMatrix\n    //   );\n    //   this._isClipped = intersection !== Intersect.INSIDE;\n    //   if (intersection === Intersect.OUTSIDE) {\n    //     return CullingVolume.MASK_OUTSIDE;\n    //   }\n    // }\n\n    // return cullingVolume.computeVisibilityWithPlaneMask(boundingVolume, parentVisibilityPlaneMask);\n    return cullingVolume.computeVisibilityWithPlaneMask(boundingVolume, parentVisibilityPlaneMask);\n  }\n\n  // Assuming the tile's bounding volume intersects the culling volume, determines\n  // whether the tile's content's bounding volume intersects the culling volume.\n  // @param {FrameState} frameState The frame state.\n  // @returns {Intersect} The result of the intersection: the tile's content is completely outside, completely inside, or intersecting the culling volume.\n  contentVisibility(frameState) {\n    return true;\n\n    // TODO restore\n    /*\n    // Assumes the tile's bounding volume intersects the culling volume already, so\n    // just return Intersect.INSIDE if there is no content bounding volume.\n    if (!defined(this.contentBoundingVolume)) {\n      return Intersect.INSIDE;\n    }\n\n    if (this._visibilityPlaneMask === CullingVolume.MASK_INSIDE) {\n      // The tile's bounding volume is completely inside the culling volume so\n      // the content bounding volume must also be inside.\n      return Intersect.INSIDE;\n    }\n\n    // PERFORMANCE_IDEA: is it possible to burn less CPU on this test since we know the\n    // tile's (not the content's) bounding volume intersects the culling volume?\n    const cullingVolume = frameState.cullingVolume;\n    const boundingVolume = tile.contentBoundingVolume;\n\n    const tileset = this.tileset;\n    const clippingPlanes = tileset.clippingPlanes;\n    if (defined(clippingPlanes) && clippingPlanes.enabled) {\n      const intersection = clippingPlanes.computeIntersectionWithBoundingVolume(\n        boundingVolume,\n        tileset.clippingPlanesOriginMatrix\n      );\n      this._isClipped = intersection !== Intersect.INSIDE;\n      if (intersection === Intersect.OUTSIDE) {\n        return Intersect.OUTSIDE;\n      }\n    }\n\n    return cullingVolume.computeVisibility(boundingVolume);\n    */\n  }\n\n  // Computes the (potentially approximate) distance from the closest point of the tile's bounding volume to the camera.\n  // @param {FrameState} frameState The frame state.\n  // @returns {Number} The distance, in meters, or zero if the camera is inside the bounding volume.\n  distanceToTile(frameState) {\n    const boundingVolume = this.boundingVolume;\n    return Math.sqrt(Math.max(boundingVolume.distanceSquaredTo(frameState.camera.position), 0));\n  }\n\n  // Computes the tile's camera-space z-depth.\n  // @param {FrameState} frameState The frame state.\n  // @returns {Number} The distance, in meters.\n  cameraSpaceZDepth({camera}) {\n    const boundingVolume = this.boundingVolume; // Gets the underlying OrientedBoundingBox or BoundingSphere\n    scratchVector.subVectors(boundingVolume.center, camera.position);\n    return camera.direction.dot(scratchVector);\n  }\n\n  /**\n   * Checks if the camera is inside the viewer request volume.\n   * @param {FrameState} frameState The frame state.\n   * @returns {Boolean} Whether the camera is inside the volume.\n   */\n  insideViewerRequestVolume(frameState) {\n    const viewerRequestVolume = this._viewerRequestVolume;\n    return !viewerRequestVolume || viewerRequestVolume.distanceToCamera(frameState) === 0.0;\n  }\n\n  _initializeLodMetric(header) {\n    if ('lodMetricType' in header) {\n      this.lodMetricType = header.lodMetricType;\n    } else {\n      this.lodMetricType = (this.parent && this.parent.lodMetricType) || this.tileset.lodMetricType;\n      // eslint-disable-next-line\n      console.warn(`3D Tile: Required prop lodMetricType is undefined. Using parent lodMetricType`);\n    }\n\n    // This is used to compute screen space error, i.e., the error measured in pixels.\n    if ('lodMetricValue' in header) {\n      this.lodMetricValue = header.lodMetricValue;\n    } else {\n      this.lodMetricValue =\n        (this.parent && this.parent.lodMetricValue) || this.tileset.lodMetricValue;\n      // eslint-disable-next-line\n      console.warn(\n        `3D Tile: Required prop lodMetricValue is undefined. Using parent lodMetricValue`\n      );\n    }\n  }\n\n  _initializeTransforms(tileHeader) {\n    // The local transform of this tile.\n    this.transform = tileHeader.transform ? new Matrix4(tileHeader.transform) : new Matrix4();\n\n    const parent = this.parent;\n    const tileset = this.tileset;\n\n    const parentTransform =\n      parent && parent.computedTransform\n        ? parent.computedTransform.clone()\n        : tileset.modelMatrix.clone();\n    this.computedTransform = new Matrix4(parentTransform).multiplyRight(this.transform);\n\n    const parentInitialTransform =\n      parent && parent._initialTransform ? parent._initialTransform.clone() : new Matrix4();\n    this._initialTransform = new Matrix4(parentInitialTransform).multiplyRight(this.transform);\n  }\n\n  _initializeBoundingVolumes(tileHeader) {\n    this._contentBoundingVolume = null;\n    this._viewerRequestVolume = null;\n\n    this._updateBoundingVolume(tileHeader);\n  }\n\n  _initializeContent(tileHeader) {\n    // Empty tile by default\n    this.content = {_tileset: this.tileset, _tile: this};\n    this.hasEmptyContent = true;\n    this.contentState = TILE_CONTENT_STATE.UNLOADED;\n\n    // When `true`, the tile's content points to an external tileset.\n    // This is `false` until the tile's content is loaded.\n    this.hasTilesetContent = false;\n\n    if (tileHeader.contentUrl) {\n      this.content = null;\n      this.hasEmptyContent = false;\n    }\n  }\n\n  // TODO - remove anything not related to basic visibility detection\n  _initializeRenderingState(header) {\n    this.depth = header.level;\n    this._shouldRefine = false;\n\n    // Members this are updated every frame for tree traversal and rendering optimizations:\n    this._distanceToCamera = 0;\n    this._centerZDepth = 0;\n    this._screenSpaceError = 0;\n    this._visibilityPlaneMask = CullingVolume.MASK_INDETERMINATE;\n    this._visible = false;\n    this._inRequestVolume = false;\n\n    this._stackLength = 0;\n    this._selectionDepth = 0;\n\n    this._frameNumber = 0;\n    this._touchedFrame = 0;\n    this._visitedFrame = 0;\n    this._selectedFrame = 0;\n    this._requestedFrame = 0;\n\n    this._priority = 0.0;\n  }\n\n  _getRefine(refine) {\n    // Inherit from parent tile if omitted.\n    return refine || (this.parent && this.parent.refine) || TILE_REFINEMENT.REPLACE;\n  }\n\n  _isTileset() {\n    return this.contentUrl.indexOf('.json') !== -1;\n  }\n\n  _onContentLoaded() {\n    // Vector and Geometry tile rendering do not support the skip LOD optimization.\n    switch (this.content && this.content.type) {\n      case 'vctr':\n      case 'geom':\n        this.tileset.traverser.disableSkipLevelOfDetail = true;\n        break;\n      default:\n    }\n\n    // The content may be tileset json\n    if (this._isTileset()) {\n      this.hasTilesetContent = true;\n    }\n  }\n\n  _updateBoundingVolume(header) {\n    // Update the bounding volumes\n    this.boundingVolume = createBoundingVolume(\n      header.boundingVolume,\n      this.computedTransform,\n      this.boundingVolume\n    );\n\n    const content = header.content;\n    if (!content) {\n      return;\n    }\n\n    // TODO Cesium specific\n    // Non-leaf tiles may have a content bounding-volume, which is a tight-fit bounding volume\n    // around only the features in the tile. This box is useful for culling for rendering,\n    // but not for culling for traversing the tree since it does not guarantee spatial coherence, i.e.,\n    // since it only bounds features in the tile, not the entire tile, children may be\n    // outside of this box.\n    if (content.boundingVolume) {\n      this._contentBoundingVolume = createBoundingVolume(\n        content.boundingVolume,\n        this.computedTransform,\n        this._contentBoundingVolume\n      );\n    }\n    if (header.viewerRequestVolume) {\n      this._viewerRequestVolume = createBoundingVolume(\n        header.viewerRequestVolume,\n        this.computedTransform,\n        this._viewerRequestVolume\n      );\n    }\n  }\n\n  // Update the tile's transform. The transform is applied to the tile's bounding volumes.\n  _updateTransform(parentTransform = new Matrix4()) {\n    const computedTransform = parentTransform.clone().multiplyRight(this.transform);\n    const didTransformChange = !computedTransform.equals(this.computedTransform);\n\n    if (!didTransformChange) {\n      return;\n    }\n\n    this.computedTransform = computedTransform;\n\n    this._updateBoundingVolume(this.header);\n  }\n\n  // TODO Cesium specific\n  // Update whether the tile has expired.\n  updateExpiration() {\n    if (defined(this._expireDate) && this.contentReady && !this.hasEmptyContent) {\n      const now = Date.now();\n      if (Date.lessThan(this._expireDate, now)) {\n        this.contentState = TILE_CONTENT_STATE.EXPIRED;\n        this._expiredContent = this.content;\n      }\n    }\n  }\n\n  get extras() {\n    return this.header.extras;\n  }\n}\n"],"file":"tile-3d.js"}