{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { COORDINATE_SYSTEM, PROJECTION_MODE } from '../../lib/constants';\nimport project from '../project/project';\nimport { Vector3, Matrix4 } from 'math.gl';\nimport memoize from '../../utils/memoize';\nimport { pixelsToWorld } from '@math.gl/web-mercator';\nvar vs = \"\\nconst int max_lights = 2;\\nuniform mat4 shadow_uViewProjectionMatrices[max_lights];\\nuniform vec4 shadow_uProjectCenters[max_lights];\\nuniform bool shadow_uDrawShadowMap;\\nuniform bool shadow_uUseShadowMap;\\nuniform int shadow_uLightId;\\nuniform float shadow_uLightCount;\\n\\nvarying vec3 shadow_vPosition[max_lights];\\n\\nvec4 shadow_setVertexPosition(vec4 position_commonspace) {\\n  if (shadow_uDrawShadowMap) {\\n    return project_common_position_to_clipspace(position_commonspace, shadow_uViewProjectionMatrices[shadow_uLightId], shadow_uProjectCenters[shadow_uLightId]);\\n  }\\n  if (shadow_uUseShadowMap) {\\n    for (int i = 0; i < max_lights; i++) {\\n      if(i < int(shadow_uLightCount)) {\\n        vec4 shadowMap_position = project_common_position_to_clipspace(position_commonspace, shadow_uViewProjectionMatrices[i], shadow_uProjectCenters[i]);\\n        shadow_vPosition[i] = (shadowMap_position.xyz / shadowMap_position.w + 1.0) / 2.0;\\n      }\\n    }\\n  }\\n  return gl_Position;\\n}\\n\";\nvar fs = \"\\nconst int max_lights = 2;\\nuniform bool shadow_uDrawShadowMap;\\nuniform bool shadow_uUseShadowMap;\\nuniform sampler2D shadow_uShadowMap0;\\nuniform sampler2D shadow_uShadowMap1;\\nuniform vec4 shadow_uColor;\\nuniform float shadow_uLightCount;\\n\\nvarying vec3 shadow_vPosition[max_lights];\\n\\nconst vec4 bitPackShift = vec4(1.0, 255.0, 65025.0, 16581375.0);\\nconst vec4 bitUnpackShift = 1.0 / bitPackShift;\\nconst vec4 bitMask = vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0,  0.0);\\n\\nfloat shadow_getShadowWeight(vec3 position, sampler2D shadowMap) {\\n  vec4 rgbaDepth = texture2D(shadowMap, position.xy);\\n\\n  float z = dot(rgbaDepth, bitUnpackShift);\\n  return smoothstep(0.001, 0.01, position.z - z);\\n}\\n\\nvec4 shadow_filterShadowColor(vec4 color) {\\n  if (shadow_uDrawShadowMap) {\\n    vec4 rgbaDepth = fract(gl_FragCoord.z * bitPackShift);\\n    rgbaDepth -= rgbaDepth.gbaa * bitMask;\\n    return rgbaDepth;\\n  }\\n  if (shadow_uUseShadowMap) {\\n    float shadowAlpha = 0.0;\\n    shadowAlpha += shadow_getShadowWeight(shadow_vPosition[0], shadow_uShadowMap0);\\n    if(shadow_uLightCount > 1.0) {\\n      shadowAlpha += shadow_getShadowWeight(shadow_vPosition[1], shadow_uShadowMap1);\\n    }\\n    shadowAlpha *= shadow_uColor.a / shadow_uLightCount;\\n    float blendedAlpha = shadowAlpha + color.a * (1.0 - shadowAlpha);\\n\\n    return vec4(\\n      mix(color.rgb, shadow_uColor.rgb, shadowAlpha / blendedAlpha),\\n      blendedAlpha\\n    );\\n  }\\n  return color;\\n}\\n\";\nvar getMemoizedViewportCenterPosition = memoize(getViewportCenterPosition);\nvar getMemoizedViewProjectionMatrices = memoize(getViewProjectionMatrices);\nvar DEFAULT_SHADOW_COLOR = [0, 0, 0, 1.0];\nvar VECTOR_TO_POINT_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0];\n\nfunction screenToCommonSpace(xyz, pixelUnprojectionMatrix) {\n  var _xyz = _slicedToArray(xyz, 3),\n      x = _xyz[0],\n      y = _xyz[1],\n      z = _xyz[2];\n\n  var coord = pixelsToWorld([x, y, z], pixelUnprojectionMatrix);\n\n  if (Number.isFinite(z)) {\n    return coord;\n  }\n\n  return [coord[0], coord[1], 0];\n}\n\nfunction getViewportCenterPosition(_ref) {\n  var viewport = _ref.viewport,\n      center = _ref.center;\n  return new Matrix4(viewport.viewProjectionMatrix).invert().transform(center);\n}\n\nfunction getViewProjectionMatrices(_ref2) {\n  var viewport = _ref2.viewport,\n      shadowMatrices = _ref2.shadowMatrices;\n  var projectionMatrices = [];\n  var pixelUnprojectionMatrix = viewport.pixelUnprojectionMatrix;\n  var farZ = viewport.isGeospatial ? undefined : 1;\n  var corners = [[0, 0, farZ], [viewport.width, 0, farZ], [0, viewport.height, farZ], [viewport.width, viewport.height, farZ], [0, 0, -1], [viewport.width, 0, -1], [0, viewport.height, -1], [viewport.width, viewport.height, -1]].map(function (pixel) {\n    return screenToCommonSpace(pixel, pixelUnprojectionMatrix);\n  });\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    var _loop = function _loop() {\n      var shadowMatrix = _step.value;\n      var viewMatrix = shadowMatrix.clone().translate(new Vector3(viewport.center).negate());\n      var positions = corners.map(function (corner) {\n        return viewMatrix.transform(corner);\n      });\n      var projectionMatrix = new Matrix4().ortho({\n        left: Math.min.apply(Math, _toConsumableArray(positions.map(function (position) {\n          return position[0];\n        }))),\n        right: Math.max.apply(Math, _toConsumableArray(positions.map(function (position) {\n          return position[0];\n        }))),\n        bottom: Math.min.apply(Math, _toConsumableArray(positions.map(function (position) {\n          return position[1];\n        }))),\n        top: Math.max.apply(Math, _toConsumableArray(positions.map(function (position) {\n          return position[1];\n        }))),\n        near: Math.min.apply(Math, _toConsumableArray(positions.map(function (position) {\n          return -position[2];\n        }))),\n        far: Math.max.apply(Math, _toConsumableArray(positions.map(function (position) {\n          return -position[2];\n        })))\n      });\n      projectionMatrices.push(projectionMatrix.multiplyRight(shadowMatrix));\n    };\n\n    for (var _iterator = shadowMatrices[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      _loop();\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n        _iterator[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return projectionMatrices;\n}\n\nfunction createShadowUniforms() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var uniforms = {\n    shadow_uDrawShadowMap: Boolean(opts.drawToShadowMap),\n    shadow_uUseShadowMap: opts.shadowMaps ? opts.shadowMaps.length > 0 : false,\n    shadow_uColor: opts.shadowColor || DEFAULT_SHADOW_COLOR,\n    shadow_uLightId: opts.shadowLightId || 0,\n    shadow_uLightCount: opts.shadowMatrices.length\n  };\n  var center = getMemoizedViewportCenterPosition({\n    viewport: opts.viewport,\n    center: context.project_uCenter\n  });\n  var projectCenters = [];\n  var viewProjectionMatrices = getMemoizedViewProjectionMatrices({\n    shadowMatrices: opts.shadowMatrices,\n    viewport: opts.viewport\n  }).slice();\n\n  for (var i = 0; i < opts.shadowMatrices.length; i++) {\n    var viewProjectionMatrix = viewProjectionMatrices[i];\n    var viewProjectionMatrixCentered = viewProjectionMatrix.clone().translate(new Vector3(opts.viewport.center).negate());\n\n    if (context.project_uCoordinateSystem === COORDINATE_SYSTEM.LNGLAT && context.project_uProjectionMode === PROJECTION_MODE.WEB_MERCATOR) {\n      viewProjectionMatrices[i] = viewProjectionMatrixCentered;\n      projectCenters[i] = center;\n    } else {\n      viewProjectionMatrices[i] = viewProjectionMatrix.clone().multiplyRight(VECTOR_TO_POINT_MATRIX);\n      projectCenters[i] = viewProjectionMatrixCentered.transform(center);\n    }\n  }\n\n  for (var _i = 0; _i < viewProjectionMatrices.length; _i++) {\n    uniforms[\"shadow_uViewProjectionMatrices[\".concat(_i, \"]\")] = viewProjectionMatrices[_i];\n    uniforms[\"shadow_uProjectCenters[\".concat(_i, \"]\")] = projectCenters[_i];\n\n    if (opts.shadowMaps && opts.shadowMaps.length > 0) {\n      uniforms[\"shadow_uShadowMap\".concat(_i)] = opts.shadowMaps[_i];\n    } else {\n      uniforms[\"shadow_uShadowMap\".concat(_i)] = opts.dummyShadowMap;\n    }\n  }\n\n  return uniforms;\n}\n\nexport default {\n  name: 'shadow',\n  dependencies: [project],\n  vs: vs,\n  fs: fs,\n  inject: {\n    'vs:DECKGL_FILTER_GL_POSITION': \"\\n    position = shadow_setVertexPosition(geometry.position);\\n    \",\n    'fs:DECKGL_FILTER_COLOR': \"\\n    color = shadow_filterShadowColor(color);\\n    \"\n  },\n  getUniforms: function getUniforms() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (opts.drawToShadowMap || opts.shadowMaps && opts.shadowMaps.length > 0) {\n      var shadowUniforms = {};\n      var _opts$shadowEnabled = opts.shadowEnabled,\n          shadowEnabled = _opts$shadowEnabled === void 0 ? true : _opts$shadowEnabled;\n\n      if (shadowEnabled && opts.shadowMatrices && opts.shadowMatrices.length > 0) {\n        Object.assign(shadowUniforms, createShadowUniforms(opts, context));\n      } else {\n        Object.assign(shadowUniforms, {\n          shadow_uDrawShadowMap: false,\n          shadow_uUseShadowMap: false\n        });\n      }\n\n      return shadowUniforms;\n    }\n\n    return {};\n  }\n};","map":{"version":3,"sources":["../../../../src/shaderlib/shadow/shadow.js"],"names":["vs","fs","getMemoizedViewportCenterPosition","memoize","getMemoizedViewProjectionMatrices","DEFAULT_SHADOW_COLOR","VECTOR_TO_POINT_MATRIX","x","y","z","coord","pixelsToWorld","Number","viewport","center","shadowMatrices","projectionMatrices","pixelUnprojectionMatrix","farZ","corners","screenToCommonSpace","shadowMatrix","viewMatrix","positions","projectionMatrix","left","Math","position","right","bottom","top","near","far","opts","context","uniforms","shadow_uDrawShadowMap","Boolean","shadow_uUseShadowMap","shadow_uColor","shadow_uLightId","shadow_uLightCount","length","project_uCenter","projectCenters","viewProjectionMatrices","i","viewProjectionMatrix","viewProjectionMatrixCentered","COORDINATE_SYSTEM","PROJECTION_MODE","name","dependencies","inject","getUniforms","shadowUniforms","shadowEnabled","Object","createShadowUniforms"],"mappings":"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","sourcesContent":["// Copyright (c) 2015-2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {COORDINATE_SYSTEM, PROJECTION_MODE} from '../../lib/constants';\nimport project from '../project/project';\nimport {Vector3, Matrix4} from 'math.gl';\nimport memoize from '../../utils/memoize';\nimport {pixelsToWorld} from '@math.gl/web-mercator';\n\nconst vs = `\nconst int max_lights = 2;\nuniform mat4 shadow_uViewProjectionMatrices[max_lights];\nuniform vec4 shadow_uProjectCenters[max_lights];\nuniform bool shadow_uDrawShadowMap;\nuniform bool shadow_uUseShadowMap;\nuniform int shadow_uLightId;\nuniform float shadow_uLightCount;\n\nvarying vec3 shadow_vPosition[max_lights];\n\nvec4 shadow_setVertexPosition(vec4 position_commonspace) {\n  if (shadow_uDrawShadowMap) {\n    return project_common_position_to_clipspace(position_commonspace, shadow_uViewProjectionMatrices[shadow_uLightId], shadow_uProjectCenters[shadow_uLightId]);\n  }\n  if (shadow_uUseShadowMap) {\n    for (int i = 0; i < max_lights; i++) {\n      if(i < int(shadow_uLightCount)) {\n        vec4 shadowMap_position = project_common_position_to_clipspace(position_commonspace, shadow_uViewProjectionMatrices[i], shadow_uProjectCenters[i]);\n        shadow_vPosition[i] = (shadowMap_position.xyz / shadowMap_position.w + 1.0) / 2.0;\n      }\n    }\n  }\n  return gl_Position;\n}\n`;\n\nconst fs = `\nconst int max_lights = 2;\nuniform bool shadow_uDrawShadowMap;\nuniform bool shadow_uUseShadowMap;\nuniform sampler2D shadow_uShadowMap0;\nuniform sampler2D shadow_uShadowMap1;\nuniform vec4 shadow_uColor;\nuniform float shadow_uLightCount;\n\nvarying vec3 shadow_vPosition[max_lights];\n\nconst vec4 bitPackShift = vec4(1.0, 255.0, 65025.0, 16581375.0);\nconst vec4 bitUnpackShift = 1.0 / bitPackShift;\nconst vec4 bitMask = vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0,  0.0);\n\nfloat shadow_getShadowWeight(vec3 position, sampler2D shadowMap) {\n  vec4 rgbaDepth = texture2D(shadowMap, position.xy);\n\n  float z = dot(rgbaDepth, bitUnpackShift);\n  return smoothstep(0.001, 0.01, position.z - z);\n}\n\nvec4 shadow_filterShadowColor(vec4 color) {\n  if (shadow_uDrawShadowMap) {\n    vec4 rgbaDepth = fract(gl_FragCoord.z * bitPackShift);\n    rgbaDepth -= rgbaDepth.gbaa * bitMask;\n    return rgbaDepth;\n  }\n  if (shadow_uUseShadowMap) {\n    float shadowAlpha = 0.0;\n    shadowAlpha += shadow_getShadowWeight(shadow_vPosition[0], shadow_uShadowMap0);\n    if(shadow_uLightCount > 1.0) {\n      shadowAlpha += shadow_getShadowWeight(shadow_vPosition[1], shadow_uShadowMap1);\n    }\n    shadowAlpha *= shadow_uColor.a / shadow_uLightCount;\n    float blendedAlpha = shadowAlpha + color.a * (1.0 - shadowAlpha);\n\n    return vec4(\n      mix(color.rgb, shadow_uColor.rgb, shadowAlpha / blendedAlpha),\n      blendedAlpha\n    );\n  }\n  return color;\n}\n`;\n\nconst getMemoizedViewportCenterPosition = memoize(getViewportCenterPosition);\nconst getMemoizedViewProjectionMatrices = memoize(getViewProjectionMatrices);\n\nconst DEFAULT_SHADOW_COLOR = [0, 0, 0, 1.0];\nconst VECTOR_TO_POINT_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0];\n\nfunction screenToCommonSpace(xyz, pixelUnprojectionMatrix) {\n  const [x, y, z] = xyz;\n  const coord = pixelsToWorld([x, y, z], pixelUnprojectionMatrix);\n\n  if (Number.isFinite(z)) {\n    return coord;\n  }\n  return [coord[0], coord[1], 0];\n}\n\nfunction getViewportCenterPosition({viewport, center}) {\n  return new Matrix4(viewport.viewProjectionMatrix).invert().transform(center);\n}\n\nfunction getViewProjectionMatrices({viewport, shadowMatrices}) {\n  const projectionMatrices = [];\n  const pixelUnprojectionMatrix = viewport.pixelUnprojectionMatrix;\n  const farZ = viewport.isGeospatial ? undefined : 1;\n  const corners = [\n    [0, 0, farZ], // top left ground\n    [viewport.width, 0, farZ], // top right ground\n    [0, viewport.height, farZ], // bottom left ground\n    [viewport.width, viewport.height, farZ], // bottom right ground\n    [0, 0, -1], // top left near\n    [viewport.width, 0, -1], // top right near\n    [0, viewport.height, -1], // bottom left near\n    [viewport.width, viewport.height, -1] // bottom right near\n  ].map(pixel => screenToCommonSpace(pixel, pixelUnprojectionMatrix));\n\n  for (const shadowMatrix of shadowMatrices) {\n    const viewMatrix = shadowMatrix.clone().translate(new Vector3(viewport.center).negate());\n    const positions = corners.map(corner => viewMatrix.transform(corner));\n    const projectionMatrix = new Matrix4().ortho({\n      left: Math.min(...positions.map(position => position[0])),\n      right: Math.max(...positions.map(position => position[0])),\n      bottom: Math.min(...positions.map(position => position[1])),\n      top: Math.max(...positions.map(position => position[1])),\n      near: Math.min(...positions.map(position => -position[2])),\n      far: Math.max(...positions.map(position => -position[2]))\n    });\n    projectionMatrices.push(projectionMatrix.multiplyRight(shadowMatrix));\n  }\n  return projectionMatrices;\n}\n\nfunction createShadowUniforms(opts = {}, context = {}) {\n  const uniforms = {\n    shadow_uDrawShadowMap: Boolean(opts.drawToShadowMap),\n    shadow_uUseShadowMap: opts.shadowMaps ? opts.shadowMaps.length > 0 : false,\n    shadow_uColor: opts.shadowColor || DEFAULT_SHADOW_COLOR,\n    shadow_uLightId: opts.shadowLightId || 0,\n    shadow_uLightCount: opts.shadowMatrices.length\n  };\n\n  const center = getMemoizedViewportCenterPosition({\n    viewport: opts.viewport,\n    center: context.project_uCenter\n  });\n\n  const projectCenters = [];\n  const viewProjectionMatrices = getMemoizedViewProjectionMatrices({\n    shadowMatrices: opts.shadowMatrices,\n    viewport: opts.viewport\n  }).slice();\n\n  for (let i = 0; i < opts.shadowMatrices.length; i++) {\n    const viewProjectionMatrix = viewProjectionMatrices[i];\n    const viewProjectionMatrixCentered = viewProjectionMatrix\n      .clone()\n      .translate(new Vector3(opts.viewport.center).negate());\n\n    if (\n      context.project_uCoordinateSystem === COORDINATE_SYSTEM.LNGLAT &&\n      context.project_uProjectionMode === PROJECTION_MODE.WEB_MERCATOR\n    ) {\n      viewProjectionMatrices[i] = viewProjectionMatrixCentered;\n      projectCenters[i] = center;\n    } else {\n      viewProjectionMatrices[i] = viewProjectionMatrix\n        .clone()\n        .multiplyRight(VECTOR_TO_POINT_MATRIX);\n      projectCenters[i] = viewProjectionMatrixCentered.transform(center);\n    }\n  }\n\n  for (let i = 0; i < viewProjectionMatrices.length; i++) {\n    uniforms[`shadow_uViewProjectionMatrices[${i}]`] = viewProjectionMatrices[i];\n    uniforms[`shadow_uProjectCenters[${i}]`] = projectCenters[i];\n\n    if (opts.shadowMaps && opts.shadowMaps.length > 0) {\n      uniforms[`shadow_uShadowMap${i}`] = opts.shadowMaps[i];\n    } else {\n      uniforms[`shadow_uShadowMap${i}`] = opts.dummyShadowMap;\n    }\n  }\n  return uniforms;\n}\n\nexport default {\n  name: 'shadow',\n  dependencies: [project],\n  vs,\n  fs,\n  inject: {\n    'vs:DECKGL_FILTER_GL_POSITION': `\n    position = shadow_setVertexPosition(geometry.position);\n    `,\n    'fs:DECKGL_FILTER_COLOR': `\n    color = shadow_filterShadowColor(color);\n    `\n  },\n  getUniforms: (opts = {}, context = {}) => {\n    if (opts.drawToShadowMap || (opts.shadowMaps && opts.shadowMaps.length > 0)) {\n      const shadowUniforms = {};\n      const {shadowEnabled = true} = opts;\n      if (shadowEnabled && opts.shadowMatrices && opts.shadowMatrices.length > 0) {\n        Object.assign(shadowUniforms, createShadowUniforms(opts, context));\n      } else {\n        Object.assign(shadowUniforms, {\n          shadow_uDrawShadowMap: false,\n          shadow_uUseShadowMap: false\n        });\n      }\n\n      return shadowUniforms;\n    }\n    return {};\n  }\n};\n"]},"metadata":{},"sourceType":"module"}