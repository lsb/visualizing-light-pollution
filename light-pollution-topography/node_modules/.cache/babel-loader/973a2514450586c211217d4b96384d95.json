{"ast":null,"code":"import _classCallCheck from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _createSuper from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _inherits from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { vectorFromValuesWithType } from './index';\nimport { Dictionary } from '../type';\n/** @ignore */\n\nexport var DictionaryVector = /*#__PURE__*/function (_BaseVector) {\n  _inherits(DictionaryVector, _BaseVector);\n\n  var _super = _createSuper(DictionaryVector);\n\n  function DictionaryVector(data) {\n    var _this;\n\n    _classCallCheck(this, DictionaryVector);\n\n    _this = _super.call(this, data);\n    _this.indices = Vector.new(data.clone(_this.type.indices));\n    return _this;\n  }\n  /** @nocollapse */\n\n\n  _createClass(DictionaryVector, [{\n    key: \"reverseLookup\",\n    value: function reverseLookup(value) {\n      return this.dictionary.indexOf(value);\n    }\n  }, {\n    key: \"getKey\",\n    value: function getKey(idx) {\n      return this.indices.get(idx);\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue(key) {\n      return this.dictionary.get(key);\n    }\n  }, {\n    key: \"setKey\",\n    value: function setKey(idx, key) {\n      return this.indices.set(idx, key);\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(key, value) {\n      return this.dictionary.set(key, value);\n    }\n  }, {\n    key: \"dictionary\",\n    get: function get() {\n      return this.data.dictionary;\n    }\n  }], [{\n    key: \"from\",\n    value: function from() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      if (args.length === 3) {\n        var values = args[0],\n            indices = args[1],\n            keys = args[2];\n        var type = new Dictionary(values.type, indices, null, null);\n        return Vector.new(Data.Dictionary(type, 0, keys.length, 0, null, keys, values));\n      }\n\n      return vectorFromValuesWithType(function () {\n        return args[0].type;\n      }, args[0]);\n    }\n  }]);\n\n  return DictionaryVector;\n}(BaseVector);\nDictionaryVector.prototype.indices = null;","map":{"version":3,"sources":["vector/dictionary.ts"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAS,IAAT,QAAqB,SAArB;AACA,SAAS,MAAT,QAAuB,WAAvB;AACA,SAAS,UAAT,QAA2B,QAA3B;AAGA,SAAS,wBAAT,QAAyC,SAAzC;AAEA,SAAmB,UAAnB,QAA4C,SAA5C;AAKA;;AACA,WAAa,gBAAb;AAAA;;AAAA;;AAcI,4BAAY,IAAZ,EAA2C;AAAA;;AAAA;;AACvC,8BAAM,IAAN;AACA,UAAK,OAAL,GAAe,MAAM,CAAC,GAAP,CAAW,IAAI,CAAC,KAAL,CAAW,MAAK,IAAL,CAAU,OAArB,CAAX,CAAf;AAFuC;AAG1C;AAbD;;;AAJJ;AAAA;AAAA,kCAsByB,KAtBzB,EAsBiC;AAAI,aAAO,KAAK,UAAL,CAAgB,OAAhB,CAAwB,KAAxB,CAAP;AAAwC;AAtB7E;AAAA;AAAA,2BAuBkB,GAvBlB,EAuB6B;AAA2B,aAAO,KAAK,OAAL,CAAa,GAAb,CAAiB,GAAjB,CAAP;AAA+B;AAvBvF;AAAA;AAAA,6BAwBoB,GAxBpB,EAwB+B;AAAwB,aAAO,KAAK,UAAL,CAAgB,GAAhB,CAAoB,GAApB,CAAP;AAAkC;AAxBzF;AAAA;AAAA,2BAyBkB,GAzBlB,EAyB+B,GAzB/B,EAyByD;AAAI,aAAO,KAAK,OAAL,CAAa,GAAb,CAAiB,GAAjB,EAAsB,GAAtB,CAAP;AAAoC;AAzBjG;AAAA;AAAA,6BA0BoB,GA1BpB,EA0BiC,KA1BjC,EA0B0D;AAAI,aAAO,KAAK,UAAL,CAAgB,GAAhB,CAAoB,GAApB,EAAyB,KAAzB,CAAP;AAAyC;AA1BvG;AAAA;AAAA,wBAqByB;AAAK,aAAmB,KAAK,IAAL,CAAU,UAA7B;AAA0C;AArBxE;AAAA;AAAA,2BAK2F;AAAA,wCAAX,IAAW;AAAX,QAAA,IAAW;AAAA;;AACnF,UAAI,IAAI,CAAC,MAAL,KAAgB,CAApB,EAAuB;AAAA,YACZ,MADY,GACa,IADb;AAAA,YACJ,OADI,GACa,IADb;AAAA,YACK,IADL,GACa,IADb;AAEnB,YAAM,IAAI,GAAG,IAAI,UAAJ,CAAe,MAAM,CAAC,IAAtB,EAA4B,OAA5B,EAAqC,IAArC,EAA2C,IAA3C,CAAb;AACA,eAAO,MAAM,CAAC,GAAP,CAAW,IAAI,CAAC,UAAL,CAAgB,IAAhB,EAAsB,CAAtB,EAAyB,IAAI,CAAC,MAA9B,EAAsC,CAAtC,EAAyC,IAAzC,EAA+C,IAA/C,EAAqD,MAArD,CAAX,CAAP;AACH;;AACD,aAAO,wBAAwB,CAAC;AAAA,eAAM,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAd;AAAA,OAAD,EAAqB,IAAI,CAAC,CAAD,CAAzB,CAA/B;AACH;AAZL;;AAAA;AAAA,EAA4F,UAA5F;AA6BC,gBAAgB,CAAC,SAAjB,CAAmC,OAAnC,GAA6C,IAA7C","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { VectorType as V } from '../interfaces';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { DataType, Dictionary, TKeys } from '../type';\n\n/** @ignore */\ntype FromArgs<T extends DataType = any, TKey extends TKeys = TKeys> = [Vector<T>, TKey, ArrayLike<number> | TKey['TArray']];\n\n/** @ignore */\nexport class DictionaryVector<T extends DataType = any, TKey extends TKeys = TKeys> extends BaseVector<Dictionary<T, TKey>> {\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(...args: FromArgs<T, TKey>): V<Dictionary<T, TKey>>;\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(input: VectorBuilderOptions<Dictionary<T, TKey>>): Vector<Dictionary<T, TKey>>;\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(input: VectorBuilderOptionsAsync<Dictionary<T, TKey>>): Promise<Vector<Dictionary<T, TKey>>>;\n    /** @nocollapse */\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(...args: any[]) {\n        if (args.length === 3) {\n            const [values, indices, keys] = args as FromArgs<T, TKey>;\n            const type = new Dictionary(values.type, indices, null, null);\n            return Vector.new(Data.Dictionary(type, 0, keys.length, 0, null, keys, values));\n        }\n        return vectorFromValuesWithType(() => args[0].type, args[0]);\n    }\n\n    constructor(data: Data<Dictionary<T, TKey>>) {\n        super(data);\n        this.indices = Vector.new(data.clone(this.type.indices));\n    }\n\n    public readonly indices: V<TKey>;\n\n    public get dictionary() { return <Vector<T>> this.data.dictionary; }\n    public reverseLookup(value: T) { return this.dictionary.indexOf(value); }\n    public getKey(idx: number): TKey['TValue'] | null { return this.indices.get(idx); }\n    public getValue(key: number): T['TValue'] | null { return this.dictionary.get(key); }\n    public setKey(idx: number, key: TKey['TValue'] | null) { return this.indices.set(idx, key); }\n    public setValue(key: number, value: T['TValue'] | null) { return this.dictionary.set(key, value); }\n}\n\n(DictionaryVector.prototype as any).indices = null;\n"]},"metadata":{},"sourceType":"module"}