{"ast":null,"code":"import assert from '../utils/assert';\nimport { global } from '../utils/globals';\nvar _encodeImageNode = global._encodeImageNode;\nexport function encodeImage(image, type) {\n  if (_encodeImageNode) {\n    return _encodeImageNode(image, type);\n  }\n\n  if (image instanceof HTMLCanvasElement) {\n    var _canvas = image;\n    return _canvas.toDataURL(type);\n  }\n\n  assert(image instanceof Image, 'getImageData accepts image or canvas');\n  var canvas = document.createElement('canvas');\n  canvas.width = image.width;\n  canvas.height = image.height;\n  canvas.getContext('2d').drawImage(image, 0, 0);\n  var data = canvas.toDataURL(type || 'png').replace(/^data:image\\/(png|jpg);base64,/, '');\n  return Promise.resolve(data);\n}","map":{"version":3,"sources":["../../../../src/lib/encoders/encode-image.js"],"names":["_encodeImageNode","global","image","canvas","assert","document","data","type","Promise"],"mappings":"AAGA,OAAA,MAAA,MAAA,iBAAA;AACA,SAAA,MAAA,QAAA,kBAAA;IAGOA,gB,GAAoBC,M,CAApBD,gB;AASP,OAAO,SAAA,WAAA,CAAA,KAAA,EAAA,IAAA,EAAkC;AACvC,MAAA,gBAAA,EAAsB;AAEpB,WAAOA,gBAAgB,CAAA,KAAA,EAAvB,IAAuB,CAAvB;AACD;;AAED,MAAIE,KAAK,YAAT,iBAAA,EAAwC;AACtC,QAAMC,OAAM,GAAZ,KAAA;AACA,WAAOA,OAAM,CAANA,SAAAA,CAAP,IAAOA,CAAP;AACD;;AAEDC,EAAAA,MAAM,CAACF,KAAK,YAAN,KAAA,EAANE,sCAAM,CAANA;AACA,MAAMD,MAAM,GAAGE,QAAQ,CAARA,aAAAA,CAAf,QAAeA,CAAf;AACAF,EAAAA,MAAM,CAANA,KAAAA,GAAeD,KAAK,CAApBC,KAAAA;AACAA,EAAAA,MAAM,CAANA,MAAAA,GAAgBD,KAAK,CAArBC,MAAAA;AACAA,EAAAA,MAAM,CAANA,UAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,KAAAA,EAAAA,CAAAA,EAAAA,CAAAA;AAGA,MAAMG,IAAI,GAAGH,MAAM,CAANA,SAAAA,CAAiBI,IAAI,IAArBJ,KAAAA,EAAAA,OAAAA,CAAAA,gCAAAA,EAAb,EAAaA,CAAb;AACA,SAAOK,OAAO,CAAPA,OAAAA,CAAP,IAAOA,CAAP;AACD","sourcesContent":["// Image loading/saving for browser\n/* global document, HTMLCanvasElement, Image */\n\nimport assert from '../utils/assert';\nimport {global} from '../utils/globals';\n\n// @ts-ignore TS2339: Property does not exist on type\nconst {_encodeImageNode} = global;\n\n// Returns data bytes representing a compressed image in PNG or JPG format,\n// This data can be saved using file system (f) methods or\n// used in a request.\n// @param {Image}  image - Image or Canvas\n// @param {String} opt.type='png' - png, jpg or image/png, image/jpg are valid\n// @param {String} opt.dataURI= - Whether to include a data URI header\n\nexport function encodeImage(image, type) {\n  if (_encodeImageNode) {\n    // @ts-ignore TS2339: Property does not exist on type\n    return _encodeImageNode(image, type);\n  }\n\n  if (image instanceof HTMLCanvasElement) {\n    const canvas = image;\n    return canvas.toDataURL(type);\n  }\n\n  assert(image instanceof Image, 'getImageData accepts image or canvas');\n  const canvas = document.createElement('canvas');\n  canvas.width = image.width;\n  canvas.height = image.height;\n  canvas.getContext('2d').drawImage(image, 0, 0);\n\n  // Get raw image data\n  const data = canvas.toDataURL(type || 'png').replace(/^data:image\\/(png|jpg);base64,/, '');\n  return Promise.resolve(data);\n}\n"]},"metadata":{},"sourceType":"module"}