{"ast":null,"code":"import { padArray } from '../../utils/array-utils';\nvar DEFAULT_TRANSITION_SETTINGS = {\n  interpolation: {\n    duration: 0,\n    easing: function easing(t) {\n      return t;\n    }\n  },\n  spring: {\n    stiffness: 0.05,\n    damping: 0.5\n  }\n};\nexport function normalizeTransitionSettings(userSettings, layerSettings) {\n  if (!userSettings) {\n    return null;\n  }\n\n  if (Number.isFinite(userSettings)) {\n    userSettings = {\n      duration: userSettings\n    };\n  }\n\n  userSettings.type = userSettings.type || 'interpolation';\n  return Object.assign({}, DEFAULT_TRANSITION_SETTINGS[userSettings.type], layerSettings, userSettings);\n}\nexport function getSourceBufferAttribute(gl, attribute) {\n  var buffer = attribute.getBuffer();\n\n  if (buffer) {\n    return [attribute.getBuffer(), {\n      divisor: 0,\n      size: attribute.size,\n      normalized: attribute.settings.normalized\n    }];\n  }\n\n  return attribute.value;\n}\nexport function getAttributeTypeFromSize(size) {\n  switch (size) {\n    case 1:\n      return 'float';\n\n    case 2:\n      return 'vec2';\n\n    case 3:\n      return 'vec3';\n\n    case 4:\n      return 'vec4';\n\n    default:\n      throw new Error(\"No defined attribute type for size \\\"\".concat(size, \"\\\"\"));\n  }\n}\nexport function cycleBuffers(buffers) {\n  buffers.push(buffers.shift());\n}\nexport function getAttributeBufferLength(attribute, numInstances) {\n  var doublePrecision = attribute.doublePrecision,\n      settings = attribute.settings,\n      value = attribute.value,\n      size = attribute.size;\n  var multiplier = doublePrecision ? 2 : 1;\n  return (settings.noAlloc ? value.length : numInstances * size) * multiplier;\n}\nexport function padBuffer(_ref) {\n  var buffer = _ref.buffer,\n      numInstances = _ref.numInstances,\n      attribute = _ref.attribute,\n      fromLength = _ref.fromLength,\n      fromStartIndices = _ref.fromStartIndices,\n      _ref$getData = _ref.getData,\n      getData = _ref$getData === void 0 ? function (x) {\n    return x;\n  } : _ref$getData;\n  var precisionMultiplier = attribute.doublePrecision ? 2 : 1;\n  var size = attribute.size * precisionMultiplier;\n  var byteOffset = attribute.byteOffset;\n  var toStartIndices = attribute.startIndices;\n  var hasStartIndices = fromStartIndices && toStartIndices;\n  var toLength = getAttributeBufferLength(attribute, numInstances);\n  var isConstant = attribute.state.constant;\n\n  if (!hasStartIndices && fromLength >= toLength) {\n    return;\n  }\n\n  var toData = isConstant ? attribute.value : attribute.getBuffer().getData({\n    srcByteOffset: byteOffset\n  });\n\n  if (attribute.settings.normalized && !isConstant) {\n    var getter = getData;\n\n    getData = function getData(value, chunk) {\n      return attribute._normalizeConstant(getter(value, chunk));\n    };\n  }\n\n  var getMissingData = isConstant ? function (i, chunk) {\n    return getData(toData, chunk);\n  } : function (i, chunk) {\n    return getData(toData.subarray(i, i + size), chunk);\n  };\n  var source = buffer.getData({\n    length: fromLength\n  });\n  var data = new Float32Array(toLength);\n  padArray({\n    source: source,\n    target: data,\n    sourceStartIndices: fromStartIndices,\n    targetStartIndices: toStartIndices,\n    size: size,\n    getData: getMissingData\n  });\n\n  if (buffer.byteLength < data.byteLength + byteOffset) {\n    buffer.reallocate(data.byteLength + byteOffset);\n  }\n\n  buffer.subData({\n    data: data,\n    offset: byteOffset\n  });\n}","map":{"version":3,"sources":["../../../../src/lib/attribute/attribute-transition-utils.js"],"names":["DEFAULT_TRANSITION_SETTINGS","interpolation","duration","easing","spring","stiffness","damping","Number","userSettings","Object","buffer","attribute","divisor","size","normalized","buffers","doublePrecision","settings","value","multiplier","numInstances","fromLength","fromStartIndices","getData","precisionMultiplier","byteOffset","toStartIndices","hasStartIndices","toLength","getAttributeBufferLength","isConstant","toData","srcByteOffset","getter","getMissingData","i","source","length","data","padArray","target","sourceStartIndices","targetStartIndices","offset"],"mappings":"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","sourcesContent":["import {padArray} from '../../utils/array-utils';\n\nconst DEFAULT_TRANSITION_SETTINGS = {\n  interpolation: {\n    duration: 0,\n    easing: t => t\n  },\n  spring: {\n    stiffness: 0.05,\n    damping: 0.5\n  }\n};\n\nexport function normalizeTransitionSettings(userSettings, layerSettings) {\n  if (!userSettings) {\n    return null;\n  }\n  if (Number.isFinite(userSettings)) {\n    userSettings = {duration: userSettings};\n  }\n  userSettings.type = userSettings.type || 'interpolation';\n  return Object.assign(\n    {},\n    DEFAULT_TRANSITION_SETTINGS[userSettings.type],\n    layerSettings,\n    userSettings\n  );\n}\n\n// NOTE: NOT COPYING OVER OFFSET OR STRIDE HERE BECAUSE:\n// (1) WE DON'T SUPPORT INTERLEAVED BUFFERS FOR TRANSITIONS\n// (2) BUFFERS WITH OFFSETS ALWAYS CONTAIN VALUES OF THE SAME SIZE\n// (3) THE OPERATIONS IN THE SHADER ARE PER-COMPONENT (addition and scaling)\nexport function getSourceBufferAttribute(gl, attribute) {\n  // The Attribute we pass to Transform as a sourceBuffer must have {divisor: 0}\n  // so we create a copy of the attribute (with divisor=0) to use when running\n  // transform feedback\n  const buffer = attribute.getBuffer();\n  if (buffer) {\n    return [\n      attribute.getBuffer(),\n      {\n        divisor: 0,\n        size: attribute.size,\n        normalized: attribute.settings.normalized\n      }\n    ];\n  }\n  // constant\n  // don't pass normalized here because the `value` from a normalized attribute is\n  // already normalized\n  return attribute.value;\n}\n\nexport function getAttributeTypeFromSize(size) {\n  switch (size) {\n    case 1:\n      return 'float';\n    case 2:\n      return 'vec2';\n    case 3:\n      return 'vec3';\n    case 4:\n      return 'vec4';\n    default:\n      throw new Error(`No defined attribute type for size \"${size}\"`);\n  }\n}\n\nexport function cycleBuffers(buffers) {\n  buffers.push(buffers.shift());\n}\n\nexport function getAttributeBufferLength(attribute, numInstances) {\n  const {doublePrecision, settings, value, size} = attribute;\n  const multiplier = doublePrecision ? 2 : 1;\n  return (settings.noAlloc ? value.length : numInstances * size) * multiplier;\n}\n\n// This helper is used when transitioning attributes from a set of values in one buffer layout\n// to a set of values in a different buffer layout. (Buffer layouts are used when attribute values\n// within a buffer should be grouped for drawElements, like the Polygon layer.) For example, a\n// buffer layout of [3, 4] might have data [A1, A2, A3, B1, B2, B3, B4]. If it needs to transition\n// to a buffer layout of [4, 2], it should produce a buffer, using the transition setting's `enter`\n// function, that looks like this: [A1, A2, A3, A4 (user `enter` fn), B1, B2, 0]. Note: the final\n// 0 in this buffer is because we never shrink buffers, only grow them, for performance reasons.\nexport function padBuffer({\n  buffer,\n  numInstances,\n  attribute,\n  fromLength,\n  fromStartIndices,\n  getData = x => x\n}) {\n  // TODO: move the precisionMultiplier logic to the attribute when retrieving\n  // its `size` and `elementOffset`?\n  const precisionMultiplier = attribute.doublePrecision ? 2 : 1;\n  const size = attribute.size * precisionMultiplier;\n  const byteOffset = attribute.byteOffset;\n  const toStartIndices = attribute.startIndices;\n  const hasStartIndices = fromStartIndices && toStartIndices;\n  const toLength = getAttributeBufferLength(attribute, numInstances);\n  const isConstant = attribute.state.constant;\n\n  // check if buffer needs to be padded\n  if (!hasStartIndices && fromLength >= toLength) {\n    return;\n  }\n\n  const toData = isConstant\n    ? attribute.value\n    : attribute.getBuffer().getData({srcByteOffset: byteOffset});\n  if (attribute.settings.normalized && !isConstant) {\n    const getter = getData;\n    getData = (value, chunk) => attribute._normalizeConstant(getter(value, chunk));\n  }\n\n  const getMissingData = isConstant\n    ? (i, chunk) => getData(toData, chunk)\n    : (i, chunk) => getData(toData.subarray(i, i + size), chunk);\n\n  const source = buffer.getData({length: fromLength});\n  const data = new Float32Array(toLength);\n  padArray({\n    source,\n    target: data,\n    sourceStartIndices: fromStartIndices,\n    targetStartIndices: toStartIndices,\n    size,\n    getData: getMissingData\n  });\n\n  // TODO: support offset in buffer.setData?\n  if (buffer.byteLength < data.byteLength + byteOffset) {\n    buffer.reallocate(data.byteLength + byteOffset);\n  }\n  buffer.subData({data, offset: byteOffset});\n}\n"]},"metadata":{},"sourceType":"module"}