{"ast":null,"code":"var SVG_DATA_URL_PATTERN = /^data:image\\/svg\\+xml/;\nvar SVG_URL_PATTERN = /\\.svg((\\?|#).*)?$/;\nexport function getBlob(arrayBuffer, url) {\n  if (isSVG(url)) {\n    console.warn('SVG cannot be parsed to imagebitmap');\n    return new Blob([new Uint8Array(arrayBuffer)], {\n      type: 'image/svg+xml'\n    });\n  }\n\n  return new Blob([new Uint8Array(arrayBuffer)]);\n}\nexport function getBlobOrDataUrl(arrayBuffer, url) {\n  if (isSVG(url)) {\n    var textDecoder = new TextDecoder();\n    var xmlText = textDecoder.decode(arrayBuffer);\n    var src = \"data:image/svg+xml;base64,\".concat(btoa(xmlText));\n    return src;\n  }\n\n  return getBlob(arrayBuffer, url);\n}\n\nfunction isSVG(url) {\n  return url && (SVG_DATA_URL_PATTERN.test(url) || SVG_URL_PATTERN.test(url));\n}","map":{"version":3,"sources":["../../../../src/lib/parsers/get-blob.js"],"names":["SVG_DATA_URL_PATTERN","SVG_URL_PATTERN","isSVG","console","type","textDecoder","xmlText","src","btoa","getBlob","url"],"mappings":"AAEA,IAAMA,oBAAoB,GAA1B,uBAAA;AACA,IAAMC,eAAe,GAArB,mBAAA;AAEA,OAAO,SAAA,OAAA,CAAA,WAAA,EAAA,GAAA,EAAmC;AACxC,MAAIC,KAAK,CAAT,GAAS,CAAT,EAAgB;AAGdC,IAAAA,OAAO,CAAPA,IAAAA,CAAAA,qCAAAA;AACA,WAAO,IAAA,IAAA,CAAS,CAAC,IAAA,UAAA,CAAV,WAAU,CAAD,CAAT,EAAwC;AAACC,MAAAA,IAAI,EAAE;AAAP,KAAxC,CAAP;AACD;;AAED,SAAO,IAAA,IAAA,CAAS,CAAC,IAAA,UAAA,CAAjB,WAAiB,CAAD,CAAT,CAAP;AACD;AAED,OAAO,SAAA,gBAAA,CAAA,WAAA,EAAA,GAAA,EAA4C;AACjD,MAAIF,KAAK,CAAT,GAAS,CAAT,EAAgB;AAEd,QAAMG,WAAW,GAAG,IAApB,WAAoB,EAApB;AACA,QAAMC,OAAO,GAAGD,WAAW,CAAXA,MAAAA,CAAhB,WAAgBA,CAAhB;AAMA,QAAME,GAAG,GAAA,6BAAA,MAAA,CAAgCC,IAAI,CAA7C,OAA6C,CAApC,CAAT;AACA,WAAA,GAAA;AACD;;AACD,SAAOC,OAAO,CAAA,WAAA,EAAd,GAAc,CAAd;AACD;;AAED,SAAA,KAAA,CAAA,GAAA,EAAoB;AAClB,SAAOC,GAAG,KAAKV,oBAAoB,CAApBA,IAAAA,CAAAA,GAAAA,KAAkCC,eAAe,CAAfA,IAAAA,CAAjD,GAAiDA,CAAvC,CAAV;AACD","sourcesContent":["/* global Blob, TextDecoder, btoa */ // encodeURLComponent,\n\nconst SVG_DATA_URL_PATTERN = /^data:image\\/svg\\+xml/;\nconst SVG_URL_PATTERN = /\\.svg((\\?|#).*)?$/;\n\nexport function getBlob(arrayBuffer, url) {\n  if (isSVG(url)) {\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=606319\n    // eslint-disable-next-line\n    console.warn('SVG cannot be parsed to imagebitmap');\n    return new Blob([new Uint8Array(arrayBuffer)], {type: 'image/svg+xml'});\n  }\n  // TODO - how to determine mime type? Param? Sniff here?\n  return new Blob([new Uint8Array(arrayBuffer)]); // MIME type not needed?\n}\n\nexport function getBlobOrDataUrl(arrayBuffer, url) {\n  if (isSVG(url)) {\n    // Prepare a properly tagged data URL, and load using normal mechanism\n    const textDecoder = new TextDecoder();\n    const xmlText = textDecoder.decode(arrayBuffer);\n    // TODO Escape in browser to support e.g. Chinese characters\n    // if (typeof unescape === 'function' && typeof encodeURLComponent === 'function') {\n    //   xmlText = unescape(encodeURLComponent(xmlText));\n    // }\n    // base64 encoding is safer. utf-8 fails in some browsers\n    const src = `data:image/svg+xml;base64,${btoa(xmlText)}`;\n    return src;\n  }\n  return getBlob(arrayBuffer, url);\n}\n\nfunction isSVG(url) {\n  return url && (SVG_DATA_URL_PATTERN.test(url) || SVG_URL_PATTERN.test(url));\n}\n"]},"metadata":{},"sourceType":"module"}