{"ast":null,"code":"import encodeGLBSync from './lib/encode-glb';\nexport default {\n  name: 'GLB',\n  extensions: ['glb'],\n  mimeType: 'model/gltf-binary',\n  encodeSync: encodeSync,\n  binary: true,\n  options: {\n    glb: {}\n  }\n};\n\nfunction encodeSync(glb, options) {\n  var _options$byteOffset = options.byteOffset,\n      byteOffset = _options$byteOffset === void 0 ? 0 : _options$byteOffset;\n  var byteLength = encodeGLBSync(glb, null, byteOffset, options);\n  var arrayBuffer = new ArrayBuffer(byteLength);\n  var dataView = new DataView(arrayBuffer);\n  encodeGLBSync(glb, dataView, byteOffset, options);\n  return arrayBuffer;\n}","map":{"version":3,"sources":["../../src/glb-writer.js"],"names":["name","extensions","mimeType","encodeSync","binary","options","glb","byteOffset","byteLength","encodeGLBSync","arrayBuffer","dataView"],"mappings":"AAAA,OAAA,aAAA,MAAA,kBAAA;AAEA,eAAe;AACbA,EAAAA,IAAI,EADS,KAAA;AAEbC,EAAAA,UAAU,EAAE,CAFC,KAED,CAFC;AAGbC,EAAAA,QAAQ,EAHK,mBAAA;AAIbC,EAAAA,UAAU,EAJG,UAAA;AAKbC,EAAAA,MAAM,EALO,IAAA;AAMbC,EAAAA,OAAO,EAAE;AACPC,IAAAA,GAAG,EAAE;AADE;AANI,CAAf;;AAWA,SAAA,UAAA,CAAA,GAAA,EAAA,OAAA,EAAkC;AAAA,MAAA,mBAAA,GACPD,OADO,CAAA,UAAA;AAAA,MACzBE,UADyB,GAAA,mBAAA,KAAA,KAAA,CAAA,GAAA,CAAA,GAAA,mBAAA;AAIhC,MAAMC,UAAU,GAAGC,aAAa,CAAA,GAAA,EAAA,IAAA,EAAA,UAAA,EAAhC,OAAgC,CAAhC;AACA,MAAMC,WAAW,GAAG,IAAA,WAAA,CAApB,UAAoB,CAApB;AAGA,MAAMC,QAAQ,GAAG,IAAA,QAAA,CAAjB,WAAiB,CAAjB;AACAF,EAAAA,aAAa,CAAA,GAAA,EAAA,QAAA,EAAA,UAAA,EAAbA,OAAa,CAAbA;AAEA,SAAA,WAAA;AACD","sourcesContent":["import encodeGLBSync from './lib/encode-glb';\n\nexport default {\n  name: 'GLB',\n  extensions: ['glb'],\n  mimeType: 'model/gltf-binary',\n  encodeSync,\n  binary: true,\n  options: {\n    glb: {}\n  }\n};\n\nfunction encodeSync(glb, options) {\n  const {byteOffset = 0} = options;\n\n  // Calculate length and allocate buffer\n  const byteLength = encodeGLBSync(glb, null, byteOffset, options);\n  const arrayBuffer = new ArrayBuffer(byteLength);\n\n  // Encode into buffer\n  const dataView = new DataView(arrayBuffer);\n  encodeGLBSync(glb, dataView, byteOffset, options);\n\n  return arrayBuffer;\n}\n"]},"metadata":{},"sourceType":"module"}