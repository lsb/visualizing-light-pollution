{"ast":null,"code":"import ShaderModule from './shader-module';\nimport { assert } from '../utils';\nexport function resolveModules(modules) {\n  return getShaderDependencies(instantiateModules(modules));\n}\n\nfunction getShaderDependencies(modules) {\n  var moduleMap = {};\n  var moduleDepth = {};\n  getDependencyGraph({\n    modules: modules,\n    level: 0,\n    moduleMap: moduleMap,\n    moduleDepth: moduleDepth\n  });\n  return Object.keys(moduleDepth).sort(function (a, b) {\n    return moduleDepth[b] - moduleDepth[a];\n  }).map(function (name) {\n    return moduleMap[name];\n  });\n}\n\nfunction getDependencyGraph(_ref) {\n  var modules = _ref.modules,\n      level = _ref.level,\n      moduleMap = _ref.moduleMap,\n      moduleDepth = _ref.moduleDepth;\n\n  if (level >= 5) {\n    throw new Error('Possible loop in shader dependency graph');\n  }\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = modules[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var module = _step.value;\n      moduleMap[module.name] = module;\n\n      if (moduleDepth[module.name] === undefined || moduleDepth[module.name] < level) {\n        moduleDepth[module.name] = level;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n        _iterator[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = modules[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var _module = _step2.value;\n\n      if (_module.dependencies) {\n        getDependencyGraph({\n          modules: _module.dependencies,\n          level: level + 1,\n          moduleMap: moduleMap,\n          moduleDepth: moduleDepth\n        });\n      }\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n        _iterator2[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n}\n\nfunction instantiateModules(modules, seen) {\n  return modules.map(function (module) {\n    if (module instanceof ShaderModule) {\n      return module;\n    }\n\n    assert(typeof module !== 'string', \"Shader module use by name is deprecated. Import shader module '\".concat(module, \"' and use it directly.\"));\n    assert(module.name, 'shader module has no name');\n    module = new ShaderModule(module);\n    module.dependencies = instantiateModules(module.dependencies);\n    return module;\n  });\n}\n\nexport var TEST_EXPORTS = {\n  getShaderDependencies: getShaderDependencies,\n  getDependencyGraph: getDependencyGraph\n};","map":{"version":3,"sources":["../../../src/lib/resolve-modules.js"],"names":["getShaderDependencies","instantiateModules","moduleMap","moduleDepth","getDependencyGraph","modules","level","module","assert","TEST_EXPORTS"],"mappings":"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","sourcesContent":["import ShaderModule from './shader-module';\nimport {assert} from '../utils';\n\n// Instantiate shader modules and any dependencies resolve dependencies\nexport function resolveModules(modules) {\n  return getShaderDependencies(instantiateModules(modules));\n}\n\n/**\n * Takes a list of shader module names and returns a new list of\n * shader module names that includes all dependencies, sorted so\n * that modules that are dependencies of other modules come first.\n *\n * If the shader glsl code from the returned modules is concatenated\n * in the reverse order, it is guaranteed that all functions be resolved and\n * that all function and variable definitions come before use.\n *\n * @param {String[]} modules - Array of modules (inline modules or module names)\n * @return {String[]} - Array of modules\n */\nfunction getShaderDependencies(modules) {\n  const moduleMap = {};\n  const moduleDepth = {};\n  getDependencyGraph({modules, level: 0, moduleMap, moduleDepth});\n\n  // Return a reverse sort so that dependencies come before the modules that use them\n  return Object.keys(moduleDepth)\n    .sort((a, b) => moduleDepth[b] - moduleDepth[a])\n    .map(name => moduleMap[name]);\n}\n\n/**\n * Recursively checks module dpendencies to calculate dependency\n * level of each module.\n *\n * @param {String[]} modules - Array of modules\n * @param {Number} level - Current level\n * @return {result} - Map of module name to its level\n */\n// Adds another level of dependencies to the result map\nfunction getDependencyGraph({modules, level, moduleMap, moduleDepth}) {\n  if (level >= 5) {\n    throw new Error('Possible loop in shader dependency graph');\n  }\n\n  // Update level on all current modules\n  for (const module of modules) {\n    moduleMap[module.name] = module;\n    if (moduleDepth[module.name] === undefined || moduleDepth[module.name] < level) {\n      moduleDepth[module.name] = level;\n    }\n  }\n\n  // Recurse\n  for (const module of modules) {\n    if (module.dependencies) {\n      getDependencyGraph({modules: module.dependencies, level: level + 1, moduleMap, moduleDepth});\n    }\n  }\n}\n\nfunction instantiateModules(modules, seen) {\n  return modules.map(module => {\n    if (module instanceof ShaderModule) {\n      return module;\n    }\n\n    assert(\n      typeof module !== 'string',\n      `Shader module use by name is deprecated. Import shader module '${module}' and use it directly.`\n    );\n    assert(module.name, 'shader module has no name');\n\n    module = new ShaderModule(module);\n    module.dependencies = instantiateModules(module.dependencies);\n\n    return module;\n  });\n}\n\nexport const TEST_EXPORTS = {\n  getShaderDependencies,\n  getDependencyGraph\n};\n"]},"metadata":{},"sourceType":"module"}