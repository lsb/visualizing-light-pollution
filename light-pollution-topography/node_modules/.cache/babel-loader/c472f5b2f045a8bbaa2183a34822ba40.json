{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { normalizeTransitionSettings } from './attribute/attribute-transition-utils';\nimport CPUInterpolationTransition from '../transitions/cpu-interpolation-transition';\nimport CPUSpringTransition from '../transitions/cpu-spring-transition';\nimport log from '../utils/log';\nvar TRANSITION_TYPES = {\n  interpolation: CPUInterpolationTransition,\n  spring: CPUSpringTransition\n};\n\nvar UniformTransitionManager = function () {\n  function UniformTransitionManager(timeline) {\n    _classCallCheck(this, UniformTransitionManager);\n\n    this.transitions = new Map();\n    this.timeline = timeline;\n  }\n\n  _createClass(UniformTransitionManager, [{\n    key: \"add\",\n    value: function add(key, fromValue, toValue, settings) {\n      var transitions = this.transitions;\n\n      if (transitions.has(key)) {\n        var _transition = transitions.get(key);\n\n        fromValue = _transition.value;\n        this.remove(key);\n      }\n\n      settings = normalizeTransitionSettings(settings);\n\n      if (!settings) {\n        return;\n      }\n\n      var TransitionType = TRANSITION_TYPES[settings.type];\n\n      if (!TransitionType) {\n        log.error(\"unsupported transition type '\".concat(settings.type, \"'\"))();\n        return;\n      }\n\n      var transition = new TransitionType(this.timeline);\n      transition.start(_objectSpread({}, settings, {\n        fromValue: fromValue,\n        toValue: toValue\n      }));\n      transitions.set(key, transition);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(key) {\n      var transitions = this.transitions;\n\n      if (transitions.has(key)) {\n        transitions.get(key).cancel();\n        transitions[\"delete\"](key);\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var propsInTransition = {};\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.transitions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              key = _step$value[0],\n              transition = _step$value[1];\n\n          transition.update();\n          propsInTransition[key] = transition.value;\n\n          if (!transition.inProgress) {\n            this.remove(key);\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return propsInTransition;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this.transitions.keys()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var key = _step2.value;\n          this.remove(key);\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n            _iterator2[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"active\",\n    get: function get() {\n      return this.transitions.size > 0;\n    }\n  }]);\n\n  return UniformTransitionManager;\n}();\n\nexport { UniformTransitionManager as default };","map":{"version":3,"sources":["../../../src/lib/uniform-transition-manager.js"],"names":["TRANSITION_TYPES","interpolation","spring","CPUSpringTransition","UniformTransitionManager","key","fromValue","toValue","settings","transitions","transition","normalizeTransitionSettings","TransitionType","log","propsInTransition"],"mappings":"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","sourcesContent":["import {normalizeTransitionSettings} from './attribute/attribute-transition-utils';\nimport CPUInterpolationTransition from '../transitions/cpu-interpolation-transition';\nimport CPUSpringTransition from '../transitions/cpu-spring-transition';\nimport log from '../utils/log';\n\nconst TRANSITION_TYPES = {\n  interpolation: CPUInterpolationTransition,\n  spring: CPUSpringTransition\n};\n\nexport default class UniformTransitionManager {\n  constructor(timeline) {\n    this.transitions = new Map();\n    this.timeline = timeline;\n  }\n\n  get active() {\n    return this.transitions.size > 0;\n  }\n\n  add(key, fromValue, toValue, settings) {\n    const {transitions} = this;\n    if (transitions.has(key)) {\n      const transition = transitions.get(key);\n      // start from interrupted position\n      fromValue = transition.value;\n      this.remove(key);\n    }\n\n    settings = normalizeTransitionSettings(settings);\n    if (!settings) {\n      return;\n    }\n\n    const TransitionType = TRANSITION_TYPES[settings.type];\n    if (!TransitionType) {\n      log.error(`unsupported transition type '${settings.type}'`)();\n      return;\n    }\n    const transition = new TransitionType(this.timeline);\n    transition.start({\n      ...settings,\n      fromValue,\n      toValue\n    });\n    transitions.set(key, transition);\n  }\n\n  remove(key) {\n    const {transitions} = this;\n    if (transitions.has(key)) {\n      transitions.get(key).cancel();\n      transitions.delete(key);\n    }\n  }\n\n  update() {\n    const propsInTransition = {};\n\n    for (const [key, transition] of this.transitions) {\n      transition.update();\n      propsInTransition[key] = transition.value;\n      if (!transition.inProgress) {\n        // transition ended\n        this.remove(key);\n      }\n    }\n\n    return propsInTransition;\n  }\n\n  clear() {\n    for (const key of this.transitions.keys()) {\n      this.remove(key);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}