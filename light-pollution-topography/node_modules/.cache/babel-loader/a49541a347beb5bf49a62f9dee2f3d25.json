{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport DoublyLinkedList from '../utils/doubly-linked-list';\n\nfunction defined(x) {\n  return x !== undefined && x !== null;\n}\n\nvar TilesetCache = function () {\n  function TilesetCache() {\n    _classCallCheck(this, TilesetCache);\n\n    this._list = new DoublyLinkedList();\n    this._sentinel = this._list.add('sentinel');\n    this._trimTiles = false;\n  }\n\n  _createClass(TilesetCache, [{\n    key: \"reset\",\n    value: function reset() {\n      this._list.splice(this._list.tail, this._sentinel);\n    }\n  }, {\n    key: \"touch\",\n    value: function touch(tile) {\n      var node = tile._cacheNode;\n\n      if (defined(node)) {\n        this._list.splice(this._sentinel, node);\n      }\n    }\n  }, {\n    key: \"add\",\n    value: function add(tileset, tile, addCallback) {\n      if (!defined(tile._cacheNode)) {\n        tile._cacheNode = this._list.add(tile);\n\n        if (addCallback) {\n          addCallback(tileset, tile);\n        }\n      }\n    }\n  }, {\n    key: \"unloadTile\",\n    value: function unloadTile(tileset, tile, unloadCallback) {\n      var node = tile._cacheNode;\n\n      if (!defined(node)) {\n        return;\n      }\n\n      this._list.remove(node);\n\n      tile._cacheNode = undefined;\n\n      if (unloadCallback) {\n        unloadCallback(tileset, tile);\n      }\n    }\n  }, {\n    key: \"unloadTiles\",\n    value: function unloadTiles(tileset, unloadCallback) {\n      var trimTiles = this._trimTiles;\n      this._trimTiles = false;\n      var list = this._list;\n      var maximumMemoryUsageInBytes = tileset.maximumMemoryUsage * 1024 * 1024;\n      var sentinel = this._sentinel;\n      var node = list.head;\n\n      while (node !== sentinel && (tileset.gpuMemoryUsageInBytes > maximumMemoryUsageInBytes || trimTiles)) {\n        var tile = node.item;\n        node = node.next;\n        this.unloadTile(tileset, tile, unloadCallback);\n      }\n    }\n  }, {\n    key: \"trim\",\n    value: function trim() {\n      this._trimTiles = true;\n    }\n  }]);\n\n  return TilesetCache;\n}();\n\nexport { TilesetCache as default };","map":{"version":3,"sources":["../../../src/tileset/tileset-cache.js"],"names":["x","TilesetCache","tile","node","defined","tileset","addCallback","unloadCallback","trimTiles","list","maximumMemoryUsageInBytes","sentinel"],"mappings":";;AAGA,OAAA,gBAAA,MAAA,6BAAA;;AAEA,SAAA,OAAA,CAAA,CAAA,EAAoB;AAClB,SAAOA,CAAC,KAADA,SAAAA,IAAmBA,CAAC,KAA3B,IAAA;AACD;;IAOoBC,Y;AACnB,WAAA,YAAA,GAAc;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,YAAA,CAAA;;AAGZ,SAAA,KAAA,GAAa,IAAb,gBAAa,EAAb;AACA,SAAA,SAAA,GAAiB,KAAA,KAAA,CAAA,GAAA,CAAjB,UAAiB,CAAjB;AACA,SAAA,UAAA,GAAA,KAAA;AACD;;;;4BAEO;AAIN,WAAA,KAAA,CAAA,MAAA,CAAkB,KAAA,KAAA,CAAlB,IAAA,EAAmC,KAAnC,SAAA;AACD;;;0BAEKC,I,EAAM;AACV,UAAMC,IAAI,GAAGD,IAAI,CAAjB,UAAA;;AACA,UAAIE,OAAO,CAAX,IAAW,CAAX,EAAmB;AACjB,aAAA,KAAA,CAAA,MAAA,CAAkB,KAAlB,SAAA,EAAA,IAAA;AACD;AACF;;;wBAEGC,O,EAASH,I,EAAMI,W,EAAa;AAC9B,UAAI,CAACF,OAAO,CAACF,IAAI,CAAjB,UAAY,CAAZ,EAA+B;AAC7BA,QAAAA,IAAI,CAAJA,UAAAA,GAAkB,KAAA,KAAA,CAAA,GAAA,CAAlBA,IAAkB,CAAlBA;;AAEA,YAAA,WAAA,EAAiB;AACfI,UAAAA,WAAW,CAAA,OAAA,EAAXA,IAAW,CAAXA;AACD;AACF;AACF;;;+BAEUD,O,EAASH,I,EAAMK,c,EAAgB;AACxC,UAAMJ,IAAI,GAAGD,IAAI,CAAjB,UAAA;;AACA,UAAI,CAACE,OAAO,CAAZ,IAAY,CAAZ,EAAoB;AAClB;AACD;;AAED,WAAA,KAAA,CAAA,MAAA,CAAA,IAAA;;AACAF,MAAAA,IAAI,CAAJA,UAAAA,GAAAA,SAAAA;;AACA,UAAA,cAAA,EAAoB;AAClBK,QAAAA,cAAc,CAAA,OAAA,EAAdA,IAAc,CAAdA;AACD;AACF;;;gCAEWF,O,EAASE,c,EAAgB;AACnC,UAAMC,SAAS,GAAG,KAAlB,UAAA;AACA,WAAA,UAAA,GAAA,KAAA;AAEA,UAAMC,IAAI,GAAG,KAAb,KAAA;AAEA,UAAMC,yBAAyB,GAAGL,OAAO,CAAPA,kBAAAA,GAAAA,IAAAA,GAAlC,IAAA;AAKA,UAAMM,QAAQ,GAAG,KAAjB,SAAA;AACA,UAAIR,IAAI,GAAGM,IAAI,CAAf,IAAA;;AAEA,aACEN,IAAI,KAAJA,QAAAA,KACCE,OAAO,CAAPA,qBAAAA,GAAAA,yBAAAA,IAFH,SACEF,CADF,EAGE;AACA,YAAMD,IAAI,GAAGC,IAAI,CAAjB,IAAA;AACAA,QAAAA,IAAI,GAAGA,IAAI,CAAXA,IAAAA;AACA,aAAA,UAAA,CAAA,OAAA,EAAA,IAAA,EAAA,cAAA;AACD;AACF;;;2BAEM;AACL,WAAA,UAAA,GAAA,IAAA;AACD;;;;;;SAxEkBF,Y","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport DoublyLinkedList from '../utils/doubly-linked-list';\n\nfunction defined(x) {\n  return x !== undefined && x !== null;\n}\n\n/**\n * Stores tiles with content loaded.\n *\n * @private\n */\nexport default class TilesetCache {\n  constructor() {\n    // [head, sentinel) -> tiles that weren't selected this frame and may be removed from the cache\n    // (sentinel, tail] -> tiles that were selected this frame\n    this._list = new DoublyLinkedList();\n    this._sentinel = this._list.add('sentinel');\n    this._trimTiles = false;\n  }\n\n  reset() {\n    // Move sentinel node to the tail so, at the start of the frame, all tiles\n    // may be potentially replaced.  Tiles are moved to the right of the sentinel\n    // when they are selected so they will not be replaced.\n    this._list.splice(this._list.tail, this._sentinel);\n  }\n\n  touch(tile) {\n    const node = tile._cacheNode;\n    if (defined(node)) {\n      this._list.splice(this._sentinel, node);\n    }\n  }\n\n  add(tileset, tile, addCallback) {\n    if (!defined(tile._cacheNode)) {\n      tile._cacheNode = this._list.add(tile);\n\n      if (addCallback) {\n        addCallback(tileset, tile);\n      }\n    }\n  }\n\n  unloadTile(tileset, tile, unloadCallback) {\n    const node = tile._cacheNode;\n    if (!defined(node)) {\n      return;\n    }\n\n    this._list.remove(node);\n    tile._cacheNode = undefined;\n    if (unloadCallback) {\n      unloadCallback(tileset, tile);\n    }\n  }\n\n  unloadTiles(tileset, unloadCallback) {\n    const trimTiles = this._trimTiles;\n    this._trimTiles = false;\n\n    const list = this._list;\n\n    const maximumMemoryUsageInBytes = tileset.maximumMemoryUsage * 1024 * 1024;\n\n    // Traverse the list only to the sentinel since tiles/nodes to the\n    // right of the sentinel were used this frame.\n    // The sub-list to the left of the sentinel is ordered from LRU to MRU.\n    const sentinel = this._sentinel;\n    let node = list.head;\n\n    while (\n      node !== sentinel &&\n      (tileset.gpuMemoryUsageInBytes > maximumMemoryUsageInBytes || trimTiles)\n    ) {\n      const tile = node.item;\n      node = node.next;\n      this.unloadTile(tileset, tile, unloadCallback);\n    }\n  }\n\n  trim() {\n    this._trimTiles = true;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}