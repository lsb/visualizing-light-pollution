{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { COORDINATE_SYSTEM } from '../../lib/constants';\nimport { getOffsetOrigin } from './viewport-uniforms';\nimport * as vec4 from 'gl-matrix/vec4';\nimport * as vec3 from 'gl-matrix/vec3';\nimport { addMetersToLngLat } from '@math.gl/web-mercator';\n\nfunction lngLatZToWorldPosition(lngLatZ, viewport) {\n  var offsetMode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var _lngLatZ = _slicedToArray(lngLatZ, 3),\n      longitude = _lngLatZ[0],\n      latitude = _lngLatZ[1],\n      _lngLatZ$ = _lngLatZ[2],\n      z = _lngLatZ$ === void 0 ? 0 : _lngLatZ$;\n\n  var _viewport$projectFlat = viewport.projectFlat(lngLatZ),\n      _viewport$projectFlat2 = _slicedToArray(_viewport$projectFlat, 2),\n      X = _viewport$projectFlat2[0],\n      Y = _viewport$projectFlat2[1];\n\n  var distanceScales = viewport.getDistanceScales(offsetMode && [longitude, latitude]);\n  var Z = z * distanceScales.unitsPerMeter[2];\n  return [X, Y, Z];\n}\n\nfunction normalizeParameters(opts) {\n  var normalizedParams = Object.assign({}, opts);\n  var coordinateSystem = opts.coordinateSystem;\n  var viewport = opts.viewport,\n      coordinateOrigin = opts.coordinateOrigin,\n      fromCoordinateSystem = opts.fromCoordinateSystem,\n      fromCoordinateOrigin = opts.fromCoordinateOrigin;\n\n  if (coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n    coordinateSystem = viewport.isGeospatial ? COORDINATE_SYSTEM.LNGLAT : COORDINATE_SYSTEM.CARTESIAN;\n  }\n\n  if (fromCoordinateSystem === undefined) {\n    normalizedParams.fromCoordinateSystem = coordinateSystem;\n  }\n\n  if (fromCoordinateOrigin === undefined) {\n    normalizedParams.fromCoordinateOrigin = coordinateOrigin;\n  }\n\n  normalizedParams.coordinateSystem = coordinateSystem;\n  return normalizedParams;\n}\n\nexport function getWorldPosition(position, _ref) {\n  var viewport = _ref.viewport,\n      modelMatrix = _ref.modelMatrix,\n      coordinateSystem = _ref.coordinateSystem,\n      coordinateOrigin = _ref.coordinateOrigin,\n      offsetMode = _ref.offsetMode;\n\n  var _position = _slicedToArray(position, 3),\n      x = _position[0],\n      y = _position[1],\n      z = _position[2];\n\n  if (modelMatrix) {\n    var _vec4$transformMat = vec4.transformMat4([], [x, y, z, 1.0], modelMatrix);\n\n    var _vec4$transformMat2 = _slicedToArray(_vec4$transformMat, 3);\n\n    x = _vec4$transformMat2[0];\n    y = _vec4$transformMat2[1];\n    z = _vec4$transformMat2[2];\n  }\n\n  switch (coordinateSystem) {\n    case COORDINATE_SYSTEM.LNGLAT:\n      return lngLatZToWorldPosition([x, y, z], viewport, offsetMode);\n\n    case COORDINATE_SYSTEM.LNGLAT_OFFSETS:\n      return lngLatZToWorldPosition([x + coordinateOrigin[0], y + coordinateOrigin[1], z + (coordinateOrigin[2] || 0)], viewport, offsetMode);\n\n    case COORDINATE_SYSTEM.METER_OFFSETS:\n      return lngLatZToWorldPosition(addMetersToLngLat(coordinateOrigin, [x, y, z]), viewport, offsetMode);\n\n    case COORDINATE_SYSTEM.CARTESIAN:\n    default:\n      return viewport.isGeospatial ? [x, y, z] : viewport.projectPosition([x, y, z]);\n  }\n}\nexport function projectPosition(position, params) {\n  var _normalizeParameters = normalizeParameters(params),\n      viewport = _normalizeParameters.viewport,\n      coordinateSystem = _normalizeParameters.coordinateSystem,\n      coordinateOrigin = _normalizeParameters.coordinateOrigin,\n      modelMatrix = _normalizeParameters.modelMatrix,\n      fromCoordinateSystem = _normalizeParameters.fromCoordinateSystem,\n      fromCoordinateOrigin = _normalizeParameters.fromCoordinateOrigin;\n\n  var _getOffsetOrigin = getOffsetOrigin(viewport, coordinateSystem, coordinateOrigin),\n      geospatialOrigin = _getOffsetOrigin.geospatialOrigin,\n      shaderCoordinateOrigin = _getOffsetOrigin.shaderCoordinateOrigin,\n      offsetMode = _getOffsetOrigin.offsetMode;\n\n  var worldPosition = getWorldPosition(position, {\n    viewport: viewport,\n    modelMatrix: modelMatrix,\n    coordinateSystem: fromCoordinateSystem,\n    coordinateOrigin: fromCoordinateOrigin,\n    offsetMode: offsetMode\n  });\n\n  if (offsetMode) {\n    var positionCommonSpace = viewport.projectPosition(geospatialOrigin || shaderCoordinateOrigin);\n    vec3.sub(worldPosition, worldPosition, positionCommonSpace);\n  }\n\n  return worldPosition;\n}","map":{"version":3,"sources":["../../../../src/shaderlib/project/project-functions.js"],"names":["offsetMode","longitude","latitude","z","X","Y","viewport","distanceScales","Z","normalizedParams","Object","coordinateSystem","opts","coordinateOrigin","fromCoordinateSystem","fromCoordinateOrigin","COORDINATE_SYSTEM","modelMatrix","x","y","vec4","lngLatZToWorldPosition","addMetersToLngLat","normalizeParameters","geospatialOrigin","shaderCoordinateOrigin","getOffsetOrigin","worldPosition","getWorldPosition","positionCommonSpace","vec3"],"mappings":"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","sourcesContent":["/**\n * Projection utils\n * TODO: move to Viewport class?\n */\nimport {COORDINATE_SYSTEM} from '../../lib/constants';\nimport {getOffsetOrigin} from './viewport-uniforms';\n\nimport * as vec4 from 'gl-matrix/vec4';\nimport * as vec3 from 'gl-matrix/vec3';\nimport {addMetersToLngLat} from '@math.gl/web-mercator';\n\n// In project.glsl, offset modes calculate z differently from LNG_LAT mode.\n// offset modes apply the y adjustment (unitsPerMeter2) when projecting z\n// LNG_LAT mode only use the linear scale.\nfunction lngLatZToWorldPosition(lngLatZ, viewport, offsetMode = false) {\n  const [longitude, latitude, z = 0] = lngLatZ;\n  const [X, Y] = viewport.projectFlat(lngLatZ);\n  const distanceScales = viewport.getDistanceScales(offsetMode && [longitude, latitude]);\n  const Z = z * distanceScales.unitsPerMeter[2];\n  return [X, Y, Z];\n}\n\nfunction normalizeParameters(opts) {\n  const normalizedParams = Object.assign({}, opts);\n\n  let {coordinateSystem} = opts;\n  const {viewport, coordinateOrigin, fromCoordinateSystem, fromCoordinateOrigin} = opts;\n\n  if (coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n    coordinateSystem = viewport.isGeospatial\n      ? COORDINATE_SYSTEM.LNGLAT\n      : COORDINATE_SYSTEM.CARTESIAN;\n  }\n\n  if (fromCoordinateSystem === undefined) {\n    normalizedParams.fromCoordinateSystem = coordinateSystem;\n  }\n  if (fromCoordinateOrigin === undefined) {\n    normalizedParams.fromCoordinateOrigin = coordinateOrigin;\n  }\n\n  normalizedParams.coordinateSystem = coordinateSystem;\n\n  return normalizedParams;\n}\n\nexport function getWorldPosition(\n  position,\n  {viewport, modelMatrix, coordinateSystem, coordinateOrigin, offsetMode}\n) {\n  let [x, y, z] = position;\n\n  if (modelMatrix) {\n    [x, y, z] = vec4.transformMat4([], [x, y, z, 1.0], modelMatrix);\n  }\n\n  switch (coordinateSystem) {\n    case COORDINATE_SYSTEM.LNGLAT:\n      return lngLatZToWorldPosition([x, y, z], viewport, offsetMode);\n\n    case COORDINATE_SYSTEM.LNGLAT_OFFSETS:\n      return lngLatZToWorldPosition(\n        [x + coordinateOrigin[0], y + coordinateOrigin[1], z + (coordinateOrigin[2] || 0)],\n        viewport,\n        offsetMode\n      );\n\n    case COORDINATE_SYSTEM.METER_OFFSETS:\n      return lngLatZToWorldPosition(\n        addMetersToLngLat(coordinateOrigin, [x, y, z]),\n        viewport,\n        offsetMode\n      );\n\n    case COORDINATE_SYSTEM.CARTESIAN:\n    default:\n      return viewport.isGeospatial ? [x, y, z] : viewport.projectPosition([x, y, z]);\n  }\n}\n\n/**\n * Equivalent to project_position in project.glsl\n * projects a user supplied position to world position directly with or without\n * a reference coordinate system\n * @param {array} position - [x, y, z]\n * @param {object} params\n * @param {Viewport} params.viewport - the current viewport\n * @param {number} params.coordinateSystem - the reference coordinate system used\n *   align world position\n * @param {array} params.coordinateOrigin - the reference coordinate origin used\n *   to align world position\n * @param {Matrix4} [params.modelMatrix] - the model matrix of the supplied position\n * @param {number} [params.fromCoordinateSystem] - the coordinate system that the\n *   supplied position is in. Default to the same as `coordinateSystem`.\n * @param {array} [params.fromCoordinateOrigin] - the coordinate origin that the\n *   supplied position is in. Default to the same as `coordinateOrigin`.\n */\nexport function projectPosition(position, params) {\n  const {\n    viewport,\n    coordinateSystem,\n    coordinateOrigin,\n    // optional\n    modelMatrix,\n    fromCoordinateSystem,\n    fromCoordinateOrigin\n  } = normalizeParameters(params);\n\n  const {geospatialOrigin, shaderCoordinateOrigin, offsetMode} = getOffsetOrigin(\n    viewport,\n    coordinateSystem,\n    coordinateOrigin\n  );\n\n  const worldPosition = getWorldPosition(position, {\n    viewport,\n    modelMatrix,\n    coordinateSystem: fromCoordinateSystem,\n    coordinateOrigin: fromCoordinateOrigin,\n    offsetMode\n  });\n\n  if (offsetMode) {\n    const positionCommonSpace = viewport.projectPosition(\n      geospatialOrigin || shaderCoordinateOrigin\n    );\n    vec3.sub(worldPosition, worldPosition, positionCommonSpace);\n  }\n\n  return worldPosition;\n}\n"]},"metadata":{},"sourceType":"module"}