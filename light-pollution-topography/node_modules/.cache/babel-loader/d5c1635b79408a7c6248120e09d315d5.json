{"ast":null,"code":"import { GL } from '../constants';\nimport assert from '../utils/assert';\nexport function getPrimitiveModeType(mode) {\n  switch (mode) {\n    case GL.POINTS:\n      return GL.POINTS;\n\n    case GL.LINES:\n    case GL.LINE_STRIP:\n    case GL.LINE_LOOP:\n      return GL.LINES;\n\n    case GL.TRIANGLES:\n    case GL.TRIANGLE_STRIP:\n    case GL.TRIANGLE_FAN:\n      return GL.TRIANGLES;\n\n    default:\n      return assert(false);\n  }\n}\nexport function isPrimitiveModeExpandable(mode) {\n  switch (mode) {\n    case GL.LINE_STRIP:\n    case GL.LINE_LOOP:\n    case GL.TRIANGLE_STRIP:\n    case GL.TRIANGLE_FAN:\n      return true;\n\n    default:\n      return false;\n  }\n}\nexport function getPrimitiveModeExpandedLength(mode, length) {\n  switch (mode) {\n    case GL.POINTS:\n      return length;\n\n    case GL.LINES:\n      return length;\n\n    case GL.LINE_STRIP:\n      return length;\n\n    case GL.LINE_LOOP:\n      return length + 1;\n\n    case GL.TRIANGLES:\n      return length;\n\n    case GL.TRIANGLE_STRIP:\n    case GL.TRIANGLE_FAN:\n      return (length - 2) * 3;\n\n    default:\n      return assert(false);\n  }\n}","map":{"version":3,"sources":["../../../../src/geometry/primitives/modes.js"],"names":["GL","assert","length"],"mappings":"AAAA,SAAA,EAAA,QAAA,cAAA;AACA,OAAA,MAAA,MAAA,iBAAA;AAEA,OAAO,SAAA,oBAAA,CAAA,IAAA,EAAoC;AACzC,UAAA,IAAA;AACE,SAAKA,EAAE,CAAP,MAAA;AACE,aAAOA,EAAE,CAAT,MAAA;;AACF,SAAKA,EAAE,CAAP,KAAA;AACA,SAAKA,EAAE,CAAP,UAAA;AACA,SAAKA,EAAE,CAAP,SAAA;AACE,aAAOA,EAAE,CAAT,KAAA;;AACF,SAAKA,EAAE,CAAP,SAAA;AACA,SAAKA,EAAE,CAAP,cAAA;AACA,SAAKA,EAAE,CAAP,YAAA;AACE,aAAOA,EAAE,CAAT,SAAA;;AACF;AACE,aAAOC,MAAM,CAAb,KAAa,CAAb;AAZJ;AAcD;AAED,OAAO,SAAA,yBAAA,CAAA,IAAA,EAAyC;AAC9C,UAAA,IAAA;AACE,SAAKD,EAAE,CAAP,UAAA;AACA,SAAKA,EAAE,CAAP,SAAA;AACA,SAAKA,EAAE,CAAP,cAAA;AACA,SAAKA,EAAE,CAAP,YAAA;AACE,aAAA,IAAA;;AACF;AACE,aAAA,KAAA;AAPJ;AASD;AAED,OAAO,SAAA,8BAAA,CAAA,IAAA,EAAA,MAAA,EAAsD;AAC3D,UAAA,IAAA;AACE,SAAKA,EAAE,CAAP,MAAA;AACE,aAAA,MAAA;;AACF,SAAKA,EAAE,CAAP,KAAA;AACE,aAAA,MAAA;;AACF,SAAKA,EAAE,CAAP,UAAA;AACE,aAAA,MAAA;;AACF,SAAKA,EAAE,CAAP,SAAA;AACE,aAAOE,MAAM,GAAb,CAAA;;AACF,SAAKF,EAAE,CAAP,SAAA;AACE,aAAA,MAAA;;AACF,SAAKA,EAAE,CAAP,cAAA;AACA,SAAKA,EAAE,CAAP,YAAA;AACE,aAAO,CAACE,MAAM,GAAP,CAAA,IAAP,CAAA;;AACF;AACE,aAAOD,MAAM,CAAb,KAAa,CAAb;AAfJ;AAiBD","sourcesContent":["import {GL} from '../constants';\nimport assert from '../utils/assert';\n\nexport function getPrimitiveModeType(mode) {\n  switch (mode) {\n    case GL.POINTS: // draw single points.\n      return GL.POINTS;\n    case GL.LINES: // draw lines. Each set of two vertices is treated as a separate line segment.\n    case GL.LINE_STRIP: // draw lines. Each vertex connects to the one after it.\n    case GL.LINE_LOOP: // draw a connected group of line segments from the first vertex to the last\n      return GL.LINES;\n    case GL.TRIANGLES:\n    case GL.TRIANGLE_STRIP:\n    case GL.TRIANGLE_FAN: // draw a connected group of triangles.\n      return GL.TRIANGLES;\n    default:\n      return assert(false);\n  }\n}\n\nexport function isPrimitiveModeExpandable(mode) {\n  switch (mode) {\n    case GL.LINE_STRIP: // draw lines. Each vertex connects to the one after it.\n    case GL.LINE_LOOP: // draw a connected group of line segments from the first vertex to the last\n    case GL.TRIANGLE_STRIP: // draw a connected group of triangles.\n    case GL.TRIANGLE_FAN: // draw a connected group of triangles.\n      return true;\n    default:\n      return false;\n  }\n}\n\nexport function getPrimitiveModeExpandedLength(mode, length) {\n  switch (mode) {\n    case GL.POINTS: // draw single points.\n      return length;\n    case GL.LINES: // draw lines. Each set of two vertices is treated as a separate line segment.\n      return length;\n    case GL.LINE_STRIP: // draw lines. Each vertex connects to the one after it.\n      return length;\n    case GL.LINE_LOOP: // draw a connected group of line segments from the first vertex to the last\n      return length + 1;\n    case GL.TRIANGLES: // draw triangles. Each set of three vertices creates a separate triangle.\n      return length;\n    case GL.TRIANGLE_STRIP: // draw a connected group of triangles.\n    case GL.TRIANGLE_FAN: // draw a connected group of triangles.\n      return (length - 2) * 3;\n    default:\n      return assert(false);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}