{"ast":null,"code":"import assert from '../utils/assert';\nimport GLTFScenegraph from '../gltf-scenegraph';\nimport { KHR_LIGHTS_PUNCTUAL } from '../gltf-constants';\nexport function decode(gltfData, options) {\n  var gltfScenegraph = new GLTFScenegraph(gltfData);\n  var json = gltfScenegraph.json;\n  var extension = gltfScenegraph.getExtension(KHR_LIGHTS_PUNCTUAL);\n\n  if (extension) {\n    gltfScenegraph.json.lights = extension.lights;\n    gltfScenegraph.removeExtension(KHR_LIGHTS_PUNCTUAL);\n  }\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = (json.nodes || [])[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var node = _step.value;\n      var nodeExtension = gltfScenegraph.getObjectExtension(node, KHR_LIGHTS_PUNCTUAL);\n\n      if (nodeExtension) {\n        node.light = nodeExtension.light;\n      }\n\n      gltfScenegraph.removeObjectExtension(node, KHR_LIGHTS_PUNCTUAL);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n        _iterator[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n}\nexport function encode(gltfData, options) {\n  var gltfScenegraph = new GLTFScenegraph(gltfData);\n  var json = gltfScenegraph.json;\n\n  if (json.lights) {\n    var extension = gltfScenegraph.addExtension(KHR_LIGHTS_PUNCTUAL);\n    assert(!extension.lights);\n    extension.lights = json.lights;\n    delete json.lights;\n  }\n\n  if (gltfScenegraph.json.lights) {\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = gltfScenegraph.json.lights[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var light = _step2.value;\n        var node = light.node;\n        gltfScenegraph.addObjectExtension(node, KHR_LIGHTS_PUNCTUAL, light);\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n          _iterator2[\"return\"]();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n\n    delete gltfScenegraph.json.lights;\n  }\n}","map":{"version":3,"sources":["../../../../src/lib/extensions/KHR_lights_punctual.js"],"names":["gltfScenegraph","json","extension","node","nodeExtension","assert","light"],"mappings":"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","sourcesContent":["// GLTF EXTENSION: KHR_lights_punctual\n// https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_lights_punctual\n\nimport assert from '../utils/assert';\nimport GLTFScenegraph from '../gltf-scenegraph';\nimport {KHR_LIGHTS_PUNCTUAL} from '../gltf-constants';\n\nexport function decode(gltfData, options) {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const {json} = gltfScenegraph;\n\n  // Move the light array out of the extension and remove the extension\n  const extension = gltfScenegraph.getExtension(KHR_LIGHTS_PUNCTUAL);\n  if (extension) {\n    gltfScenegraph.json.lights = extension.lights;\n    gltfScenegraph.removeExtension(KHR_LIGHTS_PUNCTUAL);\n  }\n\n  // Any nodes that have the extension, add lights field pointing to light object\n  // and remove the extension\n  for (const node of json.nodes || []) {\n    const nodeExtension = gltfScenegraph.getObjectExtension(node, KHR_LIGHTS_PUNCTUAL);\n    if (nodeExtension) {\n      node.light = nodeExtension.light;\n    }\n    gltfScenegraph.removeObjectExtension(node, KHR_LIGHTS_PUNCTUAL);\n  }\n}\n\n// Move the light ar ray out of the extension and remove the extension\nexport function encode(gltfData, options) {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const {json} = gltfScenegraph;\n\n  if (json.lights) {\n    const extension = gltfScenegraph.addExtension(KHR_LIGHTS_PUNCTUAL);\n    assert(!extension.lights);\n    extension.lights = json.lights;\n    delete json.lights;\n  }\n\n  // Any nodes that have lights field pointing to light object\n  // add the extension\n  if (gltfScenegraph.json.lights) {\n    for (const light of gltfScenegraph.json.lights) {\n      const node = light.node;\n      gltfScenegraph.addObjectExtension(node, KHR_LIGHTS_PUNCTUAL, light);\n    }\n    delete gltfScenegraph.json.lights;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}