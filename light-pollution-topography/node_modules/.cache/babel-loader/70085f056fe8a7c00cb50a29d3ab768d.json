{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { load } from '@loaders.gl/core';\nimport TilesetTraverser from './tileset-traverser';\nimport { lodJudge } from '../helpers/i3s-lod';\nimport TileHeader from '../tile-3d';\nimport I3STileManager from './i3s-tile-manager';\n\nvar I3STilesetTraverser = function (_TilesetTraverser) {\n  _inherits(I3STilesetTraverser, _TilesetTraverser);\n\n  function I3STilesetTraverser(options) {\n    var _this;\n\n    _classCallCheck(this, I3STilesetTraverser);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(I3STilesetTraverser).call(this, options));\n    _this._tileManager = new I3STileManager();\n    return _this;\n  }\n\n  _createClass(I3STilesetTraverser, [{\n    key: \"shouldRefine\",\n    value: function shouldRefine(tile, frameState) {\n      tile._lodJudge = lodJudge(tile, frameState);\n      return tile._lodJudge === 'DIG';\n    }\n  }, {\n    key: \"updateChildTiles\",\n    value: function updateChildTiles(tile, frameState) {\n      var _this2 = this;\n\n      var children = tile.header.children || [];\n      var childTiles = tile.children;\n      var tileset = tile.tileset;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        var _loop = function _loop() {\n          var child = _step.value;\n          var childTile = childTiles && childTiles.find(function (t) {\n            return t.id === child.id;\n          });\n\n          if (!childTile) {\n            var request = function request() {\n              return _this2._loadTile(child.id, tileset);\n            };\n\n            var cachedRequest = _this2._tileManager.find(child.id);\n\n            if (!cachedRequest) {\n              _this2._tileManager.add(request, child.id, function (header) {\n                return _this2._onTileLoad(header, tile, frameState);\n              }, {\n                frameNumber: frameState.frameNumber\n              });\n            } else {\n              _this2._tileManager.update(child.id, {\n                frameNumber: frameState.frameNumber\n              });\n            }\n          } else if (childTile) {\n            _this2.updateTile(childTile, frameState);\n          }\n        };\n\n        for (var _iterator = children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          _loop();\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_loadTile\",\n    value: function () {\n      var _loadTile2 = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(nodeId, tileset) {\n        var loader, nodeUrl, options;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                loader = tileset.loader;\n                nodeUrl = tileset.getTileUrl(\"\".concat(tileset.url, \"/nodes/\").concat(nodeId));\n                options = {\n                  i3s: _objectSpread({}, tileset.fetchOptions, {\n                    isHeader: true,\n                    loadContent: false\n                  })\n                };\n                _context.next = 5;\n                return load(nodeUrl, loader, options);\n\n              case 5:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function _loadTile(_x, _x2) {\n        return _loadTile2.apply(this, arguments);\n      }\n\n      return _loadTile;\n    }()\n  }, {\n    key: \"_onTileLoad\",\n    value: function _onTileLoad(header, tile, frameState) {\n      var basePath = this.options.basePath;\n      var childTile = new TileHeader(tile.tileset, header, tile, basePath);\n      tile.children.push(childTile);\n      this.updateTile(childTile, frameState);\n\n      if (this._frameNumber === frameState.frameNumber) {\n        this.executeTraversal(childTile, frameState);\n      }\n    }\n  }]);\n\n  return I3STilesetTraverser;\n}(TilesetTraverser);\n\nexport { I3STilesetTraverser as default };","map":{"version":3,"sources":["../../../../src/tileset/traversers/i3s-tilset-traverser.js"],"names":["I3STilesetTraverser","TilesetTraverser","tile","frameState","lodJudge","children","childTiles","tileset","child","childTile","t","request","cachedRequest","frameNumber","nodeId","loader","nodeUrl","options","i3s","isHeader","loadContent","load","header","basePath"],"mappings":"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","sourcesContent":["import {load} from '@loaders.gl/core';\nimport TilesetTraverser from './tileset-traverser';\n\nimport {lodJudge} from '../helpers/i3s-lod';\nimport TileHeader from '../tile-3d';\nimport I3STileManager from './i3s-tile-manager';\n\nexport default class I3STilesetTraverser extends TilesetTraverser {\n  constructor(options) {\n    super(options);\n    this._tileManager = new I3STileManager();\n  }\n\n  shouldRefine(tile, frameState) {\n    // TODO refactor loaJudge\n    tile._lodJudge = lodJudge(tile, frameState);\n    return tile._lodJudge === 'DIG';\n  }\n\n  // eslint-disable-next-line complexity\n  updateChildTiles(tile, frameState) {\n    const children = tile.header.children || [];\n    // child which are already fetched and constructed as Tile3D instances\n    const childTiles = tile.children;\n    const tileset = tile.tileset;\n\n    for (const child of children) {\n      // if child tile is not requested or fetched\n      const childTile = childTiles && childTiles.find(t => t.id === child.id);\n      if (!childTile) {\n        const request = () => this._loadTile(child.id, tileset);\n        const cachedRequest = this._tileManager.find(child.id);\n        if (!cachedRequest) {\n          this._tileManager.add(\n            request,\n            child.id,\n            header => this._onTileLoad(header, tile, frameState),\n            {frameNumber: frameState.frameNumber}\n          );\n        } else {\n          // update frameNumber since it is still needed in current frame\n          this._tileManager.update(child.id, {frameNumber: frameState.frameNumber});\n        }\n      } else if (childTile) {\n        // if child tile is fetched and available\n        this.updateTile(childTile, frameState);\n      }\n    }\n  }\n\n  async _loadTile(nodeId, tileset) {\n    const {loader} = tileset;\n    const nodeUrl = tileset.getTileUrl(`${tileset.url}/nodes/${nodeId}`);\n    // load metadata\n    const options = {\n      i3s: {\n        ...tileset.fetchOptions,\n        isHeader: true,\n        loadContent: false\n      }\n    };\n    return await load(nodeUrl, loader, options);\n  }\n\n  _onTileLoad(header, tile, frameState) {\n    const basePath = this.options.basePath;\n    // after child tile is fetched\n    const childTile = new TileHeader(tile.tileset, header, tile, basePath);\n    tile.children.push(childTile);\n    this.updateTile(childTile, frameState);\n\n    // after tile fetcher, resume traversal if still in current update/traversal frame\n    if (this._frameNumber === frameState.frameNumber) {\n      this.executeTraversal(childTile, frameState);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}