{"ast":null,"code":"import { getStringFromArrayBuffer } from './parse-utils';\nvar SIZEOF_UINT32 = 4;\nexport function parse3DTileTablesHeaderSync(tile, arrayBuffer, byteOffset) {\n  var view = new DataView(arrayBuffer);\n  tile.header = tile.header || {};\n  tile.header.featureTableJsonByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n  tile.header.featureTableBinaryByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n  tile.header.batchTableJsonByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n  tile.header.batchTableBinaryByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n  return byteOffset;\n}\nexport function parse3DTileTablesSync(tile, arrayBuffer, byteOffset, options) {\n  byteOffset = parse3DTileFeatureTable(tile, arrayBuffer, byteOffset, options);\n  byteOffset = parse3DTileBatchTable(tile, arrayBuffer, byteOffset, options);\n  return byteOffset;\n}\n\nfunction parse3DTileFeatureTable(tile, arrayBuffer, byteOffset, options) {\n  var _tile$header = tile.header,\n      featureTableJsonByteLength = _tile$header.featureTableJsonByteLength,\n      featureTableBinaryByteLength = _tile$header.featureTableBinaryByteLength;\n  tile.featureTableJson = {\n    BATCH_LENGTH: 0\n  };\n\n  if (featureTableJsonByteLength > 0) {\n    var featureTableString = getStringFromArrayBuffer(arrayBuffer, byteOffset, featureTableJsonByteLength);\n    tile.featureTableJson = JSON.parse(featureTableString);\n  }\n\n  byteOffset += featureTableJsonByteLength;\n  tile.featureTableBinary = new Uint8Array(arrayBuffer, byteOffset, featureTableBinaryByteLength);\n  byteOffset += featureTableBinaryByteLength;\n  return byteOffset;\n}\n\nfunction parse3DTileBatchTable(tile, arrayBuffer, byteOffset, options) {\n  var _tile$header2 = tile.header,\n      batchTableJsonByteLength = _tile$header2.batchTableJsonByteLength,\n      batchTableBinaryByteLength = _tile$header2.batchTableBinaryByteLength;\n\n  if (batchTableJsonByteLength > 0) {\n    var batchTableString = getStringFromArrayBuffer(arrayBuffer, byteOffset, batchTableJsonByteLength);\n    tile.batchTableJson = JSON.parse(batchTableString);\n    byteOffset += batchTableJsonByteLength;\n\n    if (batchTableBinaryByteLength > 0) {\n      tile.batchTableBinary = new Uint8Array(arrayBuffer, byteOffset, batchTableBinaryByteLength);\n      tile.batchTableBinary = new Uint8Array(tile.batchTableBinary);\n      byteOffset += batchTableBinaryByteLength;\n    }\n  }\n\n  return byteOffset;\n}","map":{"version":3,"sources":["../../../../../src/lib/parsers/helpers/parse-3d-tile-tables.js"],"names":["SIZEOF_UINT32","view","tile","byteOffset","parse3DTileFeatureTable","parse3DTileBatchTable","featureTableJsonByteLength","featureTableBinaryByteLength","BATCH_LENGTH","featureTableString","getStringFromArrayBuffer","JSON","batchTableJsonByteLength","batchTableBinaryByteLength","batchTableString"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {getStringFromArrayBuffer} from './parse-utils';\n\nconst SIZEOF_UINT32 = 4;\n\n// eslint-disable-next-line max-statements\nexport function parse3DTileTablesHeaderSync(tile, arrayBuffer, byteOffset) {\n  const view = new DataView(arrayBuffer);\n\n  tile.header = tile.header || {};\n\n  tile.header.featureTableJsonByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n\n  tile.header.featureTableBinaryByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n\n  tile.header.batchTableJsonByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n\n  tile.header.batchTableBinaryByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n\n  return byteOffset;\n}\n\nexport function parse3DTileTablesSync(tile, arrayBuffer, byteOffset, options) {\n  byteOffset = parse3DTileFeatureTable(tile, arrayBuffer, byteOffset, options);\n  byteOffset = parse3DTileBatchTable(tile, arrayBuffer, byteOffset, options);\n  return byteOffset;\n}\n\nfunction parse3DTileFeatureTable(tile, arrayBuffer, byteOffset, options) {\n  const {featureTableJsonByteLength, featureTableBinaryByteLength} = tile.header;\n\n  tile.featureTableJson = {\n    BATCH_LENGTH: 0\n  };\n\n  if (featureTableJsonByteLength > 0) {\n    const featureTableString = getStringFromArrayBuffer(\n      arrayBuffer,\n      byteOffset,\n      featureTableJsonByteLength\n    );\n    tile.featureTableJson = JSON.parse(featureTableString);\n  }\n  byteOffset += featureTableJsonByteLength;\n\n  tile.featureTableBinary = new Uint8Array(arrayBuffer, byteOffset, featureTableBinaryByteLength);\n  byteOffset += featureTableBinaryByteLength;\n\n  /*\n  const featureTable = parseFeatureTable(featureTableJson, featureTableBinary);\n\n  const batchLength = featureTable.getGlobalProperty('BATCH_LENGTH');\n  featureTable.featuresLength = batchLength;\n  */\n\n  return byteOffset;\n}\n\nfunction parse3DTileBatchTable(tile, arrayBuffer, byteOffset, options) {\n  const {batchTableJsonByteLength, batchTableBinaryByteLength} = tile.header;\n\n  if (batchTableJsonByteLength > 0) {\n    const batchTableString = getStringFromArrayBuffer(\n      arrayBuffer,\n      byteOffset,\n      batchTableJsonByteLength\n    );\n    tile.batchTableJson = JSON.parse(batchTableString);\n    byteOffset += batchTableJsonByteLength;\n\n    if (batchTableBinaryByteLength > 0) {\n      // Has a batch table binary\n      tile.batchTableBinary = new Uint8Array(arrayBuffer, byteOffset, batchTableBinaryByteLength);\n      // Copy the batchTableBinary section and let the underlying ArrayBuffer be freed\n      tile.batchTableBinary = new Uint8Array(tile.batchTableBinary);\n\n      byteOffset += batchTableBinaryByteLength;\n    }\n  }\n\n  return byteOffset;\n}\n"]},"metadata":{},"sourceType":"module"}