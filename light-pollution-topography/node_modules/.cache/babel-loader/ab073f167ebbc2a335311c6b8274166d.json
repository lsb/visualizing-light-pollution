{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { formatValue, assert } from '../utils';\nexport function getDebugTableForUniforms() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$header = _ref.header,\n      header = _ref$header === void 0 ? 'Uniforms' : _ref$header,\n      program = _ref.program,\n      uniforms = _ref.uniforms,\n      _ref$undefinedOnly = _ref.undefinedOnly,\n      undefinedOnly = _ref$undefinedOnly === void 0 ? false : _ref$undefinedOnly;\n\n  assert(program);\n  var SHADER_MODULE_UNIFORM_REGEXP = '.*_.*';\n  var PROJECT_MODULE_UNIFORM_REGEXP = '.*Matrix';\n  var uniformLocations = program._uniformSetters;\n  var table = {};\n  var uniformNames = Object.keys(uniformLocations).sort();\n  var count = 0;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = uniformNames[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var _uniformName = _step.value;\n\n      if (!_uniformName.match(SHADER_MODULE_UNIFORM_REGEXP) && !_uniformName.match(PROJECT_MODULE_UNIFORM_REGEXP)) {\n        if (addUniformToTable({\n          table: table,\n          header: header,\n          uniforms: uniforms,\n          uniformName: _uniformName,\n          undefinedOnly: undefinedOnly\n        })) {\n          count++;\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n        _iterator[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = uniformNames[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var _uniformName2 = _step2.value;\n\n      if (_uniformName2.match(PROJECT_MODULE_UNIFORM_REGEXP)) {\n        if (addUniformToTable({\n          table: table,\n          header: header,\n          uniforms: uniforms,\n          uniformName: _uniformName2,\n          undefinedOnly: undefinedOnly\n        })) {\n          count++;\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n        _iterator2[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  var _iteratorNormalCompletion3 = true;\n  var _didIteratorError3 = false;\n  var _iteratorError3 = undefined;\n\n  try {\n    for (var _iterator3 = uniformNames[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n      var _uniformName3 = _step3.value;\n\n      if (!table[_uniformName3]) {\n        if (addUniformToTable({\n          table: table,\n          header: header,\n          uniforms: uniforms,\n          uniformName: _uniformName3,\n          undefinedOnly: undefinedOnly\n        })) {\n          count++;\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError3 = true;\n    _iteratorError3 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion3 && _iterator3[\"return\"] != null) {\n        _iterator3[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError3) {\n        throw _iteratorError3;\n      }\n    }\n  }\n\n  var unusedCount = 0;\n  var unusedTable = {};\n\n  if (!undefinedOnly) {\n    for (var uniformName in uniforms) {\n      var uniform = uniforms[uniformName];\n\n      if (!table[uniformName]) {\n        unusedCount++;\n        unusedTable[uniformName] = _defineProperty({\n          Type: \"NOT USED: \".concat(uniform)\n        }, header, formatValue(uniform));\n      }\n    }\n  }\n\n  return {\n    table: table,\n    count: count,\n    unusedTable: unusedTable,\n    unusedCount: unusedCount\n  };\n}\n\nfunction addUniformToTable(_ref2) {\n  var table = _ref2.table,\n      header = _ref2.header,\n      uniforms = _ref2.uniforms,\n      uniformName = _ref2.uniformName,\n      undefinedOnly = _ref2.undefinedOnly;\n  var value = uniforms[uniformName];\n  var isDefined = isUniformDefined(value);\n\n  if (!undefinedOnly || !isDefined) {\n    var _table$uniformName;\n\n    table[uniformName] = (_table$uniformName = {}, _defineProperty(_table$uniformName, header, isDefined ? formatValue(value) : 'N/A'), _defineProperty(_table$uniformName, 'Uniform Type', isDefined ? value : 'NOT PROVIDED'), _table$uniformName);\n    return true;\n  }\n\n  return false;\n}\n\nfunction isUniformDefined(value) {\n  return value !== undefined && value !== null;\n}","map":{"version":3,"sources":["../../../src/debug/debug-uniforms.js"],"names":["header","program","uniforms","undefinedOnly","assert","SHADER_MODULE_UNIFORM_REGEXP","PROJECT_MODULE_UNIFORM_REGEXP","uniformLocations","table","uniformNames","Object","count","uniformName","addUniformToTable","unusedCount","unusedTable","uniform","Type","formatValue","value","isDefined","isUniformDefined"],"mappings":"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","sourcesContent":["import {formatValue, assert} from '../utils';\n\n// Prepares a table suitable for console.table\n/* eslint-disable max-statements, complexity */\nexport function getDebugTableForUniforms({\n  header = 'Uniforms',\n  program,\n  uniforms,\n  undefinedOnly = false\n} = {}) {\n  assert(program);\n\n  const SHADER_MODULE_UNIFORM_REGEXP = '.*_.*';\n  const PROJECT_MODULE_UNIFORM_REGEXP = '.*Matrix'; // TODO - Use explicit list\n\n  const uniformLocations = program._uniformSetters;\n  const table = {}; // {[header]: {}};\n\n  // Add program's provided uniforms (in alphabetical order)\n  const uniformNames = Object.keys(uniformLocations).sort();\n\n  let count = 0;\n\n  // First add non-underscored uniforms (assumed not coming from shader modules)\n  for (const uniformName of uniformNames) {\n    if (\n      !uniformName.match(SHADER_MODULE_UNIFORM_REGEXP) &&\n      !uniformName.match(PROJECT_MODULE_UNIFORM_REGEXP)\n    ) {\n      if (addUniformToTable({table, header, uniforms, uniformName, undefinedOnly})) {\n        count++;\n      }\n    }\n  }\n\n  // add underscored uniforms (assumed from shader modules)\n  for (const uniformName of uniformNames) {\n    if (uniformName.match(PROJECT_MODULE_UNIFORM_REGEXP)) {\n      if (addUniformToTable({table, header, uniforms, uniformName, undefinedOnly})) {\n        count++;\n      }\n    }\n  }\n\n  for (const uniformName of uniformNames) {\n    if (!table[uniformName]) {\n      if (addUniformToTable({table, header, uniforms, uniformName, undefinedOnly})) {\n        count++;\n      }\n    }\n  }\n\n  // Create a table of unused uniforms\n  let unusedCount = 0;\n  const unusedTable = {};\n  if (!undefinedOnly) {\n    for (const uniformName in uniforms) {\n      const uniform = uniforms[uniformName];\n      if (!table[uniformName]) {\n        unusedCount++;\n        unusedTable[uniformName] = {\n          Type: `NOT USED: ${uniform}`,\n          [header]: formatValue(uniform)\n        };\n      }\n    }\n  }\n\n  return {table, count, unusedTable, unusedCount};\n}\n\n// Helper\nfunction addUniformToTable({table, header, uniforms, uniformName, undefinedOnly}) {\n  const value = uniforms[uniformName];\n  const isDefined = isUniformDefined(value);\n  if (!undefinedOnly || !isDefined) {\n    table[uniformName] = {\n      // Add program's unprovided uniforms\n      [header]: isDefined ? formatValue(value) : 'N/A',\n      'Uniform Type': isDefined ? value : 'NOT PROVIDED'\n    };\n    return true;\n  }\n  return false;\n}\n\nfunction isUniformDefined(value) {\n  return value !== undefined && value !== null;\n}\n"]},"metadata":{},"sourceType":"module"}