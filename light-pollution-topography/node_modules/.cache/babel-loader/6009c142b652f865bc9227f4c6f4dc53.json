{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nexport function mergeShaders(target, source) {\n  if (!source) {\n    return target;\n  }\n\n  var result = Object.assign({}, target, source);\n\n  if ('defines' in source) {\n    result.defines = Object.assign({}, target.defines, source.defines);\n  }\n\n  if ('modules' in source) {\n    result.modules = (target.modules || []).concat(source.modules);\n\n    if (source.modules.some(function (module) {\n      return module.name === 'project64';\n    })) {\n      var index = result.modules.findIndex(function (module) {\n        return module.name === 'project32';\n      });\n\n      if (index >= 0) {\n        result.modules.splice(index, 1);\n      }\n    }\n  }\n\n  if ('inject' in source) {\n    if (!target.inject) {\n      result.inject = source.inject;\n    } else {\n      var mergedInjection = _objectSpread({}, target.inject);\n\n      for (var key in source.inject) {\n        mergedInjection[key] = (mergedInjection[key] || '') + source.inject[key];\n      }\n\n      result.inject = mergedInjection;\n    }\n  }\n\n  return result;\n}","map":{"version":3,"sources":["../../../src/utils/shader.js"],"names":["result","Object","target","source","module","index","mergedInjection"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,OAAO,SAAA,YAAA,CAAA,MAAA,EAAA,MAAA,EAAsC;AAC3C,MAAI,CAAJ,MAAA,EAAa;AACX,WAAA,MAAA;AACD;;AACD,MAAMA,MAAM,GAAGC,MAAM,CAANA,MAAAA,CAAAA,EAAAA,EAAAA,MAAAA,EAAf,MAAeA,CAAf;;AAEA,MAAI,aAAJ,MAAA,EAAyB;AACvBD,IAAAA,MAAM,CAANA,OAAAA,GAAiBC,MAAM,CAANA,MAAAA,CAAAA,EAAAA,EAAkBC,MAAM,CAAxBD,OAAAA,EAAkCE,MAAM,CAAzDH,OAAiBC,CAAjBD;AACD;;AACD,MAAI,aAAJ,MAAA,EAAyB;AACvBA,IAAAA,MAAM,CAANA,OAAAA,GAAiB,CAACE,MAAM,CAANA,OAAAA,IAAD,EAAA,EAAA,MAAA,CAA8BC,MAAM,CAArDH,OAAiB,CAAjBA;;AAGA,QAAI,MAAM,CAAN,OAAA,CAAA,IAAA,CAAoB,UAAA,MAAA,EAAM;AAAA,aAAII,MAAM,CAANA,IAAAA,KAAJ,WAAA;AAA9B,KAAI,CAAJ,EAAgE;AAC9D,UAAMC,KAAK,GAAG,MAAM,CAAN,OAAA,CAAA,SAAA,CAAyB,UAAA,MAAA,EAAM;AAAA,eAAID,MAAM,CAANA,IAAAA,KAAJ,WAAA;AAA7C,OAAc,CAAd;;AACA,UAAIC,KAAK,IAAT,CAAA,EAAgB;AACdL,QAAAA,MAAM,CAANA,OAAAA,CAAAA,MAAAA,CAAAA,KAAAA,EAAAA,CAAAA;AACD;AACF;AACF;;AACD,MAAI,YAAJ,MAAA,EAAwB;AACtB,QAAI,CAACE,MAAM,CAAX,MAAA,EAAoB;AAClBF,MAAAA,MAAM,CAANA,MAAAA,GAAgBG,MAAM,CAAtBH,MAAAA;AADF,KAAA,MAEO;AACL,UAAMM,eAAe,GAAA,aAAA,CAAA,EAAA,EAAOJ,MAAM,CAAlC,MAAqB,CAArB;;AACA,WAAK,IAAL,GAAA,IAAkBC,MAAM,CAAxB,MAAA,EAAiC;AAC/BG,QAAAA,eAAe,CAAfA,GAAe,CAAfA,GAAuB,CAACA,eAAe,CAAfA,GAAe,CAAfA,IAAD,EAAA,IAA+BH,MAAM,CAANA,MAAAA,CAAtDG,GAAsDH,CAAtDG;AACD;;AACDN,MAAAA,MAAM,CAANA,MAAAA,GAAAA,eAAAA;AACD;AACF;;AACD,SAAA,MAAA;AACD","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// Merge two luma.gl shader descriptors\nexport function mergeShaders(target, source) {\n  if (!source) {\n    return target;\n  }\n  const result = Object.assign({}, target, source);\n\n  if ('defines' in source) {\n    result.defines = Object.assign({}, target.defines, source.defines);\n  }\n  if ('modules' in source) {\n    result.modules = (target.modules || []).concat(source.modules);\n\n    // Hack: prject32 and project64 cannot co-exist\n    if (source.modules.some(module => module.name === 'project64')) {\n      const index = result.modules.findIndex(module => module.name === 'project32');\n      if (index >= 0) {\n        result.modules.splice(index, 1);\n      }\n    }\n  }\n  if ('inject' in source) {\n    if (!target.inject) {\n      result.inject = source.inject;\n    } else {\n      const mergedInjection = {...target.inject};\n      for (const key in source.inject) {\n        mergedInjection[key] = (mergedInjection[key] || '') + source.inject[key];\n      }\n      result.inject = mergedInjection;\n    }\n  }\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}