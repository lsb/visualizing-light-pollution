{"ast":null,"code":"import isOldIE from './is-old-ie';\nimport assert from './assert';\nvar GL_VENDOR = 0x1f00;\nvar GL_RENDERER = 0x1f01;\nvar GL_VERSION = 0x1f02;\nvar GL_SHADING_LANGUAGE_VERSION = 0x8b8c;\nvar WEBGL_FEATURES = {\n  GLSL_FRAG_DATA: ['WEBGL_draw_buffers', true],\n  GLSL_FRAG_DEPTH: ['EXT_frag_depth', true],\n  GLSL_DERIVATIVES: ['OES_standard_derivatives', true],\n  GLSL_TEXTURE_LOD: ['EXT_shader_texture_lod', true]\n};\nvar FEATURES = {};\nObject.keys(WEBGL_FEATURES).forEach(function (key) {\n  FEATURES[key] = key;\n});\nexport { FEATURES };\n\nfunction isWebGL2(gl) {\n  return Boolean(gl && gl._version === 2);\n}\n\nexport function getContextInfo(gl) {\n  var info = gl.getExtension('WEBGL_debug_renderer_info');\n  var vendor = gl.getParameter(info && info.UNMASKED_VENDOR_WEBGL || GL_VENDOR);\n  var renderer = gl.getParameter(info && info.UNMASKED_RENDERER_WEBGL || GL_RENDERER);\n  var gpuVendor = identifyGPUVendor(vendor, renderer);\n  var gpuInfo = {\n    gpuVendor: gpuVendor,\n    vendor: vendor,\n    renderer: renderer,\n    version: gl.getParameter(GL_VERSION),\n    shadingLanguageVersion: gl.getParameter(GL_SHADING_LANGUAGE_VERSION)\n  };\n  return gpuInfo;\n}\n\nfunction identifyGPUVendor(vendor, renderer) {\n  if (vendor.match(/NVIDIA/i) || renderer.match(/NVIDIA/i)) {\n    return 'NVIDIA';\n  }\n\n  if (vendor.match(/INTEL/i) || renderer.match(/INTEL/i)) {\n    return 'INTEL';\n  }\n\n  if (vendor.match(/AMD/i) || renderer.match(/AMD/i) || vendor.match(/ATI/i) || renderer.match(/ATI/i)) {\n    return 'AMD';\n  }\n\n  return 'UNKNOWN GPU';\n}\n\nvar compiledGlslExtensions = {};\nexport function canCompileGLGSExtension(gl, cap) {\n  var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var feature = WEBGL_FEATURES[cap];\n  assert(feature, cap);\n\n  if (!isOldIE(opts)) {\n    return true;\n  }\n\n  if (cap in compiledGlslExtensions) {\n    return compiledGlslExtensions[cap];\n  }\n\n  var extensionName = feature[0];\n  var behavior = opts.behavior || 'enable';\n  var source = \"#extension GL_\".concat(extensionName, \" : \").concat(behavior, \"\\nvoid main(void) {}\");\n  var shader = gl.createShader(35633);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n  var canCompile = gl.getShaderParameter(shader, 35713);\n  gl.deleteShader(shader);\n  compiledGlslExtensions[cap] = canCompile;\n  return canCompile;\n}\n\nfunction getFeature(gl, cap) {\n  var feature = WEBGL_FEATURES[cap];\n  assert(feature, cap);\n  var extensionName = isWebGL2(gl) ? feature[1] || feature[0] : feature[0];\n  var value = typeof extensionName === 'string' ? Boolean(gl.getExtension(extensionName)) : extensionName;\n  assert(value === false || value === true);\n  return value;\n}\n\nexport function hasFeatures(gl, features) {\n  features = Array.isArray(features) ? features : [features];\n  return features.every(function (feature) {\n    return getFeature(gl, feature);\n  });\n}","map":{"version":3,"sources":["../../../src/utils/webgl-info.js"],"names":["GL_VENDOR","GL_RENDERER","GL_VERSION","GL_SHADING_LANGUAGE_VERSION","WEBGL_FEATURES","GLSL_FRAG_DATA","GLSL_FRAG_DEPTH","GLSL_DERIVATIVES","GLSL_TEXTURE_LOD","FEATURES","Object","Boolean","gl","info","vendor","renderer","gpuVendor","identifyGPUVendor","gpuInfo","version","shadingLanguageVersion","compiledGlslExtensions","opts","feature","assert","isOldIE","cap","extensionName","behavior","source","shader","canCompile","isWebGL2","value","features","Array","getFeature"],"mappings":"AAMA,OAAA,OAAA,MAAA,aAAA;AACA,OAAA,MAAA,MAAA,UAAA;AAEA,IAAMA,SAAS,GAAf,MAAA;AACA,IAAMC,WAAW,GAAjB,MAAA;AACA,IAAMC,UAAU,GAAhB,MAAA;AACA,IAAMC,2BAA2B,GAAjC,MAAA;AAGA,IAAMC,cAAc,GAAG;AAErBC,EAAAA,cAAc,EAAE,CAAA,oBAAA,EAFK,IAEL,CAFK;AAGrBC,EAAAA,eAAe,EAAE,CAAA,gBAAA,EAHI,IAGJ,CAHI;AAIrBC,EAAAA,gBAAgB,EAAE,CAAA,0BAAA,EAJG,IAIH,CAJG;AAKrBC,EAAAA,gBAAgB,EAAE,CAAA,wBAAA,EAAA,IAAA;AALG,CAAvB;AASA,IAAMC,QAAQ,GAAd,EAAA;AACAC,MAAM,CAANA,IAAAA,CAAAA,cAAAA,EAAAA,OAAAA,CAAoC,UAAA,GAAA,EAAO;AACzCD,EAAAA,QAAQ,CAARA,GAAQ,CAARA,GAAAA,GAAAA;AADFC,CAAAA;AAIA,SAAA,QAAA;;AAEA,SAAA,QAAA,CAAA,EAAA,EAAsB;AACpB,SAAOC,OAAO,CAACC,EAAE,IAAIA,EAAE,CAAFA,QAAAA,KAArB,CAAc,CAAd;AACD;;AAED,OAAO,SAAA,cAAA,CAAA,EAAA,EAA4B;AACjC,MAAMC,IAAI,GAAGD,EAAE,CAAFA,YAAAA,CAAb,2BAAaA,CAAb;AACA,MAAME,MAAM,GAAGF,EAAE,CAAFA,YAAAA,CAAiBC,IAAI,IAAIA,IAAI,CAAb,qBAACA,IAAhC,SAAeD,CAAf;AACA,MAAMG,QAAQ,GAAGH,EAAE,CAAFA,YAAAA,CAAiBC,IAAI,IAAIA,IAAI,CAAb,uBAACA,IAAlC,WAAiBD,CAAjB;AACA,MAAMI,SAAS,GAAGC,iBAAiB,CAAA,MAAA,EAAnC,QAAmC,CAAnC;AACA,MAAMC,OAAO,GAAG;AACdF,IAAAA,SAAS,EADK,SAAA;AAEdF,IAAAA,MAAM,EAFQ,MAAA;AAGdC,IAAAA,QAAQ,EAHM,QAAA;AAIdI,IAAAA,OAAO,EAAEP,EAAE,CAAFA,YAAAA,CAJK,UAILA,CAJK;AAKdQ,IAAAA,sBAAsB,EAAER,EAAE,CAAFA,YAAAA,CAAAA,2BAAAA;AALV,GAAhB;AAOA,SAAA,OAAA;AACD;;AAED,SAAA,iBAAA,CAAA,MAAA,EAAA,QAAA,EAA6C;AAC3C,MAAIE,MAAM,CAANA,KAAAA,CAAAA,SAAAA,KAA2BC,QAAQ,CAARA,KAAAA,CAA/B,SAA+BA,CAA/B,EAA0D;AACxD,WAAA,QAAA;AACD;;AACD,MAAID,MAAM,CAANA,KAAAA,CAAAA,QAAAA,KAA0BC,QAAQ,CAARA,KAAAA,CAA9B,QAA8BA,CAA9B,EAAwD;AACtD,WAAA,OAAA;AACD;;AACD,MACED,MAAM,CAANA,KAAAA,CAAAA,MAAAA,KACAC,QAAQ,CAARA,KAAAA,CADAD,MACAC,CADAD,IAEAA,MAAM,CAANA,KAAAA,CAFAA,MAEAA,CAFAA,IAGAC,QAAQ,CAARA,KAAAA,CAJF,MAIEA,CAJF,EAKE;AACA,WAAA,KAAA;AACD;;AACD,SAAA,aAAA;AACD;;AAED,IAAMM,sBAAsB,GAA5B,EAAA;AAeA,OAAO,SAAA,uBAAA,CAAA,EAAA,EAAA,GAAA,EAAqD;AAAA,MAAXC,IAAW,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;AAC1D,MAAMC,OAAO,GAAGnB,cAAc,CAA9B,GAA8B,CAA9B;AACAoB,EAAAA,MAAM,CAAA,OAAA,EAANA,GAAM,CAANA;;AAEA,MAAI,CAACC,OAAO,CAAZ,IAAY,CAAZ,EAAoB;AAClB,WAAA,IAAA;AACD;;AAED,MAAIC,GAAG,IAAP,sBAAA,EAAmC;AACjC,WAAOL,sBAAsB,CAA7B,GAA6B,CAA7B;AACD;;AAED,MAAMM,aAAa,GAAGJ,OAAO,CAA7B,CAA6B,CAA7B;AACA,MAAMK,QAAQ,GAAGN,IAAI,CAAJA,QAAAA,IAAjB,QAAA;AACA,MAAMO,MAAM,GAAA,iBAAA,MAAA,CAAA,aAAA,EAAA,KAAA,EAAA,MAAA,CAAA,QAAA,EAAZ,sBAAY,CAAZ;AAEA,MAAMC,MAAM,GAAGlB,EAAE,CAAFA,YAAAA,CAAf,KAAeA,CAAf;AACAA,EAAAA,EAAE,CAAFA,YAAAA,CAAAA,MAAAA,EAAAA,MAAAA;AACAA,EAAAA,EAAE,CAAFA,aAAAA,CAAAA,MAAAA;AACA,MAAMmB,UAAU,GAAGnB,EAAE,CAAFA,kBAAAA,CAAAA,MAAAA,EAAnB,KAAmBA,CAAnB;AACAA,EAAAA,EAAE,CAAFA,YAAAA,CAAAA,MAAAA;AACAS,EAAAA,sBAAsB,CAAtBA,GAAsB,CAAtBA,GAAAA,UAAAA;AACA,SAAA,UAAA;AACD;;AAGD,SAAA,UAAA,CAAA,EAAA,EAAA,GAAA,EAA6B;AAC3B,MAAME,OAAO,GAAGnB,cAAc,CAA9B,GAA8B,CAA9B;AACAoB,EAAAA,MAAM,CAAA,OAAA,EAANA,GAAM,CAANA;AAGA,MAAMG,aAAa,GAAGK,QAAQ,CAARA,EAAQ,CAARA,GAAeT,OAAO,CAAPA,CAAO,CAAPA,IAAcA,OAAO,CAApCS,CAAoC,CAApCA,GAA0CT,OAAO,CAAvE,CAAuE,CAAvE;AAGA,MAAMU,KAAK,GACT,OAAA,aAAA,KAAA,QAAA,GAAoCtB,OAAO,CAACC,EAAE,CAAFA,YAAAA,CAA5C,aAA4CA,CAAD,CAA3C,GADF,aAAA;AAGAY,EAAAA,MAAM,CAACS,KAAK,KAALA,KAAAA,IAAmBA,KAAK,KAA/BT,IAAM,CAANA;AAEA,SAAA,KAAA;AACD;;AAED,OAAO,SAAA,WAAA,CAAA,EAAA,EAAA,QAAA,EAAmC;AACxCU,EAAAA,QAAQ,GAAGC,KAAK,CAALA,OAAAA,CAAAA,QAAAA,IAAAA,QAAAA,GAAqC,CAAhDD,QAAgD,CAAhDA;AACA,SAAO,QAAQ,CAAR,KAAA,CAAe,UAAA,OAAA,EAAO;AAAA,WAAIE,UAAU,CAAA,EAAA,EAAd,OAAc,CAAd;AAA7B,GAAO,CAAP;AACD","sourcesContent":["// Feature detection for WebGL\n//\n// Provides a function that enables simple checking of which WebGL features are\n// available in an WebGL1 or WebGL2 environment.\n\n/* eslint-disable no-inline-comments, max-len */\nimport isOldIE from './is-old-ie';\nimport assert from './assert';\n\nconst GL_VENDOR = 0x1f00;\nconst GL_RENDERER = 0x1f01;\nconst GL_VERSION = 0x1f02;\nconst GL_SHADING_LANGUAGE_VERSION = 0x8b8c;\n\n// Defines luma.gl \"feature\" names and semantics\nconst WEBGL_FEATURES = {\n  // GLSL extensions\n  GLSL_FRAG_DATA: ['WEBGL_draw_buffers', true], // TODO - name makes no sense in GLSL 3.00\n  GLSL_FRAG_DEPTH: ['EXT_frag_depth', true],\n  GLSL_DERIVATIVES: ['OES_standard_derivatives', true],\n  GLSL_TEXTURE_LOD: ['EXT_shader_texture_lod', true]\n};\n\n// Create a key-mirrored FEATURES array\nconst FEATURES = {};\nObject.keys(WEBGL_FEATURES).forEach(key => {\n  FEATURES[key] = key;\n});\n\nexport {FEATURES};\n\nfunction isWebGL2(gl) {\n  return Boolean(gl && gl._version === 2);\n}\n\nexport function getContextInfo(gl) {\n  const info = gl.getExtension('WEBGL_debug_renderer_info');\n  const vendor = gl.getParameter((info && info.UNMASKED_VENDOR_WEBGL) || GL_VENDOR);\n  const renderer = gl.getParameter((info && info.UNMASKED_RENDERER_WEBGL) || GL_RENDERER);\n  const gpuVendor = identifyGPUVendor(vendor, renderer);\n  const gpuInfo = {\n    gpuVendor,\n    vendor,\n    renderer,\n    version: gl.getParameter(GL_VERSION),\n    shadingLanguageVersion: gl.getParameter(GL_SHADING_LANGUAGE_VERSION)\n  };\n  return gpuInfo;\n}\n\nfunction identifyGPUVendor(vendor, renderer) {\n  if (vendor.match(/NVIDIA/i) || renderer.match(/NVIDIA/i)) {\n    return 'NVIDIA';\n  }\n  if (vendor.match(/INTEL/i) || renderer.match(/INTEL/i)) {\n    return 'INTEL';\n  }\n  if (\n    vendor.match(/AMD/i) ||\n    renderer.match(/AMD/i) ||\n    vendor.match(/ATI/i) ||\n    renderer.match(/ATI/i)\n  ) {\n    return 'AMD';\n  }\n  return 'UNKNOWN GPU';\n}\n\nconst compiledGlslExtensions = {};\n\n// Enables feature detection in IE11 due to a bug where gl.getExtension may return true\n// but fail to compile when the extension is enabled in the shader. Specifically,\n// the OES_standard_derivatives and WEBGL_draw_buffers extensions fails to compile in IE11 even though its included\n// in the list of supported extensions.\n// opts allows user agent to be overridden for testing\n/*\n* Inputs :\n*  gl : WebGL context\n*  cap : Key of WEBGL_FEATURES object identifying the extension\n*  opts :\n*   behavior : behavor of extension to be tested, by defualt `enable` is used\n* Returns : true, if shader is compiled successfully, false otherwise\n*/\nexport function canCompileGLGSExtension(gl, cap, opts = {}) {\n  const feature = WEBGL_FEATURES[cap];\n  assert(feature, cap);\n\n  if (!isOldIE(opts)) {\n    return true;\n  }\n\n  if (cap in compiledGlslExtensions) {\n    return compiledGlslExtensions[cap];\n  }\n\n  const extensionName = feature[0];\n  const behavior = opts.behavior || 'enable';\n  const source = `#extension GL_${extensionName} : ${behavior}\\nvoid main(void) {}`;\n\n  const shader = gl.createShader(gl.VERTEX_SHADER);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n  const canCompile = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n  gl.deleteShader(shader);\n  compiledGlslExtensions[cap] = canCompile;\n  return canCompile;\n}\n\n// TODO - cache the value\nfunction getFeature(gl, cap) {\n  const feature = WEBGL_FEATURES[cap];\n  assert(feature, cap);\n\n  // Get extension name from table\n  const extensionName = isWebGL2(gl) ? feature[1] || feature[0] : feature[0];\n\n  // Check if the value is dependent on checking an extension\n  const value =\n    typeof extensionName === 'string' ? Boolean(gl.getExtension(extensionName)) : extensionName;\n\n  assert(value === false || value === true);\n\n  return value;\n}\n\nexport function hasFeatures(gl, features) {\n  features = Array.isArray(features) ? features : [features];\n  return features.every(feature => getFeature(gl, feature));\n}\n"]},"metadata":{},"sourceType":"module"}