{"ast":null,"code":"import _classCallCheck from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/* tslint:disable:class-name */\n\n/**\n * @enum {number}\n */\nexport var org;\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var MetadataVersion;\n\n        (function (MetadataVersion) {\n          /**\n           * 0.1.0\n           */\n          MetadataVersion[MetadataVersion[\"V1\"] = 0] = \"V1\";\n          /**\n           * 0.2.0\n           */\n\n          MetadataVersion[MetadataVersion[\"V2\"] = 1] = \"V2\";\n          /**\n           * 0.3.0 -> 0.7.1\n           */\n\n          MetadataVersion[MetadataVersion[\"V3\"] = 2] = \"V3\";\n          /**\n           * >= 0.8.0\n           */\n\n          MetadataVersion[MetadataVersion[\"V4\"] = 3] = \"V4\";\n        })(MetadataVersion = flatbuf.MetadataVersion || (flatbuf.MetadataVersion = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum {number}\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var UnionMode;\n\n        (function (UnionMode) {\n          UnionMode[UnionMode[\"Sparse\"] = 0] = \"Sparse\";\n          UnionMode[UnionMode[\"Dense\"] = 1] = \"Dense\";\n        })(UnionMode = flatbuf.UnionMode || (flatbuf.UnionMode = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum {number}\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var Precision;\n\n        (function (Precision) {\n          Precision[Precision[\"HALF\"] = 0] = \"HALF\";\n          Precision[Precision[\"SINGLE\"] = 1] = \"SINGLE\";\n          Precision[Precision[\"DOUBLE\"] = 2] = \"DOUBLE\";\n        })(Precision = flatbuf.Precision || (flatbuf.Precision = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum {number}\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var DateUnit;\n\n        (function (DateUnit) {\n          DateUnit[DateUnit[\"DAY\"] = 0] = \"DAY\";\n          DateUnit[DateUnit[\"MILLISECOND\"] = 1] = \"MILLISECOND\";\n        })(DateUnit = flatbuf.DateUnit || (flatbuf.DateUnit = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum {number}\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var TimeUnit;\n\n        (function (TimeUnit) {\n          TimeUnit[TimeUnit[\"SECOND\"] = 0] = \"SECOND\";\n          TimeUnit[TimeUnit[\"MILLISECOND\"] = 1] = \"MILLISECOND\";\n          TimeUnit[TimeUnit[\"MICROSECOND\"] = 2] = \"MICROSECOND\";\n          TimeUnit[TimeUnit[\"NANOSECOND\"] = 3] = \"NANOSECOND\";\n        })(TimeUnit = flatbuf.TimeUnit || (flatbuf.TimeUnit = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum {number}\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var IntervalUnit;\n\n        (function (IntervalUnit) {\n          IntervalUnit[IntervalUnit[\"YEAR_MONTH\"] = 0] = \"YEAR_MONTH\";\n          IntervalUnit[IntervalUnit[\"DAY_TIME\"] = 1] = \"DAY_TIME\";\n        })(IntervalUnit = flatbuf.IntervalUnit || (flatbuf.IntervalUnit = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * Top-level Type value, enabling extensible type-specific metadata. We can\n * add new logical types to Type without breaking backwards compatibility\n *\n * @enum {number}\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var Type;\n\n        (function (Type) {\n          Type[Type[\"NONE\"] = 0] = \"NONE\";\n          Type[Type[\"Null\"] = 1] = \"Null\";\n          Type[Type[\"Int\"] = 2] = \"Int\";\n          Type[Type[\"FloatingPoint\"] = 3] = \"FloatingPoint\";\n          Type[Type[\"Binary\"] = 4] = \"Binary\";\n          Type[Type[\"Utf8\"] = 5] = \"Utf8\";\n          Type[Type[\"Bool\"] = 6] = \"Bool\";\n          Type[Type[\"Decimal\"] = 7] = \"Decimal\";\n          Type[Type[\"Date\"] = 8] = \"Date\";\n          Type[Type[\"Time\"] = 9] = \"Time\";\n          Type[Type[\"Timestamp\"] = 10] = \"Timestamp\";\n          Type[Type[\"Interval\"] = 11] = \"Interval\";\n          Type[Type[\"List\"] = 12] = \"List\";\n          Type[Type[\"Struct_\"] = 13] = \"Struct_\";\n          Type[Type[\"Union\"] = 14] = \"Union\";\n          Type[Type[\"FixedSizeBinary\"] = 15] = \"FixedSizeBinary\";\n          Type[Type[\"FixedSizeList\"] = 16] = \"FixedSizeList\";\n          Type[Type[\"Map\"] = 17] = \"Map\";\n          Type[Type[\"Duration\"] = 18] = \"Duration\";\n          Type[Type[\"LargeBinary\"] = 19] = \"LargeBinary\";\n          Type[Type[\"LargeUtf8\"] = 20] = \"LargeUtf8\";\n          Type[Type[\"LargeList\"] = 21] = \"LargeList\";\n        })(Type = flatbuf.Type || (flatbuf.Type = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * Endianness of the platform producing the data\n *\n * @enum {number}\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var Endianness;\n\n        (function (Endianness) {\n          Endianness[Endianness[\"Little\"] = 0] = \"Little\";\n          Endianness[Endianness[\"Big\"] = 1] = \"Big\";\n        })(Endianness = flatbuf.Endianness || (flatbuf.Endianness = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * These are stored in the flatbuffer in the Type union below\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var Null = /*#__PURE__*/function () {\n          function Null() {\n            _classCallCheck(this, Null);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Null\n           */\n\n\n          _createClass(Null, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param Null= obj\n             * @returns Null\n             */\n\n          }], [{\n            key: \"getRootAsNull\",\n            value: function getRootAsNull(bb, obj) {\n              return (obj || new Null()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }, {\n            key: \"startNull\",\n            value: function startNull(builder) {\n              builder.startObject(0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endNull\",\n            value: function endNull(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createNull\",\n            value: function createNull(builder) {\n              Null.startNull(builder);\n              return Null.endNull(builder);\n            }\n          }]);\n\n          return Null;\n        }();\n\n        flatbuf.Null = Null;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct\n * (according to the physical memory layout). We used Struct_ here as\n * Struct is a reserved word in Flatbuffers\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var Struct_ = /*#__PURE__*/function () {\n          function Struct_() {\n            _classCallCheck(this, Struct_);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Struct_\n           */\n\n\n          _createClass(Struct_, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param Struct_= obj\n             * @returns Struct_\n             */\n\n          }], [{\n            key: \"getRootAsStruct_\",\n            value: function getRootAsStruct_(bb, obj) {\n              return (obj || new Struct_()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }, {\n            key: \"startStruct_\",\n            value: function startStruct_(builder) {\n              builder.startObject(0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endStruct_\",\n            value: function endStruct_(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createStruct_\",\n            value: function createStruct_(builder) {\n              Struct_.startStruct_(builder);\n              return Struct_.endStruct_(builder);\n            }\n          }]);\n\n          return Struct_;\n        }();\n\n        flatbuf.Struct_ = Struct_;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var List = /*#__PURE__*/function () {\n          function List() {\n            _classCallCheck(this, List);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns List\n           */\n\n\n          _createClass(List, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param List= obj\n             * @returns List\n             */\n\n          }], [{\n            key: \"getRootAsList\",\n            value: function getRootAsList(bb, obj) {\n              return (obj || new List()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }, {\n            key: \"startList\",\n            value: function startList(builder) {\n              builder.startObject(0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endList\",\n            value: function endList(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createList\",\n            value: function createList(builder) {\n              List.startList(builder);\n              return List.endList(builder);\n            }\n          }]);\n\n          return List;\n        }();\n\n        flatbuf.List = List;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Same as List, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var LargeList = /*#__PURE__*/function () {\n          function LargeList() {\n            _classCallCheck(this, LargeList);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns LargeList\n           */\n\n\n          _createClass(LargeList, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param LargeList= obj\n             * @returns LargeList\n             */\n\n          }], [{\n            key: \"getRootAsLargeList\",\n            value: function getRootAsLargeList(bb, obj) {\n              return (obj || new LargeList()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }, {\n            key: \"startLargeList\",\n            value: function startLargeList(builder) {\n              builder.startObject(0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endLargeList\",\n            value: function endLargeList(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createLargeList\",\n            value: function createLargeList(builder) {\n              LargeList.startLargeList(builder);\n              return LargeList.endLargeList(builder);\n            }\n          }]);\n\n          return LargeList;\n        }();\n\n        flatbuf.LargeList = LargeList;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var FixedSizeList = /*#__PURE__*/function () {\n          function FixedSizeList() {\n            _classCallCheck(this, FixedSizeList);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns FixedSizeList\n           */\n\n\n          _createClass(FixedSizeList, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param FixedSizeList= obj\n             * @returns FixedSizeList\n             */\n\n          }, {\n            key: \"listSize\",\n\n            /**\n             * Number of list items per value\n             *\n             * @returns number\n             */\n            value: function listSize() {\n              var offset = this.bb.__offset(this.bb_pos, 4);\n\n              return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }], [{\n            key: \"getRootAsFixedSizeList\",\n            value: function getRootAsFixedSizeList(bb, obj) {\n              return (obj || new FixedSizeList()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n          }, {\n            key: \"startFixedSizeList\",\n            value: function startFixedSizeList(builder) {\n              builder.startObject(1);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param number listSize\n             */\n\n          }, {\n            key: \"addListSize\",\n            value: function addListSize(builder, listSize) {\n              builder.addFieldInt32(0, listSize, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endFixedSizeList\",\n            value: function endFixedSizeList(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createFixedSizeList\",\n            value: function createFixedSizeList(builder, listSize) {\n              FixedSizeList.startFixedSizeList(builder);\n              FixedSizeList.addListSize(builder, listSize);\n              return FixedSizeList.endFixedSizeList(builder);\n            }\n          }]);\n\n          return FixedSizeList;\n        }();\n\n        flatbuf.FixedSizeList = FixedSizeList;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * A Map is a logical nested type that is represented as\n *\n * List<entry: Struct<key: K, value: V>>\n *\n * In this layout, the keys and values are each respectively contiguous. We do\n * not constrain the key and value types, so the application is responsible\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\n * may be set in the metadata for this field\n *\n * In a Field with Map type, the Field has a child Struct field, which then\n * has two children: key type and the second the value type. The names of the\n * child fields may be respectively \"entry\", \"key\", and \"value\", but this is\n * not enforced\n *\n * Map\n *   - child[0] entry: Struct\n *     - child[0] key: K\n *     - child[1] value: V\n *\n * Neither the \"entry\" field nor the \"key\" field may be nullable.\n *\n * The metadata is structured so that Arrow systems without special handling\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\n * field must have the same contents as a List.\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var Map = /*#__PURE__*/function () {\n          function Map() {\n            _classCallCheck(this, Map);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Map\n           */\n\n\n          _createClass(Map, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param Map= obj\n             * @returns Map\n             */\n\n          }, {\n            key: \"keysSorted\",\n\n            /**\n             * Set to true if the keys within each value are sorted\n             *\n             * @returns boolean\n             */\n            value: function keysSorted() {\n              var offset = this.bb.__offset(this.bb_pos, 4);\n\n              return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }], [{\n            key: \"getRootAsMap\",\n            value: function getRootAsMap(bb, obj) {\n              return (obj || new Map()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n          }, {\n            key: \"startMap\",\n            value: function startMap(builder) {\n              builder.startObject(1);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param boolean keysSorted\n             */\n\n          }, {\n            key: \"addKeysSorted\",\n            value: function addKeysSorted(builder, keysSorted) {\n              builder.addFieldInt8(0, +keysSorted, +false);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endMap\",\n            value: function endMap(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createMap\",\n            value: function createMap(builder, keysSorted) {\n              Map.startMap(builder);\n              Map.addKeysSorted(builder, keysSorted);\n              return Map.endMap(builder);\n            }\n          }]);\n\n          return Map;\n        }();\n\n        flatbuf.Map = Map;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * A union is a complex type with children in Field\n * By default ids in the type vector refer to the offsets in the children\n * optionally typeIds provides an indirection between the child offset and the type id\n * for each child typeIds[offset] is the id used in the type vector\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var Union = /*#__PURE__*/function () {\n          function Union() {\n            _classCallCheck(this, Union);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Union\n           */\n\n\n          _createClass(Union, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param Union= obj\n             * @returns Union\n             */\n\n          }, {\n            key: \"mode\",\n\n            /**\n             * @returns org.apache.arrow.flatbuf.UnionMode\n             */\n            value: function mode() {\n              var offset = this.bb.__offset(this.bb_pos, 4);\n\n              return offset ?\n              /**  */\n              this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.UnionMode.Sparse;\n            }\n            /**\n             * @param number index\n             * @returns number\n             */\n\n          }, {\n            key: \"typeIds\",\n            value: function typeIds(index) {\n              var offset = this.bb.__offset(this.bb_pos, 6);\n\n              return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n            }\n            /**\n             * @returns number\n             */\n\n          }, {\n            key: \"typeIdsLength\",\n            value: function typeIdsLength() {\n              var offset = this.bb.__offset(this.bb_pos, 6);\n\n              return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n            }\n            /**\n             * @returns Int32Array\n             */\n\n          }, {\n            key: \"typeIdsArray\",\n            value: function typeIdsArray() {\n              var offset = this.bb.__offset(this.bb_pos, 6);\n\n              return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }], [{\n            key: \"getRootAsUnion\",\n            value: function getRootAsUnion(bb, obj) {\n              return (obj || new Union()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n          }, {\n            key: \"startUnion\",\n            value: function startUnion(builder) {\n              builder.startObject(2);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param org.apache.arrow.flatbuf.UnionMode mode\n             */\n\n          }, {\n            key: \"addMode\",\n            value: function addMode(builder, mode) {\n              builder.addFieldInt16(0, mode, org.apache.arrow.flatbuf.UnionMode.Sparse);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Offset typeIdsOffset\n             */\n\n          }, {\n            key: \"addTypeIds\",\n            value: function addTypeIds(builder, typeIdsOffset) {\n              builder.addFieldOffset(1, typeIdsOffset, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param Array.<number> data\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"createTypeIdsVector\",\n            value: function createTypeIdsVector(builder, data) {\n              builder.startVector(4, data.length, 4);\n\n              for (var i = data.length - 1; i >= 0; i--) {\n                builder.addInt32(data[i]);\n              }\n\n              return builder.endVector();\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param number numElems\n             */\n\n          }, {\n            key: \"startTypeIdsVector\",\n            value: function startTypeIdsVector(builder, numElems) {\n              builder.startVector(4, numElems, 4);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endUnion\",\n            value: function endUnion(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createUnion\",\n            value: function createUnion(builder, mode, typeIdsOffset) {\n              Union.startUnion(builder);\n              Union.addMode(builder, mode);\n              Union.addTypeIds(builder, typeIdsOffset);\n              return Union.endUnion(builder);\n            }\n          }]);\n\n          return Union;\n        }();\n\n        flatbuf.Union = Union;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var Int = /*#__PURE__*/function () {\n          function Int() {\n            _classCallCheck(this, Int);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Int\n           */\n\n\n          _createClass(Int, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param Int= obj\n             * @returns Int\n             */\n\n          }, {\n            key: \"bitWidth\",\n\n            /**\n             * @returns number\n             */\n            value: function bitWidth() {\n              var offset = this.bb.__offset(this.bb_pos, 4);\n\n              return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n            }\n            /**\n             * @returns boolean\n             */\n\n          }, {\n            key: \"isSigned\",\n            value: function isSigned() {\n              var offset = this.bb.__offset(this.bb_pos, 6);\n\n              return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }], [{\n            key: \"getRootAsInt\",\n            value: function getRootAsInt(bb, obj) {\n              return (obj || new Int()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n          }, {\n            key: \"startInt\",\n            value: function startInt(builder) {\n              builder.startObject(2);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param number bitWidth\n             */\n\n          }, {\n            key: \"addBitWidth\",\n            value: function addBitWidth(builder, bitWidth) {\n              builder.addFieldInt32(0, bitWidth, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param boolean isSigned\n             */\n\n          }, {\n            key: \"addIsSigned\",\n            value: function addIsSigned(builder, isSigned) {\n              builder.addFieldInt8(1, +isSigned, +false);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endInt\",\n            value: function endInt(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createInt\",\n            value: function createInt(builder, bitWidth, isSigned) {\n              Int.startInt(builder);\n              Int.addBitWidth(builder, bitWidth);\n              Int.addIsSigned(builder, isSigned);\n              return Int.endInt(builder);\n            }\n          }]);\n\n          return Int;\n        }();\n\n        flatbuf.Int = Int;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var FloatingPoint = /*#__PURE__*/function () {\n          function FloatingPoint() {\n            _classCallCheck(this, FloatingPoint);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns FloatingPoint\n           */\n\n\n          _createClass(FloatingPoint, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param FloatingPoint= obj\n             * @returns FloatingPoint\n             */\n\n          }, {\n            key: \"precision\",\n\n            /**\n             * @returns org.apache.arrow.flatbuf.Precision\n             */\n            value: function precision() {\n              var offset = this.bb.__offset(this.bb_pos, 4);\n\n              return offset ?\n              /**  */\n              this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.Precision.HALF;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }], [{\n            key: \"getRootAsFloatingPoint\",\n            value: function getRootAsFloatingPoint(bb, obj) {\n              return (obj || new FloatingPoint()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n          }, {\n            key: \"startFloatingPoint\",\n            value: function startFloatingPoint(builder) {\n              builder.startObject(1);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param org.apache.arrow.flatbuf.Precision precision\n             */\n\n          }, {\n            key: \"addPrecision\",\n            value: function addPrecision(builder, precision) {\n              builder.addFieldInt16(0, precision, org.apache.arrow.flatbuf.Precision.HALF);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endFloatingPoint\",\n            value: function endFloatingPoint(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createFloatingPoint\",\n            value: function createFloatingPoint(builder, precision) {\n              FloatingPoint.startFloatingPoint(builder);\n              FloatingPoint.addPrecision(builder, precision);\n              return FloatingPoint.endFloatingPoint(builder);\n            }\n          }]);\n\n          return FloatingPoint;\n        }();\n\n        flatbuf.FloatingPoint = FloatingPoint;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Unicode with UTF-8 encoding\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var Utf8 = /*#__PURE__*/function () {\n          function Utf8() {\n            _classCallCheck(this, Utf8);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Utf8\n           */\n\n\n          _createClass(Utf8, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param Utf8= obj\n             * @returns Utf8\n             */\n\n          }], [{\n            key: \"getRootAsUtf8\",\n            value: function getRootAsUtf8(bb, obj) {\n              return (obj || new Utf8()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }, {\n            key: \"startUtf8\",\n            value: function startUtf8(builder) {\n              builder.startObject(0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endUtf8\",\n            value: function endUtf8(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createUtf8\",\n            value: function createUtf8(builder) {\n              Utf8.startUtf8(builder);\n              return Utf8.endUtf8(builder);\n            }\n          }]);\n\n          return Utf8;\n        }();\n\n        flatbuf.Utf8 = Utf8;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Opaque binary data\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var Binary = /*#__PURE__*/function () {\n          function Binary() {\n            _classCallCheck(this, Binary);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Binary\n           */\n\n\n          _createClass(Binary, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param Binary= obj\n             * @returns Binary\n             */\n\n          }], [{\n            key: \"getRootAsBinary\",\n            value: function getRootAsBinary(bb, obj) {\n              return (obj || new Binary()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }, {\n            key: \"startBinary\",\n            value: function startBinary(builder) {\n              builder.startObject(0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endBinary\",\n            value: function endBinary(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createBinary\",\n            value: function createBinary(builder) {\n              Binary.startBinary(builder);\n              return Binary.endBinary(builder);\n            }\n          }]);\n\n          return Binary;\n        }();\n\n        flatbuf.Binary = Binary;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Same as Utf8, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var LargeUtf8 = /*#__PURE__*/function () {\n          function LargeUtf8() {\n            _classCallCheck(this, LargeUtf8);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns LargeUtf8\n           */\n\n\n          _createClass(LargeUtf8, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param LargeUtf8= obj\n             * @returns LargeUtf8\n             */\n\n          }], [{\n            key: \"getRootAsLargeUtf8\",\n            value: function getRootAsLargeUtf8(bb, obj) {\n              return (obj || new LargeUtf8()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }, {\n            key: \"startLargeUtf8\",\n            value: function startLargeUtf8(builder) {\n              builder.startObject(0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endLargeUtf8\",\n            value: function endLargeUtf8(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createLargeUtf8\",\n            value: function createLargeUtf8(builder) {\n              LargeUtf8.startLargeUtf8(builder);\n              return LargeUtf8.endLargeUtf8(builder);\n            }\n          }]);\n\n          return LargeUtf8;\n        }();\n\n        flatbuf.LargeUtf8 = LargeUtf8;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Same as Binary, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var LargeBinary = /*#__PURE__*/function () {\n          function LargeBinary() {\n            _classCallCheck(this, LargeBinary);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns LargeBinary\n           */\n\n\n          _createClass(LargeBinary, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param LargeBinary= obj\n             * @returns LargeBinary\n             */\n\n          }], [{\n            key: \"getRootAsLargeBinary\",\n            value: function getRootAsLargeBinary(bb, obj) {\n              return (obj || new LargeBinary()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }, {\n            key: \"startLargeBinary\",\n            value: function startLargeBinary(builder) {\n              builder.startObject(0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endLargeBinary\",\n            value: function endLargeBinary(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createLargeBinary\",\n            value: function createLargeBinary(builder) {\n              LargeBinary.startLargeBinary(builder);\n              return LargeBinary.endLargeBinary(builder);\n            }\n          }]);\n\n          return LargeBinary;\n        }();\n\n        flatbuf.LargeBinary = LargeBinary;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var FixedSizeBinary = /*#__PURE__*/function () {\n          function FixedSizeBinary() {\n            _classCallCheck(this, FixedSizeBinary);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns FixedSizeBinary\n           */\n\n\n          _createClass(FixedSizeBinary, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param FixedSizeBinary= obj\n             * @returns FixedSizeBinary\n             */\n\n          }, {\n            key: \"byteWidth\",\n\n            /**\n             * Number of bytes per value\n             *\n             * @returns number\n             */\n            value: function byteWidth() {\n              var offset = this.bb.__offset(this.bb_pos, 4);\n\n              return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }], [{\n            key: \"getRootAsFixedSizeBinary\",\n            value: function getRootAsFixedSizeBinary(bb, obj) {\n              return (obj || new FixedSizeBinary()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n          }, {\n            key: \"startFixedSizeBinary\",\n            value: function startFixedSizeBinary(builder) {\n              builder.startObject(1);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param number byteWidth\n             */\n\n          }, {\n            key: \"addByteWidth\",\n            value: function addByteWidth(builder, byteWidth) {\n              builder.addFieldInt32(0, byteWidth, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endFixedSizeBinary\",\n            value: function endFixedSizeBinary(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createFixedSizeBinary\",\n            value: function createFixedSizeBinary(builder, byteWidth) {\n              FixedSizeBinary.startFixedSizeBinary(builder);\n              FixedSizeBinary.addByteWidth(builder, byteWidth);\n              return FixedSizeBinary.endFixedSizeBinary(builder);\n            }\n          }]);\n\n          return FixedSizeBinary;\n        }();\n\n        flatbuf.FixedSizeBinary = FixedSizeBinary;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var Bool = /*#__PURE__*/function () {\n          function Bool() {\n            _classCallCheck(this, Bool);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Bool\n           */\n\n\n          _createClass(Bool, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param Bool= obj\n             * @returns Bool\n             */\n\n          }], [{\n            key: \"getRootAsBool\",\n            value: function getRootAsBool(bb, obj) {\n              return (obj || new Bool()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }, {\n            key: \"startBool\",\n            value: function startBool(builder) {\n              builder.startObject(0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endBool\",\n            value: function endBool(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createBool\",\n            value: function createBool(builder) {\n              Bool.startBool(builder);\n              return Bool.endBool(builder);\n            }\n          }]);\n\n          return Bool;\n        }();\n\n        flatbuf.Bool = Bool;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var Decimal = /*#__PURE__*/function () {\n          function Decimal() {\n            _classCallCheck(this, Decimal);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Decimal\n           */\n\n\n          _createClass(Decimal, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param Decimal= obj\n             * @returns Decimal\n             */\n\n          }, {\n            key: \"precision\",\n\n            /**\n             * Total number of decimal digits\n             *\n             * @returns number\n             */\n            value: function precision() {\n              var offset = this.bb.__offset(this.bb_pos, 4);\n\n              return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n            }\n            /**\n             * Number of digits after the decimal point \".\"\n             *\n             * @returns number\n             */\n\n          }, {\n            key: \"scale\",\n            value: function scale() {\n              var offset = this.bb.__offset(this.bb_pos, 6);\n\n              return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }], [{\n            key: \"getRootAsDecimal\",\n            value: function getRootAsDecimal(bb, obj) {\n              return (obj || new Decimal()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n          }, {\n            key: \"startDecimal\",\n            value: function startDecimal(builder) {\n              builder.startObject(2);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param number precision\n             */\n\n          }, {\n            key: \"addPrecision\",\n            value: function addPrecision(builder, precision) {\n              builder.addFieldInt32(0, precision, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param number scale\n             */\n\n          }, {\n            key: \"addScale\",\n            value: function addScale(builder, scale) {\n              builder.addFieldInt32(1, scale, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endDecimal\",\n            value: function endDecimal(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createDecimal\",\n            value: function createDecimal(builder, precision, scale) {\n              Decimal.startDecimal(builder);\n              Decimal.addPrecision(builder, precision);\n              Decimal.addScale(builder, scale);\n              return Decimal.endDecimal(builder);\n            }\n          }]);\n\n          return Decimal;\n        }();\n\n        flatbuf.Decimal = Decimal;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Date is either a 32-bit or 64-bit type representing elapsed time since UNIX\n * epoch (1970-01-01), stored in either of two units:\n *\n * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no\n *   leap seconds), where the values are evenly divisible by 86400000\n * * Days (32 bits) since the UNIX epoch\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var Date = /*#__PURE__*/function () {\n          function Date() {\n            _classCallCheck(this, Date);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Date\n           */\n\n\n          _createClass(Date, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param Date= obj\n             * @returns Date\n             */\n\n          }, {\n            key: \"unit\",\n\n            /**\n             * @returns org.apache.arrow.flatbuf.DateUnit\n             */\n            value: function unit() {\n              var offset = this.bb.__offset(this.bb_pos, 4);\n\n              return offset ?\n              /**  */\n              this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.DateUnit.MILLISECOND;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }], [{\n            key: \"getRootAsDate\",\n            value: function getRootAsDate(bb, obj) {\n              return (obj || new Date()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n          }, {\n            key: \"startDate\",\n            value: function startDate(builder) {\n              builder.startObject(1);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param org.apache.arrow.flatbuf.DateUnit unit\n             */\n\n          }, {\n            key: \"addUnit\",\n            value: function addUnit(builder, unit) {\n              builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.DateUnit.MILLISECOND);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endDate\",\n            value: function endDate(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createDate\",\n            value: function createDate(builder, unit) {\n              Date.startDate(builder);\n              Date.addUnit(builder, unit);\n              return Date.endDate(builder);\n            }\n          }]);\n\n          return Date;\n        }();\n\n        flatbuf.Date = Date;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Time type. The physical storage type depends on the unit\n * - SECOND and MILLISECOND: 32 bits\n * - MICROSECOND and NANOSECOND: 64 bits\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var Time = /*#__PURE__*/function () {\n          function Time() {\n            _classCallCheck(this, Time);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Time\n           */\n\n\n          _createClass(Time, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param Time= obj\n             * @returns Time\n             */\n\n          }, {\n            key: \"unit\",\n\n            /**\n             * @returns org.apache.arrow.flatbuf.TimeUnit\n             */\n            value: function unit() {\n              var offset = this.bb.__offset(this.bb_pos, 4);\n\n              return offset ?\n              /**  */\n              this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n            }\n            /**\n             * @returns number\n             */\n\n          }, {\n            key: \"bitWidth\",\n            value: function bitWidth() {\n              var offset = this.bb.__offset(this.bb_pos, 6);\n\n              return offset ? this.bb.readInt32(this.bb_pos + offset) : 32;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }], [{\n            key: \"getRootAsTime\",\n            value: function getRootAsTime(bb, obj) {\n              return (obj || new Time()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n          }, {\n            key: \"startTime\",\n            value: function startTime(builder) {\n              builder.startObject(2);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param org.apache.arrow.flatbuf.TimeUnit unit\n             */\n\n          }, {\n            key: \"addUnit\",\n            value: function addUnit(builder, unit) {\n              builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param number bitWidth\n             */\n\n          }, {\n            key: \"addBitWidth\",\n            value: function addBitWidth(builder, bitWidth) {\n              builder.addFieldInt32(1, bitWidth, 32);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endTime\",\n            value: function endTime(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createTime\",\n            value: function createTime(builder, unit, bitWidth) {\n              Time.startTime(builder);\n              Time.addUnit(builder, unit);\n              Time.addBitWidth(builder, bitWidth);\n              return Time.endTime(builder);\n            }\n          }]);\n\n          return Time;\n        }();\n\n        flatbuf.Time = Time;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding\n * leap seconds, as a 64-bit integer. Note that UNIX time does not include\n * leap seconds.\n *\n * The Timestamp metadata supports both \"time zone naive\" and \"time zone\n * aware\" timestamps. Read about the timezone attribute for more detail\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var Timestamp = /*#__PURE__*/function () {\n          function Timestamp() {\n            _classCallCheck(this, Timestamp);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Timestamp\n           */\n\n\n          _createClass(Timestamp, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param Timestamp= obj\n             * @returns Timestamp\n             */\n\n          }, {\n            key: \"unit\",\n\n            /**\n             * @returns org.apache.arrow.flatbuf.TimeUnit\n             */\n            value: function unit() {\n              var offset = this.bb.__offset(this.bb_pos, 4);\n\n              return offset ?\n              /**  */\n              this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.TimeUnit.SECOND;\n            }\n          }, {\n            key: \"timezone\",\n            value: function timezone(optionalEncoding) {\n              var offset = this.bb.__offset(this.bb_pos, 6);\n\n              return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }], [{\n            key: \"getRootAsTimestamp\",\n            value: function getRootAsTimestamp(bb, obj) {\n              return (obj || new Timestamp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n          }, {\n            key: \"startTimestamp\",\n            value: function startTimestamp(builder) {\n              builder.startObject(2);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param org.apache.arrow.flatbuf.TimeUnit unit\n             */\n\n          }, {\n            key: \"addUnit\",\n            value: function addUnit(builder, unit) {\n              builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.SECOND);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Offset timezoneOffset\n             */\n\n          }, {\n            key: \"addTimezone\",\n            value: function addTimezone(builder, timezoneOffset) {\n              builder.addFieldOffset(1, timezoneOffset, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endTimestamp\",\n            value: function endTimestamp(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createTimestamp\",\n            value: function createTimestamp(builder, unit, timezoneOffset) {\n              Timestamp.startTimestamp(builder);\n              Timestamp.addUnit(builder, unit);\n              Timestamp.addTimezone(builder, timezoneOffset);\n              return Timestamp.endTimestamp(builder);\n            }\n          }]);\n\n          return Timestamp;\n        }();\n\n        flatbuf.Timestamp = Timestamp;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var Interval = /*#__PURE__*/function () {\n          function Interval() {\n            _classCallCheck(this, Interval);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Interval\n           */\n\n\n          _createClass(Interval, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param Interval= obj\n             * @returns Interval\n             */\n\n          }, {\n            key: \"unit\",\n\n            /**\n             * @returns org.apache.arrow.flatbuf.IntervalUnit\n             */\n            value: function unit() {\n              var offset = this.bb.__offset(this.bb_pos, 4);\n\n              return offset ?\n              /**  */\n              this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }], [{\n            key: \"getRootAsInterval\",\n            value: function getRootAsInterval(bb, obj) {\n              return (obj || new Interval()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n          }, {\n            key: \"startInterval\",\n            value: function startInterval(builder) {\n              builder.startObject(1);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param org.apache.arrow.flatbuf.IntervalUnit unit\n             */\n\n          }, {\n            key: \"addUnit\",\n            value: function addUnit(builder, unit) {\n              builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endInterval\",\n            value: function endInterval(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createInterval\",\n            value: function createInterval(builder, unit) {\n              Interval.startInterval(builder);\n              Interval.addUnit(builder, unit);\n              return Interval.endInterval(builder);\n            }\n          }]);\n\n          return Interval;\n        }();\n\n        flatbuf.Interval = Interval;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var Duration = /*#__PURE__*/function () {\n          function Duration() {\n            _classCallCheck(this, Duration);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Duration\n           */\n\n\n          _createClass(Duration, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param Duration= obj\n             * @returns Duration\n             */\n\n          }, {\n            key: \"unit\",\n\n            /**\n             * @returns org.apache.arrow.flatbuf.TimeUnit\n             */\n            value: function unit() {\n              var offset = this.bb.__offset(this.bb_pos, 4);\n\n              return offset ?\n              /**  */\n              this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }], [{\n            key: \"getRootAsDuration\",\n            value: function getRootAsDuration(bb, obj) {\n              return (obj || new Duration()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n          }, {\n            key: \"startDuration\",\n            value: function startDuration(builder) {\n              builder.startObject(1);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param org.apache.arrow.flatbuf.TimeUnit unit\n             */\n\n          }, {\n            key: \"addUnit\",\n            value: function addUnit(builder, unit) {\n              builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endDuration\",\n            value: function endDuration(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createDuration\",\n            value: function createDuration(builder, unit) {\n              Duration.startDuration(builder);\n              Duration.addUnit(builder, unit);\n              return Duration.endDuration(builder);\n            }\n          }]);\n\n          return Duration;\n        }();\n\n        flatbuf.Duration = Duration;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * user defined key value pairs to add custom metadata to arrow\n * key namespacing is the responsibility of the user\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var KeyValue = /*#__PURE__*/function () {\n          function KeyValue() {\n            _classCallCheck(this, KeyValue);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns KeyValue\n           */\n\n\n          _createClass(KeyValue, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param KeyValue= obj\n             * @returns KeyValue\n             */\n\n          }, {\n            key: \"key\",\n            value: function key(optionalEncoding) {\n              var offset = this.bb.__offset(this.bb_pos, 4);\n\n              return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n            }\n          }, {\n            key: \"value\",\n            value: function value(optionalEncoding) {\n              var offset = this.bb.__offset(this.bb_pos, 6);\n\n              return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }], [{\n            key: \"getRootAsKeyValue\",\n            value: function getRootAsKeyValue(bb, obj) {\n              return (obj || new KeyValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n          }, {\n            key: \"startKeyValue\",\n            value: function startKeyValue(builder) {\n              builder.startObject(2);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Offset keyOffset\n             */\n\n          }, {\n            key: \"addKey\",\n            value: function addKey(builder, keyOffset) {\n              builder.addFieldOffset(0, keyOffset, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Offset valueOffset\n             */\n\n          }, {\n            key: \"addValue\",\n            value: function addValue(builder, valueOffset) {\n              builder.addFieldOffset(1, valueOffset, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endKeyValue\",\n            value: function endKeyValue(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createKeyValue\",\n            value: function createKeyValue(builder, keyOffset, valueOffset) {\n              KeyValue.startKeyValue(builder);\n              KeyValue.addKey(builder, keyOffset);\n              KeyValue.addValue(builder, valueOffset);\n              return KeyValue.endKeyValue(builder);\n            }\n          }]);\n\n          return KeyValue;\n        }();\n\n        flatbuf.KeyValue = KeyValue;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * Dictionary encoding metadata\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var DictionaryEncoding = /*#__PURE__*/function () {\n          function DictionaryEncoding() {\n            _classCallCheck(this, DictionaryEncoding);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns DictionaryEncoding\n           */\n\n\n          _createClass(DictionaryEncoding, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param DictionaryEncoding= obj\n             * @returns DictionaryEncoding\n             */\n\n          }, {\n            key: \"id\",\n\n            /**\n             * The known dictionary id in the application where this data is used. In\n             * the file or streaming formats, the dictionary ids are found in the\n             * DictionaryBatch messages\n             *\n             * @returns flatbuffers.Long\n             */\n            value: function id() {\n              var offset = this.bb.__offset(this.bb_pos, 4);\n\n              return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n            }\n            /**\n             * The dictionary indices are constrained to be positive integers. If this\n             * field is null, the indices must be signed int32\n             *\n             * @param org.apache.arrow.flatbuf.Int= obj\n             * @returns org.apache.arrow.flatbuf.Int|null\n             */\n\n          }, {\n            key: \"indexType\",\n            value: function indexType(obj) {\n              var offset = this.bb.__offset(this.bb_pos, 6);\n\n              return offset ? (obj || new org.apache.arrow.flatbuf.Int()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n            }\n            /**\n             * By default, dictionaries are not ordered, or the order does not have\n             * semantic meaning. In some statistical, applications, dictionary-encoding\n             * is used to represent ordered categorical data, and we provide a way to\n             * preserve that metadata here\n             *\n             * @returns boolean\n             */\n\n          }, {\n            key: \"isOrdered\",\n            value: function isOrdered() {\n              var offset = this.bb.__offset(this.bb_pos, 8);\n\n              return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }], [{\n            key: \"getRootAsDictionaryEncoding\",\n            value: function getRootAsDictionaryEncoding(bb, obj) {\n              return (obj || new DictionaryEncoding()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n          }, {\n            key: \"startDictionaryEncoding\",\n            value: function startDictionaryEncoding(builder) {\n              builder.startObject(3);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Long id\n             */\n\n          }, {\n            key: \"addId\",\n            value: function addId(builder, id) {\n              builder.addFieldInt64(0, id, builder.createLong(0, 0));\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Offset indexTypeOffset\n             */\n\n          }, {\n            key: \"addIndexType\",\n            value: function addIndexType(builder, indexTypeOffset) {\n              builder.addFieldOffset(1, indexTypeOffset, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param boolean isOrdered\n             */\n\n          }, {\n            key: \"addIsOrdered\",\n            value: function addIsOrdered(builder, isOrdered) {\n              builder.addFieldInt8(2, +isOrdered, +false);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endDictionaryEncoding\",\n            value: function endDictionaryEncoding(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createDictionaryEncoding\",\n            value: function createDictionaryEncoding(builder, id, indexTypeOffset, isOrdered) {\n              DictionaryEncoding.startDictionaryEncoding(builder);\n              DictionaryEncoding.addId(builder, id);\n              DictionaryEncoding.addIndexType(builder, indexTypeOffset);\n              DictionaryEncoding.addIsOrdered(builder, isOrdered);\n              return DictionaryEncoding.endDictionaryEncoding(builder);\n            }\n          }]);\n\n          return DictionaryEncoding;\n        }();\n\n        flatbuf.DictionaryEncoding = DictionaryEncoding;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * A field represents a named column in a record / row batch or child of a\n * nested type.\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var Field = /*#__PURE__*/function () {\n          function Field() {\n            _classCallCheck(this, Field);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Field\n           */\n\n\n          _createClass(Field, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param Field= obj\n             * @returns Field\n             */\n\n          }, {\n            key: \"name\",\n            value: function name(optionalEncoding) {\n              var offset = this.bb.__offset(this.bb_pos, 4);\n\n              return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n            }\n            /**\n             * Whether or not this field can contain nulls. Should be true in general.\n             *\n             * @returns boolean\n             */\n\n          }, {\n            key: \"nullable\",\n            value: function nullable() {\n              var offset = this.bb.__offset(this.bb_pos, 6);\n\n              return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n            }\n            /**\n             * @returns org.apache.arrow.flatbuf.Type\n             */\n\n          }, {\n            key: \"typeType\",\n            value: function typeType() {\n              var offset = this.bb.__offset(this.bb_pos, 8);\n\n              return offset ?\n              /**  */\n              this.bb.readUint8(this.bb_pos + offset) : org.apache.arrow.flatbuf.Type.NONE;\n            }\n            /**\n             * This is the type of the decoded value if the field is dictionary encoded.\n             *\n             * @param flatbuffers.Table obj\n             * @returns ?flatbuffers.Table\n             */\n\n          }, {\n            key: \"type\",\n            value: function type(obj) {\n              var offset = this.bb.__offset(this.bb_pos, 10);\n\n              return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n            }\n            /**\n             * Present only if the field is dictionary encoded.\n             *\n             * @param org.apache.arrow.flatbuf.DictionaryEncoding= obj\n             * @returns org.apache.arrow.flatbuf.DictionaryEncoding|null\n             */\n\n          }, {\n            key: \"dictionary\",\n            value: function dictionary(obj) {\n              var offset = this.bb.__offset(this.bb_pos, 12);\n\n              return offset ? (obj || new org.apache.arrow.flatbuf.DictionaryEncoding()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n            }\n            /**\n             * children apply only to nested data types like Struct, List and Union. For\n             * primitive types children will have length 0.\n             *\n             * @param number index\n             * @param org.apache.arrow.flatbuf.Field= obj\n             * @returns org.apache.arrow.flatbuf.Field\n             */\n\n          }, {\n            key: \"children\",\n            value: function children(index, obj) {\n              var offset = this.bb.__offset(this.bb_pos, 14);\n\n              return offset ? (obj || new org.apache.arrow.flatbuf.Field()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n            }\n            /**\n             * @returns number\n             */\n\n          }, {\n            key: \"childrenLength\",\n            value: function childrenLength() {\n              var offset = this.bb.__offset(this.bb_pos, 14);\n\n              return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n            }\n            /**\n             * User-defined metadata\n             *\n             * @param number index\n             * @param org.apache.arrow.flatbuf.KeyValue= obj\n             * @returns org.apache.arrow.flatbuf.KeyValue\n             */\n\n          }, {\n            key: \"customMetadata\",\n            value: function customMetadata(index, obj) {\n              var offset = this.bb.__offset(this.bb_pos, 16);\n\n              return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n            }\n            /**\n             * @returns number\n             */\n\n          }, {\n            key: \"customMetadataLength\",\n            value: function customMetadataLength() {\n              var offset = this.bb.__offset(this.bb_pos, 16);\n\n              return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }], [{\n            key: \"getRootAsField\",\n            value: function getRootAsField(bb, obj) {\n              return (obj || new Field()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n          }, {\n            key: \"startField\",\n            value: function startField(builder) {\n              builder.startObject(7);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Offset nameOffset\n             */\n\n          }, {\n            key: \"addName\",\n            value: function addName(builder, nameOffset) {\n              builder.addFieldOffset(0, nameOffset, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param boolean nullable\n             */\n\n          }, {\n            key: \"addNullable\",\n            value: function addNullable(builder, nullable) {\n              builder.addFieldInt8(1, +nullable, +false);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param org.apache.arrow.flatbuf.Type typeType\n             */\n\n          }, {\n            key: \"addTypeType\",\n            value: function addTypeType(builder, typeType) {\n              builder.addFieldInt8(2, typeType, org.apache.arrow.flatbuf.Type.NONE);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Offset typeOffset\n             */\n\n          }, {\n            key: \"addType\",\n            value: function addType(builder, typeOffset) {\n              builder.addFieldOffset(3, typeOffset, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Offset dictionaryOffset\n             */\n\n          }, {\n            key: \"addDictionary\",\n            value: function addDictionary(builder, dictionaryOffset) {\n              builder.addFieldOffset(4, dictionaryOffset, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Offset childrenOffset\n             */\n\n          }, {\n            key: \"addChildren\",\n            value: function addChildren(builder, childrenOffset) {\n              builder.addFieldOffset(5, childrenOffset, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param Array.<flatbuffers.Offset> data\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"createChildrenVector\",\n            value: function createChildrenVector(builder, data) {\n              builder.startVector(4, data.length, 4);\n\n              for (var i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n              }\n\n              return builder.endVector();\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param number numElems\n             */\n\n          }, {\n            key: \"startChildrenVector\",\n            value: function startChildrenVector(builder, numElems) {\n              builder.startVector(4, numElems, 4);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Offset customMetadataOffset\n             */\n\n          }, {\n            key: \"addCustomMetadata\",\n            value: function addCustomMetadata(builder, customMetadataOffset) {\n              builder.addFieldOffset(6, customMetadataOffset, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param Array.<flatbuffers.Offset> data\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"createCustomMetadataVector\",\n            value: function createCustomMetadataVector(builder, data) {\n              builder.startVector(4, data.length, 4);\n\n              for (var i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n              }\n\n              return builder.endVector();\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param number numElems\n             */\n\n          }, {\n            key: \"startCustomMetadataVector\",\n            value: function startCustomMetadataVector(builder, numElems) {\n              builder.startVector(4, numElems, 4);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endField\",\n            value: function endField(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createField\",\n            value: function createField(builder, nameOffset, nullable, typeType, typeOffset, dictionaryOffset, childrenOffset, customMetadataOffset) {\n              Field.startField(builder);\n              Field.addName(builder, nameOffset);\n              Field.addNullable(builder, nullable);\n              Field.addTypeType(builder, typeType);\n              Field.addType(builder, typeOffset);\n              Field.addDictionary(builder, dictionaryOffset);\n              Field.addChildren(builder, childrenOffset);\n              Field.addCustomMetadata(builder, customMetadataOffset);\n              return Field.endField(builder);\n            }\n          }]);\n\n          return Field;\n        }();\n\n        flatbuf.Field = Field;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * A Buffer represents a single contiguous memory segment\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var Buffer = /*#__PURE__*/function () {\n          function Buffer() {\n            _classCallCheck(this, Buffer);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Buffer\n           */\n\n\n          _createClass(Buffer, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * The relative offset into the shared memory page where the bytes for this\n             * buffer starts\n             *\n             * @returns flatbuffers.Long\n             */\n\n          }, {\n            key: \"offset\",\n            value: function offset() {\n              return this.bb.readInt64(this.bb_pos);\n            }\n            /**\n             * The absolute length (in bytes) of the memory buffer. The memory is found\n             * from offset (inclusive) to offset + length (non-inclusive).\n             *\n             * @returns flatbuffers.Long\n             */\n\n          }, {\n            key: \"length\",\n            value: function length() {\n              return this.bb.readInt64(this.bb_pos + 8);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Long offset\n             * @param flatbuffers.Long length\n             * @returns flatbuffers.Offset\n             */\n\n          }], [{\n            key: \"createBuffer\",\n            value: function createBuffer(builder, offset, length) {\n              builder.prep(8, 16);\n              builder.writeInt64(length);\n              builder.writeInt64(offset);\n              return builder.offset();\n            }\n          }]);\n\n          return Buffer;\n        }();\n\n        flatbuf.Buffer = Buffer;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * A Schema describes the columns in a row batch\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var Schema = /*#__PURE__*/function () {\n          function Schema() {\n            _classCallCheck(this, Schema);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Schema\n           */\n\n\n          _createClass(Schema, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param Schema= obj\n             * @returns Schema\n             */\n\n          }, {\n            key: \"endianness\",\n\n            /**\n             * endianness of the buffer\n             * it is Little Endian by default\n             * if endianness doesn't match the underlying system then the vectors need to be converted\n             *\n             * @returns org.apache.arrow.flatbuf.Endianness\n             */\n            value: function endianness() {\n              var offset = this.bb.__offset(this.bb_pos, 4);\n\n              return offset ?\n              /**  */\n              this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.Endianness.Little;\n            }\n            /**\n             * @param number index\n             * @param org.apache.arrow.flatbuf.Field= obj\n             * @returns org.apache.arrow.flatbuf.Field\n             */\n\n          }, {\n            key: \"fields\",\n            value: function fields(index, obj) {\n              var offset = this.bb.__offset(this.bb_pos, 6);\n\n              return offset ? (obj || new org.apache.arrow.flatbuf.Field()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n            }\n            /**\n             * @returns number\n             */\n\n          }, {\n            key: \"fieldsLength\",\n            value: function fieldsLength() {\n              var offset = this.bb.__offset(this.bb_pos, 6);\n\n              return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n            }\n            /**\n             * @param number index\n             * @param org.apache.arrow.flatbuf.KeyValue= obj\n             * @returns org.apache.arrow.flatbuf.KeyValue\n             */\n\n          }, {\n            key: \"customMetadata\",\n            value: function customMetadata(index, obj) {\n              var offset = this.bb.__offset(this.bb_pos, 8);\n\n              return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n            }\n            /**\n             * @returns number\n             */\n\n          }, {\n            key: \"customMetadataLength\",\n            value: function customMetadataLength() {\n              var offset = this.bb.__offset(this.bb_pos, 8);\n\n              return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }], [{\n            key: \"getRootAsSchema\",\n            value: function getRootAsSchema(bb, obj) {\n              return (obj || new Schema()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n          }, {\n            key: \"startSchema\",\n            value: function startSchema(builder) {\n              builder.startObject(3);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param org.apache.arrow.flatbuf.Endianness endianness\n             */\n\n          }, {\n            key: \"addEndianness\",\n            value: function addEndianness(builder, endianness) {\n              builder.addFieldInt16(0, endianness, org.apache.arrow.flatbuf.Endianness.Little);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Offset fieldsOffset\n             */\n\n          }, {\n            key: \"addFields\",\n            value: function addFields(builder, fieldsOffset) {\n              builder.addFieldOffset(1, fieldsOffset, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param Array.<flatbuffers.Offset> data\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"createFieldsVector\",\n            value: function createFieldsVector(builder, data) {\n              builder.startVector(4, data.length, 4);\n\n              for (var i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n              }\n\n              return builder.endVector();\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param number numElems\n             */\n\n          }, {\n            key: \"startFieldsVector\",\n            value: function startFieldsVector(builder, numElems) {\n              builder.startVector(4, numElems, 4);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Offset customMetadataOffset\n             */\n\n          }, {\n            key: \"addCustomMetadata\",\n            value: function addCustomMetadata(builder, customMetadataOffset) {\n              builder.addFieldOffset(2, customMetadataOffset, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param Array.<flatbuffers.Offset> data\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"createCustomMetadataVector\",\n            value: function createCustomMetadataVector(builder, data) {\n              builder.startVector(4, data.length, 4);\n\n              for (var i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n              }\n\n              return builder.endVector();\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param number numElems\n             */\n\n          }, {\n            key: \"startCustomMetadataVector\",\n            value: function startCustomMetadataVector(builder, numElems) {\n              builder.startVector(4, numElems, 4);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endSchema\",\n            value: function endSchema(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Offset offset\n             */\n\n          }, {\n            key: \"finishSchemaBuffer\",\n            value: function finishSchemaBuffer(builder, offset) {\n              builder.finish(offset);\n            }\n          }, {\n            key: \"createSchema\",\n            value: function createSchema(builder, endianness, fieldsOffset, customMetadataOffset) {\n              Schema.startSchema(builder);\n              Schema.addEndianness(builder, endianness);\n              Schema.addFields(builder, fieldsOffset);\n              Schema.addCustomMetadata(builder, customMetadataOffset);\n              return Schema.endSchema(builder);\n            }\n          }]);\n\n          return Schema;\n        }();\n\n        flatbuf.Schema = Schema;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));","map":{"version":3,"sources":["fb/Schema.ts"],"names":[],"mappings":";;;AAAA;;AAKA;;;AAGA,OAAM,IAAW,GAAX;;AAAN,CAAA,UAAiB,GAAjB,EAAoB;AAAC,MAAA,MAAA;;AAAA,GAAA,UAAA,MAAA,EAAM;AAAC,QAAA,KAAA;;AAAA,KAAA,UAAA,KAAA,EAAK;AAAC,UAAA,OAAA;;AAAA,OAAA,UAAA,OAAA,EAAO;AACrC,YAAY,eAAZ;;AAAA,SAAA,UAAY,eAAZ,EAA2B;AACvB;;;AAGA,UAAA,eAAA,CAAA,eAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,GAAA,IAAA;AAEA;;;;AAGA,UAAA,eAAA,CAAA,eAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,GAAA,IAAA;AAEA;;;;AAGA,UAAA,eAAA,CAAA,eAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,GAAA,IAAA;AAEA;;;;AAGA,UAAA,eAAA,CAAA,eAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,GAAA,IAAA;AACH,SApBD,EAAY,eAAe,GAAf,OAAA,CAAA,eAAA,KAAA,OAAA,CAAA,eAAA,GAAe,EAAf,CAAZ;AAqBH,OAtBiC,EAAA,OAAO,GAAP,KAAA,CAAA,OAAA,KAAA,KAAA,CAAA,OAAA,GAAO,EAAP,CAAA;AAsBjC,KAtB2B,EAAA,KAAK,GAAL,MAAA,CAAA,KAAA,KAAA,MAAA,CAAA,KAAA,GAAK,EAAL,CAAA;AAsB3B,GAtBoB,EAAA,MAAM,GAAN,GAAA,CAAA,MAAA,KAAA,GAAA,CAAA,MAAA,GAAM,EAAN,CAAA;AAsBpB,CAtBD,EAAiB,GAAG,KAAH,GAAG,GAAA,EAAA,CAApB;AAwBA;;;;;AAGA,CAAA,UAAiB,GAAjB,EAAoB;AAAC,MAAA,MAAA;;AAAA,GAAA,UAAA,MAAA,EAAM;AAAC,QAAA,KAAA;;AAAA,KAAA,UAAA,KAAA,EAAK;AAAC,UAAA,OAAA;;AAAA,OAAA,UAAA,OAAA,EAAO;AACrC,YAAY,SAAZ;;AAAA,SAAA,UAAY,SAAZ,EAAqB;AACjB,UAAA,SAAA,CAAA,SAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;AACA,UAAA,SAAA,CAAA,SAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA;AACH,SAHD,EAAY,SAAS,GAAT,OAAA,CAAA,SAAA,KAAA,OAAA,CAAA,SAAA,GAAS,EAAT,CAAZ;AAIH,OALiC,EAAA,OAAO,GAAP,KAAA,CAAA,OAAA,KAAA,KAAA,CAAA,OAAA,GAAO,EAAP,CAAA;AAKjC,KAL2B,EAAA,KAAK,GAAL,MAAA,CAAA,KAAA,KAAA,MAAA,CAAA,KAAA,GAAK,EAAL,CAAA;AAK3B,GALoB,EAAA,MAAM,GAAN,GAAA,CAAA,MAAA,KAAA,GAAA,CAAA,MAAA,GAAM,EAAN,CAAA;AAKpB,CALD,EAAiB,GAAG,KAAH,GAAG,GAAA,EAAA,CAApB;AAOA;;;;;AAGA,CAAA,UAAiB,GAAjB,EAAoB;AAAC,MAAA,MAAA;;AAAA,GAAA,UAAA,MAAA,EAAM;AAAC,QAAA,KAAA;;AAAA,KAAA,UAAA,KAAA,EAAK;AAAC,UAAA,OAAA;;AAAA,OAAA,UAAA,OAAA,EAAO;AACrC,YAAY,SAAZ;;AAAA,SAAA,UAAY,SAAZ,EAAqB;AACjB,UAAA,SAAA,CAAA,SAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA;AACA,UAAA,SAAA,CAAA,SAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;AACA,UAAA,SAAA,CAAA,SAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;AACH,SAJD,EAAY,SAAS,GAAT,OAAA,CAAA,SAAA,KAAA,OAAA,CAAA,SAAA,GAAS,EAAT,CAAZ;AAKH,OANiC,EAAA,OAAO,GAAP,KAAA,CAAA,OAAA,KAAA,KAAA,CAAA,OAAA,GAAO,EAAP,CAAA;AAMjC,KAN2B,EAAA,KAAK,GAAL,MAAA,CAAA,KAAA,KAAA,MAAA,CAAA,KAAA,GAAK,EAAL,CAAA;AAM3B,GANoB,EAAA,MAAM,GAAN,GAAA,CAAA,MAAA,KAAA,GAAA,CAAA,MAAA,GAAM,EAAN,CAAA;AAMpB,CAND,EAAiB,GAAG,KAAH,GAAG,GAAA,EAAA,CAApB;AAQA;;;;;AAGA,CAAA,UAAiB,GAAjB,EAAoB;AAAC,MAAA,MAAA;;AAAA,GAAA,UAAA,MAAA,EAAM;AAAC,QAAA,KAAA;;AAAA,KAAA,UAAA,KAAA,EAAK;AAAC,UAAA,OAAA;;AAAA,OAAA,UAAA,OAAA,EAAO;AACrC,YAAY,QAAZ;;AAAA,SAAA,UAAY,QAAZ,EAAoB;AAChB,UAAA,QAAA,CAAA,QAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CAAA,GAAA,KAAA;AACA,UAAA,QAAA,CAAA,QAAA,CAAA,aAAA,CAAA,GAAA,CAAA,CAAA,GAAA,aAAA;AACH,SAHD,EAAY,QAAQ,GAAR,OAAA,CAAA,QAAA,KAAA,OAAA,CAAA,QAAA,GAAQ,EAAR,CAAZ;AAIH,OALiC,EAAA,OAAO,GAAP,KAAA,CAAA,OAAA,KAAA,KAAA,CAAA,OAAA,GAAO,EAAP,CAAA;AAKjC,KAL2B,EAAA,KAAK,GAAL,MAAA,CAAA,KAAA,KAAA,MAAA,CAAA,KAAA,GAAK,EAAL,CAAA;AAK3B,GALoB,EAAA,MAAM,GAAN,GAAA,CAAA,MAAA,KAAA,GAAA,CAAA,MAAA,GAAM,EAAN,CAAA;AAKpB,CALD,EAAiB,GAAG,KAAH,GAAG,GAAA,EAAA,CAApB;AAOA;;;;;AAGA,CAAA,UAAiB,GAAjB,EAAoB;AAAC,MAAA,MAAA;;AAAA,GAAA,UAAA,MAAA,EAAM;AAAC,QAAA,KAAA;;AAAA,KAAA,UAAA,KAAA,EAAK;AAAC,UAAA,OAAA;;AAAA,OAAA,UAAA,OAAA,EAAO;AACrC,YAAY,QAAZ;;AAAA,SAAA,UAAY,QAAZ,EAAoB;AAChB,UAAA,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;AACA,UAAA,QAAA,CAAA,QAAA,CAAA,aAAA,CAAA,GAAA,CAAA,CAAA,GAAA,aAAA;AACA,UAAA,QAAA,CAAA,QAAA,CAAA,aAAA,CAAA,GAAA,CAAA,CAAA,GAAA,aAAA;AACA,UAAA,QAAA,CAAA,QAAA,CAAA,YAAA,CAAA,GAAA,CAAA,CAAA,GAAA,YAAA;AACH,SALD,EAAY,QAAQ,GAAR,OAAA,CAAA,QAAA,KAAA,OAAA,CAAA,QAAA,GAAQ,EAAR,CAAZ;AAMH,OAPiC,EAAA,OAAO,GAAP,KAAA,CAAA,OAAA,KAAA,KAAA,CAAA,OAAA,GAAO,EAAP,CAAA;AAOjC,KAP2B,EAAA,KAAK,GAAL,MAAA,CAAA,KAAA,KAAA,MAAA,CAAA,KAAA,GAAK,EAAL,CAAA;AAO3B,GAPoB,EAAA,MAAM,GAAN,GAAA,CAAA,MAAA,KAAA,GAAA,CAAA,MAAA,GAAM,EAAN,CAAA;AAOpB,CAPD,EAAiB,GAAG,KAAH,GAAG,GAAA,EAAA,CAApB;AASA;;;;;AAGA,CAAA,UAAiB,GAAjB,EAAoB;AAAC,MAAA,MAAA;;AAAA,GAAA,UAAA,MAAA,EAAM;AAAC,QAAA,KAAA;;AAAA,KAAA,UAAA,KAAA,EAAK;AAAC,UAAA,OAAA;;AAAA,OAAA,UAAA,OAAA,EAAO;AACrC,YAAY,YAAZ;;AAAA,SAAA,UAAY,YAAZ,EAAwB;AACpB,UAAA,YAAA,CAAA,YAAA,CAAA,YAAA,CAAA,GAAA,CAAA,CAAA,GAAA,YAAA;AACA,UAAA,YAAA,CAAA,YAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA;AACH,SAHD,EAAY,YAAY,GAAZ,OAAA,CAAA,YAAA,KAAA,OAAA,CAAA,YAAA,GAAY,EAAZ,CAAZ;AAIH,OALiC,EAAA,OAAO,GAAP,KAAA,CAAA,OAAA,KAAA,KAAA,CAAA,OAAA,GAAO,EAAP,CAAA;AAKjC,KAL2B,EAAA,KAAK,GAAL,MAAA,CAAA,KAAA,KAAA,MAAA,CAAA,KAAA,GAAK,EAAL,CAAA;AAK3B,GALoB,EAAA,MAAM,GAAN,GAAA,CAAA,MAAA,KAAA,GAAA,CAAA,MAAA,GAAM,EAAN,CAAA;AAKpB,CALD,EAAiB,GAAG,KAAH,GAAG,GAAA,EAAA,CAApB;AAOA;;;;;;;;;AAOA,CAAA,UAAiB,GAAjB,EAAoB;AAAC,MAAA,MAAA;;AAAA,GAAA,UAAA,MAAA,EAAM;AAAC,QAAA,KAAA;;AAAA,KAAA,UAAA,KAAA,EAAK;AAAC,UAAA,OAAA;;AAAA,OAAA,UAAA,OAAA,EAAO;AACrC,YAAY,IAAZ;;AAAA,SAAA,UAAY,IAAZ,EAAgB;AACZ,UAAA,IAAA,CAAA,IAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA;AACA,UAAA,IAAA,CAAA,IAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA;AACA,UAAA,IAAA,CAAA,IAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CAAA,GAAA,KAAA;AACA,UAAA,IAAA,CAAA,IAAA,CAAA,eAAA,CAAA,GAAA,CAAA,CAAA,GAAA,eiBAAA,CAAA,GAAA,EAAA,CAAA,GAAA,iBAAA;AACA,UAAA,IAAA,CAAA,IAAA,CAAA,eAAA,CAAA,GAAA,EAAA,CAAA,GAAA,eAAA;AACA,UAAA,IAAA,CAAA,IAAA,CAAA,KAAA,CAAA,GAAA,EAAA,CAAA,GAAA,KAAA;AACA,UAAA,IAAA,CAAA,IAAA,CAAA,UAAA,CAAA,GAAA,EAAA,CAAA,GAAA,UAAA;AACA,UAAA,IAAA,CAAA,IAAA,CAAA,aAAA,CAAA,GAAA,EAAA,CAAA,GAAA,aAAA;AACA,UAAA,IAAA,CAAA,IAAA,CAAA,WAAA,CAAA,GAAA,EAAA,CAAA,GAAA,WAAA;AACA,UAAA,IAAA,CAAA,IAAA,CAAA,WAAA,CAAA,GAAA,EAAA,CAAA,GAAA,WAAA;AACH,SAvBD,EAAY,IAAI,GAAJ,OAAA,CAAA,IAAA,KAAA,OAAA,CAAA,IAAA,GAAI,EAAJ,CAAZ;AAwBH,OAzBiC,EAAA,OAAO,GAAP,KAAA,CAAA,OAAA,KAAA,KAAA,CAAA,OAAA,GAAO,EAAP,CAAA;AAyBjC,KAzB2B,EAAA,KAAK,GAAL,MAAA,CAAA,KAAA,KAAA,MAAA,CAAA,KAAA,GAAK,EAAL,CAAA;AAyB3B,GAzBoB,EAAA,MAAM,GAAN,GAAA,CAAA,MAAA,KAAA,GAAA,CAAA,MAAA,GAAM,EAAN,CAAA;AAyBpB,CAzBD,EAAiB,GAAG,KAAH,GAAG,GAAA,EAAA,CAApB;AA2BA;;;;;;;;AAMA,CAAA,UAAiB,GAAjB,EAAoB;AAAC,MAAA,MAAA;;AAAA,GAAA,UAAA,MAAA,EAAM;AAAC,QAAA,KAAA;;AAAA,KAAA,UAAA,KAAA,EAAK;AAAC,UAAA,OAAA;;AAAA,OAAA,UAAA,OAAA,EAAO;AACrC,YAAY,UAAZ;;AAAA,SAAA,UAAY,UAAZ,EAAsB;AAClB,UAAA,UAAA,CAAA,UAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;AACA,UAAA,UAAA,CAAA,UAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CAAA,GAAA,KAAA;AACH,SAHD,EAAY,UAAU,GAAV,OAAA,CAAA,UAAA,KAAA,OAAA,CAAA,UAAA,GAAU,EAAV,CAAZ;AAIH,OALiC,EAAA,OAAO,GAAP,KAAA,CAAA,OAAA,KAAA,KAAA,CAAA,OAAA,GAAO,EAAP,CAAA;AAKjC,KAL2B,EAAA,KAAK,GAAL,MAAA,CAAA,KAAA,KAAA,MAAA,CAAA,KAAA,GAAK,EAAL,CAAA;AAK3B,GALoB,EAAA,MAAM,GAAN,GAAA,CAAA,MAAA,KAAA,GAAA,CAAA,MAAA,GAAM,EAAN,CAAA;AAKpB,CALD,EAAiB,GAAG,KAAH,GAAG,GAAA,EAAA,CAApB;AAOA;;;;;;;AAKA,CAAA,UAAiB,GAAjB,EAAoB;AAAC,MAAA,MAAA;;AAAA,GAAA,UAAA,MAAA,EAAM;AAAC,QAAA,KAAA;;AAAA,KAAA,UAAA,KAAA,EAAK;AAAC,UAAA,OAAA;;AAAA,OAAA,UAAA,OAAA,EAAO;AAAA,YACxB,IADwB;AACrC,0BAAA;AAAA;;AACI,iBAAA,EAAA,GAAoC,IAApC;AAEA,iBAAA,MAAA,GAAiB,CAAjB;AAyCH;AAxCG;;;;;;;AALiC;AAAA;AAAA,mCAU1B,CAV0B,EAUf,EAVe,EAUW;AACxC,mBAAK,MAAL,GAAc,CAAd;AACA,mBAAK,EAAL,GAAU,EAAV;AACA,qBAAO,IAAP;AACH;AAED;;;;;;AAhBiC;AAAA;AAAA,0CAqBZ,EArBY,EAqBgB,GArBhB,EAqB0B;AACvD,qBAAO,CAAC,GAAG,IAAI,IAAI,IAAJ,EAAR,EAAkB,MAAlB,CAAyB,EAAE,CAAC,SAAH,CAAa,EAAE,CAAC,QAAH,EAAb,IAA8B,EAAE,CAAC,QAAH,EAAvD,EAAsE,EAAtE,CAAP;AACH;AAED;;;;AAzBiC;AAAA;AAAA,sCA4BhB,OA5BgB,EA4BY;AACzC,cAAA,OAAO,CAAC,WAAR,CAAoB,CAApB;AACH;AAED;;;;;AAhCiC;AAAA;AAAA,oCAoClB,OApCkB,EAoCU;AACvC,kBAAI,MAAM,GAAG,OAAO,CAAC,SAAR,EAAb;AACA,qBAAO,MAAP;AACH;AAvCgC;AAAA;AAAA,uCAyCf,OAzCe,EAyCa;AAC1C,cAAA,IAAI,CAAC,SAAL,CAAe,OAAf;AACA,qBAAO,IAAI,CAAC,OAAL,CAAa,OAAb,CAAP;AACH;AA5CgC;;AAAA;AAAA;;AACxB,QAAA,OAAA,CAAA,IAAA,GAAI,IAAJ;AA6ChB,OA9CiC,EAAA,OAAO,GAAP,KAAA,CAAA,OAAA,KAAA,KAAA,CAAA,OAAA,GAAO,EAAP,CAAA;AA8CjC,KA9C2B,EAAA,KAAK,GAAL,MAAA,CAAA,KAAA,KAAA,MAAA,CAAA,KAAA,GAAK,EAAL,CAAA;AA8C3B,GA9CoB,EAAA,MAAM,GAAN,GAAA,CAAA,MAAA,KAAA,GAAA,CAAA,MAAA,GAAM,EAAN,CAAA;AA8CpB,CA9CD,EAAiB,GAAG,KAAH,GAAG,GAAA,EAAA,CAApB;AA+CA;;;;;;;;;AAOA,CAAA,UAAiB,GAAjB,EAAoB;AAAC,MAAA,MAAA;;AAAA,GAAA,UAAA,MAAA,EAAM;AAAC,QAAA,KAAA;;AAAA,KAAA,UAAA,KAAA,EAAK;AAAC,UAAA,OAAA;;AAAA,OAAA,UAAA,OAAA,EAAO;AAAA,YACxB,OADwB;AACrC,6BAAA;AAAA;;AACI,iBAAA,EAAA,GAAoC,IAApC;AAEA,iBAAA,MAAA,GAAiB,CAAjB;AAyCH;AAxCG;;;;;;;AALiC;AAAA;AAAA,mCAU1B,CAV0B,EAUf,EAVe,EAUW;AACxC,mBAAK,MAAL,GAAc,CAAd;AACA,mBAAK,EAAL,GAAU,EAAV;AACA,qBAAO,IAAP;AACH;AAED;;;;;;AAhBiC;AAAA;AAAA,6CAqBT,EArBS,EAqBmB,GArBnB,EAqBgC;AAC7D,qBAAO,CAAC,GAAG,IAAI,IAAI,OAAJ,EAAR,EAAqB,MAArB,CAA4B,EAAE,CAAC,SAAH,CAAa,EAAE,CAAC,QAAH,EAAb,IAA8B,EAAE,CAAC,QAAH,EAA1D,EAAyE,EAAzE,CAAP;AACH;AAED;;;;AAzBiC;AAAA;AAAA,yCA4Bb,OA5Ba,EA4Be;AAC5C,cAAA,OAAO,CAAC,WAAR,CAAoB,CAApB;AACH;AAED;;;;;AAhCiC;AAAA;AAAA,uCAoCf,OApCe,EAoCa;AAC1C,kBAAI,MAAM,GAAG,OAAO,CAAC,SAAR,EAAb;AACA,qBAAO,MAAP;AACH;AAvCgC;AAAA;AAAA,0CAyCZ,OAzCY,EAyCgB;AAC7C,cAAA,OAAO,CAAC,YAAR,CAAqB,OAArB;AACA,qBAAO,OAAO,CAAC,UAAR,CAAmB,OAAnB,CAAP;AACH;AA5CgC;;AAAA;AAAA;;AACxB,QAAA,OAAA,CAAA,OAAA,GAAO,OAAP;AA6ChB,OA9CiC,EAAA,OAAO,GAAP,KAAA,CAAA,OAAA,KAAA,KAAA,CAAA,OAAA,GAAO,EAAP,CAAA;AA8CjC,KA9C2B,EAAA,KAAK,GAAL,MAAA,CAAA,KAAA,KAAA,MAAA,CAAA,KAAA,GAAK,EAAL,CAAA;AA8C3B,GA9CoB,EAAA,MAAM,GAAN,GAAA,CAAA,MAAA,KAAA,GAAA,CAAA,MAAA,GAAM,EAAN,CAAA;AA8CpB,CA9CD,EAAiB,GAAG,KAAH,GAAG,GAAA,EAAA,CAApB;AA+CA;;;;;AAGA,CAAA,UAAiB,GAAjB,EAAoB;AAAC,MAAA,MAAA;;AAAA,GAAA,UAAA,MAAA,EAAM;AAAC,QAAA,KAAA;;AAAA,KAAA,UAAA,KAAA,EAAK;AAAC,UAAA,OAAA;;AAAA,OAAA,UAAA,OAAA,EAAO;AAAA,YACxB,IADwB;AACrC,0BAAA;AAAA;;AACI,iBAAA,EAAA,GAAoC,IAApC;AAEA,iBAAA,MAAA,GAAiB,CAAjB;AAyCH;AAxCG;;;;;;;AALiC;AAAA;AAAA,mCAU1B,CAV0B,EAUf,EAVe,EAUW;AACxC,mBAAK,MAAL,GAAc,CAAd;AACA,mBAAK,EAAL,GAAU,EAAV;AACA,qBAAO,IAAP;AACH;AAED;;;;;;AAhBiC;AAAA;AAAA,0CAqBZ,EArBY,EAqBgB,GArBhB,EAqB0B;AACvD,qBAAO,CAAC,GAAG,IAAI,IAAI,IAAJ,EAAR,EAAkB,MAAlB,CAAyB,EAAE,CAAC,SAAH,CAAa,EAAE,CAAC,QAAH,EAAb,IAA8B,EAAE,CAAC,QAAH,EAAvD,EAAsE,EAAtE,CAAP;AACH;AAED;;;;AAzBiC;AAAA;AAAA,sCA4BhB,OA5BgB,EA4BY;AACzC,cAAA,OAAO,CAAC,WAAR,CAAoB,CAApB;AACH;AAED;;;;;AAhCiC;AAAA;AAAA,oCAoClB,OApCkB,EAoCU;AACvC,kBAAI,MAAM,GAAG,OAAO,CAAC,SAAR,EAAb;AACA,qBAAO,MAAP;AACH;AAvCgC;AAAA;AAAA,uCAyCf,OAzCe,EAyCa;AAC1C,cAAA,IAAI,CAAC,SAAL,CAAe,OAAf;AACA,qBAAO,IAAI,CAAC,OAAL,CAAa,OAAb,CAAP;AACH;AA5CgC;;AAAA;AAAA;;AACxB,QAAA,OAAA,CAAA,IAAA,GAAI,IAAJ;AA6ChB,OA9CiC,EAAA,OAAO,GAAP,KAAA,CAAA,OAAA,KAAA,KAAA,CAAA,OAAA,GAAO,EAAP,CAAA;AA8CjC,KA9C2B,EAAA,KAAK,GAAL,MAAA,CAAA,KAAA,KAAA,MAAA,CAAA,KAAA,GAAK,EAAL,CAAA;AA8C3B,GA9CoB,EAAA,MAAM,GAAN,GAAA,CAAA,MAAA,KAAA,GAAA,CAAA,MAAA,GAAM,EAAN,CAAA;AA8CpB,CA9CD,EAAiB,GAAG,KAAH,GAAG,GAAA,EAAA,CAApB;AA+CA;;;;;;;;AAMA,CAAA,UAAiB,GAAjB,EAAoB;AAAC,MAAA,MAAA;;AAAA,GAAA,UAAA,MAAA,EAAM;AAAC,QAAA,KAAA;;AAAA,KAAA,UAAA,KAAA,EAAK;AAAC,UAAA,OAAA;;AAAA,OAAA,UAAA,OAAA,EAAO;AAAA,YACxB,SADwB;AACrC,+BAAA;AAAA;;AACI,iBAAA,EAAA,GAAoC,IAApC;AAEA,iBAAA,MAAA,GAAiB,CAAjB;AAyCH;AAxCG;;;;;;;AALiC;AAAA;AAAA,mCAU1B,CAV0B,EAUf,EAVe,EAUW;AACxC,mBAAK,MAAL,GAAc,CAAd;AACA,mBAAK,EAAL,GAAU,EAAV;AACA,qBAAO,IAAP;AACH;AAED;;;;;;AAhBiC;AAAA;AAAA,+CAqBP,EArBO,EAqBqB,GArBrB,EAqBoC;AACjE,qBAAO,CAAC,GAAG,IAAI,IAAI,SAAJ,EAAR,EAAuB,MAAvB,CAA8B,EAAE,CAAC,SAAH,CAAa,EAAE,CAAC,QAAH,EAAb,IAA8B,EAAE,CAAC,QAAH,EAA5D,EAA2E,EAA3E,CAAP;AACH;AAED;;;;AAzBiC;AAAA;AAAA,2CA4BX,OA5BW,EA4BiB;AAC9C,cAAA,OAAO,CAAC,WAAR,CAAoB,CAApB;AACH;AAED;;;;;AAhCiC;AAAA;AAAA,yCAoCb,OApCa,EAoCe;AAC5C,kBAAI,MAAM,GAAG,OAAO,CAAC,SAAR,EAAb;AACA,qBAAO,MAAP;AACH;AAvCgC;AAAA;AAAA,4CAyCV,OAzCU,EAyCkB;AAC/C,cAAA,SAAS,CAAC,cAAV,CAAyB,OAAzB;AACA,qBAAO,SAAS,CAAC,YAAV,CAAuB,OAAvB,CAAP;AACH;AA5CgC;;AAAA;AAAA;;AACxB,QAAA,OAAA,CAAA,SAAA,GAAS,SAAT;AA6ChB,OA9CiC,EAAA,OAAO,GAAP,KAAA,CAAA,OAAA,KAAA,KAAA,CAAA,OAAA,GAAO,EAAP,CAAA;AA8CjC,KA9C2B,EAAA,KAAK,GAAL,MAAA,CAAA,KAAA,KAAA,MAAA,CAAA,KAAA,GAAK,EAAL,CAAA;AA8C3B,GA9CoB,EAAA,MAAM,GAAN,GAAA,CAAA,MAAA,KAAA,GAAA,CAAA,MAAA,GAAM,EAAN,CAAA;AA8CpB,CA9CD,EAAiB,GAAG,KAAH,GAAG,GAAA,EAAA,CAApB;AA+CA;;;;;AAGA,CAAA,UAAiB,GAAjB,EAAoB;AAAC,MAAA,MAAA;;AAAA,GAAA,UAAA,MAAA,EAAM;AAAC,QAAA,KAAA;;AAAA,KAAA,UAAA,KAAA,EAAK;AAAC,UAAA,OAAA;;AAAA,OAAA,UAAA,OAAA,EAAO;AAAA,YACxB,aADwB;AACrC,mCAAA;AAAA;;AACI,iBAAA,EAAA,GAAoC,IAApC;AAEA,iBAAA,MAAA,GAAiB,CAAjB;AA4DH;AA3DG;;;;;;;AALiC;AAAA;AAAA,mCAU1B,CAV0B,EAUf,EAVe,EAUW;AACxC,mBAAK,MAAL,GAAc,CAAd;AACA,mBAAK,EAAL,GAAU,EAAV;AACA,qBAAO,IAAP;AACH;AAED;;;;;;AAhBiC;AAAA;;AAyBjC;;;;;AAzBiC,uCA8BzB;AACJ,kBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,CAA/B,CAAb;;AACA,qBAAO,MAAM,GAAG,KAAK,EAAL,CAAS,SAAT,CAAmB,KAAK,MAAL,GAAc,MAAjC,CAAH,GAA8C,CAA3D;AACH;AAED;;;;AAnCiC;AAAA;AAAA,mDAqBH,EArBG,EAqByB,GArBzB,EAqB4C;AACzE,qBAAO,CAAC,GAAG,IAAI,IAAI,aAAJ,EAAR,EAA2B,MAA3B,CAAkC,EAAE,CAAC,SAAH,CAAa,EAAE,CAAC,QAAH,EAAb,IAA8B,EAAE,CAAC,QAAH,EAAhE,EAA+E,EAA/E,CAAP;AACH;AAvBgC;AAAA;AAAA,+CAsCP,OAtCO,EAsCqB;AAClD,cAAA,OAAO,CAAC,WAAR,CAAoB,CAApB;AACH;AAED;;;;;AA1CiC;AAAA;AAAA,wCA8Cd,OA9Cc,EA8CgB,QA9ChB,EA8CgC;AAC7D,cAAA,OAAO,CAAC,aAAR,CAAsB,CAAtB,EAAyB,QAAzB,EAAmC,CAAnC;AACH;AAED;;;;;AAlDiC;AAAA;AAAA,6CAsDT,OAtDS,EAsDmB;AAChD,kBAAI,MAAM,GAAG,OAAO,CAAC,SAAR,EAAb;AACA,qBAAO,MAAP;AACH;AAzDgC;AAAA;AAAA,gDA2DN,OA3DM,EA2DwB,QA3DxB,EA2DwC;AACrE,cAAA,aAAa,CAAC,kBAAd,CAAiC,OAAjC;AACA,cAAA,aAAa,CAAC,WAAd,CAA0B,OAA1B,EAAmC,QAAnC;AACA,qBAAO,aAAa,CAAC,gBAAd,CAA+B,OAA/B,CAAP;AACH;AA/DgC;;AAAA;AAAA;;AACxB,QAAA,OAAA,CAAA,aAAA,GAAa,aAAb;AAgEhB,OAjEiC,EAAA,OAAO,GAAP,KAAA,CAAA,OAAA,KAAA,KAAA,CAAA,OAAA,GAAO,EAAP,CAAA;AAiEjC,KAjE2B,EAAA,KAAK,GAAL,MAAA,CAAA,KAAA,KAAA,MAAA,CAAA,KAAA,GAAK,EAAL,CAAA;AAiE3B,GAjEoB,EAAA,MAAM,GAAN,GAAA,CAAA,MAAA,KAAA,GAAA,CAAA,MAAA,GAAM,EAAN,CAAA;AAiEpB,CAjED,EAAiB,GAAG,KAAH,GAAG,GAAA,EAAA,CAApB;AAkEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,CAAA,UAAiB,GAAjB,EAAoB;AAAC,MAAA,MAAA;;AAAA,GAAA,UAAA,MAAA,EAAM;AAAC,QAAA,KAAA;;AAAA,KAAA,UAAA,KAAA,EAAK;AAAC,UAAA,OAAA;;AAAA,OAAA,UAAA,OAAA,EAAO;AAAA,YACxB,GADwB;AACrC,yBAAA;AAAA;;AACI,iBAAA,EAAA,GAAoC,IAApC;AAEA,iBAAA,MAAA,GAAiB,CAAjB;AA4DH;AA3DG;;;;;;;AALiC;AAAA;AAAA,mCAU1B,CAV0B,EAUf,EAVe,EAUW;AACxC,mBAAK,MAAL,GAAc,CAAd;AACA,mBAAK,EAAL,GAAU,EAAV;AACA,qBAAO,IAAP;AACH;AAED;;;;;;AAhBiC;AAAA;;AAyBjC;;;;;AAzBiC,yCA8BvB;AACN,kBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,CAA/B,CAAb;;AACA,qBAAO,MAAM,GAAG,CAAC,CAAC,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAL,GAAc,MAAhC,CAAL,GAA+C,KAA5D;AACH;AAED;;;;AAnCiC;AAAA;AAAA,yCAqBb,EArBa,EAqBe,GArBf,EAqBwB;AACrD,qBAAO,CAAC,GAAG,IAAI,IAAI,GAAJ,EAAR,EAAiB,MAAjB,CAAwB,EAAE,CAAC,SAAH,CAAa,EAAE,CAAC,QAAH,EAAb,IAA8B,EAAE,CAAC,QAAH,EAAtD,EAAqE,EAArE,CAAP;AACH;AAvBgC;AAAA;AAAA,qCAsCjB,OAtCiB,EAsCW;AACxC,cAAA,OAAO,CAAC,WAAR,CAAoB,CAApB;AACH;AAED;;;;;AA1CiC;AAAA;AAAA,0CA8CZ,OA9CY,EA8CkB,UA9ClB,EA8CqC;AAClE,cAAA,OAAO,CAAC,YAAR,CAAqB,CAArB,EAAwB,CAAC,UAAzB,EAAqC,CAAC,KAAtC;AACH;AAED;;;;;AAlDiC;AAAA;AAAA,mCAsDnB,OAtDmB,EAsDS;AACtC,kBAAI,MAAM,GAAG,OAAO,CAAC,SAAR,EAAb;AACA,qBAAO,MAAP;AACH;AAzDgC;AAAA;AAAA,sCA2DhB,OA3DgB,EA2Dc,UA3Dd,EA2DiC;AAC9D,cAAA,GAAG,CAAC,QAAJ,CAAa,OAAb;AACA,cAAA,GAAG,CAAC,aAAJ,CAAkB,OAAlB,EAA2B,UAA3B;AACA,qBAAO,GAAG,CAAC,MAAJ,CAAW,OAAX,CAAP;AACH;AA/DgC;;AAAA;AAAA;;AACxB,QAAA,OAAA,CAAA,GAAA,GAAG,GAAH;AAgEhB,OAjEiC,EAAA,OAAO,GAAP,KAAA,CAAA,OAAA,KAAA,KAAA,CAAA,OAAA,GAAO,EAAP,CAAA;AAiEjC,KAjE2B,EAAA,KAAK,GAAL,MAAA,CAAA,KAAA,KAAA,MAAA,CAAA,KAAA,GAAK,EAAL,CAAA;AAiE3B,GAjEoB,EAAA,MAAM,GAAN,GAAA,CAAA,MAAA,KAAA,GAAA,CAAA,MAAA,GAAM,EAAN,CAAA;AAiEpB,CAjED,EAAiB,GAAG,KAAH,GAAG,GAAA,EAAA,CAApB;AAkEA;;;;;;;;;;AAQA,CAAA,UAAiB,GAAjB,EAAoB;AAAC,MAAA,MAAA;;AAAA,GAAA,UAAA,MAAA,EAAM;AAAC,QAAA,KAAA;;AAAA,KAAA,UAAA,KAAA,EAAK;AAAC,UAAA,OAAA;;AAAA,OAAA,UAAA,OAAA,EAAO;AAAA,YACxB,KADwB;AACrC,2BAAA;AAAA;;AACI,iBAAA,EAAA,GAAoC,IAApC;AAEA,iBAAA,MAAA,GAAiB,CAAjB;AAiHH;AAhHG;;;;;;;AALiC;AAAA;AAAA,mCAU1B,CAV0B,EAUf,EAVe,EAUW;AACxC,mBAAK,MAAL,GAAc,CAAd;AACA,mBAAK,EAAL,GAAU,EAAV;AACA,qBAAO,IAAP;AACH;AAED;;;;;;AAhBiC;AAAA;;AAyBjC;;;AAzBiC,mCA4B7B;AACA,kBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,CAA/B,CAAb;;AACA,qBAAO,MAAM;AAAG;AAAS,mBAAK,EAAL,CAAS,SAAT,CAAmB,KAAK,MAAL,GAAc,MAAjC,CAAZ,GAAwD,GAAG,CAAC,MAAJ,CAAW,KAAX,CAAiB,OAAjB,CAAyB,SAAzB,CAAmC,MAAxG;AACH;AAED;;;;;AAjCiC;AAAA;AAAA,oCAqCzB,KArCyB,EAqCZ;AACjB,kBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,CAA/B,CAAb;;AACA,qBAAO,MAAM,GAAG,KAAK,EAAL,CAAS,SAAT,CAAmB,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAL,GAAc,MAAhC,IAA0C,KAAK,GAAG,CAArE,CAAH,GAA6E,CAA1F;AACH;AAED;;;;AA1CiC;AAAA;AAAA,4CA6CpB;AACT,kBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,CAA/B,CAAb;;AACA,qBAAO,MAAM,GAAG,KAAK,EAAL,CAAS,YAAT,CAAsB,KAAK,MAAL,GAAc,MAApC,CAAH,GAAiD,CAA9D;AACH;AAED;;;;AAlDiC;AAAA;AAAA,2CAqDrB;AACR,kBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,CAA/B,CAAb;;AACA,qBAAO,MAAM,GAAG,IAAI,UAAJ,CAAe,KAAK,EAAL,CAAS,KAAT,GAAiB,MAAhC,EAAwC,KAAK,EAAL,CAAS,KAAT,GAAiB,UAAjB,GAA8B,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAL,GAAc,MAAhC,CAAtE,EAA+G,KAAK,EAAL,CAAS,YAAT,CAAsB,KAAK,MAAL,GAAc,MAApC,CAA/G,CAAH,GAAiK,IAA9K;AACH;AAED;;;;AA1DiC;AAAA;AAAA,2CAqBX,EArBW,EAqBiB,GArBjB,EAqB4B;AACzD,qBAAO,CAAC,GAAG,IAAI,IAAI,KAAJ,EAAR,EAAmB,MAAnB,CAA0B,EAAE,CAAC,SAAH,CAAa,EAAE,CAAC,QAAH,EAAb,IAA8B,EAAE,CAAC,QAAH,EAAxD,EAAuE,EAAvE,CAAP;AACH;AAvBgC;AAAA;AAAA,uCA6Df,OA7De,EA6Da;AAC1C,cAAA,OAAO,CAAC,WAAR,CAAoB,CAApB;AACH;AAED;;;;;AAjEiC;AAAA;AAAA,oCAqElB,OArEkB,EAqEY,IArEZ,EAqEoD;AACjF,cAAA,OAAO,CAAC,aAAR,CAAsB,CAAtB,EAAyB,IAAzB,EAA+B,GAAG,CAAC,MAAJ,CAAW,KAAX,CAAiB,OAAjB,CAAyB,SAAzB,CAAmC,MAAlE;AACH;AAED;;;;;AAzEiC;AAAA;AAAA,uCA6Ef,OA7Ee,EA6Ee,aA7Ef,EA6EgD;AAC7E,cAAA,OAAO,CAAC,cAAR,CAAuB,CAAvB,EAA0B,aAA1B,EAAyC,CAAzC;AACH;AAED;;;;;;AAjFiC;AAAA;AAAA,gDAsFN,OAtFM,EAsFwB,IAtFxB,EAsFmD;AAChF,cAAA,OAAO,CAAC,WAAR,CAAoB,CAApB,EAAuB,IAAI,CAAC,MAA5B,EAAoC,CAApC;;AACA,mBAAK,IAAI,CAAC,GAAG,IAAI,CAAC,MAAL,GAAc,CAA3B,EAA8B,CAAC,IAAI,CAAnC,EAAsC,CAAC,EAAvC,EAA2C;AACvC,gBAAA,OAAO,CAAC,QAAR,CAAiB,IAAI,CAAC,CAAD,CAArB;AACH;;AACD,qBAAO,OAAO,CAAC,SAAR,EAAP;AACH;AAED;;;;;AA9FiC;AAAA;AAAA,+CAkGP,OAlGO,EAkGuB,QAlGvB,EAkGuC;AACpE,cAAA,OAAO,CAAC,WAAR,CAAoB,CAApB,EAAuB,QAAvB,EAAiC,CAAjC;AACH;AAED;;;;;AAtGiC;AAAA;AAAA,qCA0GjB,OA1GiB,EA0GW;AACxC,kBAAI,MAAM,GAAG,OAAO,CAAC,SAAR,EAAb;AACA,qBAAO,MAAP;AACH;AA7GgC;AAAA;AAAA,wCA+Gd,OA/Gc,EA+GgB,IA/GhB,EA+G0D,aA/G1D,EA+G2F;AACxH,cAAA,KAAK,CAAC,UAAN,CAAiB,OAAjB;AACA,cAAA,KAAK,CAAC,OAAN,CAAc,OAAd,EAAuB,IAAvB;AACA,cAAA,KAAK,CAAC,UAAN,CAAiB,OAAjB,EAA0B,aAA1B;AACA,qBAAO,KAAK,CAAC,QAAN,CAAe,OAAf,CAAP;AACH;AApHgC;;AAAA;AAAA;;AACxB,QAAA,OAAA,CAAA,KAAA,GAAK,KAAL;AAqHhB,OAtHiC,EAAA,OAAO,GAAP,KAAA,CAAA,OAAA,KAAA,KAAA,CAAA,OAAA,GAAO,EAAP,CAAA;AAsHjC,KAtH2B,EAAA,KAAK,GAAL,MAAA,CAAA,KAAA,KAAA,MAAA,CAAA,KAAA,GAAK,EAAL,CAAA;AAsH3B,GAtHoB,EAAA,MAAM,GAAN,GAAA,CAAA,MAAA,KAAA,GAAA,CAAA,MAAA,GAAM,EAAN,CAAA;AAsHpB,CAtHD,EAAiB,GAAG,KAAH,GAAG,GAAA,EAAA,CAApB;AAuHA;;;;;AAGA,CAAA,UAAiB,GAAjB,EAAoB;AAAC,MAAA,MAAA;;AAAA,GAAA,UAAA,MAAA,EAAM;AAAC,QAAA,KAAA;;AAAA,KAAA,UAAA,KAAA,EAAK;AAAC,UAAA,OAAA;;AAAA,OAAA,UAAA,OAAA,EAAO;AAAA,YACxB,GADwB;AACrC,yBAAA;AAAA;;AACI,iBAAA,EAAA,GAAoC,IAApC;AAEA,iBAAA,MAAA,GAAiB,CAAjB;AA2EH;AA1EG;;;;;;;AALiC;AAAA;AAAA,mCAU1B,CAV0B,EAUf,EAVe,EAUW;AACxC,mBAAK,MAAL,GAAc,CAAd;AACA,mBAAK,EAAL,GAAU,EAAV;AACA,qBAAO,IAAP;AACH;AAED;;;;;;AAhBiC;AAAA;;AAyBjC;;;AAzBiC,uCA4BzB;AACJ,kBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,CAA/B,CAAb;;AACA,qBAAO,MAAM,GAAG,KAAK,EAAL,CAAS,SAAT,CAAmB,KAAK,MAAL,GAAc,MAAjC,CAAH,GAA8C,CAA3D;AACH;AAED;;;;AAjCiC;AAAA;AAAA,uCAoCzB;AACJ,kBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,CAA/B,CAAb;;AACA,qBAAO,MAAM,GAAG,CAAC,CAAC,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAL,GAAc,MAAhC,CAAL,GAA+C,KAA5D;AACH;AAED;;;;AAzCiC;AAAA;AAAA,yCAqBb,EArBa,EAqBe,GArBf,EAqBwB;AACrD,qBAAO,CAAC,GAAG,IAAI,IAAI,GAAJ,EAAR,EAAiB,MAAjB,CAAwB,EAAE,CAAC,SAAH,CAAa,EAAE,CAAC,QAAH,EAAb,IAA8B,EAAE,CAAC,QAAH,EAAtD,EAAqE,EAArE,CAAP;AACH;AAvBgC;AAAA;AAAA,qCA4CjB,OA5CiB,EA4CW;AACxC,cAAA,OAAO,CAAC,WAAR,CAAoB,CAApB;AACH;AAED;;;;;AAhDiC;AAAA;AAAA,wCAoDd,OApDc,EAoDgB,QApDhB,EAoDgC;AAC7D,cAAA,OAAO,CAAC,aAAR,CAAsB,CAAtB,EAAyB,QAAzB,EAAmC,CAAnC;AACH;AAED;;;;;AAxDiC;AAAA;AAAA,wCA4Dd,OA5Dc,EA4DgB,QA5DhB,EA4DiC;AAC9D,cAAA,OAAO,CAAC,YAAR,CAAqB,CAArB,EAAwB,CAAC,QAAzB,EAAmC,CAAC,KAApC;AACH;AAED;;;;;AAhEiC;AAAA;AAAA,mCAoEnB,OApEmB,EAoES;AACtC,kBAAI,MAAM,GAAG,OAAO,CAAC,SAAR,EAAb;AACA,qBAAO,MAAP;AACH;AAvEgC;AAAA;AAAA,sCAyEhB,OAzEgB,EAyEc,QAzEd,EAyEgC,QAzEhC,EAyEiD;AAC9E,cAAA,GAAG,CAAC,QAAJ,CAAa,OAAb;AACA,cAAA,GAAG,CAAC,WAAJ,CAAgB,OAAhB,EAAyB,QAAzB;AACA,cAAA,GAAG,CAAC,WAAJ,CAAgB,OAAhB,EAAyB,QAAzB;AACA,qBAAO,GAAG,CAAC,MAAJ,CAAW,OAAX,CAAP;AACH;AA9EgC;;AAAA;AAAA;;AACxB,QAAA,OAAA,CAAA,GAAA,GAAG,GAAH;AA+EhB,OAhFiC,EAAA,OAAO,GAAP,KAAA,CAAA,OAAA,KAAA,KAAA,CAAA,OAAA,GAAO,EAAP,CAAA;AAgFjC,KAhF2B,EAAA,KAAK,GAAL,MAAA,CAAA,KAAA,KAAA,MAAA,CAAA,KAAA,GAAK,EAAL,CAAA;AAgF3B,GAhFoB,EAAA,MAAM,GAAN,GAAA,CAAA,MAAA,KAAA,GAAA,CAAA,MAAA,GAAM,EAAN,CAAA;AAgFpB,CAhFD,EAAiB,GAAG,KAAH,GAAG,GAAA,EAAA,CAApB;AAiFA;;;;;AAGA,CAAA,UAAiB,GAAjB,EAAoB;AAAC,MAAA,MAAA;;AAAA,GAAA,UAAA,MAAA,EAAM;AAAC,QAAA,KAAA;;AAAA,KAAA,UAAA,KAAA,EAAK;AAAC,UAAA,OAAA;;AAAA,OAAA,UAAA,OAAA,EAAO;AAAA,YACxB,aADwB;AACrC,mCAAA;AAAA;;AACI,iBAAA,EAAA,GAAoC,IAApC;AAEA,iBAAA,MAAA,GAAiB,CAAjB;AA0DH;AAzDG;;;;;;;AALiC;AAAA;AAAA,mCAU1B,CAV0B,EAUf,EAVe,EAUW;AACxC,mBAAK,MAAL,GAAc,CAAd;AACA,mBAAK,EAAL,GAAU,EAAV;AACA,qBAAO,IAAP;AACH;AAED;;;;;;AAhBiC;AAAA;;AAyBjC;;;AAzBiC,wCA4BxB;AACL,kBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,CAA/B,CAAb;;AACA,qBAAO,MAAM;AAAG;AAAS,mBAAK,EAAL,CAAS,SAAT,CAAmB,KAAK,MAAL,GAAc,MAAjC,CAAZ,GAAwD,GAAG,CAAC,MAAJ,CAAW,KAAX,CAAiB,OAAjB,CAAyB,SAAzB,CAAmC,IAAxG;AACH;AAED;;;;AAjCiC;AAAA;AAAA,mDAqBH,EArBG,EAqByB,GArBzB,EAqB4C;AACzE,qBAAO,CAAC,GAAG,IAAI,IAAI,aAAJ,EAAR,EAA2B,MAA3B,CAAkC,EAAE,CAAC,SAAH,CAAa,EAAE,CAAC,QAAH,EAAb,IAA8B,EAAE,CAAC,QAAH,EAAhE,EAA+E,EAA/E,CAAP;AACH;AAvBgC;AAAA;AAAA,+CAoCP,OApCO,EAoCqB;AAClD,cAAA,OAAO,CAAC,WAAR,CAAoB,CAApB;AACH;AAED;;;;;AAxCiC;AAAA;AAAA,yCA4Cb,OA5Ca,EA4CiB,SA5CjB,EA4C8D;AAC3F,cAAA,OAAO,CAAC,aAAR,CAAsB,CAAtB,EAAyB,SAAzB,EAAoC,GAAG,CAAC,MAAJ,CAAW,KAAX,CAAiB,OAAjB,CAAyB,SAAzB,CAAmC,IAAvE;AACH;AAED;;;;;AAhDiC;AAAA;AAAA,6CAoDT,OApDS,EAoDmB;AAChD,kBAAI,MAAM,GAAG,OAAO,CAAC,SAAR,EAAb;AACA,qBAAO,MAAP;AACH;AAvDgC;AAAA;AAAA,gDAyDN,OAzDM,EAyDwB,SAzDxB,EAyDqE;AAClG,cAAA,aAAa,CAAC,kBAAd,CAAiC,OAAjC;AACA,cAAA,aAAa,CAAC,YAAd,CAA2B,OAA3B,EAAoC,SAApC;AACA,qBAAO,aAAa,CAAC,gBAAd,CAA+B,OAA/B,CAAP;AACH;AA7DgC;;AAAA;AAAA;;AACxB,QAAA,OAAA,CAAA,aAAA,GAAa,aAAb;AA8DhB,OA/DiC,EAAA,OAAO,GAAP,KAAA,CAAA,OAAA,KAAA,KAAA,CAAA,OAAA,GAAO,EAAP,CAAA;AA+DjC,KA/D2B,EAAA,KAAK,GAAL,MAAA,CAAA,KAAA,KAAA,MAAA,CAAA,KAAA,GAAK,EAAL,CAAA;AA+D3B,GA/DoB,EAAA,MAAM,GAAN,GAAA,CAAA,MAAA,KAAA,GAAA,CAAA,MAAA,GAAM,EAAN,CAAA;AA+DpB,CA/DD,EAAiB,GAAG,KAAH,GAAG,GAAA,EAAA,CAApB;AAgEA;;;;;;;AAKA,CAAA,UAAiB,GAAjB,EAAoB;AAAC,MAAA,MAAA;;AAAA,GAAA,UAAA,MAAA,EAAM;AAAC,QAAA,KAAA;;AAAA,KAAA,UAAA,KAAA,EAAK;AAAC,UAAA,OAAA;;AAAA,OAAA,UAAA,OAAA,EAAO;AAAA,YACxB,IADwB;AACrC,0BAAA;AAAA;;AACI,iBAAA,EAAA,GAAoC,IAApC;AAEA,iBAAA,MAAA,GAAiB,CAAjB;AAyCH;AAxCG;;;;;;;AALiC;AAAA;AAAA,mCAU1B,CAV0B,EAUf,EAVe,EAUW;AACxC,mBAAK,MAAL,GAAc,CAAd;AACA,mBAAK,EAAL,GAAU,EAAV;AACA,qBAAO,IAAP;AACH;AAED;;;;;;AAhBiC;AAAA;AAAA,0CAqBZ,EArBY,EAqBgB,GArBhB,EAqB0B;AACvD,qBAAO,CAAC,GAAG,IAAI,IAAI,IAAJ,EAAR,EAAkB,MAAlB,CAAyB,EAAE,CAAC,SAAH,CAAa,EAAE,CAAC,QAAH,EAAb,IAA8B,EAAE,CAAC,QAAH,EAAvD,EAAsE,EAAtE,CAAP;AACH;AAED;;;;AAzBiC;AAAA;AAAA,sCA4BhB,OA5BgB,EA4BY;AACzC,cAAA,OAAO,CAAC,WAAR,CAAoB,CAApB;AACH;AAED;;;;;AAhCiC;AAAA;AAAA,oCAoClB,OApCkB,EAoCU;AACvC,kBAAI,MAAM,GAAG,OAAO,CAAC,SAAR,EAAb;AACA,qBAAO,MAAP;AACH;AAvCgC;AAAA;AAAA,uCAyCf,OAzCe,EAyCa;AAC1C,cAAA,IAAI,CAAC,SAAL,CAAe,OAAf;AACA,qBAAO,IAAI,CAAC,OAAL,CAAa,OAAb,CAAP;AACH;AA5CgC;;AAAA;AAAA;;AACxB,QAAA,OAAA,CAAA,IAAA,GAAI,IAAJ;AA6ChB,OA9CiC,EAAA,OAAO,GAAP,KAAA,CAAA,OAAA,KAAA,KAAA,CAAA,OAAA,GAAO,EAAP,CAAA;AA8CjC,KA9C2B,EAAA,KAAK,GAAL,MAAA,CAAA,KAAA,KAAA,MAAA,CAAA,KAAA,GAAK,EAAL,CAAA;AA8C3B,GA9CoB,EAAA,MAAM,GAAN,GAAA,CAAA,MAAA,KAAA,GAAA,CAAA,MAAA,GAAM,EAAN,CAAA;AA8CpB,CA9CD,EAAiB,GAAG,KAAH,GAAG,GAAA,EAAA,CAApB;AA+CA;;;;;;;AAKA,CAAA,UAAiB,GAAjB,EAAoB;AAAC,MAAA,MAAA;;AAAA,GAAA,UAAA,MAAA,EAAM;AAAC,QAAA,KAAA;;AAAA,KAAA,UAAA,KAAA,EAAK;AAAC,UAAA,OAAA;;AAAA,OAAA,UAAA,OAAA,EAAO;AAAA,YACxB,MADwB;AACrC,4BAAA;AAAA;;AACI,iBAAA,EAAA,GAAoC,IAApC;AAEA,iBAAA,MAAA,GAAiB,CAAjB;AAyCH;AAxCG;;;;;;;AALiC;AAAA;AAAA,mCAU1B,CAV0B,EAUf,EAVe,EAUW;AACxC,mBAAK,MAAL,GAAc,CAAd;AACA,mBAAK,EAAL,GAAU,EAAV;AACA,qBAAO,IAAP;AACH;AAED;;;;;;AAhBiC;AAAA;AAAA,4CAqBV,EArBU,EAqBkB,GArBlB,EAqB8B;AAC3D,qBAAO,CAAC,GAAG,IAAI,IAAI,MAAJ,EAAR,EAAoB,MAApB,CAA2B,EAAE,CAAC,SAAH,CAAa,EAAE,CAAC,QAAH,EAAb,IAA8B,EAAE,CAAC,QAAH,EAAzD,EAAwE,EAAxE,CAAP;AACH;AAED;;;;AAzBiC;AAAA;AAAA,wCA4Bd,OA5Bc,EA4Bc;AAC3C,cAAA,OAAO,CAAC,WAAR,CAAoB,CAApB;AACH;AAED;;;;;AAhCiC;AAAA;AAAA,sCAoChB,OApCgB,EAoCY;AACzC,kBAAI,MAAM,GAAG,OAAO,CAAC,SAAR,EAAb;AACA,qBAAO,MAAP;AACH;AAvCgC;AAAA;AAAA,yCAyCb,OAzCa,EAyCe;AAC5C,cAAA,MAAM,CAAC,WAAP,CAAmB,OAAnB;AACA,qBAAO,MAAM,CAAC,SAAP,CAAiB,OAAjB,CAAP;AACH;AA5CgC;;AAAA;AAAA;;AACxB,QAAA,OAAA,CAAA,MAAA,GAAM,MAAN;AA6ChB,OA9CiC,EAAA,OAAO,GAAP,KAAA,CAAA,OAAA,KAAA,KAAA,CAAA,OAAA,GAAO,EAAP,CAAA;AA8CjC,KA9C2B,EAAA,KAAK,GAAL,MAAA,CAAA,KAAA,KAAA,MAAA,CAAA,KAAA,GAAK,EAAL,CAAA;AA8C3B,GA9CoB,EAAA,MAAM,GAAN,GAAA,CAAA,MAAA,KAAA,GAAA,CAAA,MAAA,GAAM,EAAN,CAAA;AA8CpB,CA9CD,EAAiB,GAAG,KAAH,GAAG,GAAA,EAAA,CAApB;AA+CA;;;;;;;;AAMA,CAAA,UAAiB,GAAjB,EAAoB;AAAC,MAAA,MAAA;;AAAA,GAAA,UAAA,MAAA,EAAM;AAAC,QAAA,KAAA;;AAAA,KAAA,UAAA,KAAA,EAAK;AAAC,UAAA,OAAA;;AAAA,OAAA,UAAA,OAAA,EAAO;AAAA,YACxB,SADwB;AACrC,+BAAA;AAAA;;AACI,iBAAA,EAAA,GAAoC,IAApC;AAEA,iBAAA,MAAA,GAAiB,CAAjB;AAyCH;AAxCG;;;;;;;AALiC;AAAA;AAAA,mCAU1B,CAV0B,EAUf,EAVe,EAUW;AACxC,mBAAK,MAAL,GAAc,CAAd;AACA,mBAAK,EAAL,GAAU,EAAV;AACA,qBAAO,IAAP;AACH;AAED;;;;;;AAhBiC;AAAA;AAAA,+CAqBP,EArBO,EAqBqB,GArBrB,EAqBoC;AACjE,qBAAO,CAAC,GAAG,IAAI,IAAI,SAAJ,EAAR,EAAuB,MAAvB,CAA8B,EAAE,CAAC,SAAH,CAAa,EAAE,CAAC,QAAH,EAAb,IAA8B,EAAE,CAAC,QAAH,EAA5D,EAA2E,EAA3E,CAAP;AACH;AAED;;;;AAzBiC;AAAA;AAAA,2CA4BX,OA5BW,EA4BiB;AAC9C,cAAA,OAAO,CAAC,WAAR,CAAoB,CAApB;AACH;AAED;;;;;AAhCiC;AAAA;AAAA,yCAoCb,OApCa,EAoCe;AAC5C,kBAAI,MAAM,GAAG,OAAO,CAAC,SAAR,EAAb;AACA,qBAAO,MAAP;AACH;AAvCgC;AAAA;AAAA,4CAyCV,OAzCU,EAyCkB;AAC/C,cAAA,SAAS,CAAC,cAAV,CAAyB,OAAzB;AACA,qBAAO,SAAS,CAAC,YAAV,CAAuB,OAAvB,CAAP;AACH;AA5CgC;;AAAA;AAAA;;AACxB,QAAA,OAAA,CAAA,SAAA,GAAS,SAAT;AA6ChB,OA9CiC,EAAA,OAAO,GAAP,KAAA,CAAA,OAAA,KAAA,KAAA,CAAA,OAAA,GAAO,EAAP,CAAA;AA8CjC,KA9C2B,EAAA,KAAK,GAAL,MAAA,CAAA,KAAA,KAAA,MAAA,CAAA,KAAA,GAAK,EAAL,CAAA;AA8C3B,GA9CoB,EAAA,MAAM,GAAN,GAAA,CAAA,MAAA,KAAA,GAAA,CAAA,MAAA,GAAM,EAAN,CAAA;AA8CpB,CA9CD,EAAiB,GAAG,KAAH,GAAG,GAAA,EAAA,CAApB;AA+CA;;;;;;;;AAMA,CAAA,UAAiB,GAAjB,EAAoB;AAAC,MAAA,MAAA;;AAAA,GAAA,UAAA,MAAA,EAAM;AAAC,QAAA,KAAA;;AAAA,KAAA,UAAA,KAAA,EAAK;AAAC,UAAA,OAAA;;AAAA,OAAA,UAAA,OAAA,EAAO;AAAA,YACxB,WADwB;AACrC,iCAAA;AAAA;;AACI,iBAAA,EAAA,GAAoC,IAApC;AAEA,iBAAA,MAAA,GAAiB,CAAjB;AAyCH;AAxCG;;;;;;;AALiC;AAAA;AAAA,mCAU1B,CAV0B,EAUf,EAVe,EAUW;AACxC,mBAAK,MAAL,GAAc,CAAd;AACA,mBAAK,EAAL,GAAU,EAAV;AACA,qBAAO,IAAP;AACH;AAED;;;;;;AAhBiC;AAAA;AAAA,iDAqBL,EArBK,EAqBuB,GArBvB,EAqBwC;AACrE,qBAAO,CAAC,GAAG,IAAI,IAAI,WAAJ,EAAR,EAAyB,MAAzB,CAAgC,EAAE,CAAC,SAAH,CAAa,EAAE,CAAC,QAAH,EAAb,IAA8B,EAAE,CAAC,QAAH,EAA9D,EAA6E,EAA7E,CAAP;AACH;AAED;;;;AAzBiC;AAAA;AAAA,6CA4BT,OA5BS,EA4BmB;AAChD,cAAA,OAAO,CAAC,WAAR,CAAoB,CAApB;AACH;AAED;;;;;AAhCiC;AAAA;AAAA,2CAoCX,OApCW,EAoCiB;AAC9C,kBAAI,MAAM,GAAG,OAAO,CAAC,SAAR,EAAb;AACA,qBAAO,MAAP;AACH;AAvCgC;AAAA;AAAA,8CAyCR,OAzCQ,EAyCoB;AACjD,cAAA,WAAW,CAAC,gBAAZ,CAA6B,OAA7B;AACA,qBAAO,WAAW,CAAC,cAAZ,CAA2B,OAA3B,CAAP;AACH;AA5CgC;;AAAA;AAAA;;AACxB,QAAA,OAAA,CAAA,WAAA,GAAW,WAAX;AA6ChB,OA9CiC,EAAA,OAAO,GAAP,KAAA,CAAA,OAAA,KAAA,KAAA,CAAA,OAAA,GAAO,EAAP,CAAA;AA8CjC,KA9C2B,EAAA,KAAK,GAAL,MAAA,CAAA,KAAA,KAAA,MAAA,CAAA,KAAA,GAAK,EAAL,CAAA;AA8C3B,GA9CoB,EAAA,MAAM,GAAN,GAAA,CAAA,MAAA,KAAA,GAAA,CAAA,MAAA,GAAM,EAAN,CAAA;AA8CpB,CA9CD,EAAiB,GAAG,KAAH,GAAG,GAAA,EAAA,CAApB;AA+CA;;;;;AAGA,CAAA,UAAiB,GAAjB,EAAoB;AAAC,MAAA,MAAA;;AAAA,GAAA,UAAA,MAAA,EAAM;AAAC,QAAA,KAAA;;AAAA,KAAA,UAAA,KAAA,EAAK;AAAC,UAAA,OAAA;;AAAA,OAAA,UAAA,OAAA,EAAO;AAAA,YACxB,eADwB;AACrC,qCAAA;AAAA;;AACI,iBAAA,EAAA,GAAoC,IAApC;AAEA,iBAAA,MAAA,GAAiB,CAAjB;AA4DH;AA3DG;;;;;;;AALiC;AAAA;AAAA,mCAU1B,CAV0B,EAUf,EAVe,EAUW;AACxC,mBAAK,MAAL,GAAc,CAAd;AACA,mBAAK,EAAL,GAAU,EAAV;AACA,qBAAO,IAAP;AACH;AAED;;;;;;AAhBiC;AAAA;;AAyBjC;;;;;AAzBiC,wCA8BxB;AACL,kBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,CAA/B,CAAb;;AACA,qBAAO,MAAM,GAAG,KAAK,EAAL,CAAS,SAAT,CAAmB,KAAK,MAAL,GAAc,MAAjC,CAAH,GAA8C,CAA3D;AACH;AAED;;;;AAnCiC;AAAA;AAAA,qDAqBD,EArBC,EAqB2B,GArB3B,EAqBgD;AAC7E,qBAAO,CAAC,GAAG,IAAI,IAAI,eAAJ,EAAR,EAA6B,MAA7B,CAAoC,EAAE,CAAC,SAAH,CAAa,EAAE,CAAC,QAAH,EAAb,IAA8B,EAAE,CAAC,QAAH,EAAlE,EAAiF,EAAjF,CAAP;AACH;AAvBgC;AAAA;AAAA,iDAsCL,OAtCK,EAsCuB;AACpD,cAAA,OAAO,CAAC,WAAR,CAAoB,CAApB;AACH;AAED;;;;;AA1CiC;AAAA;AAAA,yCA8Cb,OA9Ca,EA8CiB,SA9CjB,EA8CkC;AAC/D,cAAA,OAAO,CAAC,aAAR,CAAsB,CAAtB,EAAyB,SAAzB,EAAoC,CAApC;AACH;AAED;;;;;AAlDiC;AAAA;AAAA,+CAsDP,OAtDO,EAsDqB;AAClD,kBAAI,MAAM,GAAG,OAAO,CAAC,SAAR,EAAb;AACA,qBAAO,MAAP;AACH;AAzDgC;AAAA;AAAA,kDA2DJ,OA3DI,EA2D0B,SA3D1B,EA2D2C;AACxE,cAAA,eAAe,CAAC,oBAAhB,CAAqC,OAArC;AACA,cAAA,eAAe,CAAC,YAAhB,CAA6B,OAA7B,EAAsC,SAAtC;AACA,qBAAO,eAAe,CAAC,kBAAhB,CAAmC,OAAnC,CAAP;AACH;AA/DgC;;AAAA;AAAA;;AACxB,QAAA,OAAA,CAAA,eAAA,GAAe,eAAf;AAgEhB,OAjEiC,EAAA,OAAO,GAAP,KAAA,CAAA,OAAA,KAAA,KAAA,CAAA,OAAA,GAAO,EAAP,CAAA;AAiEjC,KAjE2B,EAAA,KAAK,GAAL,MAAA,CAAA,KAAA,KAAA,MAAA,CAAA,KAAA,GAAK,EAAL,CAAA;AAiE3B,GAjEoB,EAAA,MAAM,GAAN,GAAA,CAAA,MAAA,KAAA,GAAA,CAAA,MAAA,GAAM,EAAN,CAAA;AAiEpB,CAjED,EAAiB,GAAG,KAAH,GAAG,GAAA,EAAA,CAApB;AAkEA;;;;;AAGA,CAAA,UAAiB,GAAjB,EAAoB;AAAC,MAAA,MAAA;;AAAA,GAAA,UAAA,MAAA,EAAM;AAAC,QAAA,KAAA;;AAAA,KAAA,UAAA,KAAA,EAAK;AAAC,UAAA,OAAA;;AAAA,OAAA,UAAA,OAAA,EAAO;AAAA,YACxB,IADwB;AACrC,0BAAA;AAAA;;AACI,iBAAA,EAAA,GAAoC,IAApC;AAEA,iBAAA,MAAA,GAAiB,CAAjB;AAyCH;AAxCG;;;;;;;AALiC;AAAA;AAAA,mCAU1B,CAV0B,EAUf,EAVe,EAUW;AACxC,mBAAK,MAAL,GAAc,CAAd;AACA,mBAAK,EAAL,GAAU,EAAV;AACA,qBAAO,IAAP;AACH;AAED;;;;;;AAhBiC;AAAA;AAAA,0CAqBZ,EArBY,EAqBgB,GArBhB,EAqB0B;AACvD,qBAAO,CAAC,GAAG,IAAI,IAAI,IAAJ,EAAR,EAAkB,MAAlB,CAAyB,EAAE,CAAC,SAAH,CAAa,EAAE,CAAC,QAAH,EAAb,IAA8B,EAAE,CAAC,QAAH,EAAvD,EAAsE,EAAtE,CAAP;AACH;AAED;;;;AAzBiC;AAAA;AAAA,sCA4BhB,OA5BgB,EA4BY;AACzC,cAAA,OAAO,CAAC,WAAR,CAAoB,CAApB;AACH;AAED;;;;;AAhCiC;AAAA;AAAA,oCAoClB,OApCkB,EAoCU;AACvC,kBAAI,MAAM,GAAG,OAAO,CAAC,SAAR,EAAb;AACA,qBAAO,MAAP;AACH;AAvCgC;AAAA;AAAA,uCAyCf,OAzCe,EAyCa;AAC1C,cAAA,IAAI,CAAC,SAAL,CAAe,OAAf;AACA,qBAAO,IAAI,CAAC,OAAL,CAAa,OAAb,CAAP;AACH;AA5CgC;;AAAA;AAAA;;AACxB,QAAA,OAAA,CAAA,IAAA,GAAI,IAAJ;AA6ChB,OA9CiC,EAAA,OAAO,GAAP,KAAA,CAAA,OAAA,KAAA,KAAA,CAAA,OAAA,GAAO,EAAP,CAAA;AA8CjC,KA9C2B,EAAA,KAAK,GAAL,MAAA,CAAA,KAAA,KAAA,MAAA,CAAA,KAAA,GAAK,EAAL,CAAA;AA8C3B,GA9CoB,EAAA,MAAM,GAAN,GAAA,CAAA,MAAA,KAAA,GAAA,CAAA,MAAA,GAAM,EAAN,CAAA;AA8CpB,CA9CD,EAAiB,GAAG,KAAH,GAAG,GAAA,EAAA,CAApB;AA+CA;;;;;AAGA,CAAA,UAAiB,GAAjB,EAAoB;AAAC,MAAA,MAAA;;AAAA,GAAA,UAAA,MAAA,EAAM;AAAC,QAAA,KAAA;;AAAA,KAAA,UAAA,KAAA,EAAK;AAAC,UAAA,OAAA;;AAAA,OAAA,UAAA,OAAA,EAAO;AAAA,YACxB,OADwB;AACrC,6BAAA;AAAA;;AACI,iBAAA,EAAA,GAAoC,IAApC;AAEA,iBAAA,MAAA,GAAiB,CAAjB;AA+EH;AA9EG;;;;;;;AALiC;AAAA;AAAA,mCAU1B,CAV0B,EAUf,EAVe,EAUW;AACxC,mBAAK,MAAL,GAAc,CAAd;AACA,mBAAK,EAAL,GAAU,EAAV;AACA,qBAAO,IAAP;AACH;AAED;;;;;;AAhBiC;AAAA;;AAyBjC;;;;;AAzBiC,wCA8BxB;AACL,kBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,CAA/B,CAAb;;AACA,qBAAO,MAAM,GAAG,KAAK,EAAL,CAAS,SAAT,CAAmB,KAAK,MAAL,GAAc,MAAjC,CAAH,GAA8C,CAA3D;AACH;AAED;;;;;;AAnCiC;AAAA;AAAA,oCAwC5B;AACD,kBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,CAA/B,CAAb;;AACA,qBAAO,MAAM,GAAG,KAAK,EAAL,CAAS,SAAT,CAAmB,KAAK,MAAL,GAAc,MAAjC,CAAH,GAA8C,CAA3D;AACH;AAED;;;;AA7CiC;AAAA;AAAA,6CAqBT,EArBS,EAqBmB,GArBnB,EAqBgC;AAC7D,qBAAO,CAAC,GAAG,IAAI,IAAI,OAAJ,EAAR,EAAqB,MAArB,CAA4B,EAAE,CAAC,SAAH,CAAa,EAAE,CAAC,QAAH,EAAb,IAA8B,EAAE,CAAC,QAAH,EAA1D,EAAyE,EAAzE,CAAP;AACH;AAvBgC;AAAA;AAAA,yCAgDb,OAhDa,EAgDe;AAC5C,cAAA,OAAO,CAAC,WAAR,CAAoB,CAApB;AACH;AAED;;;;;AApDiC;AAAA;AAAA,yCAwDb,OAxDa,EAwDiB,SAxDjB,EAwDkC;AAC/D,cAAA,OAAO,CAAC,aAAR,CAAsB,CAAtB,EAAyB,SAAzB,EAAoC,CAApC;AACH;AAED;;;;;AA5DiC;AAAA;AAAA,qCAgEjB,OAhEiB,EAgEa,KAhEb,EAgE0B;AACvD,cAAA,OAAO,CAAC,aAAR,CAAsB,CAAtB,EAAyB,KAAzB,EAAgC,CAAhC;AACH;AAED;;;;;AApEiC;AAAA;AAAA,uCAwEf,OAxEe,EAwEa;AAC1C,kBAAI,MAAM,GAAG,OAAO,CAAC,SAAR,EAAb;AACA,qBAAO,MAAP;AACH;AA3EgC;AAAA;AAAA,0CA6EZ,OA7EY,EA6EkB,SA7ElB,EA6EqC,KA7ErC,EA6EkD;AAC/E,cAAA,OAAO,CAAC,YAAR,CAAqB,OAArB;AACA,cAAA,OAAO,CAAC,YAAR,CAAqB,OAArB,EAA8B,SAA9B;AACA,cAAA,OAAO,CAAC,QAAR,CAAiB,OAAjB,EAA0B,KAA1B;AACA,qBAAO,OAAO,CAAC,UAAR,CAAmB,OAAnB,CAAP;AACH;AAlFgC;;AAAA;AAAA;;AACxB,QAAA,OAAA,CAAA,OAAA,GAAO,OAAP;AAmFhB,OApFiC,EAAA,OAAO,GAAP,KAAA,CAAA,OAAA,KAAA,KAAA,CAAA,OAAA,GAAO,EAAP,CAAA;AAoFjC,KApF2B,EAAA,KAAK,GAAL,MAAA,CAAA,KAAA,KAAA,MAAA,CAAA,KAAA,GAAK,EAAL,CAAA;AAoF3B,GApFoB,EAAA,MAAM,GAAN,GAAA,CAAA,MAAA,KAAA,GAAA,CAAA,MAAA,GAAM,EAAN,CAAA;AAoFpB,CApFD,EAAiB,GAAG,KAAH,GAAG,GAAA,EAAA,CAApB;AAqFA;;;;;;;;;;;;AAUA,CAAA,UAAiB,GAAjB,EAAoB;AAAC,MAAA,MAAA;;AAAA,GAAA,UAAA,MAAA,EAAM;AAAC,QAAA,KAAA;;AAAA,KAAA,UAAA,KAAA,EAAK;AAAC,UAAA,OAAA;;AAAA,OAAA,UAAA,OAAA,EAAO;AAAA,YACxB,IADwB;AACrC,0BAAA;AAAA;;AACI,iBAAA,EAAA,GAAoC,IAApC;AAEA,iBAAA,MAAA,GAAiB,CAAjB;AA0DH;AAzDG;;;;;;;AALiC;AAAA;AAAA,mCAU1B,CAV0B,EAUf,EAVe,EAUW;AACxC,mBAAK,MAAL,GAAc,CAAd;AACA,mBAAK,EAAL,GAAU,EAAV;AACA,qBAAO,IAAP;AACH;AAED;;;;;;AAhBiC;AAAA;;AAyBjC;;;AAzBiC,mCA4B7B;AACA,kBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,CAA/B,CAAb;;AACA,qBAAO,MAAM;AAAG;AAAS,mBAAK,EAAL,CAAS,SAAT,CAAmB,KAAK,MAAL,GAAc,MAAjC,CAAZ,GAAwD,GAAG,CAAC,MAAJ,CAAW,KAAX,CAAiB,OAAjB,CAAyB,QAAzB,CAAkC,WAAvG;AACH;AAED;;;;AAjCiC;AAAA;AAAA,0CAqBZ,EArBY,EAqBgB,GArBhB,EAqB0B;AACvD,qBAAO,CAAC,GAAG,IAAI,IAAI,IAAJ,EAAR,EAAkB,MAAlB,CAAyB,EAAE,CAAC,SAAH,CAAa,EAAE,CAAC,QAAH,EAAb,IAA8B,EAAE,CAAC,QAAH,EAAvD,EAAsE,EAAtE,CAAP;AACH;AAvBgC;AAAA;AAAA,sCAoChB,OApCgB,EAoCY;AACzC,cAAA,OAAO,CAAC,WAAR,CAAoB,CAApB;AACH;AAED;;;;;AAxCiC;AAAA;AAAA,oCA4ClB,OA5CkB,EA4CY,IA5CZ,EA4CmD;AAChF,cAAA,OAAO,CAAC,aAAR,CAAsB,CAAtB,EAAyB,IAAzB,EAA+B,GAAG,CAAC,MAAJ,CAAW,KAAX,CAAiB,OAAjB,CAAyB,QAAzB,CAAkC,WAAjE;AACH;AAED;;;;;AAhDiC;AAAA;AAAA,oCAoDlB,OApDkB,EAoDU;AACvC,kBAAI,MAAM,GAAG,OAAO,CAAC,SAAR,EAAb;AACA,qBAAO,MAAP;AACH;AAvDgC;AAAA;AAAA,uCAyDf,OAzDe,EAyDe,IAzDf,EAyDsD;AACnF,cAAA,IAAI,CAAC,SAAL,CAAe,OAAf;AACA,cAAA,IAAI,CAAC,OAAL,CAAa,OAAb,EAAsB,IAAtB;AACA,qBAAO,IAAI,CAAC,OAAL,CAAa,OAAb,CAAP;AACH;AA7DgC;;AAAA;AAAA;;AACxB,QAAA,OAAA,CAAA,IAAA,GAAI,IAAJ;AA8DhB,OA/DiC,EAAA,OAAO,GAAP,KAAA,CAAA,OAAA,KAAA,KAAA,CAAA,OAAA,GAAO,EAAP,CAAA;AA+DjC,KA/D2B,EAAA,KAAK,GAAL,MAAA,CAAA,KAAA,KAAA,MAAA,CAAA,KAAA,GAAK,EAAL,CAAA;AA+D3B,GA/DoB,EAAA,MAAM,GAAN,GAAA,CAAA,MAAA,KAAA,GAAA,CAAA,MAAA,GAAM,EAAN,CAAA;AA+DpB,CA/DD,EAAiB,GAAG,KAAH,GAAG,GAAA,EAAA,CAApB;AAgEA;;;;;;;;;AAOA,CAAA,UAAiB,GAAjB,EAAoB;AAAC,MAAA,MAAA;;AAAA,GAAA,UAAA,MAAA,EAAM;AAAC,QAAA,KAAA;;AAAA,KAAA,UAAA,KAAA,EAAK;AAAC,UAAA,OAAA;;AAAA,OAAA,UAAA,OAAA,EAAO;AAAA,YACxB,IADwB;AACrC,0BAAA;AAAA;;AACI,iBAAA,EAAA,GAAoC,IAApC;AAEA,iBAAA,MAAA,GAAiB,CAAjB;AA2EH;AA1EG;;;;;;;AALiC;AAAA;AAAA,mCAU1B,CAV0B,EAUf,EAVe,EAUW;AACxC,mBAAK,MAAL,GAAc,CAAd;AACA,mBAAK,EAAL,GAAU,EAAV;AACA,qBAAO,IAAP;AACH;AAED;;;;;;AAhBiC;AAAA;;AAyBjC;;;AAzBiC,mCA4B7B;AACA,kBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,CAA/B,CAAb;;AACA,qBAAO,MAAM;AAAG;AAAS,mBAAK,EAAL,CAAS,SAAT,CAAmB,KAAK,MAAL,GAAc,MAAjC,CAAZ,GAAwD,GAAG,CAAC,MAAJ,CAAW,KAAX,CAAiB,OAAjB,CAAyB,QAAzB,CAAkC,WAAvG;AACH;AAED;;;;AAjCiC;AAAA;AAAA,uCAoCzB;AACJ,kBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,CAA/B,CAAb;;AACA,qBAAO,MAAM,GAAG,KAAK,EAAL,CAAS,SAAT,CAAmB,KAAK,MAAL,GAAc,MAAjC,CAAH,GAA8C,EAA3D;AACH;AAED;;;;AAzCiC;AAAA;AAAA,0CAqBZ,EArBY,EAqBgB,GArBhB,EAqB0B;AACvD,qBAAO,CAAC,GAAG,IAAI,IAAI,IAAJ,EAAR,EAAkB,MAAlB,CAAyB,EAAE,CAAC,SAAH,CAAa,EAAE,CAAC,QAAH,EAAb,IAA8B,EAAE,CAAC,QAAH,EAAvD,EAAsE,EAAtE,CAAP;AACH;AAvBgC;AAAA;AAAA,sCA4ChB,OA5CgB,EA4CY;AACzC,cAAA,OAAO,CAAC,WAAR,CAAoB,CAApB;AACH;AAED;;;;;AAhDiC;AAAA;AAAA,oCAoDlB,OApDkB,EAoDY,IApDZ,EAoDmD;AAChF,cAAA,OAAO,CAAC,aAAR,CAAsB,CAAtB,EAAyB,IAAzB,EAA+B,GAAG,CAAC,MAAJ,CAAW,KAAX,CAAiB,OAAjB,CAAyB,QAAzB,CAAkC,WAAjE;AACH;AAED;;;;;AAxDiC;AAAA;AAAA,wCA4Dd,OA5Dc,EA4DgB,QA5DhB,EA4DgC;AAC7D,cAAA,OAAO,CAAC,aAAR,CAAsB,CAAtB,EAAyB,QAAzB,EAAmC,EAAnC;AACH;AAED;;;;;AAhEiC;AAAA;AAAA,oCAoElB,OApEkB,EAoEU;AACvC,kBAAI,MAAM,GAAG,OAAO,CAAC,SAAR,EAAb;AACA,qBAAO,MAAP;AACH;AAvEgC;AAAA;AAAA,uCAyEf,OAzEe,EAyEe,IAzEf,EAyEwD,QAzExD,EAyEwE;AACrG,cAAA,IAAI,CAAC,SAAL,CAAe,OAAf;AACA,cAAA,IAAI,CAAC,OAAL,CAAa,OAAb,EAAsB,IAAtB;AACA,cAAA,IAAI,CAAC,WAAL,CAAiB,OAAjB,EAA0B,QAA1B;AACA,qBAAO,IAAI,CAAC,OAAL,CAAa,OAAb,CAAP;AACH;AA9EgC;;AAAA;AAAA;;AACxB,QAAA,OAAA,CAAA,IAAA,GAAI,IAAJ;AA+EhB,OAhFiC,EAAA,OAAO,GAAP,KAAA,CAAA,OAAA,KAAA,KAAA,CAAA,OAAA,GAAO,EAAP,CAAA;AAgFjC,KAhF2B,EAAA,KAAK,GAAL,MAAA,CAAA,KAAA,KAAA,MAAA,CAAA,KAAA,GAAK,EAAL,CAAA;AAgF3B,GAhFoB,EAAA,MAAM,GAAN,GAAA,CAAA,MAAA,KAAA,GAAA,CAAA,MAAA,GAAM,EAAN,CAAA;AAgFpB,CAhFD,EAAiB,GAAG,KAAH,GAAG,GAAA,EAAA,CAApB;AAiFA;;;;;;;;;;;;AAUA,CAAA,UAAiB,GAAjB,EAAoB;AAAC,MAAA,MAAA;;AAAA,GAAA,UAAA,MAAA,EAAM;AAAC,QAAA,KAAA;;AAAA,KAAA,UAAA,KAAA,EAAK;AAAC,UAAA,OAAA;;AAAA,OAAA,UAAA,OAAA,EAAO;AAAA,YACxB,SADwB;AACrC,+BAAA;AAAA;;AACI,iBAAA,EAAA,GAAoC,IAApC;AAEA,iBAAA,MAAA,GAAiB,CAAjB;AAmGH;AAlGG;;;;;;;AALiC;AAAA;AAAA,mCAU1B,CAV0B,EAUf,EAVe,EAUW;AACxC,mBAAK,MAAL,GAAc,CAAd;AACA,mBAAK,EAAL,GAAU,EAAV;AACA,qBAAO,IAAP;AACH;AAED;;;;;;AAhBiC;AAAA;;AAyBjC;;;AAzBiC,mCA4B7B;AACA,kBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,CAA/B,CAAb;;AACA,qBAAO,MAAM;AAAG;AAAS,mBAAK,EAAL,CAAS,SAAT,CAAmB,KAAK,MAAL,GAAc,MAAjC,CAAZ,GAAwD,GAAG,CAAC,MAAJ,CAAW,KAAX,CAAiB,OAAjB,CAAyB,QAAzB,CAAkC,MAAvG;AACH;AA/BgC;AAAA;AAAA,qCA4DxB,gBA5DwB,EA4DF;AAC3B,kBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,CAA/B,CAAb;;AACA,qBAAO,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAL,GAAc,MAAhC,EAAwC,gBAAxC,CAAH,GAA+D,IAA5E;AACH;AAED;;;;AAjEiC;AAAA;AAAA,+CAqBP,EArBO,EAqBqB,GArBrB,EAqBoC;AACjE,qBAAO,CAAC,GAAG,IAAI,IAAI,SAAJ,EAAR,EAAuB,MAAvB,CAA8B,EAAE,CAAC,SAAH,CAAa,EAAE,CAAC,QAAH,EAAb,IAA8B,EAAE,CAAC,QAAH,EAA5D,EAA2E,EAA3E,CAAP;AACH;AAvBgC;AAAA;AAAA,2CAoEX,OApEW,EAoEiB;AAC9C,cAAA,OAAO,CAAC,WAAR,CAAoB,CAApB;AACH;AAED;;;;;AAxEiC;AAAA;AAAA,oCA4ElB,OA5EkB,EA4EY,IA5EZ,EA4EmD;AAChF,cAAA,OAAO,CAAC,aAAR,CAAsB,CAAtB,EAAyB,IAAzB,EAA+B,GAAG,CAAC,MAAJ,CAAW,KAAX,CAAiB,OAAjB,CAAyB,QAAzB,CAAkC,MAAjE;AACH;AAED;;;;;AAhFiC;AAAA;AAAA,wCAoFd,OApFc,EAoFgB,cApFhB,EAoFkD;AAC/E,cAAA,OAAO,CAAC,cAAR,CAAuB,CAAvB,EAA0B,cAA1B,EAA0C,CAA1C;AACH;AAED;;;;;AAxFiC;AAAA;AAAA,yCA4Fb,OA5Fa,EA4Fe;AAC5C,kBAAI,MAAM,GAAG,OAAO,CAAC,SAAR,EAAb;AACA,qBAAO,MAAP;AACH;AA/FgC;AAAA;AAAA,4CAiGV,OAjGU,EAiGoB,IAjGpB,EAiG6D,cAjG7D,EAiG+F;AAC5H,cAAA,SAAS,CAAC,cAAV,CAAyB,OAAzB;AACA,cAAA,SAAS,CAAC,OAAV,CAAkB,OAAlB,EAA2B,IAA3B;AACA,cAAA,SAAS,CAAC,WAAV,CAAsB,OAAtB,EAA+B,cAA/B;AACA,qBAAO,SAAS,CAAC,YAAV,CAAuB,OAAvB,CAAP;AACH;AAtGgC;;AAAA;AAAA;;AACxB,QAAA,OAAA,CAAA,SAAA,GAAS,SAAT;AAuGhB,OAxGiC,EAAA,OAAO,GAAP,KAAA,CAAA,OAAA,KAAA,KAAA,CAAA,OAAA,GAAO,EAAP,CAAA;AAwGjC,KAxG2B,EAAA,KAAK,GAAL,MAAA,CAAA,KAAA,KAAA,MAAA,CAAA,KAAA,GAAK,EAAL,CAAA;AAwG3B,GAxGoB,EAAA,MAAM,GAAN,GAAA,CAAA,MAAA,KAAA,GAAA,CAAA,MAAA,GAAM,EAAN,CAAA;AAwGpB,CAxGD,EAAiB,GAAG,KAAH,GAAG,GAAA,EAAA,CAApB;AAyGA;;;;;AAGA,CAAA,UAAiB,GAAjB,EAAoB;AAAC,MAAA,MAAA;;AAAA,GAAA,UAAA,MAAA,EAAM;AAAC,QAAA,KAAA;;AAAA,KAAA,UAAA,KAAA,EAAK;AAAC,UAAA,OAAA;;AAAA,OAAA,UAAA,OAAA,EAAO;AAAA,YACxB,QADwB;AACrC,8BAAA;AAAA;;AACI,iBAAA,EAAA,GAAoC,IAApC;AAEA,iBAAA,MAAA,GAAiB,CAAjB;AA0DH;AAzDG;;;;;;;AALiC;AAAA;AAAA,mCAU1B,CAV0B,EAUf,EAVe,EAUW;AACxC,mBAAK,MAAL,GAAc,CAAd;AACA,mBAAK,EAAL,GAAU,EAAV;AACA,qBAAO,IAAP;AACH;AAED;;;;;;AAhBiC;AAAA;;AAyBjC;;;AAzBiC,mCA4B7B;AACA,kBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,CAA/B,CAAb;;AACA,qBAAO,MAAM;AAAG;AAAS,mBAAK,EAAL,CAAS,SAAT,CAAmB,KAAK,MAAL,GAAc,MAAjC,CAAZ,GAAwD,GAAG,CAAC,MAAJ,CAAW,KAAX,CAAiB,OAAjB,CAAyB,YAAzB,CAAsC,UAA3G;AACH;AAED;;;;AAjCiC;AAAA;AAAA,8CAqBR,EArBQ,EAqBoB,GArBpB,EAqBkC;AAC/D,qBAAO,CAAC,GAAG,IAAI,IAAI,QAAJ,EAAR,EAAsB,MAAtB,CAA6B,EAAE,CAAC,SAAH,CAAa,EAAE,CAAC,QAAH,EAAb,IAA8B,EAAE,CAAC,QAAH,EAA3D,EAA0E,EAA1E,CAAP;AACH;AAvBgC;AAAA;AAAA,0CAoCZ,OApCY,EAoCgB;AAC7C,cAAA,OAAO,CAAC,WAAR,CAAoB,CAApB;AACH;AAED;;;;;AAxCiC;AAAA;AAAA,oCA4ClB,OA5CkB,EA4CY,IA5CZ,EA4CuD;AACpF,cAAA,OAAO,CAAC,aAAR,CAAsB,CAAtB,EAAyB,IAAzB,EAA+B,GAAG,CAAC,MAAJ,CAAW,KAAX,CAAiB,OAAjB,CAAyB,YAAzB,CAAsC,UAArE;AACH;AAED;;;;;AAhDiC;AAAA;AAAA,wCAoDd,OApDc,EAoDc;AAC3C,kBAAI,MAAM,GAAG,OAAO,CAAC,SAAR,EAAb;AACA,qBAAO,MAAP;AACH;AAvDgC;AAAA;AAAA,2CAyDX,OAzDW,EAyDmB,IAzDnB,EAyD8D;AAC3F,cAAA,QAAQ,CAAC,aAAT,CAAuB,OAAvB;AACA,cAAA,QAAQ,CAAC,OAAT,CAAiB,OAAjB,EAA0B,IAA1B;AACA,qBAAO,QAAQ,CAAC,WAAT,CAAqB,OAArB,CAAP;AACH;AA7DgC;;AAAA;AAAA;;AACxB,QAAA,OAAA,CAAA,QAAA,GAAQ,QAAR;AA8DhB,OA/DiC,EAAA,OAAO,GAAP,KAAA,CAAA,OAAA,KAAA,KAAA,CAAA,OAAA,GAAO,EAAP,CAAA;AA+DjC,KA/D2B,EAAA,KAAK,GAAL,MAAA,CAAA,KAAA,KAAA,MAAA,CAAA,KAAA,GAAK,EAAL,CAAA;AA+D3B,GA/DoB,EAAA,MAAM,GAAN,GAAA,CAAA,MAAA,KAAA,GAAA,CAAA,MAAA,GAAM,EAAN,CAAA;AA+DpB,CA/DD,EAAiB,GAAG,KAAH,GAAG,GAAA,EAAA,CAApB;AAgEA;;;;;AAGA,CAAA,UAAiB,GAAjB,EAAoB;AAAC,MAAA,MAAA;;AAAA,GAAA,UAAA,MAAA,EAAM;AAAC,QAAA,KAAA;;AAAA,KAAA,UAAA,KAAA,EAAK;AAAC,UAAA,OAAA;;AAAA,OAAA,UAAA,OAAA,EAAO;AAAA,YACxB,QADwB;AACrC,8BAAA;AAAA;;AACI,iBAAA,EAAA,GAAoC,IAApC;AAEA,iBAAA,MAAA,GAAiB,CAAjB;AA0DH;AAzDG;;;;;;;AALiC;AAAA;AAAA,mCAU1B,CAV0B,EAUf,EAVe,EAUW;AACxC,mBAAK,MAAL,GAAc,CAAd;AACA,mBAAK,EAAL,GAAU,EAAV;AACA,qBAAO,IAAP;AACH;AAED;;;;;;AAhBiC;AAAA;;AAyBjC;;;AAzBiC,mCA4B7B;AACA,kBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,CAA/B,CAAb;;AACA,qBAAO,MAAM;AAAG;AAAS,mBAAK,EAAL,CAAS,SAAT,CAAmB,KAAK,MAAL,GAAc,MAAjC,CAAZ,GAAwD,GAAG,CAAC,MAAJ,CAAW,KAAX,CAAiB,OAAjB,CAAyB,QAAzB,CAAkC,WAAvG;AACH;AAED;;;;AAjCiC;AAAA;AAAA,8CAqBR,EArBQ,EAqBoB,GArBpB,EAqBkC;AAC/D,qBAAO,CAAC,GAAG,IAAI,IAAI,QAAJ,EAAR,EAAsB,MAAtB,CAA6B,EAAE,CAAC,SAAH,CAAa,EAAE,CAAC,QAAH,EAAb,IAA8B,EAAE,CAAC,QAAH,EAA3D,EAA0E,EAA1E,CAAP;AACH;AAvBgC;AAAA;AAAA,0CAoCZ,OApCY,EAoCgB;AAC7C,cAAA,OAAO,CAAC,WAAR,CAAoB,CAApB;AACH;AAED;;;;;AAxCiC;AAAA;AAAA,oCA4ClB,OA5CkB,EA4CY,IA5CZ,EA4CmD;AAChF,cAAA,OAAO,CAAC,aAAR,CAAsB,CAAtB,EAAyB,IAAzB,EAA+B,GAAG,CAAC,MAAJ,CAAW,KAAX,CAAiB,OAAjB,CAAyB,QAAzB,CAAkC,WAAjE;AACH;AAED;;;;;AAhDiC;AAAA;AAAA,wCAoDd,OApDc,EAoDc;AAC3C,kBAAI,MAAM,GAAG,OAAO,CAAC,SAAR,EAAb;AACA,qBAAO,MAAP;AACH;AAvDgC;AAAA;AAAA,2CAyDX,OAzDW,EAyDmB,IAzDnB,EAyD0D;AACvF,cAAA,QAAQ,CAAC,aAAT,CAAuB,OAAvB;AACA,cAAA,QAAQ,CAAC,OAAT,CAAiB,OAAjB,EAA0B,IAA1B;AACA,qBAAO,QAAQ,CAAC,WAAT,CAAqB,OAArB,CAAP;AACH;AA7DgC;;AAAA;AAAA;;AACxB,QAAA,OAAA,CAAA,QAAA,GAAQ,QAAR;AA8DhB,OA/DiC,EAAA,OAAO,GAAP,KAAA,CAAA,OAAA,KAAA,KAAA,CAAA,OAAA,GAAO,EAAP,CAAA;AA+DjC,KA/D2B,EAAA,KAAK,GAAL,MAAA,CAAA,KAAA,KAAA,MAAA,CAAA,KAAA,GAAK,EAAL,CAAA;AA+D3B,GA/DoB,EAAA,MAAM,GAAN,GAAA,CAAA,MAAA,KAAA,GAAA,CAAA,MAAA,GAAM,EAAN,CAAA;AA+DpB,CA/DD,EAAiB,GAAG,KAAH,GAAG,GAAA,EAAA,CAApB;AAgEA;;;;;;;;;AAOA,CAAA,UAAiB,GAAjB,EAAoB;AAAC,MAAA,MAAA;;AAAA,GAAA,UAAA,MAAA,EAAM;AAAC,QAAA,KAAA;;AAAA,KAAA,UAAA,KAAA,EAAK;AAAC,UAAA,OAAA;;AAAA,OAAA,UAAA,OAAA,EAAO;AAAA,YACxB,QADwB;AACrC,8BAAA;AAAA;;AACI,iBAAA,EAAA,GAAoC,IAApC;AAEA,iBAAA,MAAA,GAAiB,CAAjB;AAiFH;AAhFG;;;;;;;AALiC;AAAA;AAAA,mCAU1B,CAV0B,EAUf,EAVe,EAUW;AACxC,mBAAK,MAAL,GAAc,CAAd;AACA,mBAAK,EAAL,GAAU,EAAV;AACA,qBAAO,IAAP;AACH;AAED;;;;;;AAhBiC;AAAA;AAAA,gCA+B7B,gBA/B6B,EA+BP;AACtB,kBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,CAA/B,CAAb;;AACA,qBAAO,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAL,GAAc,MAAhC,EAAwC,gBAAxC,CAAH,GAA+D,IAA5E;AACH;AAlCgC;AAAA;AAAA,kCA0C3B,gBA1C2B,EA0CL;AACxB,kBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,CAA/B,CAAb;;AACA,qBAAO,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAL,GAAc,MAAhC,EAAwC,gBAAxC,CAAH,GAA+D,IAA5E;AACH;AAED;;;;AA/CiC;AAAA;AAAA,8CAqBR,EArBQ,EAqBoB,GArBpB,EAqBkC;AAC/D,qBAAO,CAAC,GAAG,IAAI,IAAI,QAAJ,EAAR,EAAsB,MAAtB,CAA6B,EAAE,CAAC,SAAH,CAAa,EAAE,CAAC,QAAH,EAAb,IAA8B,EAAE,CAAC,QAAH,EAA3D,EAA0E,EAA1E,CAAP;AACH;AAvBgC;AAAA;AAAA,0CAkDZ,OAlDY,EAkDgB;AAC7C,cAAA,OAAO,CAAC,WAAR,CAAoB,CAApB;AACH;AAED;;;;;AAtDiC;AAAA;AAAA,mCA0DnB,OA1DmB,EA0DW,SA1DX,EA0DwC;AACrE,cAAA,OAAO,CAAC,cAAR,CAAuB,CAAvB,EAA0B,SAA1B,EAAqC,CAArC;AACH;AAED;;;;;AA9DiC;AAAA;AAAA,qCAkEjB,OAlEiB,EAkEa,WAlEb,EAkE4C;AACzE,cAAA,OAAO,CAAC,cAAR,CAAuB,CAAvB,EAA0B,WAA1B,EAAuC,CAAvC;AACH;AAED;;;;;AAtEiC;AAAA;AAAA,wCA0Ed,OA1Ec,EA0Ec;AAC3C,kBAAI,MAAM,GAAG,OAAO,CAAC,SAAR,EAAb;AACA,qBAAO,MAAP;AACH;AA7EgC;AAAA;AAAA,2CA+EX,OA/EW,EA+EmB,SA/EnB,EA+EkD,WA/ElD,EA+EiF;AAC9G,cAAA,QAAQ,CAAC,aAAT,CAAuB,OAAvB;AACA,cAAA,QAAQ,CAAC,MAAT,CAAgB,OAAhB,EAAyB,SAAzB;AACA,cAAA,QAAQ,CAAC,QAAT,CAAkB,OAAlB,EAA2B,WAA3B;AACA,qBAAO,QAAQ,CAAC,WAAT,CAAqB,OAArB,CAAP;AACH;AApFgC;;AAAA;AAAA;;AACxB,QAAA,OAAA,CAAA,QAAA,GAAQ,QAAR;AAqFhB,OAtFiC,EAAA,OAAO,GAAP,KAAA,CAAA,OAAA,KAAA,KAAA,CAAA,OAAA,GAAO,EAAP,CAAA;AAsFjC,KAtF2B,EAAA,KAAK,GAAL,MAAA,CAAA,KAAA,KAAA,MAAA,CAAA,KAAA,GAAK,EAAL,CAAA;AAsF3B,GAtFoB,EAAA,MAAM,GAAN,GAAA,CAAA,MAAA,KAAA,GAAA,CAAA,MAAA,GAAM,EAAN,CAAA;AAsFpB,CAtFD,EAAiB,GAAG,KAAH,GAAG,GAAA,EAAA,CAApB;AAuFA;;;;;;;;AAMA,CAAA,UAAiB,GAAjB,EAAoB;AAAC,MAAA,MAAA;;AAAA,GAAA,UAAA,MAAA,EAAM;AAAC,QAAA,KAAA;;AAAA,KAAA,UAAA,KAAA,EAAK;AAAC,UAAA,OAAA;;AAAA,OAAA,UAAA,OAAA,EAAO;AAAA,YACxB,kBADwB;AACrC,wCAAA;AAAA;;AACI,iBAAA,EAAA,GAAoC,IAApC;AAEA,iBAAA,MAAA,GAAiB,CAAjB;AAyGH;AAxGG;;;;;;;AALiC;AAAA;AAAA,mCAU1B,CAV0B,EAUf,EAVe,EAUW;AACxC,mBAAK,MAAL,GAAc,CAAd;AACA,mBAAK,EAAL,GAAU,EAAV;AACA,qBAAO,IAAP;AACH;AAED;;;;;;AAhBiC;AAAA;;AAyBjC;;;;;;;AAzBiC,iCAgC/B;AACE,kBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,CAA/B,CAAb;;AACA,qBAAO,MAAM,GAAG,KAAK,EAAL,CAAS,SAAT,CAAmB,KAAK,MAAL,GAAc,MAAjC,CAAH,GAA8C,KAAK,EAAL,CAAS,UAAT,CAAoB,CAApB,EAAuB,CAAvB,CAA3D;AACH;AAED;;;;;;;;AArCiC;AAAA;AAAA,sCA4CvB,GA5CuB,EA4CW;AACxC,kBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,CAA/B,CAAb;;AACA,qBAAO,MAAM,GAAG,CAAC,GAAG,IAAI,IAAI,GAAG,CAAC,MAAJ,CAAW,KAAX,CAAiB,OAAjB,CAAyB,GAA7B,EAAR,EAA0C,MAA1C,CAAiD,KAAK,EAAL,CAAS,UAAT,CAAoB,KAAK,MAAL,GAAc,MAAlC,CAAjD,EAA4F,KAAK,EAAjG,CAAH,GAA2G,IAAxH;AACH;AAED;;;;;;;;;AAjDiC;AAAA;AAAA,wCAyDxB;AACL,kBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,CAA/B,CAAb;;AACA,qBAAO,MAAM,GAAG,CAAC,CAAC,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAL,GAAc,MAAhC,CAAL,GAA+C,KAA5D;AACH;AAED;;;;AA9DiC;AAAA;AAAA,wDAqBE,EArBF,EAqB8B,GArB9B,EAqBsD;AACnF,qBAAO,CAAC,GAAG,IAAI,IAAI,kBAAJ,EAAR,EAAgC,MAAhC,CAAuC,EAAE,CAAC,SAAH,CAAa,EAAE,CAAC,QAAH,EAAb,IAA8B,EAAE,CAAC,QAAH,EAArE,EAAoF,EAApF,CAAP;AACH;AAvBgC;AAAA;AAAA,oDAiEF,OAjEE,EAiE0B;AACvD,cAAA,OAAO,CAAC,WAAR,CAAoB,CAApB;AACH;AAED;;;;;AArEiC;AAAA;AAAA,kCAyEpB,OAzEoB,EAyEU,EAzEV,EAyE8B;AAC3D,cAAA,OAAO,CAAC,aAAR,CAAsB,CAAtB,EAAyB,EAAzB,EAA6B,OAAO,CAAC,UAAR,CAAmB,CAAnB,EAAsB,CAAtB,CAA7B;AACH;AAED;;;;;AA7EiC;AAAA;AAAA,yCAiFb,OAjFa,EAiFiB,eAjFjB,EAiFoD;AACjF,cAAA,OAAO,CAAC,cAAR,CAAuB,CAAvB,EAA0B,eAA1B,EAA2C,CAA3C;AACH;AAED;;;;;AArFiC;AAAA;AAAA,yCAyFb,OAzFa,EAyFiB,SAzFjB,EAyFmC;AAChE,cAAA,OAAO,CAAC,YAAR,CAAqB,CAArB,EAAwB,CAAC,SAAzB,EAAoC,CAAC,KAArC;AACH;AAED;;;;;AA7FiC;AAAA;AAAA,kDAiGJ,OAjGI,EAiGwB;AACrD,kBAAI,MAAM,GAAG,OAAO,CAAC,SAAR,EAAb;AACA,qBAAO,MAAP;AACH;AApGgC;AAAA;AAAA,qDAsGD,OAtGC,EAsG6B,EAtG7B,EAsGmD,eAtGnD,EAsGwF,SAtGxF,EAsG0G;AACvI,cAAA,kBAAkB,CAAC,uBAAnB,CAA2C,OAA3C;AACA,cAAA,kBAAkB,CAAC,KAAnB,CAAyB,OAAzB,EAAkC,EAAlC;AACA,cAAA,kBAAkB,CAAC,YAAnB,CAAgC,OAAhC,EAAyC,eAAzC;AACA,cAAA,kBAAkB,CAAC,YAAnB,CAAgC,OAAhC,EAAyC,SAAzC;AACA,qBAAO,kBAAkB,CAAC,qBAAnB,CAAyC,OAAzC,CAAP;AACH;AA5GgC;;AAAA;AAAA;;AACxB,QAAA,OAAA,CAAA,kBAAA,GAAkB,kBAAlB;AA6GhB,OA9GiC,EAAA,OAAO,GAAP,KAAA,CAAA,OAAA,KAAA,KAAA,CAAA,OAAA,GAAO,EAAP,CAAA;AA8GjC,KA9G2B,EAAA,KAAK,GAAL,MAAA,CAAA,KAAA,KAAA,MAAA,CAAA,KAAA,GAAK,EAAL,CAAA;AA8G3B,GA9GoB,EAAA,MAAM,GAAN,GAAA,CAAA,MAAA,KAAA,GAAA,CAAA,MAAA,GAAM,EAAN,CAAA;AA8GpB,CA9GD,EAAiB,GAAG,KAAH,GAAG,GAAA,EAAA,CAApB;AA+GA;;;;;;;;;AAOA,CAAA,UAAiB,GAAjB,EAAoB;AAAC,MAAA,MAAA;;AAAA,GAAA,UAAA,MAAA,EAAM;AAAC,QAAA,KAAA;;AAAA,KAAA,UAAA,KAAA,EAAK;AAAC,UAAA,OAAA;;AAAA,OAAA,UAAA,OAAA,EAAO;AAAA,YACxB,KADwB;AACrC,2BAAA;AAAA;;AACI,iBAAA,EAAA,GAAoC,IAApC;AAEA,iBAAA,MAAA,GAAiB,CAAjB;AAgPH;AA/OG;;;;;;;AALiC;AAAA;AAAA,mCAU1B,CAV0B,EAUf,EAVe,EAUW;AACxC,mBAAK,MAAL,GAAc,CAAd;AACA,mBAAK,EAAL,GAAU,EAAV;AACA,qBAAO,IAAP;AACH;AAED;;;;;;AAhBiC;AAAA;AAAA,iCAiC5B,gBAjC4B,EAiCN;AACvB,kBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,CAA/B,CAAb;;AACA,qBAAO,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAL,GAAc,MAAhC,EAAwC,gBAAxC,CAAH,GAA+D,IAA5E;AACH;AAED;;;;;;AAtCiC;AAAA;AAAA,uCA2CzB;AACJ,kBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,CAA/B,CAAb;;AACA,qBAAO,MAAM,GAAG,CAAC,CAAC,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAL,GAAc,MAAhC,CAAL,GAA+C,KAA5D;AACH;AAED;;;;AAhDiC;AAAA;AAAA,uCAmDzB;AACJ,kBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,CAA/B,CAAb;;AACA,qBAAO,MAAM;AAAG;AAAS,mBAAK,EAAL,CAAS,SAAT,CAAmB,KAAK,MAAL,GAAc,MAAjC,CAAZ,GAAwD,GAAG,CAAC,MAAJ,CAAW,KAAX,CAAiB,OAAjB,CAAyB,IAAzB,CAA8B,IAAnG;AACH;AAED;;;;;;;AAxDiC;AAAA;AAAA,iCA8DC,GA9DD,EA8DO;AACpC,kBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,EAA/B,CAAb;;AACA,qBAAO,MAAM,GAAG,KAAK,EAAL,CAAS,OAAT,CAAiB,GAAjB,EAAsB,KAAK,MAAL,GAAc,MAApC,CAAH,GAAiD,IAA9D;AACH;AAED;;;;;;;AAnEiC;AAAA;AAAA,uCAyEtB,GAzEsB,EAyE2B;AACxD,kBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,EAA/B,CAAb;;AACA,qBAAO,MAAM,GAAG,CAAC,GAAG,IAAI,IAAI,GAAG,CAAC,MAAJ,CAAW,KAAX,CAAiB,OAAjB,CAAyB,kBAA7B,EAAR,EAAyD,MAAzD,CAAgE,KAAK,EAAL,CAAS,UAAT,CAAoB,KAAK,MAAL,GAAc,MAAlC,CAAhE,EAA2G,KAAK,EAAhH,CAAH,GAA0H,IAAvI;AACH;AAED;;;;;;;;;AA9EiC;AAAA;AAAA,qCAsFxB,KAtFwB,EAsFT,GAtFS,EAsF2B;AACxD,kBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,EAA/B,CAAb;;AACA,qBAAO,MAAM,GAAG,CAAC,GAAG,IAAI,IAAI,GAAG,CAAC,MAAJ,CAAW,KAAX,CAAiB,OAAjB,CAAyB,KAA7B,EAAR,EAA4C,MAA5C,CAAmD,KAAK,EAAL,CAAS,UAAT,CAAoB,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAL,GAAc,MAAhC,IAA0C,KAAK,GAAG,CAAtE,CAAnD,EAA6H,KAAK,EAAlI,CAAH,GAA4I,IAAzJ;AACH;AAED;;;;AA3FiC;AAAA;AAAA,6CA8FnB;AACV,kBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,EAA/B,CAAb;;AACA,qBAAO,MAAM,GAAG,KAAK,EAAL,CAAS,YAAT,CAAsB,KAAK,MAAL,GAAc,MAApC,CAAH,GAAiD,CAA9D;AACH;AAED;;;;;;;;AAnGiC;AAAA;AAAA,2CA0GlB,KA1GkB,EA0GH,GA1GG,EA0GoC;AACjE,kBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,EAA/B,CAAb;;AACA,qBAAO,MAAM,GAAG,CAAC,GAAG,IAAI,IAAI,GAAG,CAAC,MAAJ,CAAW,KAAX,CAAiB,OAAjB,CAAyB,QAA7B,EAAR,EAA+C,MAA/C,CAAsD,KAAK,EAAL,CAAS,UAAT,CAAoB,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAL,GAAc,MAAhC,IAA0C,KAAK,GAAG,CAAtE,CAAtD,EAAgI,KAAK,EAArI,CAAH,GAA+I,IAA5J;AACH;AAED;;;;AA/GiC;AAAA;AAAA,mDAkHb;AAChB,kBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,EAA/B,CAAb;;AACA,qBAAO,MAAM,GAAG,KAAK,EAAL,CAAS,YAAT,CAAsB,KAAK,MAAL,GAAc,MAApC,CAAH,GAAiD,CAA9D;AACH;AAED;;;;AAvHiC;AAAA;AAAA,2CAqBX,EArBW,EAqBiB,GArBjB,EAqB4B;AACzD,qBAAO,CAAC,GAAG,IAAI,IAAI,KAAJ,EAAR,EAAmB,MAAnB,CAA0B,EAAE,CAAC,SAAH,CAAa,EAAE,CAAC,QAAH,EAAb,IAA8B,EAAE,CAAC,QAAH,EAAxD,EAAuE,EAAvE,CAAP;AACH;AAvBgC;AAAA;AAAA,uCA0Hf,OA1He,EA0Ha;AAC1C,cAAA,OAAO,CAAC,WAAR,CAAoB,CAApB;AACH;AAED;;;;;AA9HiC;AAAA;AAAA,oCAkIlB,OAlIkB,EAkIY,UAlIZ,EAkI0C;AACvE,cAAA,OAAO,CAAC,cAAR,CAAuB,CAAvB,EAA0B,UAA1B,EAAsC,CAAtC;AACH;AAED;;;;;AAtIiC;AAAA;AAAA,wCA0Id,OA1Ic,EA0IgB,QA1IhB,EA0IiC;AAC9D,cAAA,OAAO,CAAC,YAAR,CAAqB,CAArB,EAAwB,CAAC,QAAzB,EAAmC,CAAC,KAApC;AACH;AAED;;;;;AA9IiC;AAAA;AAAA,wCAkJd,OAlJc,EAkJgB,QAlJhB,EAkJuD;AACpF,cAAA,OAAO,CAAC,YAAR,CAAqB,CAArB,EAAwB,QAAxB,EAAkC,GAAG,CAAC,MAAJ,CAAW,KAAX,CAAiB,OAAjB,CAAyB,IAAzB,CAA8B,IAAhE;AACH;AAED;;;;;AAtJiC;AAAA;AAAA,oCA0JlB,OA1JkB,EA0JY,UA1JZ,EA0J0C;AACvE,cAAA,OAAO,CAAC,cAAR,CAAuB,CAAvB,EAA0B,UAA1B,EAAsC,CAAtC;AACH;AAED;;;;;AA9JiC;AAAA;AAAA,0CAkKZ,OAlKY,EAkKkB,gBAlKlB,EAkKsD;AACnF,cAAA,OAAO,CAAC,cAAR,CAAuB,CAAvB,EAA0B,gBAA1B,EAA4C,CAA5C;AACH;AAED;;;;;AAtKiC;AAAA;AAAA,wCA0Kd,OA1Kc,EA0KgB,cA1KhB,EA0KkD;AAC/E,cAAA,OAAO,CAAC,cAAR,CAAuB,CAAvB,EAA0B,cAA1B,EAA0C,CAA1C;AACH;AAED;;;;;;AA9KiC;AAAA;AAAA,iDAmLL,OAnLK,EAmLyB,IAnLzB,EAmLmD;AAChF,cAAA,OAAO,CAAC,WAAR,CAAoB,CAApB,EAAuB,IAAI,CAAC,MAA5B,EAAoC,CAApC;;AACA,mBAAK,IAAI,CAAC,GAAG,IAAI,CAAC,MAAL,GAAc,CAA3B,EAA8B,CAAC,IAAI,CAAnC,EAAsC,CAAC,EAAvC,EAA2C;AACvC,gBAAA,OAAO,CAAC,SAAR,CAAkB,IAAI,CAAC,CAAD,CAAtB;AACH;;AACD,qBAAO,OAAO,CAAC,SAAR,EAAP;AACH;AAED;;;;;AA3LiC;AAAA;AAAA,gDA+LN,OA/LM,EA+LwB,QA/LxB,EA+LwC;AACrE,cAAA,OAAO,CAAC,WAAR,CAAoB,CAApB,EAAuB,QAAvB,EAAiC,CAAjC;AACH;AAED;;;;;AAnMiC;AAAA;AAAA,8CAuMR,OAvMQ,EAuMsB,oBAvMtB,EAuM8D;AAC3F,cAAA,OAAO,CAAC,cAAR,CAAuB,CAAvB,EAA0B,oBAA1B,EAAgD,CAAhD;AACH;AAED;;;;;;AA3MiC;AAAA;AAAA,uDAgNC,OAhND,EAgN+B,IAhN/B,EAgNyD;AACtF,cAAA,OAAO,CAAC,WAAR,CAAoB,CAApB,EAAuB,IAAI,CAAC,MAA5B,EAAoC,CAApC;;AACA,mBAAK,IAAI,CAAC,GAAG,IAAI,CAAC,MAAL,GAAc,CAA3B,EAA8B,CAAC,IAAI,CAAnC,EAAsC,CAAC,EAAvC,EAA2C;AACvC,gBAAA,OAAO,CAAC,SAAR,CAAkB,IAAI,CAAC,CAAD,CAAtB;AACH;;AACD,qBAAO,OAAO,CAAC,SAAR,EAAP;AACH;AAED;;;;;AAxNiC;AAAA;AAAA,sDA4NA,OA5NA,EA4N8B,QA5N9B,EA4N8C;AAC3E,cAAA,OAAO,CAAC,WAAR,CAAoB,CAApB,EAAuB,QAAvB,EAAiC,CAAjC;AACH;AAED;;;;;AAhOiC;AAAA;AAAA,qCAoOjB,OApOiB,EAoOW;AACxC,kBAAI,MAAM,GAAG,OAAO,CAAC,SAAR,EAAb;AACA,qBAAO,MAAP;AACH;AAvOgC;AAAA;AAAA,wCAyOd,OAzOc,EAyOgB,UAzOhB,EAyOgD,QAzOhD,EAyOmE,QAzOnE,EAyO4G,UAzO5G,EAyO4I,gBAzO5I,EAyOkL,cAzOlL,EAyOsN,oBAzOtN,EAyO8P;AAC3R,cAAA,KAAK,CAAC,UAAN,CAAiB,OAAjB;AACA,cAAA,KAAK,CAAC,OAAN,CAAc,OAAd,EAAuB,UAAvB;AACA,cAAA,KAAK,CAAC,WAAN,CAAkB,OAAlB,EAA2B,QAA3B;AACA,cAAA,KAAK,CAAC,WAAN,CAAkB,OAAlB,EAA2B,QAA3B;AACA,cAAA,KAAK,CAAC,OAAN,CAAc,OAAd,EAAuB,UAAvB;AACA,cAAA,KAAK,CAAC,aAAN,CAAoB,OAApB,EAA6B,gBAA7B;AACA,cAAA,KAAK,CAAC,WAAN,CAAkB,OAAlB,EAA2B,cAA3B;AACA,cAAA,KAAK,CAAC,iBAAN,CAAwB,OAAxB,EAAiC,oBAAjC;AACA,qBAAO,KAAK,CAAC,QAAN,CAAe,OAAf,CAAP;AACH;AAnPgC;;AAAA;AAAA;;AACxB,QAAA,OAAA,CAAA,KAAA,GAAK,KAAL;AAoPhB,OArPiC,EAAA,OAAO,GAAP,KAAA,CAAA,OAAA,KAAA,KAAA,CAAA,OAAA,GAAO,EAAP,CAAA;AAqPjC,KArP2B,EAAA,KAAK,GAAL,MAAA,CAAA,KAAA,KAAA,MAAA,CAAA,KAAA,GAAK,EAAL,CAAA;AAqP3B,GArPoB,EAAA,MAAM,GAAN,GAAA,CAAA,MAAA,KAAA,GAAA,CAAA,MAAA,GAAM,EAAN,CAAA;AAqPpB,CArPD,EAAiB,GAAG,KAAH,GAAG,GAAA,EAAA,CAApB;AAsPA;;;;;;;;AAMA,CAAA,UAAiB,GAAjB,EAAoB;AAAC,MAAA,MAAA;;AAAA,GAAA,UAAA,MAAA,EAAM;AAAC,QAAA,KAAA;;AAAA,KAAA,UAAA,KAAA,EAAK;AAAC,UAAA,OAAA;;AAAA,OAAA,UAAA,OAAA,EAAO;AAAA,YACxB,MADwB;AACrC,4BAAA;AAAA;;AACI,iBAAA,EAAA,GAAoC,IAApC;AAEA,iBAAA,MAAA,GAAiB,CAAjB;AA6CH;AA5CG;;;;;;;AALiC;AAAA;AAAA,mCAU1B,CAV0B,EAUf,EAVe,EAUW;AACxC,mBAAK,MAAL,GAAc,CAAd;AACA,mBAAK,EAAL,GAAU,EAAV;AACA,qBAAO,IAAP;AACH;AAED;;;;;;;AAhBiC;AAAA;AAAA,qCAsB3B;AACF,qBAAO,KAAK,EAAL,CAAS,SAAT,CAAmB,KAAK,MAAxB,CAAP;AACH;AAED;;;;;;;AA1BiC;AAAA;AAAA,qCAgC3B;AACF,qBAAO,KAAK,EAAL,CAAS,SAAT,CAAmB,KAAK,MAAL,GAAc,CAAjC,CAAP;AACH;AAED;;;;;;;AApCiC;AAAA;AAAA,yCA0Cb,OA1Ca,EA0CiB,MA1CjB,EA0C2C,MA1C3C,EA0CmE;AAChG,cAAA,OAAO,CAAC,IAAR,CAAa,CAAb,EAAgB,EAAhB;AACA,cAAA,OAAO,CAAC,UAAR,CAAmB,MAAnB;AACA,cAAA,OAAO,CAAC,UAAR,CAAmB,MAAnB;AACA,qBAAO,OAAO,CAAC,MAAR,EAAP;AACH;AA/CgC;;AAAA;AAAA;;AACxB,QAAA,OAAA,CAAA,MAAA,GAAM,MAAN;AAiDhB,OAlDiC,EAAA,OAAO,GAAP,KAAA,CAAA,OAAA,KAAA,KAAA,CAAA,OAAA,GAAO,EAAP,CAAA;AAkDjC,KAlD2B,EAAA,KAAK,GAAL,MAAA,CAAA,KAAA,KAAA,MAAA,CAAA,KAAA,GAAK,EAAL,CAAA;AAkD3B,GAlDoB,EAAA,MAAM,GAAN,GAAA,CAAA,MAAA,KAAA,GAAA,CAAA,MAAA,GAAM,EAAN,CAAA;AAkDpB,CAlDD,EAAiB,GAAG,KAAH,GAAG,GAAA,EAAA,CAApB;AAmDA;;;;;;;;AAMA,CAAA,UAAiB,GAAjB,EAAoB;AAAC,MAAA,MAAA;;AAAA,GAAA,UAAA,MAAA,EAAM;AAAC,QAAA,KAAA;;AAAA,KAAA,UAAA,KAAA,EAAK;AAAC,UAAA,OAAA;;AAAA,OAAA,UAAA,OAAA,EAAO;AAAA,YACxB,MADwB;AACrC,4BAAA;AAAA;;AACI,iBAAA,EAAA,GAAoC,IAApC;AAEA,iBAAA,MAAA,GAAiB,CAAjB;AAsKH;AArKG;;;;;;;AALiC;AAAA;AAAA,mCAU1B,CAV0B,EAUf,EAVe,EAUW;AACxC,mBAAK,MAAL,GAAc,CAAd;AACA,mBAAK,EAAL,GAAU,EAAV;AACA,qBAAO,IAAP;AACH;AAED;;;;;;AAhBiC;AAAA;;AAyBjC;;;;;;;AAzBiC,yCAgCvB;AACN,kBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,CAA/B,CAAb;;AACA,qBAAO,MAAM;AAAG;AAAS,mBAAK,EAAL,CAAS,SAAT,CAAmB,KAAK,MAAL,GAAc,MAAjC,CAAZ,GAAwD,GAAG,CAAC,MAAJ,CAAW,KAAX,CAAiB,OAAjB,CAAyB,UAAzB,CAAoC,MAAzG;AACH;AAED;;;;;;AArCiC;AAAA;AAAA,mCA0C1B,KA1C0B,EA0CX,GA1CW,EA0CyB;AACtD,kBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,CAA/B,CAAb;;AACA,qBAAO,MAAM,GAAG,CAAC,GAAG,IAAI,IAAI,GAAG,CAAC,MAAJ,CAAW,KAAX,CAAiB,OAAjB,CAAyB,KAA7B,EAAR,EAA4C,MAA5C,CAAmD,KAAK,EAAL,CAAS,UAAT,CAAoB,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAL,GAAc,MAAhC,IAA0C,KAAK,GAAG,CAAtE,CAAnD,EAA6H,KAAK,EAAlI,CAAH,GAA4I,IAAzJ;AACH;AAED;;;;AA/CiC;AAAA;AAAA,2CAkDrB;AACR,kBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,CAA/B,CAAb;;AACA,qBAAO,MAAM,GAAG,KAAK,EAAL,CAAS,YAAT,CAAsB,KAAK,MAAL,GAAc,MAApC,CAAH,GAAiD,CAA9D;AACH;AAED;;;;;;AAvDiC;AAAA;AAAA,2CA4DlB,KA5DkB,EA4DH,GA5DG,EA4DoC;AACjE,kBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,CAA/B,CAAb;;AACA,qBAAO,MAAM,GAAG,CAAC,GAAG,IAAI,IAAI,GAAG,CAAC,MAAJ,CAAW,KAAX,CAAiB,OAAjB,CAAyB,QAA7B,EAAR,EAA+C,MAA/C,CAAsD,KAAK,EAAL,CAAS,UAAT,CAAoB,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAL,GAAc,MAAhC,IAA0C,KAAK,GAAG,CAAtE,CAAtD,EAAgI,KAAK,EAArI,CAAH,GAA+I,IAA5J;AACH;AAED;;;;AAjEiC;AAAA;AAAA,mDAoEb;AAChB,kBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,CAA/B,CAAb;;AACA,qBAAO,MAAM,GAAG,KAAK,EAAL,CAAS,YAAT,CAAsB,KAAK,MAAL,GAAc,MAApC,CAAH,GAAiD,CAA9D;AACH;AAED;;;;AAzEiC;AAAA;AAAA,4CAqBV,EArBU,EAqBkB,GArBlB,EAqB8B;AAC3D,qBAAO,CAAC,GAAG,IAAI,IAAI,MAAJ,EAAR,EAAoB,MAApB,CAA2B,EAAE,CAAC,SAAH,CAAa,EAAE,CAAC,QAAH,EAAb,IAA8B,EAAE,CAAC,QAAH,EAAzD,EAAwE,EAAxE,CAAP;AACH;AAvBgC;AAAA;AAAA,wCA4Ed,OA5Ec,EA4Ec;AAC3C,cAAA,OAAO,CAAC,WAAR,CAAoB,CAApB;AACH;AAED;;;;;AAhFiC;AAAA;AAAA,0CAoFZ,OApFY,EAoFkB,UApFlB,EAoFiE;AAC9F,cAAA,OAAO,CAAC,aAAR,CAAsB,CAAtB,EAAyB,UAAzB,EAAqC,GAAG,CAAC,MAAJ,CAAW,KAAX,CAAiB,OAAjB,CAAyB,UAAzB,CAAoC,MAAzE;AACH;AAED;;;;;AAxFiC;AAAA;AAAA,sCA4FhB,OA5FgB,EA4Fc,YA5Fd,EA4F8C;AAC3E,cAAA,OAAO,CAAC,cAAR,CAAuB,CAAvB,EAA0B,YAA1B,EAAwC,CAAxC;AACH;AAED;;;;;;AAhGiC;AAAA;AAAA,+CAqGP,OArGO,EAqGuB,IArGvB,EAqGiD;AAC9E,cAAA,OAAO,CAAC,WAAR,CAAoB,CAApB,EAAuB,IAAI,CAAC,MAA5B,EAAoC,CAApC;;AACA,mBAAK,IAAI,CAAC,GAAG,IAAI,CAAC,MAAL,GAAc,CAA3B,EAA8B,CAAC,IAAI,CAAnC,EAAsC,CAAC,EAAvC,EAA2C;AACvC,gBAAA,OAAO,CAAC,SAAR,CAAkB,IAAI,CAAC,CAAD,CAAtB;AACH;;AACD,qBAAO,OAAO,CAAC,SAAR,EAAP;AACH;AAED;;;;;AA7GiC;AAAA;AAAA,8CAiHR,OAjHQ,EAiHsB,QAjHtB,EAiHsC;AACnE,cAAA,OAAO,CAAC,WAAR,CAAoB,CAApB,EAAuB,QAAvB,EAAiC,CAAjC;AACH;AAED;;;;;AArHiC;AAAA;AAAA,8CAyHR,OAzHQ,EAyHsB,oBAzHtB,EAyH8D;AAC3F,cAAA,OAAO,CAAC,cAAR,CAAuB,CAAvB,EAA0B,oBAA1B,EAAgD,CAAhD;AACH;AAED;;;;;;AA7HiC;AAAA;AAAA,uDAkIC,OAlID,EAkI+B,IAlI/B,EAkIyD;AACtF,cAAA,OAAO,CAAC,WAAR,CAAoB,CAApB,EAAuB,IAAI,CAAC,MAA5B,EAAoC,CAApC;;AACA,mBAAK,IAAI,CAAC,GAAG,IAAI,CAAC,MAAL,GAAc,CAA3B,EAA8B,CAAC,IAAI,CAAnC,EAAsC,CAAC,EAAvC,EAA2C;AACvC,gBAAA,OAAO,CAAC,SAAR,CAAkB,IAAI,CAAC,CAAD,CAAtB;AACH;;AACD,qBAAO,OAAO,CAAC,SAAR,EAAP;AACH;AAED;;;;;AA1IiC;AAAA;AAAA,sDA8IA,OA9IA,EA8I8B,QA9I9B,EA8I8C;AAC3E,cAAA,OAAO,CAAC,WAAR,CAAoB,CAApB,EAAuB,QAAvB,EAAiC,CAAjC;AACH;AAED;;;;;AAlJiC;AAAA;AAAA,sCAsJhB,OAtJgB,EAsJY;AACzC,kBAAI,MAAM,GAAG,OAAO,CAAC,SAAR,EAAb;AACA,qBAAO,MAAP;AACH;AAED;;;;;AA3JiC;AAAA;AAAA,+CA+JP,OA/JO,EA+JuB,MA/JvB,EA+JiD;AAC9E,cAAA,OAAO,CAAC,MAAR,CAAe,MAAf;AACH;AAjKgC;AAAA;AAAA,yCAmKb,OAnKa,EAmKiB,UAnKjB,EAmKkE,YAnKlE,EAmKoG,oBAnKpG,EAmK4I;AACzK,cAAA,MAAM,CAAC,WAAP,CAAmB,OAAnB;AACA,cAAA,MAAM,CAAC,aAAP,CAAqB,OAArB,EAA8B,UAA9B;AACA,cAAA,MAAM,CAAC,SAAP,CAAiB,OAAjB,EAA0B,YAA1B;AACA,cAAA,MAAM,CAAC,iBAAP,CAAyB,OAAzB,EAAkC,oBAAlC;AACA,qBAAO,MAAM,CAAC,SAAP,CAAiB,OAAjB,CAAP;AACH;AAzKgC;;AAAA;AAAA;;AACxB,QAAA,OAAA,CAAA,MAAA,GAAM,MAAN;AA0KhB,OA3KiC,EAAA,OAAO,GAAP,KAAA,CAAA,OAAA,KAAA,KAAA,CAAA,OAAA,GAAO,EAAP,CAAA;AA2KjC,KA3K2B,EAAA,KAAK,GAAL,MAAA,CAAA,KAAA,KAAA,MAAA,CAAA,KAAA,GAAK,EAAL,CAAA;AA2K3B,GA3KoB,EAAA,MAAM,GAAN,GAAA,CAAA,MAAA,KAAA,GAAA,CAAA,MAAA,GAAM,EAAN,CAAA;AA2KpB,CA3KD,EAAiB,GAAG,KAAH,GAAG,GAAA,EAAA,CAApB","sourcesContent":["/* tslint:disable:class-name */\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum MetadataVersion {\n        /**\n         * 0.1.0\n         */\n        V1 = 0,\n\n        /**\n         * 0.2.0\n         */\n        V2 = 1,\n\n        /**\n         * 0.3.0 -> 0.7.1\n         */\n        V3 = 2,\n\n        /**\n         * >= 0.8.0\n         */\n        V4 = 3\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum UnionMode {\n        Sparse = 0,\n        Dense = 1\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum Precision {\n        HALF = 0,\n        SINGLE = 1,\n        DOUBLE = 2\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum DateUnit {\n        DAY = 0,\n        MILLISECOND = 1\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum TimeUnit {\n        SECOND = 0,\n        MILLISECOND = 1,\n        MICROSECOND = 2,\n        NANOSECOND = 3\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum IntervalUnit {\n        YEAR_MONTH = 0,\n        DAY_TIME = 1\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Top-level Type value, enabling extensible type-specific metadata. We can\n * add new logical types to Type without breaking backwards compatibility\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum Type {\n        NONE = 0,\n        Null = 1,\n        Int = 2,\n        FloatingPoint = 3,\n        Binary = 4,\n        Utf8 = 5,\n        Bool = 6,\n        Decimal = 7,\n        Date = 8,\n        Time = 9,\n        Timestamp = 10,\n        Interval = 11,\n        List = 12,\n        Struct_ = 13,\n        Union = 14,\n        FixedSizeBinary = 15,\n        FixedSizeList = 16,\n        Map = 17,\n        Duration = 18,\n        LargeBinary = 19,\n        LargeUtf8 = 20,\n        LargeList = 21\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Endianness of the platform producing the data\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum Endianness {\n        Little = 0,\n        Big = 1\n    }\n}\n\n/**\n * These are stored in the flatbuffer in the Type union below\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Null {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Null\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Null {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Null= obj\n         * @returns Null\n         */\n        static getRootAsNull(bb: flatbuffers.ByteBuffer, obj?: Null): Null {\n            return (obj || new Null).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startNull(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Null.startNull(builder);\n            return Null.endNull(builder);\n        }\n    }\n}\n/**\n * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct\n * (according to the physical memory layout). We used Struct_ here as\n * Struct is a reserved word in Flatbuffers\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Struct_ {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Struct_\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Struct_ {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Struct_= obj\n         * @returns Struct_\n         */\n        static getRootAsStruct_(bb: flatbuffers.ByteBuffer, obj?: Struct_): Struct_ {\n            return (obj || new Struct_).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startStruct_(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Struct_.startStruct_(builder);\n            return Struct_.endStruct_(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class List {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns List\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): List {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param List= obj\n         * @returns List\n         */\n        static getRootAsList(bb: flatbuffers.ByteBuffer, obj?: List): List {\n            return (obj || new List).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startList(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            List.startList(builder);\n            return List.endList(builder);\n        }\n    }\n}\n/**\n * Same as List, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class LargeList {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns LargeList\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): LargeList {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LargeList= obj\n         * @returns LargeList\n         */\n        static getRootAsLargeList(bb: flatbuffers.ByteBuffer, obj?: LargeList): LargeList {\n            return (obj || new LargeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startLargeList(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endLargeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createLargeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            LargeList.startLargeList(builder);\n            return LargeList.endLargeList(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FixedSizeList {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FixedSizeList\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeList {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FixedSizeList= obj\n         * @returns FixedSizeList\n         */\n        static getRootAsFixedSizeList(bb: flatbuffers.ByteBuffer, obj?: FixedSizeList): FixedSizeList {\n            return (obj || new FixedSizeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Number of list items per value\n         *\n         * @returns number\n         */\n        listSize(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFixedSizeList(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number listSize\n         */\n        static addListSize(builder: flatbuffers.Builder, listSize: number) {\n            builder.addFieldInt32(0, listSize, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFixedSizeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createFixedSizeList(builder: flatbuffers.Builder, listSize: number): flatbuffers.Offset {\n            FixedSizeList.startFixedSizeList(builder);\n            FixedSizeList.addListSize(builder, listSize);\n            return FixedSizeList.endFixedSizeList(builder);\n        }\n    }\n}\n/**\n * A Map is a logical nested type that is represented as\n *\n * List<entry: Struct<key: K, value: V>>\n *\n * In this layout, the keys and values are each respectively contiguous. We do\n * not constrain the key and value types, so the application is responsible\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\n * may be set in the metadata for this field\n *\n * In a Field with Map type, the Field has a child Struct field, which then\n * has two children: key type and the second the value type. The names of the\n * child fields may be respectively \"entry\", \"key\", and \"value\", but this is\n * not enforced\n *\n * Map\n *   - child[0] entry: Struct\n *     - child[0] key: K\n *     - child[1] value: V\n *\n * Neither the \"entry\" field nor the \"key\" field may be nullable.\n *\n * The metadata is structured so that Arrow systems without special handling\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\n * field must have the same contents as a List.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Map {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Map\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Map {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Map= obj\n         * @returns Map\n         */\n        static getRootAsMap(bb: flatbuffers.ByteBuffer, obj?: Map): Map {\n            return (obj || new Map).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Set to true if the keys within each value are sorted\n         *\n         * @returns boolean\n         */\n        keysSorted(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startMap(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean keysSorted\n         */\n        static addKeysSorted(builder: flatbuffers.Builder, keysSorted: boolean) {\n            builder.addFieldInt8(0, +keysSorted, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endMap(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createMap(builder: flatbuffers.Builder, keysSorted: boolean): flatbuffers.Offset {\n            Map.startMap(builder);\n            Map.addKeysSorted(builder, keysSorted);\n            return Map.endMap(builder);\n        }\n    }\n}\n/**\n * A union is a complex type with children in Field\n * By default ids in the type vector refer to the offsets in the children\n * optionally typeIds provides an indirection between the child offset and the type id\n * for each child typeIds[offset] is the id used in the type vector\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Union {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Union\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Union {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Union= obj\n         * @returns Union\n         */\n        static getRootAsUnion(bb: flatbuffers.ByteBuffer, obj?: Union): Union {\n            return (obj || new Union).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.UnionMode\n         */\n        mode(): org.apache.arrow.flatbuf.UnionMode {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.UnionMode.Sparse;\n        }\n\n        /**\n         * @param number index\n         * @returns number\n         */\n        typeIds(index: number): number | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n        }\n\n        /**\n         * @returns number\n         */\n        typeIdsLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @returns Int32Array\n         */\n        typeIdsArray(): Int32Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startUnion(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.UnionMode mode\n         */\n        static addMode(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode) {\n            builder.addFieldInt16(0, mode, org.apache.arrow.flatbuf.UnionMode.Sparse);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset typeIdsOffset\n         */\n        static addTypeIds(builder: flatbuffers.Builder, typeIdsOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, typeIdsOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<number> data\n         * @returns flatbuffers.Offset\n         */\n        static createTypeIdsVector(builder: flatbuffers.Builder, data: number[] | Int32Array): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addInt32(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startTypeIdsVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endUnion(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createUnion(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode, typeIdsOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Union.startUnion(builder);\n            Union.addMode(builder, mode);\n            Union.addTypeIds(builder, typeIdsOffset);\n            return Union.endUnion(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Int {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Int\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Int {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Int= obj\n         * @returns Int\n         */\n        static getRootAsInt(bb: flatbuffers.ByteBuffer, obj?: Int): Int {\n            return (obj || new Int).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns number\n         */\n        bitWidth(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @returns boolean\n         */\n        isSigned(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startInt(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number bitWidth\n         */\n        static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n            builder.addFieldInt32(0, bitWidth, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isSigned\n         */\n        static addIsSigned(builder: flatbuffers.Builder, isSigned: boolean) {\n            builder.addFieldInt8(1, +isSigned, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endInt(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createInt(builder: flatbuffers.Builder, bitWidth: number, isSigned: boolean): flatbuffers.Offset {\n            Int.startInt(builder);\n            Int.addBitWidth(builder, bitWidth);\n            Int.addIsSigned(builder, isSigned);\n            return Int.endInt(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FloatingPoint {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FloatingPoint\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FloatingPoint {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FloatingPoint= obj\n         * @returns FloatingPoint\n         */\n        static getRootAsFloatingPoint(bb: flatbuffers.ByteBuffer, obj?: FloatingPoint): FloatingPoint {\n            return (obj || new FloatingPoint).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.Precision\n         */\n        precision(): org.apache.arrow.flatbuf.Precision {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Precision.HALF;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFloatingPoint(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.Precision precision\n         */\n        static addPrecision(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision) {\n            builder.addFieldInt16(0, precision, org.apache.arrow.flatbuf.Precision.HALF);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFloatingPoint(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createFloatingPoint(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision): flatbuffers.Offset {\n            FloatingPoint.startFloatingPoint(builder);\n            FloatingPoint.addPrecision(builder, precision);\n            return FloatingPoint.endFloatingPoint(builder);\n        }\n    }\n}\n/**\n * Unicode with UTF-8 encoding\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Utf8 {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Utf8\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Utf8 {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Utf8= obj\n         * @returns Utf8\n         */\n        static getRootAsUtf8(bb: flatbuffers.ByteBuffer, obj?: Utf8): Utf8 {\n            return (obj || new Utf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startUtf8(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Utf8.startUtf8(builder);\n            return Utf8.endUtf8(builder);\n        }\n    }\n}\n/**\n * Opaque binary data\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Binary {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Binary\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Binary {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Binary= obj\n         * @returns Binary\n         */\n        static getRootAsBinary(bb: flatbuffers.ByteBuffer, obj?: Binary): Binary {\n            return (obj || new Binary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startBinary(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Binary.startBinary(builder);\n            return Binary.endBinary(builder);\n        }\n    }\n}\n/**\n * Same as Utf8, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class LargeUtf8 {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns LargeUtf8\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): LargeUtf8 {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LargeUtf8= obj\n         * @returns LargeUtf8\n         */\n        static getRootAsLargeUtf8(bb: flatbuffers.ByteBuffer, obj?: LargeUtf8): LargeUtf8 {\n            return (obj || new LargeUtf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startLargeUtf8(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endLargeUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createLargeUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            LargeUtf8.startLargeUtf8(builder);\n            return LargeUtf8.endLargeUtf8(builder);\n        }\n    }\n}\n/**\n * Same as Binary, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class LargeBinary {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns LargeBinary\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): LargeBinary {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LargeBinary= obj\n         * @returns LargeBinary\n         */\n        static getRootAsLargeBinary(bb: flatbuffers.ByteBuffer, obj?: LargeBinary): LargeBinary {\n            return (obj || new LargeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startLargeBinary(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endLargeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createLargeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            LargeBinary.startLargeBinary(builder);\n            return LargeBinary.endLargeBinary(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FixedSizeBinary {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FixedSizeBinary\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeBinary {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FixedSizeBinary= obj\n         * @returns FixedSizeBinary\n         */\n        static getRootAsFixedSizeBinary(bb: flatbuffers.ByteBuffer, obj?: FixedSizeBinary): FixedSizeBinary {\n            return (obj || new FixedSizeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Number of bytes per value\n         *\n         * @returns number\n         */\n        byteWidth(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFixedSizeBinary(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number byteWidth\n         */\n        static addByteWidth(builder: flatbuffers.Builder, byteWidth: number) {\n            builder.addFieldInt32(0, byteWidth, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFixedSizeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createFixedSizeBinary(builder: flatbuffers.Builder, byteWidth: number): flatbuffers.Offset {\n            FixedSizeBinary.startFixedSizeBinary(builder);\n            FixedSizeBinary.addByteWidth(builder, byteWidth);\n            return FixedSizeBinary.endFixedSizeBinary(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Bool {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Bool\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Bool {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Bool= obj\n         * @returns Bool\n         */\n        static getRootAsBool(bb: flatbuffers.ByteBuffer, obj?: Bool): Bool {\n            return (obj || new Bool).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startBool(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Bool.startBool(builder);\n            return Bool.endBool(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Decimal {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Decimal\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Decimal {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Decimal= obj\n         * @returns Decimal\n         */\n        static getRootAsDecimal(bb: flatbuffers.ByteBuffer, obj?: Decimal): Decimal {\n            return (obj || new Decimal).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Total number of decimal digits\n         *\n         * @returns number\n         */\n        precision(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * Number of digits after the decimal point \".\"\n         *\n         * @returns number\n         */\n        scale(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDecimal(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number precision\n         */\n        static addPrecision(builder: flatbuffers.Builder, precision: number) {\n            builder.addFieldInt32(0, precision, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number scale\n         */\n        static addScale(builder: flatbuffers.Builder, scale: number) {\n            builder.addFieldInt32(1, scale, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDecimal(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDecimal(builder: flatbuffers.Builder, precision: number, scale: number): flatbuffers.Offset {\n            Decimal.startDecimal(builder);\n            Decimal.addPrecision(builder, precision);\n            Decimal.addScale(builder, scale);\n            return Decimal.endDecimal(builder);\n        }\n    }\n}\n/**\n * Date is either a 32-bit or 64-bit type representing elapsed time since UNIX\n * epoch (1970-01-01), stored in either of two units:\n *\n * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no\n *   leap seconds), where the values are evenly divisible by 86400000\n * * Days (32 bits) since the UNIX epoch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Date {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Date\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Date {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Date= obj\n         * @returns Date\n         */\n        static getRootAsDate(bb: flatbuffers.ByteBuffer, obj?: Date): Date {\n            return (obj || new Date).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.DateUnit\n         */\n        unit(): org.apache.arrow.flatbuf.DateUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.DateUnit.MILLISECOND;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDate(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.DateUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.DateUnit.MILLISECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDate(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDate(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit): flatbuffers.Offset {\n            Date.startDate(builder);\n            Date.addUnit(builder, unit);\n            return Date.endDate(builder);\n        }\n    }\n}\n/**\n * Time type. The physical storage type depends on the unit\n * - SECOND and MILLISECOND: 32 bits\n * - MICROSECOND and NANOSECOND: 64 bits\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Time {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Time\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Time {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Time= obj\n         * @returns Time\n         */\n        static getRootAsTime(bb: flatbuffers.ByteBuffer, obj?: Time): Time {\n            return (obj || new Time).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.TimeUnit\n         */\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n        }\n\n        /**\n         * @returns number\n         */\n        bitWidth(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 32;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startTime(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number bitWidth\n         */\n        static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n            builder.addFieldInt32(1, bitWidth, 32);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endTime(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createTime(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit, bitWidth: number): flatbuffers.Offset {\n            Time.startTime(builder);\n            Time.addUnit(builder, unit);\n            Time.addBitWidth(builder, bitWidth);\n            return Time.endTime(builder);\n        }\n    }\n}\n/**\n * Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding\n * leap seconds, as a 64-bit integer. Note that UNIX time does not include\n * leap seconds.\n *\n * The Timestamp metadata supports both \"time zone naive\" and \"time zone\n * aware\" timestamps. Read about the timezone attribute for more detail\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Timestamp {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Timestamp\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Timestamp {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Timestamp= obj\n         * @returns Timestamp\n         */\n        static getRootAsTimestamp(bb: flatbuffers.ByteBuffer, obj?: Timestamp): Timestamp {\n            return (obj || new Timestamp).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.TimeUnit\n         */\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.SECOND;\n        }\n\n        /**\n         * The time zone is a string indicating the name of a time zone, one of:\n         *\n         * * As used in the Olson time zone database (the \"tz database\" or\n         *   \"tzdata\"), such as \"America/New_York\"\n         * * An absolute time zone offset of the form +XX:XX or -XX:XX, such as +07:30\n         *\n         * Whether a timezone string is present indicates different semantics about\n         * the data:\n         *\n         * * If the time zone is null or equal to an empty string, the data is \"time\n         *   zone naive\" and shall be displayed *as is* to the user, not localized\n         *   to the locale of the user. This data can be though of as UTC but\n         *   without having \"UTC\" as the time zone, it is not considered to be\n         *   localized to any time zone\n         *\n         * * If the time zone is set to a valid value, values can be displayed as\n         *   \"localized\" to that time zone, even though the underlying 64-bit\n         *   integers are identical to the same data stored in UTC. Converting\n         *   between time zones is a metadata-only operation and does not change the\n         *   underlying values\n         *\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        timezone(): string | null;\n        timezone(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        timezone(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startTimestamp(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.SECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset timezoneOffset\n         */\n        static addTimezone(builder: flatbuffers.Builder, timezoneOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, timezoneOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endTimestamp(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createTimestamp(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit, timezoneOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Timestamp.startTimestamp(builder);\n            Timestamp.addUnit(builder, unit);\n            Timestamp.addTimezone(builder, timezoneOffset);\n            return Timestamp.endTimestamp(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Interval {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Interval\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Interval {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Interval= obj\n         * @returns Interval\n         */\n        static getRootAsInterval(bb: flatbuffers.ByteBuffer, obj?: Interval): Interval {\n            return (obj || new Interval).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.IntervalUnit\n         */\n        unit(): org.apache.arrow.flatbuf.IntervalUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startInterval(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.IntervalUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endInterval(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createInterval(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit): flatbuffers.Offset {\n            Interval.startInterval(builder);\n            Interval.addUnit(builder, unit);\n            return Interval.endInterval(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Duration {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Duration\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Duration {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Duration= obj\n         * @returns Duration\n         */\n        static getRootAsDuration(bb: flatbuffers.ByteBuffer, obj?: Duration): Duration {\n            return (obj || new Duration).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.TimeUnit\n         */\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDuration(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDuration(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDuration(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit): flatbuffers.Offset {\n            Duration.startDuration(builder);\n            Duration.addUnit(builder, unit);\n            return Duration.endDuration(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * user defined key value pairs to add custom metadata to arrow\n * key namespacing is the responsibility of the user\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class KeyValue {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns KeyValue\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): KeyValue {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param KeyValue= obj\n         * @returns KeyValue\n         */\n        static getRootAsKeyValue(bb: flatbuffers.ByteBuffer, obj?: KeyValue): KeyValue {\n            return (obj || new KeyValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        key(): string | null;\n        key(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        key(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        value(): string | null;\n        value(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        value(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startKeyValue(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset keyOffset\n         */\n        static addKey(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(0, keyOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset valueOffset\n         */\n        static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, valueOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endKeyValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createKeyValue(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n            KeyValue.startKeyValue(builder);\n            KeyValue.addKey(builder, keyOffset);\n            KeyValue.addValue(builder, valueOffset);\n            return KeyValue.endKeyValue(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * Dictionary encoding metadata\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class DictionaryEncoding {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DictionaryEncoding\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryEncoding {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DictionaryEncoding= obj\n         * @returns DictionaryEncoding\n         */\n        static getRootAsDictionaryEncoding(bb: flatbuffers.ByteBuffer, obj?: DictionaryEncoding): DictionaryEncoding {\n            return (obj || new DictionaryEncoding).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * The known dictionary id in the application where this data is used. In\n         * the file or streaming formats, the dictionary ids are found in the\n         * DictionaryBatch messages\n         *\n         * @returns flatbuffers.Long\n         */\n        id(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * The dictionary indices are constrained to be positive integers. If this\n         * field is null, the indices must be signed int32\n         *\n         * @param org.apache.arrow.flatbuf.Int= obj\n         * @returns org.apache.arrow.flatbuf.Int|null\n         */\n        indexType(obj?: org.apache.arrow.flatbuf.Int): org.apache.arrow.flatbuf.Int | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Int).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * By default, dictionaries are not ordered, or the order does not have\n         * semantic meaning. In some statistical, applications, dictionary-encoding\n         * is used to represent ordered categorical data, and we provide a way to\n         * preserve that metadata here\n         *\n         * @returns boolean\n         */\n        isOrdered(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDictionaryEncoding(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long id\n         */\n        static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n            builder.addFieldInt64(0, id, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset indexTypeOffset\n         */\n        static addIndexType(builder: flatbuffers.Builder, indexTypeOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, indexTypeOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isOrdered\n         */\n        static addIsOrdered(builder: flatbuffers.Builder, isOrdered: boolean) {\n            builder.addFieldInt8(2, +isOrdered, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDictionaryEncoding(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDictionaryEncoding(builder: flatbuffers.Builder, id: flatbuffers.Long, indexTypeOffset: flatbuffers.Offset, isOrdered: boolean): flatbuffers.Offset {\n            DictionaryEncoding.startDictionaryEncoding(builder);\n            DictionaryEncoding.addId(builder, id);\n            DictionaryEncoding.addIndexType(builder, indexTypeOffset);\n            DictionaryEncoding.addIsOrdered(builder, isOrdered);\n            return DictionaryEncoding.endDictionaryEncoding(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A field represents a named column in a record / row batch or child of a\n * nested type.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Field {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Field\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Field {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Field= obj\n         * @returns Field\n         */\n        static getRootAsField(bb: flatbuffers.ByteBuffer, obj?: Field): Field {\n            return (obj || new Field).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Name is not required, in i.e. a List\n         *\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        name(): string | null;\n        name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        name(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * Whether or not this field can contain nulls. Should be true in general.\n         *\n         * @returns boolean\n         */\n        nullable(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.Type\n         */\n        typeType(): org.apache.arrow.flatbuf.Type {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Type.NONE;\n        }\n\n        /**\n         * This is the type of the decoded value if the field is dictionary encoded.\n         *\n         * @param flatbuffers.Table obj\n         * @returns ?flatbuffers.Table\n         */\n        type<T extends flatbuffers.Table>(obj: T): T | null {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n        }\n\n        /**\n         * Present only if the field is dictionary encoded.\n         *\n         * @param org.apache.arrow.flatbuf.DictionaryEncoding= obj\n         * @returns org.apache.arrow.flatbuf.DictionaryEncoding|null\n         */\n        dictionary(obj?: org.apache.arrow.flatbuf.DictionaryEncoding): org.apache.arrow.flatbuf.DictionaryEncoding | null {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? (obj || new org.apache.arrow.flatbuf.DictionaryEncoding).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * children apply only to nested data types like Struct, List and Union. For\n         * primitive types children will have length 0.\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Field= obj\n         * @returns org.apache.arrow.flatbuf.Field\n         */\n        children(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n            let offset = this.bb!.__offset(this.bb_pos, 14);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        childrenLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 14);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * User-defined metadata\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 16);\n            return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 16);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startField(builder: flatbuffers.Builder) {\n            builder.startObject(7);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset nameOffset\n         */\n        static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(0, nameOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean nullable\n         */\n        static addNullable(builder: flatbuffers.Builder, nullable: boolean) {\n            builder.addFieldInt8(1, +nullable, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.Type typeType\n         */\n        static addTypeType(builder: flatbuffers.Builder, typeType: org.apache.arrow.flatbuf.Type) {\n            builder.addFieldInt8(2, typeType, org.apache.arrow.flatbuf.Type.NONE);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset typeOffset\n         */\n        static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(3, typeOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset dictionaryOffset\n         */\n        static addDictionary(builder: flatbuffers.Builder, dictionaryOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(4, dictionaryOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset childrenOffset\n         */\n        static addChildren(builder: flatbuffers.Builder, childrenOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(5, childrenOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createChildrenVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startChildrenVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(6, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endField(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createField(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, nullable: boolean, typeType: org.apache.arrow.flatbuf.Type, typeOffset: flatbuffers.Offset, dictionaryOffset: flatbuffers.Offset, childrenOffset: flatbuffers.Offset, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Field.startField(builder);\n            Field.addName(builder, nameOffset);\n            Field.addNullable(builder, nullable);\n            Field.addTypeType(builder, typeType);\n            Field.addType(builder, typeOffset);\n            Field.addDictionary(builder, dictionaryOffset);\n            Field.addChildren(builder, childrenOffset);\n            Field.addCustomMetadata(builder, customMetadataOffset);\n            return Field.endField(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A Buffer represents a single contiguous memory segment\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Buffer {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Buffer\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Buffer {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * The relative offset into the shared memory page where the bytes for this\n         * buffer starts\n         *\n         * @returns flatbuffers.Long\n         */\n        offset(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos);\n        }\n\n        /**\n         * The absolute length (in bytes) of the memory buffer. The memory is found\n         * from offset (inclusive) to offset + length (non-inclusive).\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos + 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long offset\n         * @param flatbuffers.Long length\n         * @returns flatbuffers.Offset\n         */\n        static createBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Long, length: flatbuffers.Long): flatbuffers.Offset {\n            builder.prep(8, 16);\n            builder.writeInt64(length);\n            builder.writeInt64(offset);\n            return builder.offset();\n        }\n\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A Schema describes the columns in a row batch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Schema {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Schema\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Schema {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Schema= obj\n         * @returns Schema\n         */\n        static getRootAsSchema(bb: flatbuffers.ByteBuffer, obj?: Schema): Schema {\n            return (obj || new Schema).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * endianness of the buffer\n         * it is Little Endian by default\n         * if endianness doesn't match the underlying system then the vectors need to be converted\n         *\n         * @returns org.apache.arrow.flatbuf.Endianness\n         */\n        endianness(): org.apache.arrow.flatbuf.Endianness {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Endianness.Little;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Field= obj\n         * @returns org.apache.arrow.flatbuf.Field\n         */\n        fields(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        fieldsLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startSchema(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.Endianness endianness\n         */\n        static addEndianness(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness) {\n            builder.addFieldInt16(0, endianness, org.apache.arrow.flatbuf.Endianness.Little);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset fieldsOffset\n         */\n        static addFields(builder: flatbuffers.Builder, fieldsOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, fieldsOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createFieldsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startFieldsVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endSchema(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset offset\n         */\n        static finishSchemaBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n            builder.finish(offset);\n        }\n\n        static createSchema(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness, fieldsOffset: flatbuffers.Offset, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Schema.startSchema(builder);\n            Schema.addEndianness(builder, endianness);\n            Schema.addFields(builder, fieldsOffset);\n            Schema.addCustomMetadata(builder, customMetadataOffset);\n            return Schema.endSchema(builder);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}