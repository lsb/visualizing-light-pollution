{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { Vector3, Matrix4 } from 'math.gl';\nimport { assert, uid } from '@luma.gl/webgl';\n\nvar ScenegraphNode = function () {\n  function ScenegraphNode() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, ScenegraphNode);\n\n    var id = props.id;\n    this.id = id || uid(this.constructor.name);\n    this.display = true;\n    this.position = new Vector3();\n    this.rotation = new Vector3();\n    this.scale = new Vector3(1, 1, 1);\n    this.matrix = new Matrix4();\n    this.userData = {};\n    this.props = {};\n\n    this._setScenegraphNodeProps(props);\n  }\n\n  _createClass(ScenegraphNode, [{\n    key: \"delete\",\n    value: function _delete() {}\n  }, {\n    key: \"setProps\",\n    value: function setProps(props) {\n      this._setScenegraphNodeProps(props);\n\n      return this;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"{type: ScenegraphNode, id: \".concat(this.id, \")}\");\n    }\n  }, {\n    key: \"setPosition\",\n    value: function setPosition(position) {\n      assert(position.length === 3, 'setPosition requires vector argument');\n      this.position = position;\n      return this;\n    }\n  }, {\n    key: \"setRotation\",\n    value: function setRotation(rotation) {\n      assert(rotation.length === 3, 'setRotation requires vector argument');\n      this.rotation = rotation;\n      return this;\n    }\n  }, {\n    key: \"setScale\",\n    value: function setScale(scale) {\n      assert(scale.length === 3, 'setScale requires vector argument');\n      this.scale = scale;\n      return this;\n    }\n  }, {\n    key: \"setMatrix\",\n    value: function setMatrix(matrix) {\n      var copyMatrix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      if (copyMatrix) {\n        this.matrix.copy(matrix);\n      } else {\n        this.matrix = matrix;\n      }\n    }\n  }, {\n    key: \"setMatrixComponents\",\n    value: function setMatrixComponents(_ref) {\n      var position = _ref.position,\n          rotation = _ref.rotation,\n          scale = _ref.scale,\n          _ref$update = _ref.update,\n          update = _ref$update === void 0 ? true : _ref$update;\n\n      if (position) {\n        this.setPosition(position);\n      }\n\n      if (rotation) {\n        this.setRotation(rotation);\n      }\n\n      if (scale) {\n        this.setScale(scale);\n      }\n\n      if (update) {\n        this.updateMatrix();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"updateMatrix\",\n    value: function updateMatrix() {\n      var pos = this.position;\n      var rot = this.rotation;\n      var scale = this.scale;\n      this.matrix.identity();\n      this.matrix.translate(pos);\n      this.matrix.rotateXYZ(rot);\n      this.matrix.scale(scale);\n      return this;\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          position = _ref2.position,\n          rotation = _ref2.rotation,\n          scale = _ref2.scale;\n\n      if (position) {\n        this.setPosition(position);\n      }\n\n      if (rotation) {\n        this.setRotation(rotation);\n      }\n\n      if (scale) {\n        this.setScale(scale);\n      }\n\n      this.updateMatrix();\n      return this;\n    }\n  }, {\n    key: \"getCoordinateUniforms\",\n    value: function getCoordinateUniforms(viewMatrix, modelMatrix) {\n      assert(viewMatrix);\n      modelMatrix = modelMatrix || this.matrix;\n      var worldMatrix = new Matrix4(viewMatrix).multiplyRight(modelMatrix);\n      var worldInverse = worldMatrix.invert();\n      var worldInverseTranspose = worldInverse.transpose();\n      return {\n        viewMatrix: viewMatrix,\n        modelMatrix: modelMatrix,\n        objectMatrix: modelMatrix,\n        worldMatrix: worldMatrix,\n        worldInverseMatrix: worldInverse,\n        worldInverseTransposeMatrix: worldInverseTranspose\n      };\n    }\n  }, {\n    key: \"_setScenegraphNodeProps\",\n    value: function _setScenegraphNodeProps(props) {\n      if ('display' in props) {\n        this.display = props.display;\n      }\n\n      if ('position' in props) {\n        this.setPosition(props.position);\n      }\n\n      if ('rotation' in props) {\n        this.setRotation(props.rotation);\n      }\n\n      if ('scale' in props) {\n        this.setScale(props.scale);\n      }\n\n      if ('matrix' in props) {\n        this.setMatrix(props.matrix);\n      }\n\n      Object.assign(this.props, props);\n    }\n  }]);\n\n  return ScenegraphNode;\n}();\n\nexport { ScenegraphNode as default };","map":{"version":3,"sources":["../../../../src/scenegraph/nodes/scenegraph-node.js"],"names":["ScenegraphNode","props","id","uid","position","assert","rotation","scale","matrix","copyMatrix","update","pos","rot","viewMatrix","modelMatrix","worldMatrix","worldInverse","worldInverseTranspose","objectMatrix","worldInverseMatrix","worldInverseTransposeMatrix","Object"],"mappings":"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","sourcesContent":["import {Vector3, Matrix4} from 'math.gl';\nimport {assert, uid} from '@luma.gl/webgl';\n\nexport default class ScenegraphNode {\n  constructor(props = {}) {\n    const {id} = props;\n\n    this.id = id || uid(this.constructor.name);\n\n    this.display = true; // whether to display the object at all\n    this.position = new Vector3();\n    this.rotation = new Vector3();\n    this.scale = new Vector3(1, 1, 1);\n    this.matrix = new Matrix4();\n    this.userData = {};\n\n    this.props = {};\n    this._setScenegraphNodeProps(props);\n  }\n\n  delete() {}\n\n  setProps(props) {\n    this._setScenegraphNodeProps(props);\n    return this;\n  }\n\n  toString() {\n    return `{type: ScenegraphNode, id: ${this.id})}`;\n  }\n\n  setPosition(position) {\n    assert(position.length === 3, 'setPosition requires vector argument');\n    this.position = position;\n    return this;\n  }\n\n  setRotation(rotation) {\n    assert(rotation.length === 3, 'setRotation requires vector argument');\n    this.rotation = rotation;\n    return this;\n  }\n\n  setScale(scale) {\n    assert(scale.length === 3, 'setScale requires vector argument');\n    this.scale = scale;\n    return this;\n  }\n\n  setMatrix(matrix, copyMatrix = true) {\n    if (copyMatrix) {\n      this.matrix.copy(matrix);\n    } else {\n      this.matrix = matrix;\n    }\n  }\n\n  setMatrixComponents({position, rotation, scale, update = true}) {\n    if (position) {\n      this.setPosition(position);\n    }\n    if (rotation) {\n      this.setRotation(rotation);\n    }\n    if (scale) {\n      this.setScale(scale);\n    }\n    if (update) {\n      this.updateMatrix();\n    }\n    return this;\n  }\n\n  updateMatrix() {\n    const pos = this.position;\n    const rot = this.rotation;\n    const scale = this.scale;\n\n    this.matrix.identity();\n    this.matrix.translate(pos);\n    this.matrix.rotateXYZ(rot);\n    this.matrix.scale(scale);\n    return this;\n  }\n\n  update({position, rotation, scale} = {}) {\n    if (position) {\n      this.setPosition(position);\n    }\n    if (rotation) {\n      this.setRotation(rotation);\n    }\n    if (scale) {\n      this.setScale(scale);\n    }\n    this.updateMatrix();\n    return this;\n  }\n\n  getCoordinateUniforms(viewMatrix, modelMatrix) {\n    // TODO - solve multiple class problem\n    // assert(viewMatrix instanceof Matrix4);\n    assert(viewMatrix);\n    modelMatrix = modelMatrix || this.matrix;\n    const worldMatrix = new Matrix4(viewMatrix).multiplyRight(modelMatrix);\n    const worldInverse = worldMatrix.invert();\n    const worldInverseTranspose = worldInverse.transpose();\n\n    return {\n      viewMatrix,\n      modelMatrix,\n      objectMatrix: modelMatrix,\n      worldMatrix,\n      worldInverseMatrix: worldInverse,\n      worldInverseTransposeMatrix: worldInverseTranspose\n    };\n  }\n\n  // TODO - copied code, not yet vetted\n  /*\n  transform() {\n    if (!this.parent) {\n      this.endPosition.set(this.position);\n      this.endRotation.set(this.rotation);\n      this.endScale.set(this.scale);\n    } else {\n      const parent = this.parent;\n      this.endPosition.set(this.position.add(parent.endPosition));\n      this.endRotation.set(this.rotation.add(parent.endRotation));\n      this.endScale.set(this.scale.add(parent.endScale));\n    }\n\n    const ch = this.children;\n    for (let i = 0; i < ch.length; ++i) {\n      ch[i].transform();\n    }\n\n    return this;\n  }\n  */\n\n  _setScenegraphNodeProps(props) {\n    if ('display' in props) {\n      this.display = props.display;\n    }\n\n    if ('position' in props) {\n      this.setPosition(props.position);\n    }\n    if ('rotation' in props) {\n      this.setRotation(props.rotation);\n    }\n    if ('scale' in props) {\n      this.setScale(props.scale);\n    }\n\n    // Matrix overwrites other props\n    if ('matrix' in props) {\n      this.setMatrix(props.matrix);\n    }\n\n    Object.assign(this.props, props);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}