{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { getBinaryImageMIMEType } from '@loaders.gl/images';\nimport { padTo4Bytes, copyToArray } from '@loaders.gl/loader-utils';\nimport assert from './utils/assert';\nimport { getAccessorArrayTypeAndLength, getAccessorTypeFromSize, getComponentTypeFromArray } from './gltf-utils/gltf-utils';\n\nvar GLTFScenegraph = function () {\n  function GLTFScenegraph(gltf) {\n    _classCallCheck(this, GLTFScenegraph);\n\n    if (gltf instanceof GLTFScenegraph) {\n      return gltf;\n    }\n\n    if (!gltf) {\n      gltf = {\n        json: {\n          version: 2,\n          buffers: []\n        },\n        buffers: []\n      };\n    }\n\n    this.gltf = gltf;\n    assert(this.gltf.json);\n  }\n\n  _createClass(GLTFScenegraph, [{\n    key: \"getApplicationData\",\n    value: function getApplicationData(key) {\n      var data = this.json[key];\n      return data;\n    }\n  }, {\n    key: \"getExtraData\",\n    value: function getExtraData(key) {\n      var extras = this.json.extras || {};\n      return extras[key];\n    }\n  }, {\n    key: \"getExtension\",\n    value: function getExtension(extensionName) {\n      var isExtension = this.getUsedExtensions().find(function (name) {\n        return name === extensionName;\n      });\n      var extensions = this.json.extensions || {};\n      return isExtension ? extensions[extensionName] || true : null;\n    }\n  }, {\n    key: \"getRequiredExtension\",\n    value: function getRequiredExtension(extensionName) {\n      var isRequired = this.getRequiredExtensions().find(function (name) {\n        return name === extensionName;\n      });\n      return isRequired ? this.getExtension(extensionName) : null;\n    }\n  }, {\n    key: \"getRequiredExtensions\",\n    value: function getRequiredExtensions() {\n      return this.json.extensionsRequired || [];\n    }\n  }, {\n    key: \"getUsedExtensions\",\n    value: function getUsedExtensions() {\n      return this.json.extensionsUsed || [];\n    }\n  }, {\n    key: \"getObjectExtension\",\n    value: function getObjectExtension(object, extensionName) {\n      var extensions = object.extensions || {};\n      return extensions[extensionName];\n    }\n  }, {\n    key: \"getScene\",\n    value: function getScene(index) {\n      return this.getObject('scenes', index);\n    }\n  }, {\n    key: \"getNode\",\n    value: function getNode(index) {\n      return this.getObject('nodes', index);\n    }\n  }, {\n    key: \"getSkin\",\n    value: function getSkin(index) {\n      return this.getObject('skins', index);\n    }\n  }, {\n    key: \"getMesh\",\n    value: function getMesh(index) {\n      return this.getObject('meshes', index);\n    }\n  }, {\n    key: \"getMaterial\",\n    value: function getMaterial(index) {\n      return this.getObject('materials', index);\n    }\n  }, {\n    key: \"getAccessor\",\n    value: function getAccessor(index) {\n      return this.getObject('accessors', index);\n    }\n  }, {\n    key: \"getCamera\",\n    value: function getCamera(index) {\n      return null;\n    }\n  }, {\n    key: \"getTexture\",\n    value: function getTexture(index) {\n      return this.getObject('textures', index);\n    }\n  }, {\n    key: \"getSampler\",\n    value: function getSampler(index) {\n      return this.getObject('samplers', index);\n    }\n  }, {\n    key: \"getImage\",\n    value: function getImage(index) {\n      return this.getObject('images', index);\n    }\n  }, {\n    key: \"getBufferView\",\n    value: function getBufferView(index) {\n      return this.getObject('bufferViews', index);\n    }\n  }, {\n    key: \"getBuffer\",\n    value: function getBuffer(index) {\n      return this.getObject('buffers', index);\n    }\n  }, {\n    key: \"getObject\",\n    value: function getObject(array, index) {\n      if (_typeof(index) === 'object') {\n        return index;\n      }\n\n      var object = this.json[array] && this.json[array][index];\n\n      if (!object) {\n        throw new Error(\"glTF file error: Could not find \".concat(array, \"[\").concat(index, \"]\"));\n      }\n\n      return object;\n    }\n  }, {\n    key: \"getTypedArrayForBufferView\",\n    value: function getTypedArrayForBufferView(bufferView) {\n      bufferView = this.getBufferView(bufferView);\n      var bufferIndex = bufferView.buffer;\n      var binChunk = this.gltf.buffers[bufferIndex];\n      assert(binChunk);\n      var byteOffset = (bufferView.byteOffset || 0) + binChunk.byteOffset;\n      return new Uint8Array(binChunk.arrayBuffer, byteOffset, bufferView.byteLength);\n    }\n  }, {\n    key: \"getTypedArrayForAccessor\",\n    value: function getTypedArrayForAccessor(accessor) {\n      accessor = this.getAccessor(accessor);\n      var bufferView = this.getBufferView(accessor.bufferView);\n      var buffer = this.getBuffer(bufferView.buffer);\n      var arrayBuffer = buffer.data;\n\n      var _getAccessorArrayType = getAccessorArrayTypeAndLength(accessor, bufferView),\n          ArrayType = _getAccessorArrayType.ArrayType,\n          length = _getAccessorArrayType.length;\n\n      var byteOffset = bufferView.byteOffset + accessor.byteOffset;\n      return new ArrayType(arrayBuffer, byteOffset, length);\n    }\n  }, {\n    key: \"getTypedArrayForImageData\",\n    value: function getTypedArrayForImageData(image) {\n      image = this.getAccessor(image);\n      var bufferView = this.getBufferView(image.bufferView);\n      var buffer = this.getBuffer(bufferView.buffer);\n      var arrayBuffer = buffer.data;\n      var byteOffset = bufferView.byteOffset || 0;\n      return new Uint8Array(arrayBuffer, byteOffset, bufferView.byteLength);\n    }\n  }, {\n    key: \"addApplicationData\",\n    value: function addApplicationData(key, data) {\n      this.json[key] = data;\n      return this;\n    }\n  }, {\n    key: \"addExtraData\",\n    value: function addExtraData(key, data) {\n      this.json.extras = this.json.extras || {};\n      this.json.extras[key] = data;\n      return this;\n    }\n  }, {\n    key: \"addObjectExtension\",\n    value: function addObjectExtension(object, extensionName, data) {\n      assert(data);\n      object.extensions = object.extensions || {};\n      object.extensions[extensionName] = data;\n      this.registerUsedExtension(extensionName);\n      return this;\n    }\n  }, {\n    key: \"removeObjectExtension\",\n    value: function removeObjectExtension(object, extensionName) {\n      var extensions = object.extensions || {};\n      delete extensions[extensionName];\n      return this;\n    }\n  }, {\n    key: \"addExtension\",\n    value: function addExtension(extensionName) {\n      var extensionData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      assert(extensionData);\n      this.json.extensions = this.json.extensions || {};\n      this.json.extensions[extensionName] = extensionData;\n      this.registerUsedExtension(extensionName);\n      return extensionData;\n    }\n  }, {\n    key: \"addRequiredExtension\",\n    value: function addRequiredExtension(extensionName) {\n      var extensionData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      assert(extensionData);\n      this.addExtension(extensionName, extensionData);\n      this.registerRequiredExtension(extensionName);\n      return extensionData;\n    }\n  }, {\n    key: \"registerUsedExtension\",\n    value: function registerUsedExtension(extensionName) {\n      this.json.extensionsUsed = this.json.extensionsUsed || [];\n\n      if (!this.json.extensionsUsed.find(function (ext) {\n        return ext === extensionName;\n      })) {\n        this.json.extensionsUsed.push(extensionName);\n      }\n    }\n  }, {\n    key: \"registerRequiredExtension\",\n    value: function registerRequiredExtension(extensionName) {\n      this.registerUsedExtension(extensionName);\n      this.json.extensionsRequired = this.json.extensionsRequired || [];\n\n      if (!this.json.extensionsRequired.find(function (ext) {\n        return ext === extensionName;\n      })) {\n        this.json.extensionsRequired.push(extensionName);\n      }\n    }\n  }, {\n    key: \"removeExtension\",\n    value: function removeExtension(extensionName) {\n      if (this.json.extensionsRequired) {\n        this._removeStringFromArray(this.json.extensionsRequired, extensionName);\n      }\n\n      if (this.json.extensionsUsed) {\n        this._removeStringFromArray(this.json.extensionsUsed, extensionName);\n      }\n\n      if (this.json.extensions) {\n        delete this.json.extensions[extensionName];\n      }\n    }\n  }, {\n    key: \"setObjectExtension\",\n    value: function setObjectExtension(object, extensionName, data) {\n      var extensions = object.extensions || {};\n      extensions[extensionName] = data;\n    }\n  }, {\n    key: \"addMesh\",\n    value: function addMesh(attributes, indices) {\n      var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;\n\n      var accessors = this._addAttributes(attributes);\n\n      var glTFMesh = {\n        primitives: [{\n          attributes: accessors,\n          indices: indices,\n          mode: mode\n        }]\n      };\n      this.json.meshes = this.json.meshes || [];\n      this.json.meshes.push(glTFMesh);\n      return this.json.meshes.length - 1;\n    }\n  }, {\n    key: \"addPointCloud\",\n    value: function addPointCloud(attributes) {\n      var accessorIndices = this._addAttributes(attributes);\n\n      var glTFMesh = {\n        primitives: [{\n          attributes: accessorIndices,\n          mode: 0\n        }]\n      };\n      this.json.meshes = this.json.meshes || [];\n      this.json.meshes.push(glTFMesh);\n      return this.json.meshes.length - 1;\n    }\n  }, {\n    key: \"addImage\",\n    value: function addImage(imageData, mimeType) {\n      mimeType = mimeType || getBinaryImageMIMEType(imageData);\n      var bufferViewIndex = this.addBufferView(imageData);\n      var glTFImage = {\n        bufferView: bufferViewIndex,\n        mimeType: mimeType\n      };\n      this.json.images = this.json.images || [];\n      this.json.images.push(glTFImage);\n      return this.json.images.length - 1;\n    }\n  }, {\n    key: \"addBufferView\",\n    value: function addBufferView(buffer) {\n      var byteLength = buffer.byteLength;\n      assert(Number.isFinite(byteLength));\n      this.sourceBuffers = this.sourceBuffers || [];\n      this.sourceBuffers.push(buffer);\n      var glTFBufferView = {\n        buffer: 0,\n        byteOffset: this.byteLength,\n        byteLength: byteLength\n      };\n      this.byteLength += padTo4Bytes(byteLength);\n      this.json.bufferViews = this.json.bufferViews || [];\n      this.json.bufferViews.push(glTFBufferView);\n      return this.json.bufferViews.length - 1;\n    }\n  }, {\n    key: \"addAccessor\",\n    value: function addAccessor(bufferViewIndex, accessor) {\n      var glTFAccessor = {\n        bufferView: bufferViewIndex,\n        type: getAccessorTypeFromSize(accessor.size),\n        componentType: accessor.componentType,\n        count: accessor.count\n      };\n      this.json.accessors = this.json.accessors || [];\n      this.json.accessors.push(glTFAccessor);\n      return this.json.accessors.length - 1;\n    }\n  }, {\n    key: \"addBinaryBuffer\",\n    value: function addBinaryBuffer(sourceBuffer) {\n      var accessor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        size: 3\n      };\n      var bufferViewIndex = this.addBufferView(sourceBuffer);\n      var accessorDefaults = {\n        size: accessor.size,\n        componentType: getComponentTypeFromArray(sourceBuffer),\n        count: Math.round(sourceBuffer.length / accessor.size)\n      };\n      return this.addAccessor(bufferViewIndex, Object.assign(accessorDefaults, accessor));\n    }\n  }, {\n    key: \"createBinaryChunk\",\n    value: function createBinaryChunk() {\n      if (this.arrayBuffer) {\n        return;\n      }\n\n      var totalByteLength = this.byteLength;\n      var arrayBuffer = new ArrayBuffer(totalByteLength);\n      var targetArray = new Uint8Array(arrayBuffer);\n      var dstByteOffset = 0;\n\n      for (var i = 0; i < this.sourceBuffers.length; i++) {\n        var sourceBuffer = this.sourceBuffers[i];\n        dstByteOffset = copyToArray(sourceBuffer, targetArray, dstByteOffset);\n      }\n\n      this.json.buffers[0].byteLength = totalByteLength;\n      this.arrayBuffer = arrayBuffer;\n      this.sourceBuffers = [];\n    }\n  }, {\n    key: \"_removeStringFromArray\",\n    value: function _removeStringFromArray(array, string) {\n      var found = true;\n\n      while (found) {\n        var index = array.indexOf(string);\n\n        if (index > -1) {\n          array.splice(index, 1);\n        } else {\n          found = false;\n        }\n      }\n    }\n  }, {\n    key: \"json\",\n    get: function get() {\n      return this.gltf.json;\n    }\n  }]);\n\n  return GLTFScenegraph;\n}();\n\nexport { GLTFScenegraph as default };","map":{"version":3,"sources":["../../../src/lib/gltf-scenegraph.js"],"names":["GLTFScenegraph","gltf","json","version","buffers","assert","key","data","extras","extensionName","isExtension","name","extensions","isRequired","object","index","array","bufferView","bufferIndex","binChunk","byteOffset","accessor","buffer","arrayBuffer","ArrayType","length","getAccessorArrayTypeAndLength","image","extensionData","ext","attributes","indices","mode","accessors","glTFMesh","primitives","accessorIndices","imageData","mimeType","getBinaryImageMIMEType","bufferViewIndex","glTFImage","byteLength","Number","glTFBufferView","padTo4Bytes","glTFAccessor","type","getAccessorTypeFromSize","componentType","count","sourceBuffer","size","accessorDefaults","getComponentTypeFromArray","Math","Object","totalByteLength","targetArray","dstByteOffset","i","copyToArray","string","found"],"mappings":"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","sourcesContent":["import {getBinaryImageMIMEType} from '@loaders.gl/images';\nimport {padTo4Bytes, copyToArray} from '@loaders.gl/loader-utils';\nimport assert from './utils/assert';\nimport {\n  getAccessorArrayTypeAndLength,\n  getAccessorTypeFromSize,\n  getComponentTypeFromArray\n} from './gltf-utils/gltf-utils';\n\n// Class for structured access to GLTF data\nexport default class GLTFScenegraph {\n  // eslint-disable-next-line consistent-return\n  constructor(gltf) {\n    // Signature: new GLTFScenegraph(data : GLTFScenegraph)\n    // Allow creation of a `GLTFScenegraph` object from gltf data without checking if already a `GLTFScenegraph`\n    if (gltf instanceof GLTFScenegraph) {\n      return gltf;\n    }\n\n    if (!gltf) {\n      gltf = {\n        json: {\n          version: 2,\n          buffers: []\n        },\n        buffers: []\n      };\n    }\n\n    // TODO - this is too sloppy, define inputs more clearly\n    this.gltf = gltf;\n    assert(this.gltf.json);\n  }\n\n  // Accessors\n\n  get json() {\n    return this.gltf.json;\n  }\n\n  getApplicationData(key) {\n    // TODO - Data is already unpacked by GLBParser\n    const data = this.json[key];\n    return data;\n  }\n\n  getExtraData(key) {\n    // TODO - Data is already unpacked by GLBParser\n    const extras = this.json.extras || {};\n    return extras[key];\n  }\n\n  getExtension(extensionName) {\n    const isExtension = this.getUsedExtensions().find(name => name === extensionName);\n    const extensions = this.json.extensions || {};\n    return isExtension ? extensions[extensionName] || true : null;\n  }\n\n  getRequiredExtension(extensionName) {\n    const isRequired = this.getRequiredExtensions().find(name => name === extensionName);\n    return isRequired ? this.getExtension(extensionName) : null;\n  }\n\n  getRequiredExtensions() {\n    return this.json.extensionsRequired || [];\n  }\n\n  getUsedExtensions() {\n    return this.json.extensionsUsed || [];\n  }\n\n  getObjectExtension(object, extensionName) {\n    const extensions = object.extensions || {};\n    return extensions[extensionName];\n  }\n\n  getScene(index) {\n    return this.getObject('scenes', index);\n  }\n\n  getNode(index) {\n    return this.getObject('nodes', index);\n  }\n\n  getSkin(index) {\n    return this.getObject('skins', index);\n  }\n\n  getMesh(index) {\n    return this.getObject('meshes', index);\n  }\n\n  getMaterial(index) {\n    return this.getObject('materials', index);\n  }\n\n  getAccessor(index) {\n    return this.getObject('accessors', index);\n  }\n\n  getCamera(index) {\n    return null; // TODO: fix this\n  }\n\n  getTexture(index) {\n    return this.getObject('textures', index);\n  }\n\n  getSampler(index) {\n    return this.getObject('samplers', index);\n  }\n\n  getImage(index) {\n    return this.getObject('images', index);\n  }\n\n  getBufferView(index) {\n    return this.getObject('bufferViews', index);\n  }\n\n  getBuffer(index) {\n    return this.getObject('buffers', index);\n  }\n\n  getObject(array, index) {\n    // check if already resolved\n    if (typeof index === 'object') {\n      return index;\n    }\n    const object = this.json[array] && this.json[array][index];\n    if (!object) {\n      throw new Error(`glTF file error: Could not find ${array}[${index}]`); // eslint-disable-line\n    }\n    return object;\n  }\n\n  // accepts buffer view index or buffer view object\n  // returns a `Uint8Array`\n  getTypedArrayForBufferView(bufferView) {\n    bufferView = this.getBufferView(bufferView);\n    const bufferIndex = bufferView.buffer;\n\n    // Get hold of the arrayBuffer\n    // const buffer = this.getBuffer(bufferIndex);\n    const binChunk = this.gltf.buffers[bufferIndex];\n    assert(binChunk);\n\n    const byteOffset = (bufferView.byteOffset || 0) + binChunk.byteOffset;\n    return new Uint8Array(binChunk.arrayBuffer, byteOffset, bufferView.byteLength);\n  }\n\n  // accepts accessor index or accessor object\n  // returns a typed array with type that matches the types\n  getTypedArrayForAccessor(accessor) {\n    accessor = this.getAccessor(accessor);\n    const bufferView = this.getBufferView(accessor.bufferView);\n    const buffer = this.getBuffer(bufferView.buffer);\n    const arrayBuffer = buffer.data;\n\n    // Create a new typed array as a view into the combined buffer\n    const {ArrayType, length} = getAccessorArrayTypeAndLength(accessor, bufferView);\n    const byteOffset = bufferView.byteOffset + accessor.byteOffset;\n    return new ArrayType(arrayBuffer, byteOffset, length);\n  }\n\n  // accepts accessor index or accessor object\n  // returns a `Uint8Array`\n  getTypedArrayForImageData(image) {\n    image = this.getAccessor(image);\n    const bufferView = this.getBufferView(image.bufferView);\n    const buffer = this.getBuffer(bufferView.buffer);\n    const arrayBuffer = buffer.data;\n\n    const byteOffset = bufferView.byteOffset || 0;\n    return new Uint8Array(arrayBuffer, byteOffset, bufferView.byteLength);\n  }\n\n  // MODIFERS\n\n  // Add an extra application-defined key to the top-level data structure\n  addApplicationData(key, data) {\n    this.json[key] = data;\n    return this;\n  }\n\n  // `extras` - Standard GLTF field for storing application specific data\n  addExtraData(key, data) {\n    this.json.extras = this.json.extras || {};\n    this.json.extras[key] = data;\n    return this;\n  }\n\n  addObjectExtension(object, extensionName, data) {\n    assert(data);\n    object.extensions = object.extensions || {};\n    // TODO - clobber or merge?\n    object.extensions[extensionName] = data;\n    this.registerUsedExtension(extensionName);\n    return this;\n  }\n\n  removeObjectExtension(object, extensionName) {\n    const extensions = object.extensions || {};\n    delete extensions[extensionName];\n    return this;\n  }\n\n  // Add to standard GLTF top level extension object, mark as used\n  addExtension(extensionName, extensionData = {}) {\n    assert(extensionData);\n    this.json.extensions = this.json.extensions || {};\n    this.json.extensions[extensionName] = extensionData;\n    this.registerUsedExtension(extensionName);\n    return extensionData;\n  }\n\n  // Standard GLTF top level extension object, mark as used and required\n  addRequiredExtension(extensionName, extensionData = {}) {\n    assert(extensionData);\n    this.addExtension(extensionName, extensionData);\n    this.registerRequiredExtension(extensionName);\n    return extensionData;\n  }\n\n  // Add extensionName to list of used extensions\n  registerUsedExtension(extensionName) {\n    this.json.extensionsUsed = this.json.extensionsUsed || [];\n    if (!this.json.extensionsUsed.find(ext => ext === extensionName)) {\n      this.json.extensionsUsed.push(extensionName);\n    }\n  }\n\n  // Add extensionName to list of required extensions\n  registerRequiredExtension(extensionName) {\n    this.registerUsedExtension(extensionName);\n    this.json.extensionsRequired = this.json.extensionsRequired || [];\n    if (!this.json.extensionsRequired.find(ext => ext === extensionName)) {\n      this.json.extensionsRequired.push(extensionName);\n    }\n  }\n\n  // Removes an extension from the top-level list\n  removeExtension(extensionName) {\n    if (this.json.extensionsRequired) {\n      this._removeStringFromArray(this.json.extensionsRequired, extensionName);\n    }\n    if (this.json.extensionsUsed) {\n      this._removeStringFromArray(this.json.extensionsUsed, extensionName);\n    }\n    if (this.json.extensions) {\n      delete this.json.extensions[extensionName];\n    }\n  }\n\n  setObjectExtension(object, extensionName, data) {\n    const extensions = object.extensions || {};\n    extensions[extensionName] = data;\n    // TODO - add to usedExtensions...\n  }\n\n  addMesh(attributes, indices, mode = 4) {\n    const accessors = this._addAttributes(attributes);\n\n    const glTFMesh = {\n      primitives: [\n        {\n          attributes: accessors,\n          indices,\n          mode\n        }\n      ]\n    };\n\n    this.json.meshes = this.json.meshes || [];\n    this.json.meshes.push(glTFMesh);\n    return this.json.meshes.length - 1;\n  }\n\n  addPointCloud(attributes) {\n    const accessorIndices = this._addAttributes(attributes);\n\n    const glTFMesh = {\n      primitives: [\n        {\n          attributes: accessorIndices,\n          mode: 0 // GL.POINTS\n        }\n      ]\n    };\n\n    this.json.meshes = this.json.meshes || [];\n    this.json.meshes.push(glTFMesh);\n    return this.json.meshes.length - 1;\n  }\n\n  // Adds a binary image. Builds glTF \"JSON metadata\" and saves buffer reference\n  // Buffer will be copied into BIN chunk during \"pack\"\n  // Currently encodes as glTF image\n  addImage(imageData, mimeType) {\n    // If image is referencing a bufferView instead of URI, mimeType must be defined:\n    //   https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#images\n    //   \"a reference to a bufferView; in that case mimeType must be defined.\"\n    mimeType = mimeType || getBinaryImageMIMEType(imageData);\n\n    const bufferViewIndex = this.addBufferView(imageData);\n\n    const glTFImage = {\n      bufferView: bufferViewIndex,\n      mimeType\n    };\n\n    this.json.images = this.json.images || [];\n    this.json.images.push(glTFImage);\n    return this.json.images.length - 1;\n  }\n\n  // Add one untyped source buffer, create a matching glTF `bufferView`, and return its index\n  addBufferView(buffer) {\n    const byteLength = buffer.byteLength;\n    assert(Number.isFinite(byteLength));\n\n    // Add this buffer to the list of buffers to be written to the body.\n    this.sourceBuffers = this.sourceBuffers || [];\n    this.sourceBuffers.push(buffer);\n\n    const glTFBufferView = {\n      buffer: 0,\n      // Write offset from the start of the binary body\n      byteOffset: this.byteLength,\n      byteLength\n    };\n\n    // We've now added the contents to the body, so update the total length\n    // Every sub-chunk needs to be 4-byte align ed\n    this.byteLength += padTo4Bytes(byteLength);\n\n    // Add a bufferView indicating start and length of this binary sub-chunk\n    this.json.bufferViews = this.json.bufferViews || [];\n    this.json.bufferViews.push(glTFBufferView);\n    return this.json.bufferViews.length - 1;\n  }\n\n  // Adds an accessor to a bufferView\n  addAccessor(bufferViewIndex, accessor) {\n    const glTFAccessor = {\n      bufferView: bufferViewIndex,\n      type: getAccessorTypeFromSize(accessor.size),\n      componentType: accessor.componentType,\n      count: accessor.count\n    };\n\n    this.json.accessors = this.json.accessors || [];\n    this.json.accessors.push(glTFAccessor);\n    return this.json.accessors.length - 1;\n  }\n\n  // Add a binary buffer. Builds glTF \"JSON metadata\" and saves buffer reference\n  // Buffer will be copied into BIN chunk during \"pack\"\n  // Currently encodes buffers as glTF accessors, but this could be optimized\n  addBinaryBuffer(sourceBuffer, accessor = {size: 3}) {\n    const bufferViewIndex = this.addBufferView(sourceBuffer);\n\n    const accessorDefaults = {\n      size: accessor.size,\n      componentType: getComponentTypeFromArray(sourceBuffer),\n      count: Math.round(sourceBuffer.length / accessor.size)\n    };\n\n    return this.addAccessor(bufferViewIndex, Object.assign(accessorDefaults, accessor));\n  }\n\n  // Pack the binary chunk\n  createBinaryChunk() {\n    // Already packed\n    if (this.arrayBuffer) {\n      return;\n    }\n\n    // Allocate total array\n    const totalByteLength = this.byteLength;\n    const arrayBuffer = new ArrayBuffer(totalByteLength);\n    const targetArray = new Uint8Array(arrayBuffer);\n\n    // Copy each array into\n    let dstByteOffset = 0;\n    for (let i = 0; i < this.sourceBuffers.length; i++) {\n      const sourceBuffer = this.sourceBuffers[i];\n      dstByteOffset = copyToArray(sourceBuffer, targetArray, dstByteOffset);\n    }\n\n    // Update the glTF BIN CHUNK byte length\n    this.json.buffers[0].byteLength = totalByteLength;\n\n    // Save generated arrayBuffer\n    this.arrayBuffer = arrayBuffer;\n\n    // Clear out sourceBuffers\n    this.sourceBuffers = [];\n  }\n\n  // PRIVATE\n\n  _removeStringFromArray(array, string) {\n    let found = true;\n    while (found) {\n      const index = array.indexOf(string);\n      if (index > -1) {\n        array.splice(index, 1);\n      } else {\n        found = false;\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}