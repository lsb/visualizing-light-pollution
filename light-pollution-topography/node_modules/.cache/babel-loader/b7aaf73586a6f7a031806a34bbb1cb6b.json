{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { getTransferList } from './worker-utils/get-transfer-list';\nimport { validateLoaderVersion } from './validate-loader-version';\nexport default function createWorker(loader) {\n  if (typeof self === 'undefined') {\n    return;\n  }\n\n  var requestId = 0;\n\n  var parse = function parse(arraybuffer) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var url = arguments.length > 2 ? arguments[2] : undefined;\n    return new Promise(function (resolve, reject) {\n      var id = requestId++;\n\n      var onMessage = function onMessage(_ref) {\n        var data = _ref.data;\n\n        if (!data || data.id !== id) {\n          return;\n        }\n\n        switch (data.type) {\n          case 'parse-done':\n            self.removeEventListener('message', onMessage);\n            resolve(data.result);\n            break;\n\n          case 'parse-error':\n            self.removeEventListener('message', onMessage);\n            reject(data.message);\n            break;\n\n          default:\n        }\n      };\n\n      self.addEventListener('message', onMessage);\n      self.postMessage({\n        type: 'parse',\n        id: id,\n        arraybuffer: arraybuffer,\n        options: options,\n        url: url\n      }, [arraybuffer]);\n    });\n  };\n\n  self.onmessage = function () {\n    var _ref2 = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(evt) {\n      var data, arraybuffer, _data$byteOffset, byteOffset, _data$byteLength, byteLength, _data$options, options, result, transferList;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              data = evt.data;\n              _context.prev = 1;\n\n              if (isKnownMessage(data, loader.name)) {\n                _context.next = 4;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 4:\n              validateLoaderVersion(loader, data.source.split('@')[1]);\n              arraybuffer = data.arraybuffer, _data$byteOffset = data.byteOffset, byteOffset = _data$byteOffset === void 0 ? 0 : _data$byteOffset, _data$byteLength = data.byteLength, byteLength = _data$byteLength === void 0 ? 0 : _data$byteLength, _data$options = data.options, options = _data$options === void 0 ? {} : _data$options;\n              _context.next = 8;\n              return parseData({\n                loader: loader,\n                arraybuffer: arraybuffer,\n                byteOffset: byteOffset,\n                byteLength: byteLength,\n                options: options,\n                context: {\n                  parse: parse\n                }\n              });\n\n            case 8:\n              result = _context.sent;\n              transferList = getTransferList(result);\n              self.postMessage({\n                type: 'done',\n                result: result\n              }, transferList);\n              _context.next = 16;\n              break;\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](1);\n              self.postMessage({\n                type: 'error',\n                message: _context.t0.message\n              });\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 13]]);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n}\n\nfunction parseData(_x2) {\n  return _parseData.apply(this, arguments);\n}\n\nfunction _parseData() {\n  _parseData = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(_ref3) {\n    var loader, arraybuffer, byteOffset, byteLength, options, context, data, parser, textDecoder;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            loader = _ref3.loader, arraybuffer = _ref3.arraybuffer, byteOffset = _ref3.byteOffset, byteLength = _ref3.byteLength, options = _ref3.options, context = _ref3.context;\n\n            if (!(loader.parseSync || loader.parse)) {\n              _context2.next = 6;\n              break;\n            }\n\n            data = arraybuffer;\n            parser = loader.parseSync || loader.parse;\n            _context2.next = 13;\n            break;\n\n          case 6:\n            if (!loader.parseTextSync) {\n              _context2.next = 12;\n              break;\n            }\n\n            textDecoder = new TextDecoder();\n            data = textDecoder.decode(arraybuffer);\n            parser = loader.parseTextSync;\n            _context2.next = 13;\n            break;\n\n          case 12:\n            throw new Error(\"Could not load data with \".concat(loader.name, \" loader\"));\n\n          case 13:\n            options = _objectSpread({}, options, {\n              modules: loader && loader.options && loader.options.modules || {},\n              worker: false\n            });\n            _context2.next = 16;\n            return parser(data, _objectSpread({}, options), context, loader);\n\n          case 16:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 17:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _parseData.apply(this, arguments);\n}\n\nfunction isKnownMessage(data, name) {\n  return data && data.type === 'parse' && data.source && data.source.startsWith('loaders.gl');\n}","map":{"version":3,"sources":["../../../src/lib/create-worker.js"],"names":["requestId","parse","options","url","id","onMessage","data","self","resolve","reject","type","arraybuffer","evt","isKnownMessage","loader","validateLoaderVersion","byteOffset","byteLength","result","parseData","context","transferList","getTransferList","message","parser","textDecoder","modules","worker"],"mappings":"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","sourcesContent":["/* eslint-disable no-restricted-globals */\n/* global TextDecoder, self */\n\nimport {getTransferList} from './worker-utils/get-transfer-list';\nimport {validateLoaderVersion} from './validate-loader-version';\n\n// Set up a WebWorkerGlobalScope to talk with the main thread\nexport default function createWorker(loader) {\n  // TODO - explain when this happens? Just a sanity check? Throw an error or log a warning?\n  if (typeof self === 'undefined') {\n    return;\n  }\n\n  let requestId = 0;\n  const parse = (arraybuffer, options = {}, url) =>\n    new Promise((resolve, reject) => {\n      const id = requestId++;\n\n      const onMessage = ({data}) => {\n        if (!data || data.id !== id) {\n          // not ours\n          return;\n        }\n        switch (data.type) {\n          case 'parse-done':\n            self.removeEventListener('message', onMessage);\n            resolve(data.result);\n            break;\n\n          case 'parse-error':\n            self.removeEventListener('message', onMessage);\n            reject(data.message);\n            break;\n\n          default:\n          // ignore\n        }\n      };\n      self.addEventListener('message', onMessage);\n      // Ask the main thread to decode data\n      // @ts-ignore self is WorkerGlobalScope\n      self.postMessage({type: 'parse', id, arraybuffer, options, url}, [arraybuffer]);\n    });\n\n  self.onmessage = async evt => {\n    const {data} = evt;\n\n    try {\n      if (!isKnownMessage(data, loader.name)) {\n        return;\n      }\n\n      validateLoaderVersion(loader, data.source.split('@')[1]);\n\n      const {arraybuffer, byteOffset = 0, byteLength = 0, options = {}} = data;\n\n      const result = await parseData({\n        loader,\n        arraybuffer,\n        byteOffset,\n        byteLength,\n        options,\n        context: {parse}\n      });\n      const transferList = getTransferList(result);\n      // @ts-ignore self is WorkerGlobalScope\n      self.postMessage({type: 'done', result}, transferList);\n    } catch (error) {\n      // @ts-ignore self is WorkerGlobalScope\n      self.postMessage({type: 'error', message: error.message});\n    }\n  };\n}\n\n// TODO - Support byteOffset and byteLength (enabling parsing of embedded binaries without copies)\n// TODO - Why not support async loader.parse* funcs here?\n// TODO - Why not reuse a common function instead of reimplementing loader.parse* selection logic? Keeping loader small?\n// TODO - Lack of appropriate parser functions can be detected when we create worker, no need to wait until parse\nasync function parseData({loader, arraybuffer, byteOffset, byteLength, options, context}) {\n  let data;\n  let parser;\n  if (loader.parseSync || loader.parse) {\n    data = arraybuffer;\n    parser = loader.parseSync || loader.parse;\n  } else if (loader.parseTextSync) {\n    const textDecoder = new TextDecoder();\n    data = textDecoder.decode(arraybuffer);\n    parser = loader.parseTextSync;\n  } else {\n    throw new Error(`Could not load data with ${loader.name} loader`);\n  }\n\n  // TODO - proper merge in of loader options...\n  options = {\n    ...options,\n    modules: (loader && loader.options && loader.options.modules) || {},\n    worker: false\n  };\n\n  return await parser(data, {...options}, context, loader);\n}\n\n// Filter out noise messages sent to workers\nfunction isKnownMessage(data, name) {\n  return data && data.type === 'parse' && data.source && data.source.startsWith('loaders.gl');\n}\n\n/*\nfunction checkMessage(evt, name) {\n  switch (evt.data && evt.data.source) {\n    // Ignore known noise event from react-dev-tools bridge, webpack build progress etc...\n    case 'react-devtools-bridge':\n    case 'react-devtools-content-script':\n    case 'react-devtools-detector':\n      return false;\n    default:\n      // fall through\n  }\n\n  switch (evt.data && evt.data.type) {\n    case 'webpackProgress':\n    case 'webpackOk':\n      return false;\n    default:\n      // Enable to debug messages\n      // const message = `${name.toLowerCase()}-worker: ignoring unknown message`;\n      // console.log(message, evt.data, evt); // eslint-disable-line\n      return false;\n  }\n}\n*/\n"]},"metadata":{},"sourceType":"module"}