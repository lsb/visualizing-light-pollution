{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport { mod } from '../utils/math-utils';\nimport { Vector3, _SphericalCoordinates as SphericalCoordinates, clamp } from 'math.gl';\nvar MOVEMENT_SPEED = 20;\nvar DEFAULT_STATE = {\n  position: [0, 0, 0],\n  pitch: 0,\n  bearing: 0,\n  maxPitch: 90,\n  minPitch: -90\n};\n\nvar FirstPersonState = function (_ViewState) {\n  _inherits(FirstPersonState, _ViewState);\n\n  function FirstPersonState(_ref) {\n    var _this;\n\n    var width = _ref.width,\n        height = _ref.height,\n        _ref$position = _ref.position,\n        position = _ref$position === void 0 ? DEFAULT_STATE.position : _ref$position,\n        _ref$bearing = _ref.bearing,\n        bearing = _ref$bearing === void 0 ? DEFAULT_STATE.bearing : _ref$bearing,\n        _ref$pitch = _ref.pitch,\n        pitch = _ref$pitch === void 0 ? DEFAULT_STATE.pitch : _ref$pitch,\n        longitude = _ref.longitude,\n        latitude = _ref.latitude,\n        _ref$maxPitch = _ref.maxPitch,\n        maxPitch = _ref$maxPitch === void 0 ? DEFAULT_STATE.maxPitch : _ref$maxPitch,\n        _ref$minPitch = _ref.minPitch,\n        minPitch = _ref$minPitch === void 0 ? DEFAULT_STATE.minPitch : _ref$minPitch,\n        startBearing = _ref.startBearing,\n        startPitch = _ref.startPitch,\n        startZoomPosition = _ref.startZoomPosition,\n        startZoom = _ref.startZoom;\n\n    _classCallCheck(this, FirstPersonState);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FirstPersonState).call(this, {\n      width: width,\n      height: height,\n      position: position,\n      bearing: bearing,\n      pitch: pitch,\n      longitude: longitude,\n      latitude: latitude,\n      maxPitch: maxPitch,\n      minPitch: minPitch\n    }));\n    _this._interactiveState = {\n      startBearing: startBearing,\n      startPitch: startPitch,\n      startZoomPosition: startZoomPosition,\n      startZoom: startZoom\n    };\n    return _this;\n  }\n\n  _createClass(FirstPersonState, [{\n    key: \"getInteractiveState\",\n    value: function getInteractiveState() {\n      return this._interactiveState;\n    }\n  }, {\n    key: \"getDirection\",\n    value: function getDirection() {\n      var use2D = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var spherical = new SphericalCoordinates({\n        bearing: this._viewportProps.bearing,\n        pitch: use2D ? 90 : 90 + this._viewportProps.pitch\n      });\n      var direction = spherical.toVector3().normalize();\n      return direction;\n    }\n  }, {\n    key: \"panStart\",\n    value: function panStart() {\n      return this;\n    }\n  }, {\n    key: \"pan\",\n    value: function pan() {\n      return this;\n    }\n  }, {\n    key: \"panEnd\",\n    value: function panEnd() {\n      return this;\n    }\n  }, {\n    key: \"rotateStart\",\n    value: function rotateStart(_ref2) {\n      var pos = _ref2.pos;\n      return this._getUpdatedState({\n        startBearing: this._viewportProps.bearing,\n        startPitch: this._viewportProps.pitch\n      });\n    }\n  }, {\n    key: \"rotate\",\n    value: function rotate(_ref3) {\n      var deltaScaleX = _ref3.deltaScaleX,\n          deltaScaleY = _ref3.deltaScaleY;\n      var _this$_interactiveSta = this._interactiveState,\n          startBearing = _this$_interactiveSta.startBearing,\n          startPitch = _this$_interactiveSta.startPitch;\n\n      if (!Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n        return this;\n      }\n\n      return this._getUpdatedState({\n        bearing: startBearing - deltaScaleX * 180,\n        pitch: startPitch - deltaScaleY * 90\n      });\n    }\n  }, {\n    key: \"rotateEnd\",\n    value: function rotateEnd() {\n      return this._getUpdatedState({\n        startBearing: null,\n        startPitch: null\n      });\n    }\n  }, {\n    key: \"zoomStart\",\n    value: function zoomStart() {\n      return this._getUpdatedState({\n        startZoomPosition: this._viewportProps.position,\n        startZoom: this._viewportProps.zoom\n      });\n    }\n  }, {\n    key: \"zoom\",\n    value: function zoom(_ref4) {\n      var scale = _ref4.scale;\n      var startZoomPosition = this._interactiveState.startZoomPosition;\n\n      if (!startZoomPosition) {\n        startZoomPosition = this._viewportProps.position;\n      }\n\n      var direction = this.getDirection();\n      return this._move(direction, Math.log2(scale), startZoomPosition);\n    }\n  }, {\n    key: \"zoomEnd\",\n    value: function zoomEnd() {\n      return this._getUpdatedState({\n        startZoomPosition: null,\n        startZoom: null\n      });\n    }\n  }, {\n    key: \"moveLeft\",\n    value: function moveLeft() {\n      var direction = this.getDirection(true);\n      return this._move(direction.rotateZ({\n        radians: Math.PI / 2\n      }));\n    }\n  }, {\n    key: \"moveRight\",\n    value: function moveRight() {\n      var direction = this.getDirection(true);\n      return this._move(direction.rotateZ({\n        radians: -Math.PI / 2\n      }));\n    }\n  }, {\n    key: \"moveUp\",\n    value: function moveUp() {\n      var direction = this.getDirection(true);\n      return this._move(direction);\n    }\n  }, {\n    key: \"moveDown\",\n    value: function moveDown() {\n      var direction = this.getDirection(true);\n      return this._move(direction.negate());\n    }\n  }, {\n    key: \"rotateLeft\",\n    value: function rotateLeft() {\n      return this._getUpdatedState({\n        bearing: this._viewportProps.bearing - 15\n      });\n    }\n  }, {\n    key: \"rotateRight\",\n    value: function rotateRight() {\n      return this._getUpdatedState({\n        bearing: this._viewportProps.bearing + 15\n      });\n    }\n  }, {\n    key: \"rotateUp\",\n    value: function rotateUp() {\n      return this._getUpdatedState({\n        pitch: this._viewportProps.pitch + 10\n      });\n    }\n  }, {\n    key: \"rotateDown\",\n    value: function rotateDown() {\n      return this._getUpdatedState({\n        pitch: this._viewportProps.pitch - 10\n      });\n    }\n  }, {\n    key: \"zoomIn\",\n    value: function zoomIn() {\n      return this.zoom({\n        scale: 2\n      });\n    }\n  }, {\n    key: \"zoomOut\",\n    value: function zoomOut() {\n      return this.zoom({\n        scale: 0.5\n      });\n    }\n  }, {\n    key: \"shortestPathFrom\",\n    value: function shortestPathFrom(viewState) {\n      var fromProps = viewState.getViewportProps();\n      var props = Object.assign({}, this._viewportProps);\n      var bearing = props.bearing,\n          longitude = props.longitude;\n\n      if (Math.abs(bearing - fromProps.bearing) > 180) {\n        props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n      }\n\n      if (Math.abs(longitude - fromProps.longitude) > 180) {\n        props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n      }\n\n      return props;\n    }\n  }, {\n    key: \"_move\",\n    value: function _move(direction) {\n      var speed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var fromPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this._viewportProps.position;\n      var delta = direction.scale(speed * MOVEMENT_SPEED);\n      return this._getUpdatedState({\n        position: new Vector3(fromPosition).add(delta)\n      });\n    }\n  }, {\n    key: \"_getUpdatedState\",\n    value: function _getUpdatedState(newProps) {\n      return new FirstPersonState(Object.assign({}, this._viewportProps, this._interactiveState, newProps));\n    }\n  }, {\n    key: \"_applyConstraints\",\n    value: function _applyConstraints(props) {\n      var pitch = props.pitch,\n          maxPitch = props.maxPitch,\n          minPitch = props.minPitch,\n          longitude = props.longitude,\n          bearing = props.bearing;\n      props.pitch = clamp(pitch, minPitch, maxPitch);\n\n      if (longitude < -180 || longitude > 180) {\n        props.longitude = mod(longitude + 180, 360) - 180;\n      }\n\n      if (bearing < -180 || bearing > 180) {\n        props.bearing = mod(bearing + 180, 360) - 180;\n      }\n\n      return props;\n    }\n  }]);\n\n  return FirstPersonState;\n}(ViewState);\n\nvar FirstPersonController = function (_Controller) {\n  _inherits(FirstPersonController, _Controller);\n\n  function FirstPersonController(props) {\n    _classCallCheck(this, FirstPersonController);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(FirstPersonController).call(this, FirstPersonState, props));\n  }\n\n  return FirstPersonController;\n}(Controller);\n\nexport { FirstPersonController as default };","map":{"version":3,"sources":["../../../src/controllers/first-person-controller.js"],"names":["_SphericalCoordinates","MOVEMENT_SPEED","DEFAULT_STATE","position","pitch","bearing","maxPitch","minPitch","FirstPersonState","ViewState","width","height","longitude","latitude","startBearing","startPitch","startZoomPosition","startZoom","use2D","spherical","direction","pos","deltaScaleX","deltaScaleY","Number","zoom","scale","Math","radians","viewState","fromProps","props","Object","speed","fromPosition","delta","newProps","clamp","mod","FirstPersonController","Controller"],"mappings":"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","sourcesContent":["import Controller from './controller';\nimport ViewState from './view-state';\nimport {mod} from '../utils/math-utils';\n\nimport {Vector3, _SphericalCoordinates as SphericalCoordinates, clamp} from 'math.gl';\n\nconst MOVEMENT_SPEED = 20;\nconst DEFAULT_STATE = {\n  position: [0, 0, 0],\n  pitch: 0,\n  bearing: 0,\n  maxPitch: 90,\n  minPitch: -90\n};\n\nclass FirstPersonState extends ViewState {\n  constructor({\n    /* Viewport arguments */\n    width, // Width of viewport\n    height, // Height of viewport\n\n    // Position and orientation\n    position = DEFAULT_STATE.position, // typically in meters from anchor point\n\n    bearing = DEFAULT_STATE.bearing, // Rotation around y axis\n    pitch = DEFAULT_STATE.pitch, // Rotation around x axis\n\n    // Geospatial anchor\n    longitude,\n    latitude,\n\n    maxPitch = DEFAULT_STATE.maxPitch,\n    minPitch = DEFAULT_STATE.minPitch,\n\n    // Model state when the rotate operation first started\n    startBearing,\n    startPitch,\n    startZoomPosition,\n    startZoom\n  }) {\n    super({\n      width,\n      height,\n      position,\n      bearing,\n      pitch,\n      longitude,\n      latitude,\n      maxPitch,\n      minPitch\n    });\n\n    this._interactiveState = {\n      startBearing,\n      startPitch,\n      startZoomPosition,\n      startZoom\n    };\n  }\n\n  /* Public API */\n\n  getInteractiveState() {\n    return this._interactiveState;\n  }\n\n  getDirection(use2D = false) {\n    const spherical = new SphericalCoordinates({\n      bearing: this._viewportProps.bearing,\n      pitch: use2D ? 90 : 90 + this._viewportProps.pitch\n    });\n    const direction = spherical.toVector3().normalize();\n    return direction;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart() {\n    return this;\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  pan() {\n    return this;\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this;\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedState({\n      startBearing: this._viewportProps.bearing,\n      startPitch: this._viewportProps.pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  rotate({deltaScaleX, deltaScaleY}) {\n    const {startBearing, startPitch} = this._interactiveState;\n\n    if (!Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n      return this;\n    }\n\n    return this._getUpdatedState({\n      bearing: startBearing - deltaScaleX * 180,\n      pitch: startPitch - deltaScaleY * 90\n    });\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedState({\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  zoomStart() {\n    return this._getUpdatedState({\n      startZoomPosition: this._viewportProps.position,\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({scale}) {\n    let {startZoomPosition} = this._interactiveState;\n    if (!startZoomPosition) {\n      startZoomPosition = this._viewportProps.position;\n    }\n\n    const direction = this.getDirection();\n    return this._move(direction, Math.log2(scale), startZoomPosition);\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomPosition: null,\n      startZoom: null\n    });\n  }\n\n  moveLeft() {\n    const direction = this.getDirection(true);\n    return this._move(direction.rotateZ({radians: Math.PI / 2}));\n  }\n\n  moveRight() {\n    const direction = this.getDirection(true);\n    return this._move(direction.rotateZ({radians: -Math.PI / 2}));\n  }\n\n  // forward\n  moveUp() {\n    const direction = this.getDirection(true);\n    return this._move(direction);\n  }\n\n  // backward\n  moveDown() {\n    const direction = this.getDirection(true);\n    return this._move(direction.negate());\n  }\n\n  rotateLeft() {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing - 15\n    });\n  }\n\n  rotateRight() {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing + 15\n    });\n  }\n\n  rotateUp() {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch + 10\n    });\n  }\n\n  rotateDown() {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch - 10\n    });\n  }\n\n  zoomIn() {\n    return this.zoom({scale: 2});\n  }\n\n  zoomOut() {\n    return this.zoom({scale: 0.5});\n  }\n\n  // shortest path between two view states\n  shortestPathFrom(viewState) {\n    const fromProps = viewState.getViewportProps();\n    const props = Object.assign({}, this._viewportProps);\n    const {bearing, longitude} = props;\n\n    if (Math.abs(bearing - fromProps.bearing) > 180) {\n      props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n    }\n    if (Math.abs(longitude - fromProps.longitude) > 180) {\n      props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n    }\n    return props;\n  }\n\n  /* Private methods */\n  _move(direction, speed = 1, fromPosition = this._viewportProps.position) {\n    const delta = direction.scale(speed * MOVEMENT_SPEED);\n    return this._getUpdatedState({\n      position: new Vector3(fromPosition).add(delta)\n    });\n  }\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new FirstPersonState(\n      Object.assign({}, this._viewportProps, this._interactiveState, newProps)\n    );\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure pitch and zoom are within specified range\n    const {pitch, maxPitch, minPitch, longitude, bearing} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    // Normalize degrees\n    if (longitude < -180 || longitude > 180) {\n      props.longitude = mod(longitude + 180, 360) - 180;\n    }\n    if (bearing < -180 || bearing > 180) {\n      props.bearing = mod(bearing + 180, 360) - 180;\n    }\n\n    return props;\n  }\n}\n\nexport default class FirstPersonController extends Controller {\n  constructor(props) {\n    super(FirstPersonState, props);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}