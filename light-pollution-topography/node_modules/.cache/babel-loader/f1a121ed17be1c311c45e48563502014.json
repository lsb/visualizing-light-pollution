{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { assert } from '@loaders.gl/loader-utils';\nexport function isLoaderObject(loader) {\n  if (!loader) {\n    return false;\n  }\n\n  if (Array.isArray(loader)) {\n    loader = loader[0];\n  }\n\n  var hasParser = loader.parseTextSync || loader.parseSync || loader.parse || loader.parseStream || loader.parseInBatches;\n  var loaderOptions = loader.options && loader.options[loader.id];\n  hasParser = hasParser || loaderOptions && loaderOptions.workerUrl;\n  return hasParser;\n}\nexport function normalizeLoader(loader) {\n  assert(loader, 'null loader');\n  assert(isLoaderObject(loader), 'invalid loader');\n  var options;\n\n  if (Array.isArray(loader)) {\n    options = loader[1];\n    loader = loader[0];\n    loader = _objectSpread({}, loader, {\n      options: _objectSpread({}, loader.options, {}, options)\n    });\n  }\n\n  if (loader.extension) {\n    loader.extensions = loader.extensions || loader.extension;\n    delete loader.extension;\n  }\n\n  if (!Array.isArray(loader.extensions)) {\n    loader.extensions = [loader.extensions];\n  }\n\n  assert(loader.extensions && loader.extensions.length > 0 && loader.extensions[0]);\n\n  if (loader.parseTextSync) {\n    loader.text = true;\n  }\n\n  if (!loader.text) {\n    loader.binary = true;\n  }\n\n  return loader;\n}","map":{"version":3,"sources":["../../../../src/lib/loader-utils/normalize-loader.js"],"names":["Array","loader","hasParser","loaderOptions","assert","isLoaderObject","options"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,MAAA,QAAA,0BAAA;AAEA,OAAO,SAAA,cAAA,CAAA,MAAA,EAAgC;AACrC,MAAI,CAAJ,MAAA,EAAa;AACX,WAAA,KAAA;AACD;;AAED,MAAIA,KAAK,CAALA,OAAAA,CAAJ,MAAIA,CAAJ,EAA2B;AACzBC,IAAAA,MAAM,GAAGA,MAAM,CAAfA,CAAe,CAAfA;AACD;;AAED,MAAIC,SAAS,GACXD,MAAM,CAANA,aAAAA,IACAA,MAAM,CADNA,SAAAA,IAEAA,MAAM,CAFNA,KAAAA,IAGAA,MAAM,CAHNA,WAAAA,IAIAA,MAAM,CALR,cAAA;AAOA,MAAME,aAAa,GAAGF,MAAM,CAANA,OAAAA,IAAkBA,MAAM,CAANA,OAAAA,CAAeA,MAAM,CAA7D,EAAwCA,CAAxC;AACAC,EAAAA,SAAS,GAAGA,SAAS,IAAKC,aAAa,IAAIA,aAAa,CAAxDD,SAAAA;AAEA,SAAA,SAAA;AACD;AAED,OAAO,SAAA,eAAA,CAAA,MAAA,EAAiC;AAItCE,EAAAA,MAAM,CAAA,MAAA,EAANA,aAAM,CAANA;AACAA,EAAAA,MAAM,CAACC,cAAc,CAAf,MAAe,CAAf,EAAND,gBAAM,CAANA;AAKA,MAAA,OAAA;;AACA,MAAIJ,KAAK,CAALA,OAAAA,CAAJ,MAAIA,CAAJ,EAA2B;AACzBM,IAAAA,OAAO,GAAGL,MAAM,CAAhBK,CAAgB,CAAhBA;AACAL,IAAAA,MAAM,GAAGA,MAAM,CAAfA,CAAe,CAAfA;AACAA,IAAAA,MAAM,GAAA,aAAA,CAAA,EAAA,EAAA,MAAA,EAAA;AAEJK,MAAAA,OAAO,EAAA,aAAA,CAAA,EAAA,EAAML,MAAM,CAAZ,OAAA,EAAA,EAAA,EAAA,OAAA;AAFH,KAAA,CAANA;AAID;;AAKD,MAAIA,MAAM,CAAV,SAAA,EAAsB;AACpBA,IAAAA,MAAM,CAANA,UAAAA,GAAoBA,MAAM,CAANA,UAAAA,IAAqBA,MAAM,CAA/CA,SAAAA;AACA,WAAOA,MAAM,CAAb,SAAA;AACD;;AAGD,MAAI,CAACD,KAAK,CAALA,OAAAA,CAAcC,MAAM,CAAzB,UAAKD,CAAL,EAAuC;AACrCC,IAAAA,MAAM,CAANA,UAAAA,GAAoB,CAACA,MAAM,CAA3BA,UAAoB,CAApBA;AACD;;AAEDG,EAAAA,MAAM,CAACH,MAAM,CAANA,UAAAA,IAAqBA,MAAM,CAANA,UAAAA,CAAAA,MAAAA,GAArBA,CAAAA,IAAqDA,MAAM,CAANA,UAAAA,CAA5DG,CAA4DH,CAAtD,CAANG;;AAKA,MAAIH,MAAM,CAAV,aAAA,EAA0B;AACxBA,IAAAA,MAAM,CAANA,IAAAA,GAAAA,IAAAA;AACD;;AAED,MAAI,CAACA,MAAM,CAAX,IAAA,EAAkB;AAChBA,IAAAA,MAAM,CAANA,MAAAA,GAAAA,IAAAA;AACD;;AAYD,SAAA,MAAA;AACD","sourcesContent":["import {assert} from '@loaders.gl/loader-utils';\n\nexport function isLoaderObject(loader) {\n  if (!loader) {\n    return false;\n  }\n\n  if (Array.isArray(loader)) {\n    loader = loader[0];\n  }\n\n  let hasParser =\n    loader.parseTextSync ||\n    loader.parseSync ||\n    loader.parse ||\n    loader.parseStream || // TODO Remove, Replace with parseInBatches\n    loader.parseInBatches;\n\n  const loaderOptions = loader.options && loader.options[loader.id];\n  hasParser = hasParser || (loaderOptions && loaderOptions.workerUrl);\n\n  return hasParser;\n}\n\nexport function normalizeLoader(loader) {\n  // This error is fairly easy to trigger by mixing up import statments etc\n  // So we make an exception and add a developer error message for this case\n  // To help new users from getting stuck here\n  assert(loader, 'null loader');\n  assert(isLoaderObject(loader), 'invalid loader');\n\n  // NORMALIZE [LOADER, OPTIONS] => LOADER\n\n  // If [loader, options], create a new loaders object with options merged in\n  let options;\n  if (Array.isArray(loader)) {\n    options = loader[1];\n    loader = loader[0];\n    loader = {\n      ...loader,\n      options: {...loader.options, ...options}\n    };\n  }\n\n  // NORMALIZE LOADER.EXTENSIONS\n\n  // Remove `extension`` prop, replace with `extensions``\n  if (loader.extension) {\n    loader.extensions = loader.extensions || loader.extension;\n    delete loader.extension;\n  }\n\n  // Ensure loader.extensions is an array\n  if (!Array.isArray(loader.extensions)) {\n    loader.extensions = [loader.extensions];\n  }\n\n  assert(loader.extensions && loader.extensions.length > 0 && loader.extensions[0]);\n\n  // NORMALIZE text and binary flags\n\n  // Ensure at least one of text/binary flags are properly set\n  if (loader.parseTextSync) {\n    loader.text = true;\n  }\n\n  if (!loader.text) {\n    loader.binary = true;\n  }\n\n  // TODO - Does adding a default MIME type add any value?\n  /*\n  if (!loader.mimeType) {\n    if (loader.binary) {\n      // TODO - do we need separate mime types for binary and text formats?\n      loader.mimeType = 'application/octet-stream';\n    }\n  }\n  */\n\n  return loader;\n}\n"]},"metadata":{},"sourceType":"module"}