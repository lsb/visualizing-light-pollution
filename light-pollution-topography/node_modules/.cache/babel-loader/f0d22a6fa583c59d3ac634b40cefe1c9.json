{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport Resource from './resource';\nimport Accessor from './accessor';\nimport { assertWebGL2Context, getGLTypeFromTypedArray, getTypedArrayFromGLType } from '../webgl-utils';\nimport { log } from '@luma.gl/gltools';\nimport { assert, checkProps } from '../utils';\nvar DEBUG_DATA_LENGTH = 10;\nvar DEPRECATED_PROPS = {\n  offset: 'accessor.offset',\n  stride: 'accessor.stride',\n  type: 'accessor.type',\n  size: 'accessor.size',\n  divisor: 'accessor.divisor',\n  normalized: 'accessor.normalized',\n  integer: 'accessor.integer',\n  instanced: 'accessor.divisor',\n  isInstanced: 'accessor.divisor'\n};\nvar PROP_CHECKS_INITIALIZE = {\n  removedProps: {},\n  replacedProps: {\n    bytes: 'byteLength'\n  },\n  deprecatedProps: DEPRECATED_PROPS\n};\nvar PROP_CHECKS_SET_PROPS = {\n  removedProps: DEPRECATED_PROPS\n};\n\nvar Buffer = function (_Resource) {\n  _inherits(Buffer, _Resource);\n\n  function Buffer(gl) {\n    var _this;\n\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Buffer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Buffer).call(this, gl, props));\n\n    _this.stubRemovedMethods('Buffer', 'v6.0', ['layout', 'setLayout', 'getIndexedParameter']);\n\n    _this.target = props.target || (_this.gl.webgl2 ? 36662 : 34962);\n\n    _this.initialize(props);\n\n    Object.seal(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Buffer, [{\n    key: \"getElementCount\",\n    value: function getElementCount() {\n      var accessor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.accessor;\n      return Math.round(this.byteLength / Accessor.getBytesPerElement(accessor));\n    }\n  }, {\n    key: \"getVertexCount\",\n    value: function getVertexCount() {\n      var accessor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.accessor;\n      return Math.round(this.byteLength / Accessor.getBytesPerVertex(accessor));\n    }\n  }, {\n    key: \"initialize\",\n    value: function initialize() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (ArrayBuffer.isView(props)) {\n        props = {\n          data: props\n        };\n      }\n\n      if (Number.isFinite(props)) {\n        props = {\n          byteLength: props\n        };\n      }\n\n      props = checkProps('Buffer', props, PROP_CHECKS_INITIALIZE);\n      this.usage = props.usage || 35044;\n      this.debugData = null;\n      this.setAccessor(Object.assign({}, props, props.accessor));\n\n      if (props.data) {\n        this._setData(props.data, props.offset, props.byteLength);\n      } else {\n        this._setByteLength(props.byteLength || 0);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"setProps\",\n    value: function setProps(props) {\n      props = checkProps('Buffer', props, PROP_CHECKS_SET_PROPS);\n\n      if ('accessor' in props) {\n        this.setAccessor(props.accessor);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"setAccessor\",\n    value: function setAccessor(accessor) {\n      accessor = Object.assign({}, accessor);\n      delete accessor.buffer;\n      this.accessor = new Accessor(accessor);\n      return this;\n    }\n  }, {\n    key: \"reallocate\",\n    value: function reallocate(byteLength) {\n      if (byteLength > this.byteLength) {\n        this._setByteLength(byteLength);\n\n        return true;\n      }\n\n      this.bytesUsed = byteLength;\n      return false;\n    }\n  }, {\n    key: \"setData\",\n    value: function setData(props) {\n      return this.initialize(props);\n    }\n  }, {\n    key: \"subData\",\n    value: function subData(props) {\n      if (ArrayBuffer.isView(props)) {\n        props = {\n          data: props\n        };\n      }\n\n      var _props = props,\n          data = _props.data,\n          _props$offset = _props.offset,\n          offset = _props$offset === void 0 ? 0 : _props$offset,\n          _props$srcOffset = _props.srcOffset,\n          srcOffset = _props$srcOffset === void 0 ? 0 : _props$srcOffset;\n      var byteLength = props.byteLength || props.length;\n      assert(data);\n      var target = this.gl.webgl2 ? 36663 : this.target;\n      this.gl.bindBuffer(target, this.handle);\n\n      if (srcOffset !== 0 || byteLength !== undefined) {\n        assertWebGL2Context(this.gl);\n        this.gl.bufferSubData(this.target, offset, data, srcOffset, byteLength);\n      } else {\n        this.gl.bufferSubData(target, offset, data);\n      }\n\n      this.gl.bindBuffer(target, null);\n      this.debugData = null;\n\n      this._inferType(data);\n\n      return this;\n    }\n  }, {\n    key: \"copyData\",\n    value: function copyData(_ref) {\n      var sourceBuffer = _ref.sourceBuffer,\n          _ref$readOffset = _ref.readOffset,\n          readOffset = _ref$readOffset === void 0 ? 0 : _ref$readOffset,\n          _ref$writeOffset = _ref.writeOffset,\n          writeOffset = _ref$writeOffset === void 0 ? 0 : _ref$writeOffset,\n          size = _ref.size;\n      var gl = this.gl;\n      assertWebGL2Context(gl);\n      gl.bindBuffer(36662, sourceBuffer.handle);\n      gl.bindBuffer(36663, this.handle);\n      gl.copyBufferSubData(36662, 36663, readOffset, writeOffset, size);\n      gl.bindBuffer(36662, null);\n      gl.bindBuffer(36663, null);\n      this.debugData = null;\n      return this;\n    }\n  }, {\n    key: \"getData\",\n    value: function getData() {\n      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref2$dstData = _ref2.dstData,\n          dstData = _ref2$dstData === void 0 ? null : _ref2$dstData,\n          _ref2$srcByteOffset = _ref2.srcByteOffset,\n          srcByteOffset = _ref2$srcByteOffset === void 0 ? 0 : _ref2$srcByteOffset,\n          _ref2$dstOffset = _ref2.dstOffset,\n          dstOffset = _ref2$dstOffset === void 0 ? 0 : _ref2$dstOffset,\n          _ref2$length = _ref2.length,\n          length = _ref2$length === void 0 ? 0 : _ref2$length;\n\n      assertWebGL2Context(this.gl);\n      var ArrayType = getTypedArrayFromGLType(this.accessor.type || 5126, {\n        clamped: false\n      });\n\n      var sourceAvailableElementCount = this._getAvailableElementCount(srcByteOffset);\n\n      var dstElementOffset = dstOffset;\n      var dstAvailableElementCount;\n      var dstElementCount;\n\n      if (dstData) {\n        dstElementCount = dstData.length;\n        dstAvailableElementCount = dstElementCount - dstElementOffset;\n      } else {\n        dstAvailableElementCount = Math.min(sourceAvailableElementCount, length || sourceAvailableElementCount);\n        dstElementCount = dstElementOffset + dstAvailableElementCount;\n      }\n\n      var copyElementCount = Math.min(sourceAvailableElementCount, dstAvailableElementCount);\n      length = length || copyElementCount;\n      assert(length <= copyElementCount);\n      dstData = dstData || new ArrayType(dstElementCount);\n      this.gl.bindBuffer(36662, this.handle);\n      this.gl.getBufferSubData(36662, srcByteOffset, dstData, dstOffset, length);\n      this.gl.bindBuffer(36662, null);\n      return dstData;\n    }\n  }, {\n    key: \"bind\",\n    value: function bind() {\n      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref3$target = _ref3.target,\n          target = _ref3$target === void 0 ? this.target : _ref3$target,\n          _ref3$index = _ref3.index,\n          index = _ref3$index === void 0 ? this.accessor && this.accessor.index : _ref3$index,\n          _ref3$offset = _ref3.offset,\n          offset = _ref3$offset === void 0 ? 0 : _ref3$offset,\n          size = _ref3.size;\n\n      if (target === 35345 || target === 35982) {\n        if (size !== undefined) {\n          this.gl.bindBufferRange(target, index, this.handle, offset, size);\n        } else {\n          assert(offset === 0);\n          this.gl.bindBufferBase(target, index, this.handle);\n        }\n      } else {\n        this.gl.bindBuffer(target, this.handle);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"unbind\",\n    value: function unbind() {\n      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref4$target = _ref4.target,\n          target = _ref4$target === void 0 ? this.target : _ref4$target,\n          _ref4$index = _ref4.index,\n          index = _ref4$index === void 0 ? this.accessor && this.accessor.index : _ref4$index;\n\n      var isIndexedBuffer = target === 35345 || target === 35982;\n\n      if (isIndexedBuffer) {\n        this.gl.bindBufferBase(target, index, null);\n      } else {\n        this.gl.bindBuffer(target, null);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"getDebugData\",\n    value: function getDebugData() {\n      if (!this.debugData) {\n        this.debugData = this.getData({\n          length: Math.min(DEBUG_DATA_LENGTH, this.byteLength)\n        });\n        return {\n          data: this.debugData,\n          changed: true\n        };\n      }\n\n      return {\n        data: this.debugData,\n        changed: false\n      };\n    }\n  }, {\n    key: \"invalidateDebugData\",\n    value: function invalidateDebugData() {\n      this.debugData = null;\n    }\n  }, {\n    key: \"_setData\",\n    value: function _setData(data) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var byteLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : data.byteLength + offset;\n      assert(ArrayBuffer.isView(data));\n\n      this._trackDeallocatedMemory();\n\n      var target = this._getTarget();\n\n      this.gl.bindBuffer(target, this.handle);\n      this.gl.bufferData(target, byteLength, this.usage);\n      this.gl.bufferSubData(target, offset, data);\n      this.gl.bindBuffer(target, null);\n      this.debugData = data.slice(0, DEBUG_DATA_LENGTH);\n      this.bytesUsed = byteLength;\n\n      this._trackAllocatedMemory(byteLength);\n\n      var type = getGLTypeFromTypedArray(data);\n      assert(type);\n      this.setAccessor(new Accessor(this.accessor, {\n        type: type\n      }));\n      return this;\n    }\n  }, {\n    key: \"_setByteLength\",\n    value: function _setByteLength(byteLength) {\n      var usage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.usage;\n      assert(byteLength >= 0);\n\n      this._trackDeallocatedMemory();\n\n      var data = byteLength;\n\n      if (byteLength === 0) {\n        data = new Float32Array(0);\n      }\n\n      var target = this._getTarget();\n\n      this.gl.bindBuffer(target, this.handle);\n      this.gl.bufferData(target, data, usage);\n      this.gl.bindBuffer(target, null);\n      this.usage = usage;\n      this.debugData = null;\n      this.bytesUsed = byteLength;\n\n      this._trackAllocatedMemory(byteLength);\n\n      return this;\n    }\n  }, {\n    key: \"_getTarget\",\n    value: function _getTarget() {\n      return this.gl.webgl2 ? 36663 : this.target;\n    }\n  }, {\n    key: \"_getAvailableElementCount\",\n    value: function _getAvailableElementCount(srcByteOffset) {\n      var ArrayType = getTypedArrayFromGLType(this.accessor.type || 5126, {\n        clamped: false\n      });\n      var sourceElementOffset = srcByteOffset / ArrayType.BYTES_PER_ELEMENT;\n      return this.getElementCount() - sourceElementOffset;\n    }\n  }, {\n    key: \"_inferType\",\n    value: function _inferType(data) {\n      if (!this.accessor.type) {\n        this.setAccessor(new Accessor(this.accessor, {\n          type: getGLTypeFromTypedArray(data)\n        }));\n      }\n    }\n  }, {\n    key: \"_createHandle\",\n    value: function _createHandle() {\n      return this.gl.createBuffer();\n    }\n  }, {\n    key: \"_deleteHandle\",\n    value: function _deleteHandle() {\n      this.gl.deleteBuffer(this.handle);\n\n      this._trackDeallocatedMemory();\n    }\n  }, {\n    key: \"_getParameter\",\n    value: function _getParameter(pname) {\n      this.gl.bindBuffer(this.target, this.handle);\n      var value = this.gl.getBufferParameter(this.target, pname);\n      this.gl.bindBuffer(this.target, null);\n      return value;\n    }\n  }, {\n    key: \"setByteLength\",\n    value: function setByteLength(byteLength) {\n      log.deprecated('setByteLength', 'reallocate')();\n      return this.reallocate(byteLength);\n    }\n  }, {\n    key: \"updateAccessor\",\n    value: function updateAccessor(opts) {\n      log.deprecated('updateAccessor(...)', 'setAccessor(new Accessor(buffer.accessor, ...)')();\n      this.accessor = new Accessor(this.accessor, opts);\n      return this;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      log.deprecated('Buffer.type', 'Buffer.accessor.type')();\n      return this.accessor.type;\n    }\n  }, {\n    key: \"bytes\",\n    get: function get() {\n      log.deprecated('Buffer.bytes', 'Buffer.byteLength')();\n      return this.byteLength;\n    }\n  }]);\n\n  return Buffer;\n}(Resource);\n\nexport { Buffer as default };","map":{"version":3,"sources":["../../../src/classes/buffer.js"],"names":["DEBUG_DATA_LENGTH","DEPRECATED_PROPS","offset","stride","type","size","divisor","normalized","integer","instanced","isInstanced","PROP_CHECKS_INITIALIZE","removedProps","replacedProps","bytes","deprecatedProps","PROP_CHECKS_SET_PROPS","Buffer","Resource","props","Object","accessor","Math","Accessor","ArrayBuffer","data","Number","byteLength","checkProps","srcOffset","assert","target","assertWebGL2Context","sourceBuffer","readOffset","writeOffset","gl","dstData","srcByteOffset","dstOffset","length","ArrayType","getTypedArrayFromGLType","clamped","sourceAvailableElementCount","dstElementOffset","dstElementCount","dstAvailableElementCount","copyElementCount","index","isIndexedBuffer","changed","getGLTypeFromTypedArray","usage","sourceElementOffset","pname","value","log","opts"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport Resource from './resource';\nimport Accessor from './accessor';\nimport {\n  assertWebGL2Context,\n  getGLTypeFromTypedArray,\n  getTypedArrayFromGLType\n} from '../webgl-utils';\nimport {log} from '@luma.gl/gltools';\nimport {assert, checkProps} from '../utils';\n\nconst DEBUG_DATA_LENGTH = 10;\n\n// Shared prop checks for constructor and setProps\nconst DEPRECATED_PROPS = {\n  offset: 'accessor.offset',\n  stride: 'accessor.stride',\n  type: 'accessor.type',\n  size: 'accessor.size',\n  divisor: 'accessor.divisor',\n  normalized: 'accessor.normalized',\n  integer: 'accessor.integer',\n  instanced: 'accessor.divisor',\n  isInstanced: 'accessor.divisor'\n};\n\n// Prop checks for constructor\nconst PROP_CHECKS_INITIALIZE = {\n  removedProps: {},\n  replacedProps: {\n    bytes: 'byteLength'\n  },\n  // new Buffer() with individual accessor props is still used in apps, emit warnings\n  deprecatedProps: DEPRECATED_PROPS\n};\n\n// Prop checks for setProps\nconst PROP_CHECKS_SET_PROPS = {\n  // Buffer.setProps() with individual accessor props is rare => emit errors\n  removedProps: DEPRECATED_PROPS\n};\n\nexport default class Buffer extends Resource {\n  constructor(gl, props = {}) {\n    super(gl, props);\n\n    this.stubRemovedMethods('Buffer', 'v6.0', ['layout', 'setLayout', 'getIndexedParameter']);\n    // this.stubRemovedMethods('Buffer', 'v7.0', ['updateAccessor']);\n\n    // In WebGL1, need to make sure we use GL.ELEMENT_ARRAY_BUFFER when initializing element buffers\n    // otherwise buffer type will lock to generic (non-element) buffer\n    // In WebGL2, we can use GL.COPY_READ_BUFFER which avoids locking the type here\n    this.target = props.target || (this.gl.webgl2 ? GL.COPY_READ_BUFFER : GL.ARRAY_BUFFER);\n\n    this.initialize(props);\n\n    Object.seal(this);\n  }\n\n  // returns number of elements in the buffer (assuming that the full buffer is used)\n  getElementCount(accessor = this.accessor) {\n    return Math.round(this.byteLength / Accessor.getBytesPerElement(accessor));\n  }\n\n  // returns number of vertices in the buffer (assuming that the full buffer is used)\n  getVertexCount(accessor = this.accessor) {\n    return Math.round(this.byteLength / Accessor.getBytesPerVertex(accessor));\n  }\n\n  // Creates and initializes the buffer object's data store.\n  // Signature: `new Buffer(gl, {data: new Float32Array(...)})`\n  // Signature: `new Buffer(gl, new Float32Array(...))`\n  // Signature: `new Buffer(gl, 100)`\n  initialize(props = {}) {\n    // Signature `new Buffer(gl, new Float32Array(...)`\n    if (ArrayBuffer.isView(props)) {\n      props = {data: props};\n    }\n\n    // Signature: `new Buffer(gl, 100)`\n    if (Number.isFinite(props)) {\n      props = {byteLength: props};\n    }\n\n    props = checkProps('Buffer', props, PROP_CHECKS_INITIALIZE);\n\n    // Initialize member fields\n    this.usage = props.usage || GL.STATIC_DRAW;\n    this.debugData = null;\n\n    // Deprecated: Merge main props and accessor\n    this.setAccessor(Object.assign({}, props, props.accessor));\n\n    // Set data: (re)initializes the buffer\n    if (props.data) {\n      this._setData(props.data, props.offset, props.byteLength);\n    } else {\n      this._setByteLength(props.byteLength || 0);\n    }\n\n    return this;\n  }\n\n  setProps(props) {\n    props = checkProps('Buffer', props, PROP_CHECKS_SET_PROPS);\n\n    if ('accessor' in props) {\n      this.setAccessor(props.accessor);\n    }\n\n    return this;\n  }\n\n  // Optionally stores an accessor with the buffer, makes it easier to use it as an attribute later\n  // {type, size = 1, offset = 0, stride = 0, normalized = false, integer = false, divisor = 0}\n  setAccessor(accessor) {\n    // NOTE: From luma.gl v7.0, Accessors have an optional `buffer `field\n    // (mainly to support \"interleaving\")\n    // To avoid confusion, ensure `buffer.accessor` does not have a `buffer.accessor.buffer` field:\n    accessor = Object.assign({}, accessor);\n    delete accessor.buffer;\n\n    // This new statement ensures that an \"accessor object\" is re-packaged as an Accessor instance\n    this.accessor = new Accessor(accessor);\n    return this;\n  }\n\n  // Allocate a bigger GPU buffer (if the current buffer is not big enough).\n  // If a reallocation is triggered it clears the buffer\n  // Returns:\n  //  `true`: buffer was reallocated, data was cleared\n  //  `false`: buffer was big enough, data is intact\n  reallocate(byteLength) {\n    if (byteLength > this.byteLength) {\n      this._setByteLength(byteLength);\n      return true;\n    }\n    this.bytesUsed = byteLength;\n    return false;\n  }\n\n  // Update with new data. Reinitializes the buffer\n  setData(props) {\n    return this.initialize(props);\n  }\n\n  // Updates a subset of a buffer object's data store.\n  // Data (Typed Array or ArrayBuffer), length is inferred unless provided\n  // Offset into buffer\n  // WebGL2 only: Offset into srcData\n  // WebGL2 only: Number of bytes to be copied\n  subData(props) {\n    // Signature: buffer.subData(new Float32Array([...]))\n    if (ArrayBuffer.isView(props)) {\n      props = {data: props};\n    }\n\n    const {data, offset = 0, srcOffset = 0} = props;\n    const byteLength = props.byteLength || props.length;\n\n    assert(data);\n\n    // Create the buffer - binding it here for the first time locks the type\n    // In WebGL2, use GL.COPY_WRITE_BUFFER to avoid locking the type\n    const target = this.gl.webgl2 ? GL.COPY_WRITE_BUFFER : this.target;\n    this.gl.bindBuffer(target, this.handle);\n    // WebGL2: subData supports additional srcOffset and length parameters\n    if (srcOffset !== 0 || byteLength !== undefined) {\n      assertWebGL2Context(this.gl);\n      this.gl.bufferSubData(this.target, offset, data, srcOffset, byteLength);\n    } else {\n      this.gl.bufferSubData(target, offset, data);\n    }\n    this.gl.bindBuffer(target, null);\n\n    // TODO - update local `data` if offsets are right\n    this.debugData = null;\n\n    this._inferType(data);\n\n    return this;\n  }\n\n  // WEBGL2 ONLY: Copies part of the data of another buffer into this buffer\n  copyData({sourceBuffer, readOffset = 0, writeOffset = 0, size}) {\n    const {gl} = this;\n    assertWebGL2Context(gl);\n\n    // Use GL.COPY_READ_BUFFER+GL.COPY_WRITE_BUFFER avoid disturbing other targets and locking type\n    gl.bindBuffer(GL.COPY_READ_BUFFER, sourceBuffer.handle);\n    gl.bindBuffer(GL.COPY_WRITE_BUFFER, this.handle);\n    gl.copyBufferSubData(GL.COPY_READ_BUFFER, GL.COPY_WRITE_BUFFER, readOffset, writeOffset, size);\n    gl.bindBuffer(GL.COPY_READ_BUFFER, null);\n    gl.bindBuffer(GL.COPY_WRITE_BUFFER, null);\n\n    // TODO - update local `data` if offsets are 0\n    this.debugData = null;\n\n    return this;\n  }\n\n  // WEBGL2 ONLY: Reads data from buffer into an ArrayBufferView or SharedArrayBuffer.\n  getData({dstData = null, srcByteOffset = 0, dstOffset = 0, length = 0} = {}) {\n    assertWebGL2Context(this.gl);\n\n    const ArrayType = getTypedArrayFromGLType(this.accessor.type || GL.FLOAT, {clamped: false});\n    const sourceAvailableElementCount = this._getAvailableElementCount(srcByteOffset);\n\n    const dstElementOffset = dstOffset;\n\n    let dstAvailableElementCount;\n    let dstElementCount;\n    if (dstData) {\n      dstElementCount = dstData.length;\n      dstAvailableElementCount = dstElementCount - dstElementOffset;\n    } else {\n      // Allocate ArrayBufferView with enough size to copy all eligible data.\n      dstAvailableElementCount = Math.min(\n        sourceAvailableElementCount,\n        length || sourceAvailableElementCount\n      );\n      dstElementCount = dstElementOffset + dstAvailableElementCount;\n    }\n\n    const copyElementCount = Math.min(sourceAvailableElementCount, dstAvailableElementCount);\n    length = length || copyElementCount;\n    assert(length <= copyElementCount);\n    dstData = dstData || new ArrayType(dstElementCount);\n\n    // Use GL.COPY_READ_BUFFER to avoid disturbing other targets and locking type\n    this.gl.bindBuffer(GL.COPY_READ_BUFFER, this.handle);\n    this.gl.getBufferSubData(GL.COPY_READ_BUFFER, srcByteOffset, dstData, dstOffset, length);\n    this.gl.bindBuffer(GL.COPY_READ_BUFFER, null);\n\n    // TODO - update local `data` if offsets are 0\n    return dstData;\n  }\n\n  /**\n   * Binds a buffer to a given binding point (target).\n   *   GL.TRANSFORM_FEEDBACK_BUFFER and GL.UNIFORM_BUFFER take an index, and optionally a range.\n   *   - GL.TRANSFORM_FEEDBACK_BUFFER and GL.UNIFORM_BUFFER need an index to affect state\n   *   - GL.UNIFORM_BUFFER: `offset` must be aligned to GL.UNIFORM_BUFFER_OFFSET_ALIGNMENT.\n   *   - GL.UNIFORM_BUFFER: `size` must be a minimum of GL.UNIFORM_BLOCK_SIZE_DATA.\n   */\n  bind({\n    target = this.target, // target for the bind operation\n    index = this.accessor && this.accessor.index, // index = index of target (indexed bind point)\n    offset = 0,\n    size\n  } = {}) {\n    // NOTE: While GL.TRANSFORM_FEEDBACK_BUFFER and GL.UNIFORM_BUFFER could\n    // be used as direct binding points, they will not affect transform feedback or\n    // uniform buffer state. Instead indexed bindings need to be made.\n    if (target === GL.UNIFORM_BUFFER || target === GL.TRANSFORM_FEEDBACK_BUFFER) {\n      if (size !== undefined) {\n        this.gl.bindBufferRange(target, index, this.handle, offset, size);\n      } else {\n        assert(offset === 0); // Make sure offset wasn't supplied\n        this.gl.bindBufferBase(target, index, this.handle);\n      }\n    } else {\n      this.gl.bindBuffer(target, this.handle);\n    }\n\n    return this;\n  }\n\n  unbind({target = this.target, index = this.accessor && this.accessor.index} = {}) {\n    const isIndexedBuffer = target === GL.UNIFORM_BUFFER || target === GL.TRANSFORM_FEEDBACK_BUFFER;\n    if (isIndexedBuffer) {\n      this.gl.bindBufferBase(target, index, null);\n    } else {\n      this.gl.bindBuffer(target, null);\n    }\n    return this;\n  }\n\n  // PROTECTED METHODS (INTENDED FOR USE BY OTHER FRAMEWORK CODE ONLY)\n\n  // Returns a short initial data array\n  getDebugData() {\n    if (!this.debugData) {\n      this.debugData = this.getData({length: Math.min(DEBUG_DATA_LENGTH, this.byteLength)});\n      return {data: this.debugData, changed: true};\n    }\n    return {data: this.debugData, changed: false};\n  }\n\n  invalidateDebugData() {\n    this.debugData = null;\n  }\n\n  // PRIVATE METHODS\n\n  // Allocate a new buffer and initialize to contents of typed array\n  _setData(data, offset = 0, byteLength = data.byteLength + offset) {\n    assert(ArrayBuffer.isView(data));\n\n    this._trackDeallocatedMemory();\n\n    const target = this._getTarget();\n    this.gl.bindBuffer(target, this.handle);\n    this.gl.bufferData(target, byteLength, this.usage);\n    this.gl.bufferSubData(target, offset, data);\n    this.gl.bindBuffer(target, null);\n\n    this.debugData = data.slice(0, DEBUG_DATA_LENGTH);\n    this.bytesUsed = byteLength;\n\n    this._trackAllocatedMemory(byteLength);\n\n    // infer GL type from supplied typed array\n    const type = getGLTypeFromTypedArray(data);\n    assert(type);\n    this.setAccessor(new Accessor(this.accessor, {type}));\n    return this;\n  }\n\n  // Allocate a GPU buffer of specified size.\n  _setByteLength(byteLength, usage = this.usage) {\n    assert(byteLength >= 0);\n\n    this._trackDeallocatedMemory();\n\n    // Workaround needed for Safari (#291):\n    // gl.bufferData with size equal to 0 crashes. Instead create zero sized array.\n    let data = byteLength;\n    if (byteLength === 0) {\n      data = new Float32Array(0);\n    }\n\n    const target = this._getTarget();\n    this.gl.bindBuffer(target, this.handle);\n    this.gl.bufferData(target, data, usage);\n    this.gl.bindBuffer(target, null);\n\n    this.usage = usage;\n    this.debugData = null;\n    this.bytesUsed = byteLength;\n\n    this._trackAllocatedMemory(byteLength);\n\n    return this;\n  }\n\n  // Binding a buffer for the first time locks the type\n  // In WebGL2, use GL.COPY_WRITE_BUFFER to avoid locking the type\n  _getTarget() {\n    return this.gl.webgl2 ? GL.COPY_WRITE_BUFFER : this.target;\n  }\n\n  _getAvailableElementCount(srcByteOffset) {\n    const ArrayType = getTypedArrayFromGLType(this.accessor.type || GL.FLOAT, {clamped: false});\n    const sourceElementOffset = srcByteOffset / ArrayType.BYTES_PER_ELEMENT;\n    return this.getElementCount() - sourceElementOffset;\n  }\n\n  // Automatically infers type from typed array passed to setData\n  // Note: No longer that useful, since type is now autodeduced from the compiled shaders\n  _inferType(data) {\n    if (!this.accessor.type) {\n      this.setAccessor(new Accessor(this.accessor, {type: getGLTypeFromTypedArray(data)}));\n    }\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createBuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteBuffer(this.handle);\n    this._trackDeallocatedMemory();\n  }\n\n  _getParameter(pname) {\n    this.gl.bindBuffer(this.target, this.handle);\n    const value = this.gl.getBufferParameter(this.target, pname);\n    this.gl.bindBuffer(this.target, null);\n    return value;\n  }\n\n  // DEPRECATIONS - v7.0\n  get type() {\n    log.deprecated('Buffer.type', 'Buffer.accessor.type')();\n    return this.accessor.type;\n  }\n\n  get bytes() {\n    log.deprecated('Buffer.bytes', 'Buffer.byteLength')();\n    return this.byteLength;\n  }\n\n  // DEPRECATIONS - v6.0\n  // Deprecated in v6.x, but not warnings not properly implemented\n  setByteLength(byteLength) {\n    log.deprecated('setByteLength', 'reallocate')();\n    return this.reallocate(byteLength);\n  }\n\n  // Deprecated in v6.x, but not warnings not properly implemented\n  updateAccessor(opts) {\n    log.deprecated('updateAccessor(...)', 'setAccessor(new Accessor(buffer.accessor, ...)')();\n    this.accessor = new Accessor(this.accessor, opts);\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}