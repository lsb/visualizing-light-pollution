{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { assert } from 'math.gl';\nimport PerspectiveOffCenterFrustum from './perspective-off-center-frustum';\n\nvar defined = function defined(val) {\n  return val !== null && typeof val !== 'undefined';\n};\n\nvar PerspectiveFrustum = function () {\n  function PerspectiveFrustum() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, PerspectiveFrustum);\n\n    options = _objectSpread({\n      near: 1.0,\n      far: 500000000.0,\n      xOffset: 0.0,\n      yOffset: 0.0\n    }, options);\n    this._offCenterFrustum = new PerspectiveOffCenterFrustum();\n    this.fov = options.fov;\n    this._fov = undefined;\n    this._fovy = undefined;\n    this._sseDenominator = undefined;\n    this.aspectRatio = options.aspectRatio;\n    this._aspectRatio = undefined;\n    this.near = options.near;\n    this._near = this.near;\n    this.far = options.far;\n    this._far = this.far;\n    this.xOffset = options.xOffset;\n    this._xOffset = this.xOffset;\n    this.yOffset = options.yOffset;\n    this._yOffset = this.yOffset;\n  }\n\n  _createClass(PerspectiveFrustum, [{\n    key: \"clone\",\n    value: function clone() {\n      return new PerspectiveFrustum({\n        aspectRatio: this.aspectRatio,\n        fov: this.fov,\n        near: this.near,\n        far: this.far\n      });\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      if (!defined(other) || !(other instanceof PerspectiveFrustum)) {\n        return false;\n      }\n\n      update(this);\n      update(other);\n      return this.fov === other.fov && this.aspectRatio === other.aspectRatio && this.near === other.near && this.far === other.far && this._offCenterFrustum.equals(other._offCenterFrustum);\n    }\n  }, {\n    key: \"computeCullingVolume\",\n    value: function computeCullingVolume(position, direction, up) {\n      update(this);\n      return this._offCenterFrustum.computeCullingVolume(position, direction, up);\n    }\n  }, {\n    key: \"getPixelDimensions\",\n    value: function getPixelDimensions(drawingBufferWidth, drawingBufferHeight, distance, result) {\n      update(this);\n      return this._offCenterFrustum.getPixelDimensions(drawingBufferWidth, drawingBufferHeight, distance, result);\n    }\n  }, {\n    key: \"projectionMatrix\",\n    get: function get() {\n      update(this);\n      return this._offCenterFrustum.projectionMatrix;\n    }\n  }, {\n    key: \"infiniteProjectionMatrix\",\n    get: function get() {\n      update(this);\n      return this._offCenterFrustum.infiniteProjectionMatrix;\n    }\n  }, {\n    key: \"fovy\",\n    get: function get() {\n      update(this);\n      return this._fovy;\n    }\n  }, {\n    key: \"sseDenominator\",\n    get: function get() {\n      update(this);\n      return this._sseDenominator;\n    }\n  }]);\n\n  return PerspectiveFrustum;\n}();\n\nexport { PerspectiveFrustum as default };\n\nfunction update(frustum) {\n  assert(Number.isFinite(frustum.fov) && Number.isFinite(frustum.aspectRatio) && Number.isFinite(frustum.near) && Number.isFinite(frustum.far));\n  var f = frustum._offCenterFrustum;\n\n  if (frustum.fov !== frustum._fov || frustum.aspectRatio !== frustum._aspectRatio || frustum.near !== frustum._near || frustum.far !== frustum._far || frustum.xOffset !== frustum._xOffset || frustum.yOffset !== frustum._yOffset) {\n    assert(frustum.fov >= 0 && frustum.fov < Math.PI);\n    assert(frustum.aspectRatio > 0);\n    assert(frustum.near >= 0 && frustum.near < frustum.far);\n    frustum._aspectRatio = frustum.aspectRatio;\n    frustum._fov = frustum.fov;\n    frustum._fovy = frustum.aspectRatio <= 1 ? frustum.fov : Math.atan(Math.tan(frustum.fov * 0.5) / frustum.aspectRatio) * 2.0;\n    frustum._near = frustum.near;\n    frustum._far = frustum.far;\n    frustum._sseDenominator = 2.0 * Math.tan(0.5 * frustum._fovy);\n    frustum._xOffset = frustum.xOffset;\n    frustum._yOffset = frustum.yOffset;\n    f.top = frustum.near * Math.tan(0.5 * frustum._fovy);\n    f.bottom = -f.top;\n    f.right = frustum.aspectRatio * f.top;\n    f.left = -f.right;\n    f.near = frustum.near;\n    f.far = frustum.far;\n    f.right += frustum.xOffset;\n    f.left += frustum.xOffset;\n    f.top += frustum.yOffset;\n    f.bottom += frustum.yOffset;\n  }\n}","map":{"version":3,"sources":["../../../src/lib/perspective-frustum.js"],"names":["defined","val","PerspectiveFrustum","options","near","far","xOffset","yOffset","aspectRatio","fov","other","update","position","direction","up","drawingBufferWidth","drawingBufferHeight","distance","result","assert","Number","frustum","f","Math"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n// Note: This class is still an experimental export, mainly used by other test cases\n// - It has not been fully adapted to math.gl conventions\n// - Documentation has not been ported\n\nimport {assert} from 'math.gl';\nimport PerspectiveOffCenterFrustum from './perspective-off-center-frustum';\n\nconst defined = val => val !== null && typeof val !== 'undefined';\n\n/**\n * The viewing frustum is defined by 6 planes.\n * Each plane is represented by a {@link Vector4} object, where the x, y, and z components\n * define the unit vector normal to the plane, and the w component is the distance of the\n * plane from the origin/camera position.\n *\n * @alias PerspectiveFrustum\n * @constructor\n *\n * @param {Object} [options] An object with the following properties:\n * @param {Number} [options.fov] The angle of the field of view (FOV), in radians.\n * @param {Number} [options.aspectRatio] The aspect ratio of the frustum's width to it's height.\n * @param {Number} [options.near=1.0] The distance of the near plane.\n * @param {Number} [options.far=500000000.0] The distance of the far plane.\n * @param {Number} [options.xOffset=0.0] The offset in the x direction.\n * @param {Number} [options.yOffset=0.0] The offset in the y direction.\n *\n * @example\n * var frustum = new PerspectiveFrustum({\n *     fov : Math.PI_OVER_THREE,\n *     aspectRatio : canvas.clientWidth / canvas.clientHeight\n *     near : 1.0,\n *     far : 1000.0\n * });\n *\n * @see PerspectiveOffCenterFrustum\n */\nexport default class PerspectiveFrustum {\n  constructor(options = {}) {\n    options = {\n      near: 1.0,\n      far: 500000000.0,\n      xOffset: 0.0,\n      yOffset: 0.0,\n      ...options\n    };\n\n    this._offCenterFrustum = new PerspectiveOffCenterFrustum();\n\n    /**\n     * The angle of the field of view (FOV), in radians.  This angle will be used\n     * as the horizontal FOV if the width is greater than the height, otherwise\n     * it will be the vertical FOV.\n     * @type {Number}\n     * @default undefined\n     */\n    this.fov = options.fov;\n    this._fov = undefined;\n    this._fovy = undefined;\n\n    this._sseDenominator = undefined;\n\n    /**\n     * The aspect ratio of the frustum's width to it's height.\n     * @type {Number}\n     * @default undefined\n     */\n    this.aspectRatio = options.aspectRatio;\n    this._aspectRatio = undefined;\n\n    /**\n     * The distance of the near plane.\n     * @type {Number}\n     * @default 1.0\n     */\n    this.near = options.near;\n    this._near = this.near;\n\n    /**\n     * The distance of the far plane.\n     * @type {Number}\n     * @default 500000000.0\n     */\n    this.far = options.far;\n    this._far = this.far;\n\n    /**\n     * Offsets the frustum in the x direction.\n     * @type {Number}\n     * @default 0.0\n     */\n    this.xOffset = options.xOffset;\n    this._xOffset = this.xOffset;\n\n    /**\n     * Offsets the frustum in the y direction.\n     * @type {Number}\n     * @default 0.0\n     */\n    this.yOffset = options.yOffset;\n    this._yOffset = this.yOffset;\n  }\n\n  /**\n   * Returns a duplicate of a PerspectiveFrustum instance.\n   *\n   * @param {PerspectiveFrustum} [result] The object onto which to store the result.\n   * @returns {PerspectiveFrustum} The modified result parameter or a new PerspectiveFrustum instance if one was not provided.\n   */\n  clone() {\n    return new PerspectiveFrustum({\n      aspectRatio: this.aspectRatio,\n      fov: this.fov,\n      near: this.near,\n      far: this.far\n    });\n  }\n\n  /**\n   * Compares the provided PerspectiveFrustum componentwise and returns\n   * <code>true</code> if they are equal, <code>false</code> otherwise.\n   *\n   * @param {PerspectiveFrustum} [other] The right hand side PerspectiveFrustum.\n   * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n   */\n  equals(other) {\n    if (!defined(other) || !(other instanceof PerspectiveFrustum)) {\n      return false;\n    }\n\n    update(this);\n    update(other);\n\n    return (\n      this.fov === other.fov &&\n      this.aspectRatio === other.aspectRatio &&\n      this.near === other.near &&\n      this.far === other.far &&\n      this._offCenterFrustum.equals(other._offCenterFrustum)\n    );\n  }\n\n  /**\n   * Gets the perspective projection matrix computed from the view frustum.\n   * @memberof PerspectiveFrustum.prototype\n   * @type {Matrix4}\n   * @readonly\n   *\n   * @see PerspectiveFrustum#infiniteProjectionMatrix\n   */\n  get projectionMatrix() {\n    update(this);\n    return this._offCenterFrustum.projectionMatrix;\n  }\n\n  /**\n   * The perspective projection matrix computed from the view frustum with an infinite far plane.\n   * @memberof PerspectiveFrustum.prototype\n   * @type {Matrix4}\n   * @readonly\n   *\n   * @see PerspectiveFrustum#projectionMatrix\n   */\n  get infiniteProjectionMatrix() {\n    update(this);\n    return this._offCenterFrustum.infiniteProjectionMatrix;\n  }\n\n  /**\n   * Gets the angle of the vertical field of view, in radians.\n   * @memberof PerspectiveFrustum.prototype\n   * @type {Number}\n   * @readonly\n   * @default undefined\n   */\n  get fovy() {\n    update(this);\n    return this._fovy;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get sseDenominator() {\n    update(this);\n    return this._sseDenominator;\n  }\n\n  /**\n   * Creates a culling volume for this frustum.\n   *\n   * @param {Vector3} position The eye position.\n   * @param {Vector3} direction The view direction.\n   * @param {Vector3} up The up direction.\n   * @returns {CullingVolume} A culling volume at the given position and orientation.\n   *\n   * @example\n   * // Check if a bounding volume intersects the frustum.\n   * var cullingVolume = frustum.computeCullingVolume(cameraPosition, cameraDirection, cameraUp);\n   * var intersect = cullingVolume.computeVisibility(boundingVolume);\n   */\n  computeCullingVolume(position, direction, up) {\n    update(this);\n    return this._offCenterFrustum.computeCullingVolume(position, direction, up);\n  }\n\n  /**\n   * Returns the pixel's width and height in meters.\n   *\n   * @param {Number} drawingBufferWidth The width of the drawing buffer.\n   * @param {Number} drawingBufferHeight The height of the drawing buffer.\n   * @param {Number} distance The distance to the near plane in meters.\n   * @param {Vector2} result The object onto which to store the result.\n   * @returns {Vector2} The modified result parameter or a new instance of {@link Vector2} with the pixel's width and height in the x and y properties, respectively.\n   *\n   * @exception {DeveloperError} drawingBufferWidth must be greater than zero.\n   * @exception {DeveloperError} drawingBufferHeight must be greater than zero.\n   *\n   * @example\n   * // Example 1\n   * // Get the width and height of a pixel.\n   * var pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, 1.0, new Vector2());\n   *\n   * @example\n   * // Example 2\n   * // Get the width and height of a pixel if the near plane was set to 'distance'.\n   * // For example, get the size of a pixel of an image on a billboard.\n   * var position = camera.position;\n   * var direction = camera.direction;\n   * var toCenter = Vector3.subtract(primitive.boundingVolume.center, position, new Vector3());      // vector from camera to a primitive\n   * var toCenterProj = Vector3.multiplyByScalar(direction, Vector3.dot(direction, toCenter), new Vector3()); // project vector onto camera direction vector\n   * var distance = Vector3.magnitude(toCenterProj);\n   * var pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, distance, new Vector2());\n   */\n  getPixelDimensions(drawingBufferWidth, drawingBufferHeight, distance, result) {\n    update(this);\n    return this._offCenterFrustum.getPixelDimensions(\n      drawingBufferWidth,\n      drawingBufferHeight,\n      distance,\n      result\n    );\n  }\n}\n\n// eslint-disable-next-line complexity, max-statements\nfunction update(frustum) {\n  assert(\n    Number.isFinite(frustum.fov) &&\n      Number.isFinite(frustum.aspectRatio) &&\n      Number.isFinite(frustum.near) &&\n      Number.isFinite(frustum.far)\n  );\n  // 'fov, aspectRatio, near, or far parameters are not set.'\n\n  const f = frustum._offCenterFrustum;\n\n  if (\n    frustum.fov !== frustum._fov ||\n    frustum.aspectRatio !== frustum._aspectRatio ||\n    frustum.near !== frustum._near ||\n    frustum.far !== frustum._far ||\n    frustum.xOffset !== frustum._xOffset ||\n    frustum.yOffset !== frustum._yOffset\n  ) {\n    assert(frustum.fov >= 0 && frustum.fov < Math.PI);\n    // throw new DeveloperError('fov must be in the range [0, PI).');\n\n    assert(frustum.aspectRatio > 0);\n    // throw new DeveloperError('aspectRatio must be positive.');\n\n    assert(frustum.near >= 0 && frustum.near < frustum.far);\n    // throw new DeveloperError('near must be greater than zero and less than far.');\n\n    frustum._aspectRatio = frustum.aspectRatio;\n    frustum._fov = frustum.fov;\n    frustum._fovy =\n      frustum.aspectRatio <= 1\n        ? frustum.fov\n        : Math.atan(Math.tan(frustum.fov * 0.5) / frustum.aspectRatio) * 2.0;\n    frustum._near = frustum.near;\n    frustum._far = frustum.far;\n    frustum._sseDenominator = 2.0 * Math.tan(0.5 * frustum._fovy);\n    frustum._xOffset = frustum.xOffset;\n    frustum._yOffset = frustum.yOffset;\n\n    f.top = frustum.near * Math.tan(0.5 * frustum._fovy);\n    f.bottom = -f.top;\n    f.right = frustum.aspectRatio * f.top;\n    f.left = -f.right;\n    f.near = frustum.near;\n    f.far = frustum.far;\n\n    f.right += frustum.xOffset;\n    f.left += frustum.xOffset;\n    f.top += frustum.yOffset;\n    f.bottom += frustum.yOffset;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}