{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { checkVector, deprecated } from '../lib/validators';\nimport Matrix from './base/matrix';\nimport { vec2_transformMat4AsVector, vec3_transformMat4AsVector } from '../lib/gl-matrix-extras';\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\nimport * as vec4 from 'gl-matrix/vec4';\nvar IDENTITY = Object.freeze([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\nvar ZERO = Object.freeze([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\nvar INDICES = Object.freeze({\n  COL0ROW0: 0,\n  COL0ROW1: 1,\n  COL0ROW2: 2,\n  COL0ROW3: 3,\n  COL1ROW0: 4,\n  COL1ROW1: 5,\n  COL1ROW2: 6,\n  COL1ROW3: 7,\n  COL2ROW0: 8,\n  COL2ROW1: 9,\n  COL2ROW2: 10,\n  COL2ROW3: 11,\n  COL3ROW0: 12,\n  COL3ROW1: 13,\n  COL3ROW2: 14,\n  COL3ROW3: 15\n});\nvar constants = {};\n\nvar Matrix4 = function (_Matrix) {\n  _inherits(Matrix4, _Matrix);\n\n  _createClass(Matrix4, [{\n    key: \"INDICES\",\n    get: function get() {\n      return INDICES;\n    }\n  }, {\n    key: \"ELEMENTS\",\n    get: function get() {\n      return 16;\n    }\n  }, {\n    key: \"RANK\",\n    get: function get() {\n      return 4;\n    }\n  }], [{\n    key: \"IDENTITY\",\n    get: function get() {\n      constants.IDENTITY = constants.IDENTITY || Object.freeze(new Matrix4(IDENTITY));\n      return constants.IDENTITY;\n    }\n  }, {\n    key: \"ZERO\",\n    get: function get() {\n      constants.ZERO = constants.ZERO || Object.freeze(new Matrix4(ZERO));\n      return constants.ZERO;\n    }\n  }]);\n\n  function Matrix4(array) {\n    var _this;\n\n    _classCallCheck(this, Matrix4);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Matrix4).call(this, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0));\n\n    if (arguments.length === 1 && Array.isArray(array)) {\n      _this.copy(array);\n    } else {\n      _this.identity();\n    }\n\n    return _this;\n  }\n\n  _createClass(Matrix4, [{\n    key: \"copy\",\n    value: function copy(array) {\n      this[0] = array[0];\n      this[1] = array[1];\n      this[2] = array[2];\n      this[3] = array[3];\n      this[4] = array[4];\n      this[5] = array[5];\n      this[6] = array[6];\n      this[7] = array[7];\n      this[8] = array[8];\n      this[9] = array[9];\n      this[10] = array[10];\n      this[11] = array[11];\n      this[12] = array[12];\n      this[13] = array[13];\n      this[14] = array[14];\n      this[15] = array[15];\n      return this.check();\n    }\n  }, {\n    key: \"set\",\n    value: function set(m00, m10, m20, m30, m01, m11, m21, m31, m02, m12, m22, m32, m03, m13, m23, m33) {\n      this[0] = m00;\n      this[1] = m10;\n      this[2] = m20;\n      this[3] = m30;\n      this[4] = m01;\n      this[5] = m11;\n      this[6] = m21;\n      this[7] = m31;\n      this[8] = m02;\n      this[9] = m12;\n      this[10] = m22;\n      this[11] = m32;\n      this[12] = m03;\n      this[13] = m13;\n      this[14] = m23;\n      this[15] = m33;\n      return this.check();\n    }\n  }, {\n    key: \"setRowMajor\",\n    value: function setRowMajor(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n      this[0] = m00;\n      this[1] = m10;\n      this[2] = m20;\n      this[3] = m30;\n      this[4] = m01;\n      this[5] = m11;\n      this[6] = m21;\n      this[7] = m31;\n      this[8] = m02;\n      this[9] = m12;\n      this[10] = m22;\n      this[11] = m32;\n      this[12] = m03;\n      this[13] = m13;\n      this[14] = m23;\n      this[15] = m33;\n      return this.check();\n    }\n  }, {\n    key: \"toRowMajor\",\n    value: function toRowMajor(result) {\n      result[0] = this[0];\n      result[1] = this[4];\n      result[2] = this[8];\n      result[3] = this[12];\n      result[4] = this[1];\n      result[5] = this[5];\n      result[6] = this[9];\n      result[7] = this[13];\n      result[8] = this[2];\n      result[9] = this[6];\n      result[10] = this[10];\n      result[11] = this[14];\n      result[12] = this[3];\n      result[13] = this[7];\n      result[14] = this[11];\n      result[15] = this[15];\n      return result;\n    }\n  }, {\n    key: \"identity\",\n    value: function identity() {\n      return this.copy(IDENTITY);\n    }\n  }, {\n    key: \"fromQuaternion\",\n    value: function fromQuaternion(q) {\n      mat4.fromQuat(this, q);\n      return this.check();\n    }\n  }, {\n    key: \"frustum\",\n    value: function frustum(_ref) {\n      var left = _ref.left,\n          right = _ref.right,\n          bottom = _ref.bottom,\n          top = _ref.top,\n          near = _ref.near,\n          far = _ref.far;\n\n      if (far === Infinity) {\n        Matrix4._computeInfinitePerspectiveOffCenter(this, left, right, bottom, top, near);\n      } else {\n        mat4.frustum(this, left, right, bottom, top, near, far);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"lookAt\",\n    value: function lookAt(eye, center, up) {\n      if (arguments.length === 1) {\n        var _eye = eye;\n        eye = _eye.eye;\n        center = _eye.center;\n        up = _eye.up;\n      }\n\n      center = center || [0, 0, 0];\n      up = up || [0, 1, 0];\n      mat4.lookAt(this, eye, center, up);\n      return this.check();\n    }\n  }, {\n    key: \"ortho\",\n    value: function ortho(_ref2) {\n      var left = _ref2.left,\n          right = _ref2.right,\n          bottom = _ref2.bottom,\n          top = _ref2.top,\n          _ref2$near = _ref2.near,\n          near = _ref2$near === void 0 ? 0.1 : _ref2$near,\n          _ref2$far = _ref2.far,\n          far = _ref2$far === void 0 ? 500 : _ref2$far;\n      mat4.ortho(this, left, right, bottom, top, near, far);\n      return this.check();\n    }\n  }, {\n    key: \"orthographic\",\n    value: function orthographic(_ref3) {\n      var _ref3$fovy = _ref3.fovy,\n          fovy = _ref3$fovy === void 0 ? 45 * Math.PI / 180 : _ref3$fovy,\n          _ref3$aspect = _ref3.aspect,\n          aspect = _ref3$aspect === void 0 ? 1 : _ref3$aspect,\n          _ref3$focalDistance = _ref3.focalDistance,\n          focalDistance = _ref3$focalDistance === void 0 ? 1 : _ref3$focalDistance,\n          _ref3$near = _ref3.near,\n          near = _ref3$near === void 0 ? 0.1 : _ref3$near,\n          _ref3$far = _ref3.far,\n          far = _ref3$far === void 0 ? 500 : _ref3$far;\n\n      if (fovy > Math.PI * 2) {\n        throw Error('radians');\n      }\n\n      var halfY = fovy / 2;\n      var top = focalDistance * Math.tan(halfY);\n      var right = top * aspect;\n      return new Matrix4().ortho({\n        left: -right,\n        right: right,\n        bottom: -top,\n        top: top,\n        near: near,\n        far: far\n      });\n    }\n  }, {\n    key: \"perspective\",\n    value: function perspective() {\n      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          fovy = _ref4.fovy,\n          _ref4$fov = _ref4.fov,\n          fov = _ref4$fov === void 0 ? 45 * Math.PI / 180 : _ref4$fov,\n          _ref4$aspect = _ref4.aspect,\n          aspect = _ref4$aspect === void 0 ? 1 : _ref4$aspect,\n          _ref4$near = _ref4.near,\n          near = _ref4$near === void 0 ? 0.1 : _ref4$near,\n          _ref4$far = _ref4.far,\n          far = _ref4$far === void 0 ? 500 : _ref4$far;\n\n      fovy = fovy || fov;\n\n      if (fovy > Math.PI * 2) {\n        throw Error('radians');\n      }\n\n      mat4.perspective(this, fovy, aspect, near, far);\n      return this.check();\n    }\n  }, {\n    key: \"determinant\",\n    value: function determinant() {\n      return mat4.determinant(this);\n    }\n  }, {\n    key: \"getScale\",\n    value: function getScale() {\n      var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [-0, -0, -0];\n      result[0] = Math.sqrt(this[0] * this[0] + this[1] * this[1] + this[2] * this[2]);\n      result[1] = Math.sqrt(this[4] * this[4] + this[5] * this[5] + this[6] * this[6]);\n      result[2] = Math.sqrt(this[8] * this[8] + this[9] * this[9] + this[10] * this[10]);\n      return result;\n    }\n  }, {\n    key: \"getTranslation\",\n    value: function getTranslation() {\n      var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [-0, -0, -0];\n      result[0] = this[12];\n      result[1] = this[13];\n      result[2] = this[14];\n      return result;\n    }\n  }, {\n    key: \"getRotation\",\n    value: function getRotation() {\n      var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];\n      var scaleResult = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var scale = this.getScale(scaleResult || [-0, -0, -0]);\n      var inverseScale0 = 1 / scale[0];\n      var inverseScale1 = 1 / scale[1];\n      var inverseScale2 = 1 / scale[2];\n      result[0] = this[0] * inverseScale0;\n      result[1] = this[1] * inverseScale1;\n      result[2] = this[2] * inverseScale2;\n      result[3] = 0;\n      result[4] = this[4] * inverseScale0;\n      result[5] = this[5] * inverseScale1;\n      result[6] = this[6] * inverseScale2;\n      result[7] = 0;\n      result[8] = this[8] * inverseScale0;\n      result[9] = this[9] * inverseScale1;\n      result[10] = this[10] * inverseScale2;\n      result[11] = 0;\n      result[12] = 0;\n      result[13] = 0;\n      result[14] = 0;\n      result[15] = 1;\n      return result;\n    }\n  }, {\n    key: \"getRotationMatrix3\",\n    value: function getRotationMatrix3() {\n      var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [-0, -0, -0, -0, -0, -0, -0, -0, -0];\n      var scaleResult = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var scale = this.getScale(scaleResult || [-0, -0, -0]);\n      var inverseScale0 = 1 / scale[0];\n      var inverseScale1 = 1 / scale[1];\n      var inverseScale2 = 1 / scale[2];\n      result[0] = this[0] * inverseScale0;\n      result[1] = this[1] * inverseScale1;\n      result[2] = this[2] * inverseScale2;\n      result[3] = this[4] * inverseScale0;\n      result[4] = this[5] * inverseScale1;\n      result[5] = this[6] * inverseScale2;\n      result[6] = this[8] * inverseScale0;\n      result[7] = this[9] * inverseScale1;\n      result[8] = this[10] * inverseScale2;\n      return result;\n    }\n  }, {\n    key: \"transpose\",\n    value: function transpose() {\n      mat4.transpose(this, this);\n      return this.check();\n    }\n  }, {\n    key: \"invert\",\n    value: function invert() {\n      mat4.invert(this, this);\n      return this.check();\n    }\n  }, {\n    key: \"multiplyLeft\",\n    value: function multiplyLeft(a) {\n      mat4.multiply(this, a, this);\n      return this.check();\n    }\n  }, {\n    key: \"multiplyRight\",\n    value: function multiplyRight(a) {\n      mat4.multiply(this, this, a);\n      return this.check();\n    }\n  }, {\n    key: \"rotateX\",\n    value: function rotateX(radians) {\n      mat4.rotateX(this, this, radians);\n      return this.check();\n    }\n  }, {\n    key: \"rotateY\",\n    value: function rotateY(radians) {\n      mat4.rotateY(this, this, radians);\n      return this.check();\n    }\n  }, {\n    key: \"rotateZ\",\n    value: function rotateZ(radians) {\n      mat4.rotateZ(this, this, radians);\n      return this.check();\n    }\n  }, {\n    key: \"rotateXYZ\",\n    value: function rotateXYZ(_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 3),\n          rx = _ref6[0],\n          ry = _ref6[1],\n          rz = _ref6[2];\n\n      return this.rotateX(rx).rotateY(ry).rotateZ(rz);\n    }\n  }, {\n    key: \"rotateAxis\",\n    value: function rotateAxis(radians, axis) {\n      mat4.rotate(this, this, radians, axis);\n      return this.check();\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(factor) {\n      if (Array.isArray(factor)) {\n        mat4.scale(this, this, factor);\n      } else {\n        mat4.scale(this, this, [factor, factor, factor]);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"translate\",\n    value: function translate(vec) {\n      mat4.translate(this, this, vec);\n      return this.check();\n    }\n  }, {\n    key: \"transform\",\n    value: function transform(vector, result) {\n      if (vector.length === 4) {\n        result = vec4.transformMat4(result || [-0, -0, -0, -0], vector, this);\n        checkVector(result, 4);\n        return result;\n      }\n\n      return this.transformAsPoint(vector, result);\n    }\n  }, {\n    key: \"transformAsPoint\",\n    value: function transformAsPoint(vector, result) {\n      var length = vector.length;\n\n      switch (length) {\n        case 2:\n          result = vec2.transformMat4(result || [-0, -0], vector, this);\n          break;\n\n        case 3:\n          result = vec3.transformMat4(result || [-0, -0, -0], vector, this);\n          break;\n\n        default:\n          throw new Error('Illegal vector');\n      }\n\n      checkVector(result, vector.length);\n      return result;\n    }\n  }, {\n    key: \"transformAsVector\",\n    value: function transformAsVector(vector, result) {\n      switch (vector.length) {\n        case 2:\n          result = vec2_transformMat4AsVector(result || [-0, -0], vector, this);\n          break;\n\n        case 3:\n          result = vec3_transformMat4AsVector(result || [-0, -0, -0], vector, this);\n          break;\n\n        default:\n          throw new Error('Illegal vector');\n      }\n\n      checkVector(result, vector.length);\n      return result;\n    }\n  }, {\n    key: \"makeRotationX\",\n    value: function makeRotationX(radians) {\n      return this.identity().rotateX(radians);\n    }\n  }, {\n    key: \"makeTranslation\",\n    value: function makeTranslation(x, y, z) {\n      return this.identity().translate([x, y, z]);\n    }\n  }, {\n    key: \"transformPoint\",\n    value: function transformPoint(vector, result) {\n      deprecated('Matrix4.transformPoint', '3.0');\n      return this.transformAsPoint(vector, result);\n    }\n  }, {\n    key: \"transformVector\",\n    value: function transformVector(vector, result) {\n      deprecated('Matrix4.transformVector', '3.0');\n      return this.transformAsPoint(vector, result);\n    }\n  }, {\n    key: \"transformDirection\",\n    value: function transformDirection(vector, result) {\n      deprecated('Matrix4.transformDirection', '3.0');\n      return this.transformAsVector(vector, result);\n    }\n  }], [{\n    key: \"_computeInfinitePerspectiveOffCenter\",\n    value: function _computeInfinitePerspectiveOffCenter(result, left, right, bottom, top, near) {\n      var column0Row0 = 2.0 * near / (right - left);\n      var column1Row1 = 2.0 * near / (top - bottom);\n      var column2Row0 = (right + left) / (right - left);\n      var column2Row1 = (top + bottom) / (top - bottom);\n      var column2Row2 = -1.0;\n      var column2Row3 = -1.0;\n      var column3Row2 = -2.0 * near;\n      result[0] = column0Row0;\n      result[1] = 0.0;\n      result[2] = 0.0;\n      result[3] = 0.0;\n      result[4] = 0.0;\n      result[5] = column1Row1;\n      result[6] = 0.0;\n      result[7] = 0.0;\n      result[8] = column2Row0;\n      result[9] = column2Row1;\n      result[10] = column2Row2;\n      result[11] = column2Row3;\n      result[12] = 0.0;\n      result[13] = 0.0;\n      result[14] = column3Row2;\n      result[15] = 0.0;\n      return result;\n    }\n  }]);\n\n  return Matrix4;\n}(Matrix);\n\nexport { Matrix4 as default };","map":{"version":3,"sources":["../../../src/classes/matrix4.js"],"names":["IDENTITY","Object","ZERO","INDICES","COL0ROW0","COL0ROW1","COL0ROW2","COL0ROW3","COL1ROW0","COL1ROW1","COL1ROW2","COL1ROW3","COL2ROW0","COL2ROW1","COL2ROW2","COL2ROW3","COL3ROW0","COL3ROW1","COL3ROW2","COL3ROW3","constants","Matrix4","Matrix","arguments","Array","array","m00","m10","m20","m30","m01","m11","m21","m31","m02","m12","m22","m32","m03","m13","m23","m33","result","q","mat4","left","right","bottom","top","near","far","column0Row0","column1Row1","column2Row0","column2Row1","column2Row2","column2Row3","column3Row2","eye","center","up","fovy","Math","aspect","focalDistance","Error","halfY","fov","scaleResult","scale","inverseScale0","inverseScale1","inverseScale2","a","radians","rx","ry","rz","axis","factor","vec","vector","vec4","checkVector","length","vec2","vec3","vec2_transformMat4AsVector","vec3_transformMat4AsVector","x","y","z","deprecated"],"mappings":"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","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {checkVector, deprecated} from '../lib/validators';\nimport Matrix from './base/matrix';\n\nimport {vec2_transformMat4AsVector, vec3_transformMat4AsVector} from '../lib/gl-matrix-extras';\n\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\nimport * as vec4 from 'gl-matrix/vec4';\n\nconst IDENTITY = Object.freeze([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\nconst ZERO = Object.freeze([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n\nconst INDICES = Object.freeze({\n  COL0ROW0: 0,\n  COL0ROW1: 1,\n  COL0ROW2: 2,\n  COL0ROW3: 3,\n  COL1ROW0: 4,\n  COL1ROW1: 5,\n  COL1ROW2: 6,\n  COL1ROW3: 7,\n  COL2ROW0: 8,\n  COL2ROW1: 9,\n  COL2ROW2: 10,\n  COL2ROW3: 11,\n  COL3ROW0: 12,\n  COL3ROW1: 13,\n  COL3ROW2: 14,\n  COL3ROW3: 15\n});\n\nconst constants = {};\n\nexport default class Matrix4 extends Matrix {\n  static get IDENTITY() {\n    constants.IDENTITY = constants.IDENTITY || Object.freeze(new Matrix4(IDENTITY));\n    return constants.IDENTITY;\n  }\n\n  static get ZERO() {\n    constants.ZERO = constants.ZERO || Object.freeze(new Matrix4(ZERO));\n    return constants.ZERO;\n  }\n\n  get INDICES() {\n    return INDICES;\n  }\n\n  get ELEMENTS() {\n    return 16;\n  }\n\n  get RANK() {\n    return 4;\n  }\n\n  constructor(array) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0);\n    if (arguments.length === 1 && Array.isArray(array)) {\n      this.copy(array);\n    } else {\n      this.identity();\n    }\n  }\n\n  copy(array) {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    this[3] = array[3];\n    this[4] = array[4];\n    this[5] = array[5];\n    this[6] = array[6];\n    this[7] = array[7];\n    this[8] = array[8];\n    this[9] = array[9];\n    this[10] = array[10];\n    this[11] = array[11];\n    this[12] = array[12];\n    this[13] = array[13];\n    this[14] = array[14];\n    this[15] = array[15];\n    return this.check();\n  }\n\n  // eslint-disable-next-line max-params\n  set(m00, m10, m20, m30, m01, m11, m21, m31, m02, m12, m22, m32, m03, m13, m23, m33) {\n    this[0] = m00;\n    this[1] = m10;\n    this[2] = m20;\n    this[3] = m30;\n    this[4] = m01;\n    this[5] = m11;\n    this[6] = m21;\n    this[7] = m31;\n    this[8] = m02;\n    this[9] = m12;\n    this[10] = m22;\n    this[11] = m32;\n    this[12] = m03;\n    this[13] = m13;\n    this[14] = m23;\n    this[15] = m33;\n    return this.check();\n  }\n\n  // accepts row major order, stores as column major\n  // eslint-disable-next-line max-params\n  setRowMajor(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    this[0] = m00;\n    this[1] = m10;\n    this[2] = m20;\n    this[3] = m30;\n    this[4] = m01;\n    this[5] = m11;\n    this[6] = m21;\n    this[7] = m31;\n    this[8] = m02;\n    this[9] = m12;\n    this[10] = m22;\n    this[11] = m32;\n    this[12] = m03;\n    this[13] = m13;\n    this[14] = m23;\n    this[15] = m33;\n    return this.check();\n  }\n\n  toRowMajor(result) {\n    result[0] = this[0];\n    result[1] = this[4];\n    result[2] = this[8];\n    result[3] = this[12];\n    result[4] = this[1];\n    result[5] = this[5];\n    result[6] = this[9];\n    result[7] = this[13];\n    result[8] = this[2];\n    result[9] = this[6];\n    result[10] = this[10];\n    result[11] = this[14];\n    result[12] = this[3];\n    result[13] = this[7];\n    result[14] = this[11];\n    result[15] = this[15];\n    return result;\n  }\n\n  // Constructors\n\n  identity() {\n    return this.copy(IDENTITY);\n  }\n\n  // Calculates a 4x4 matrix from the given quaternion\n  // q quat  Quaternion to create matrix from\n  fromQuaternion(q) {\n    mat4.fromQuat(this, q);\n    return this.check();\n  }\n\n  // Generates a frustum matrix with the given bounds\n  // left  Number  Left bound of the frustum\n  // right Number  Right bound of the frustum\n  // bottom  Number  Bottom bound of the frustum\n  // top Number  Top bound of the frustum\n  // near  Number  Near bound of the frustum\n  // far Number  Far bound of the frustum\n  frustum({left, right, bottom, top, near, far}) {\n    if (far === Infinity) {\n      Matrix4._computeInfinitePerspectiveOffCenter(this, left, right, bottom, top, near);\n    } else {\n      mat4.frustum(this, left, right, bottom, top, near, far);\n    }\n    return this.check();\n  }\n\n  // eslint-disable-next-line max-params\n  static _computeInfinitePerspectiveOffCenter(result, left, right, bottom, top, near) {\n    const column0Row0 = (2.0 * near) / (right - left);\n    const column1Row1 = (2.0 * near) / (top - bottom);\n    const column2Row0 = (right + left) / (right - left);\n    const column2Row1 = (top + bottom) / (top - bottom);\n    const column2Row2 = -1.0;\n    const column2Row3 = -1.0;\n    const column3Row2 = -2.0 * near;\n\n    result[0] = column0Row0;\n    result[1] = 0.0;\n    result[2] = 0.0;\n    result[3] = 0.0;\n    result[4] = 0.0;\n    result[5] = column1Row1;\n    result[6] = 0.0;\n    result[7] = 0.0;\n    result[8] = column2Row0;\n    result[9] = column2Row1;\n    result[10] = column2Row2;\n    result[11] = column2Row3;\n    result[12] = 0.0;\n    result[13] = 0.0;\n    result[14] = column3Row2;\n    result[15] = 0.0;\n    return result;\n  }\n\n  // Generates a look-at matrix with the given eye position, focal point,\n  // and up axis\n  // eye vec3  Position of the viewer\n  // center  vec3  Point the viewer is looking at\n  // up  vec3  vec3 pointing up\n  lookAt(eye, center, up) {\n    // Signature: lookAt({eye, center = [0, 0, 0], up = [0, 1, 0]}))\n    if (arguments.length === 1) {\n      ({eye, center, up} = eye);\n    }\n\n    center = center || [0, 0, 0];\n    up = up || [0, 1, 0];\n\n    mat4.lookAt(this, eye, center, up);\n    return this.check();\n  }\n\n  // Generates a orthogonal projection matrix with the given bounds\n  // from \"traditional\" view space parameters\n  // left  number  Left bound of the frustum\n  // right number  Right bound of the frustum\n  // bottom  number  Bottom bound of the frustum\n  // top number  Top bound of the frustum\n  // near  number  Near bound of the frustum\n  // far number  Far bound of the frustum\n  ortho({left, right, bottom, top, near = 0.1, far = 500}) {\n    mat4.ortho(this, left, right, bottom, top, near, far);\n    return this.check();\n  }\n\n  // Generates an orthogonal projection matrix with the same parameters\n  // as a perspective matrix (plus focalDistance)\n  // fovy  number  Vertical field of view in radians\n  // aspect  number  Aspect ratio. typically viewport width/height\n  // focalDistance distance in the view frustum used for extent calculations\n  // near  number  Near bound of the frustum\n  // far number  Far bound of the frustum\n  orthographic({\n    fovy = (45 * Math.PI) / 180,\n    aspect = 1,\n    focalDistance = 1,\n    near = 0.1,\n    far = 500\n  }) {\n    if (fovy > Math.PI * 2) {\n      throw Error('radians');\n    }\n    const halfY = fovy / 2;\n    const top = focalDistance * Math.tan(halfY); // focus_plane is the distance from the camera\n    const right = top * aspect;\n\n    return new Matrix4().ortho({\n      left: -right,\n      right,\n      bottom: -top,\n      top,\n      near,\n      far\n    });\n  }\n\n  // Generates a perspective projection matrix with the given bounds\n  // fovy  number  Vertical field of view in radians\n  // aspect  number  Aspect ratio. typically viewport width/height\n  // near  number  Near bound of the frustum\n  // far number  Far bound of the frustum\n  perspective({\n    fovy,\n    fov = (45 * Math.PI) / 180, // DEPRECATED\n    aspect = 1,\n    near = 0.1,\n    far = 500\n  } = {}) {\n    fovy = fovy || fov;\n    if (fovy > Math.PI * 2) {\n      throw Error('radians');\n    }\n    mat4.perspective(this, fovy, aspect, near, far);\n    return this.check();\n  }\n\n  // Accessors\n\n  determinant() {\n    return mat4.determinant(this);\n  }\n\n  // Extracts the non-uniform scale assuming the matrix is an affine transformation.\n  // The scales are the \"lengths\" of the column vectors in the upper-left 3x3 matrix.\n  getScale(result = [-0, -0, -0]) {\n    // explicit is faster than hypot...\n    result[0] = Math.sqrt(this[0] * this[0] + this[1] * this[1] + this[2] * this[2]);\n    result[1] = Math.sqrt(this[4] * this[4] + this[5] * this[5] + this[6] * this[6]);\n    result[2] = Math.sqrt(this[8] * this[8] + this[9] * this[9] + this[10] * this[10]);\n    // result[0] = Math.hypot(this[0], this[1], this[2]);\n    // result[1] = Math.hypot(this[4], this[5], this[6]);\n    // result[2] = Math.hypot(this[8], this[9], this[10]);\n    return result;\n  }\n\n  // Gets the translation portion, assuming the matrix is a affine transformation matrix.\n  getTranslation(result = [-0, -0, -0]) {\n    result[0] = this[12];\n    result[1] = this[13];\n    result[2] = this[14];\n    return result;\n  }\n\n  // Gets upper left 3x3 pure rotation matrix (non-scaling), assume affine transformation matrix\n  getRotation(\n    result = [-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0],\n    scaleResult = null\n  ) {\n    const scale = this.getScale(scaleResult || [-0, -0, -0]);\n\n    const inverseScale0 = 1 / scale[0];\n    const inverseScale1 = 1 / scale[1];\n    const inverseScale2 = 1 / scale[2];\n\n    result[0] = this[0] * inverseScale0;\n    result[1] = this[1] * inverseScale1;\n    result[2] = this[2] * inverseScale2;\n    result[3] = 0;\n    result[4] = this[4] * inverseScale0;\n    result[5] = this[5] * inverseScale1;\n    result[6] = this[6] * inverseScale2;\n    result[7] = 0;\n    result[8] = this[8] * inverseScale0;\n    result[9] = this[9] * inverseScale1;\n    result[10] = this[10] * inverseScale2;\n    result[11] = 0;\n    result[12] = 0;\n    result[13] = 0;\n    result[14] = 0;\n    result[15] = 1;\n    return result;\n  }\n\n  getRotationMatrix3(result = [-0, -0, -0, -0, -0, -0, -0, -0, -0], scaleResult = null) {\n    const scale = this.getScale(scaleResult || [-0, -0, -0]);\n\n    const inverseScale0 = 1 / scale[0];\n    const inverseScale1 = 1 / scale[1];\n    const inverseScale2 = 1 / scale[2];\n\n    result[0] = this[0] * inverseScale0;\n    result[1] = this[1] * inverseScale1;\n    result[2] = this[2] * inverseScale2;\n    result[3] = this[4] * inverseScale0;\n    result[4] = this[5] * inverseScale1;\n    result[5] = this[6] * inverseScale2;\n    result[6] = this[8] * inverseScale0;\n    result[7] = this[9] * inverseScale1;\n    result[8] = this[10] * inverseScale2;\n    return result;\n  }\n\n  // Modifiers\n\n  transpose() {\n    mat4.transpose(this, this);\n    return this.check();\n  }\n\n  invert() {\n    mat4.invert(this, this);\n    return this.check();\n  }\n\n  // Operations\n\n  multiplyLeft(a) {\n    mat4.multiply(this, a, this);\n    return this.check();\n  }\n\n  multiplyRight(a) {\n    mat4.multiply(this, this, a);\n    return this.check();\n  }\n\n  // Rotates a matrix by the given angle around the X axis\n  rotateX(radians) {\n    mat4.rotateX(this, this, radians);\n    // mat4.rotate(this, this, radians, [1, 0, 0]);\n    return this.check();\n  }\n\n  // Rotates a matrix by the given angle around the Y axis.\n  rotateY(radians) {\n    mat4.rotateY(this, this, radians);\n    // mat4.rotate(this, this, radians, [0, 1, 0]);\n    return this.check();\n  }\n\n  // Rotates a matrix by the given angle around the Z axis.\n  rotateZ(radians) {\n    mat4.rotateZ(this, this, radians);\n    // mat4.rotate(this, this, radians, [0, 0, 1]);\n    return this.check();\n  }\n\n  rotateXYZ([rx, ry, rz]) {\n    return this.rotateX(rx)\n      .rotateY(ry)\n      .rotateZ(rz);\n  }\n\n  rotateAxis(radians, axis) {\n    mat4.rotate(this, this, radians, axis);\n    return this.check();\n  }\n\n  scale(factor) {\n    if (Array.isArray(factor)) {\n      mat4.scale(this, this, factor);\n    } else {\n      mat4.scale(this, this, [factor, factor, factor]);\n    }\n\n    return this.check();\n  }\n\n  translate(vec) {\n    mat4.translate(this, this, vec);\n    return this.check();\n  }\n\n  // Transforms\n\n  // Transforms any 2, 3 or 4 element vector. 2 and 3 elements are treated as points\n  transform(vector, result) {\n    if (vector.length === 4) {\n      result = vec4.transformMat4(result || [-0, -0, -0, -0], vector, this);\n      checkVector(result, 4);\n      return result;\n    }\n    return this.transformAsPoint(vector, result);\n  }\n\n  // Transforms any 2 or 3 element array as point (w implicitly 1)\n  transformAsPoint(vector, result) {\n    const {length} = vector;\n    switch (length) {\n      case 2:\n        result = vec2.transformMat4(result || [-0, -0], vector, this);\n        break;\n      case 3:\n        result = vec3.transformMat4(result || [-0, -0, -0], vector, this);\n        break;\n      default:\n        throw new Error('Illegal vector');\n    }\n    checkVector(result, vector.length);\n    return result;\n  }\n\n  // Transforms any 2 or 3 element array as vector (w implicitly 0)\n  transformAsVector(vector, result) {\n    switch (vector.length) {\n      case 2:\n        result = vec2_transformMat4AsVector(result || [-0, -0], vector, this);\n        break;\n      case 3:\n        result = vec3_transformMat4AsVector(result || [-0, -0, -0], vector, this);\n        break;\n      default:\n        throw new Error('Illegal vector');\n    }\n    checkVector(result, vector.length);\n    return result;\n  }\n\n  // three.js math API compatibility\n  makeRotationX(radians) {\n    return this.identity().rotateX(radians);\n  }\n\n  makeTranslation(x, y, z) {\n    return this.identity().translate([x, y, z]);\n  }\n\n  // DEPRECATED in 3.0\n\n  transformPoint(vector, result) {\n    deprecated('Matrix4.transformPoint', '3.0');\n    return this.transformAsPoint(vector, result);\n  }\n\n  transformVector(vector, result) {\n    deprecated('Matrix4.transformVector', '3.0');\n    return this.transformAsPoint(vector, result);\n  }\n\n  transformDirection(vector, result) {\n    deprecated('Matrix4.transformDirection', '3.0');\n    return this.transformAsVector(vector, result);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}