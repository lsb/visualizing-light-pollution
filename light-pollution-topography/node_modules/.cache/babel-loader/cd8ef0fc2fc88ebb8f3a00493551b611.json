{"ast":null,"code":"import GLTFScenegraph from '../gltf-scenegraph';\nimport { KHR_MATERIALS_UNLIT } from '../gltf-constants';\nexport function decode(gltfData, options) {\n  var gltfScenegraph = new GLTFScenegraph(gltfData);\n  var json = gltfScenegraph.json;\n  gltfScenegraph.removeExtension(KHR_MATERIALS_UNLIT);\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = (json.materials || [])[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var material = _step.value;\n      var extension = material.extensions && material.extensions.KHR_materials_unlit;\n\n      if (extension) {\n        material.unlit = true;\n      }\n\n      gltfScenegraph.removeObjectExtension(material, KHR_MATERIALS_UNLIT);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n        _iterator[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n}\nexport function encode(gltfData, options) {\n  var gltfScenegraph = new GLTFScenegraph(gltfData);\n  var json = gltfScenegraph.json;\n\n  if (gltfScenegraph.materials) {\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = json.materials[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var material = _step2.value;\n\n        if (material.unlit) {\n          delete material.unlit;\n          gltfScenegraph.addObjectExtension(material, KHR_MATERIALS_UNLIT);\n          gltfScenegraph.addExtension(KHR_MATERIALS_UNLIT);\n        }\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n          _iterator2[\"return\"]();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n  }\n}","map":{"version":3,"sources":["../../../../src/lib/extensions/KHR_materials_unlit.js"],"names":["gltfScenegraph","json","material","extension"],"mappings":"AAGA,OAAA,cAAA,MAAA,oBAAA;AACA,SAAA,mBAAA,QAAA,mBAAA;AAEA,OAAO,SAAA,MAAA,CAAA,QAAA,EAAA,OAAA,EAAmC;AACxC,MAAMA,cAAc,GAAG,IAAA,cAAA,CAAvB,QAAuB,CAAvB;AADwC,MAEjCC,IAFiC,GAEzBD,cAFyB,CAAA,IAAA;AAKxCA,EAAAA,cAAc,CAAdA,eAAAA,CAAAA,mBAAAA;AALwC,MAAA,yBAAA,GAAA,IAAA;AAAA,MAAA,iBAAA,GAAA,KAAA;AAAA,MAAA,cAAA,GAAA,SAAA;;AAAA,MAAA;AASxC,SAAA,IAAA,SAAA,GAAA,CAAuBC,IAAI,CAAJA,SAAAA,IAAvB,EAAA,EAAA,MAAA,CAAA,QAAA,GAAA,EAAA,KAAA,EAAA,EAAA,yBAAA,GAAA,CAAA,KAAA,GAAA,SAAA,CAAA,IAAA,EAAA,EAAA,IAAA,CAAA,EAAA,yBAAA,GAAA,IAAA,EAA6C;AAAA,UAAlCC,QAAkC,GAAA,KAAA,CAAA,KAAA;AAC3C,UAAMC,SAAS,GAAGD,QAAQ,CAARA,UAAAA,IAAuBA,QAAQ,CAARA,UAAAA,CAAzC,mBAAA;;AACA,UAAA,SAAA,EAAe;AACbA,QAAAA,QAAQ,CAARA,KAAAA,GAAAA,IAAAA;AACD;;AACDF,MAAAA,cAAc,CAAdA,qBAAAA,CAAAA,QAAAA,EAAAA,mBAAAA;AACD;AAfuC,GAAA,CAAA,OAAA,GAAA,EAAA;AAAA,IAAA,iBAAA,GAAA,IAAA;AAAA,IAAA,cAAA,GAAA,GAAA;AAAA,GAAA,SAAA;AAAA,QAAA;AAAA,UAAA,CAAA,yBAAA,IAAA,SAAA,CAAA,QAAA,CAAA,IAAA,IAAA,EAAA;AAAA,QAAA,SAAA,CAAA,QAAA,CAAA;AAAA;AAAA,KAAA,SAAA;AAAA,UAAA,iBAAA,EAAA;AAAA,cAAA,cAAA;AAAA;AAAA;AAAA;AAgBzC;AAED,OAAO,SAAA,MAAA,CAAA,QAAA,EAAA,OAAA,EAAmC;AACxC,MAAMA,cAAc,GAAG,IAAA,cAAA,CAAvB,QAAuB,CAAvB;AADwC,MAEjCC,IAFiC,GAEzBD,cAFyB,CAAA,IAAA;;AAMxC,MAAIA,cAAc,CAAlB,SAAA,EAA8B;AAAA,QAAA,0BAAA,GAAA,IAAA;AAAA,QAAA,kBAAA,GAAA,KAAA;AAAA,QAAA,eAAA,GAAA,SAAA;;AAAA,QAAA;AAC5B,WAAA,IAAA,UAAA,GAAuBC,IAAI,CAA3B,SAAuBA,CAAvB,MAAA,CAAA,QAAuBA,GAAvB,EAAA,MAAA,EAAA,EAAA,0BAAA,GAAA,CAAA,MAAA,GAAA,UAAA,CAAA,IAAA,EAAA,EAAA,IAAA,CAAA,EAAA,0BAAA,GAAA,IAAA,EAAuC;AAAA,YAA5BC,QAA4B,GAAA,MAAA,CAAA,KAAA;;AACrC,YAAIA,QAAQ,CAAZ,KAAA,EAAoB;AAClB,iBAAOA,QAAQ,CAAf,KAAA;AACAF,UAAAA,cAAc,CAAdA,kBAAAA,CAAAA,QAAAA,EAAAA,mBAAAA;AACAA,UAAAA,cAAc,CAAdA,YAAAA,CAAAA,mBAAAA;AACD;AACF;AAP2B,KAAA,CAAA,OAAA,GAAA,EAAA;AAAA,MAAA,kBAAA,GAAA,IAAA;AAAA,MAAA,eAAA,GAAA,GAAA;AAAA,KAAA,SAAA;AAAA,UAAA;AAAA,YAAA,CAAA,0BAAA,IAAA,UAAA,CAAA,QAAA,CAAA,IAAA,IAAA,EAAA;AAAA,UAAA,UAAA,CAAA,QAAA,CAAA;AAAA;AAAA,OAAA,SAAA;AAAA,YAAA,kBAAA,EAAA;AAAA,gBAAA,eAAA;AAAA;AAAA;AAAA;AAQ7B;AACF","sourcesContent":["// GLTF EXTENSION: KHR_materials_unlit\n// https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_unlit\n\nimport GLTFScenegraph from '../gltf-scenegraph';\nimport {KHR_MATERIALS_UNLIT} from '../gltf-constants';\n\nexport function decode(gltfData, options) {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const {json} = gltfScenegraph;\n\n  // Remove the top-level extension\n  gltfScenegraph.removeExtension(KHR_MATERIALS_UNLIT);\n\n  // Any nodes that have the extension, add lights field pointing to light object\n  // and remove the extension\n  for (const material of json.materials || []) {\n    const extension = material.extensions && material.extensions.KHR_materials_unlit;\n    if (extension) {\n      material.unlit = true;\n    }\n    gltfScenegraph.removeObjectExtension(material, KHR_MATERIALS_UNLIT);\n  }\n}\n\nexport function encode(gltfData, options) {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const {json} = gltfScenegraph;\n\n  // Any nodes that have lights field pointing to light object\n  // add the extension\n  if (gltfScenegraph.materials) {\n    for (const material of json.materials) {\n      if (material.unlit) {\n        delete material.unlit;\n        gltfScenegraph.addObjectExtension(material, KHR_MATERIALS_UNLIT);\n        gltfScenegraph.addExtension(KHR_MATERIALS_UNLIT);\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}