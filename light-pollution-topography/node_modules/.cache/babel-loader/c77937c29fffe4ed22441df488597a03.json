{"ast":null,"code":"var BIG_ENDIAN = false;\nvar LITTLE_ENDIAN = true;\nexport var mimeTypeMap = new Map([['image/png', {\n  test: isPng,\n  getSize: getPngSize\n}], ['image/jpeg', {\n  test: isJpeg,\n  getSize: getJpegSize\n}], ['image/gif', {\n  test: isGif,\n  getSize: getGifSize\n}], ['image/bmp', {\n  test: isBmp,\n  getSize: getBmpSize\n}]]);\nexport function isPng(dataView) {\n  return dataView.byteLength >= 24 && dataView.getUint32(0, BIG_ENDIAN) === 0x89504e47;\n}\n\nfunction getPngSize(dataView) {\n  return {\n    width: dataView.getUint32(16, BIG_ENDIAN),\n    height: dataView.getUint32(20, BIG_ENDIAN)\n  };\n}\n\nexport function isGif(dataView) {\n  return dataView.byteLength >= 10 && dataView.getUint32(0, BIG_ENDIAN) === 0x47494638;\n}\n\nfunction getGifSize(dataView) {\n  return {\n    width: dataView.getUint16(6, LITTLE_ENDIAN),\n    height: dataView.getUint16(8, LITTLE_ENDIAN)\n  };\n}\n\nexport function isBmp(dataView) {\n  return dataView.byteLength >= 14 && dataView.getUint16(0, BIG_ENDIAN) === 0x424d && dataView.getUint32(2, LITTLE_ENDIAN) === dataView.byteLength;\n}\n\nfunction getBmpSize(dataView) {\n  return {\n    width: dataView.getUint32(18, LITTLE_ENDIAN),\n    height: dataView.getUint32(22, LITTLE_ENDIAN)\n  };\n}\n\nexport function isJpeg(dataView) {\n  return dataView.byteLength >= 3 && dataView.getUint16(0, BIG_ENDIAN) === 0xffd8 && dataView.getUint8(2, BIG_ENDIAN) === 0xff;\n}\n\nfunction getJpegSize(dataView) {\n  if (dataView.byteLength < 2 || dataView.getUint16(0, BIG_ENDIAN) !== 0xffd8) {\n    return null;\n  }\n\n  var _getJpegMarkers = getJpegMarkers(),\n      tableMarkers = _getJpegMarkers.tableMarkers,\n      sofMarkers = _getJpegMarkers.sofMarkers;\n\n  var i = 2;\n\n  while (i < dataView.byteLength) {\n    var marker = dataView.getUint16(i, BIG_ENDIAN);\n\n    if (sofMarkers.has(marker)) {\n      return {\n        height: dataView.getUint16(i + 5, BIG_ENDIAN),\n        width: dataView.getUint16(i + 7, BIG_ENDIAN)\n      };\n    }\n\n    if (!tableMarkers.has(marker)) {\n      return null;\n    }\n\n    i += 2;\n    i += dataView.getUint16(i, BIG_ENDIAN);\n  }\n\n  return null;\n}\n\nfunction getJpegMarkers() {\n  var tableMarkers = new Set([0xffdb, 0xffc4, 0xffcc, 0xffdd, 0xfffe]);\n\n  for (var i = 0xffe0; i < 0xfff0; ++i) {\n    tableMarkers.add(i);\n  }\n\n  var sofMarkers = new Set([0xffc0, 0xffc1, 0xffc2, 0xffc3, 0xffc5, 0xffc6, 0xffc7, 0xffc9, 0xffca, 0xffcb, 0xffcd, 0xffce, 0xffcf, 0xffde]);\n  return {\n    tableMarkers: tableMarkers,\n    sofMarkers: sofMarkers\n  };\n}","map":{"version":3,"sources":["../../../../src/lib/binary-image-api/binary-image-parsers.js"],"names":["BIG_ENDIAN","LITTLE_ENDIAN","mimeTypeMap","test","getSize","getPngSize","getJpegSize","getGifSize","getBmpSize","dataView","width","height","tableMarkers","sofMarkers","getJpegMarkers","i","marker"],"mappings":"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","sourcesContent":["const BIG_ENDIAN = false;\nconst LITTLE_ENDIAN = true;\n\nexport const mimeTypeMap = new Map([\n  ['image/png', {test: isPng, getSize: getPngSize}],\n  ['image/jpeg', {test: isJpeg, getSize: getJpegSize}],\n  ['image/gif', {test: isGif, getSize: getGifSize}],\n  ['image/bmp', {test: isBmp, getSize: getBmpSize}]\n]);\n\n// PNG\n\nexport function isPng(dataView) {\n  // Check file contains the first 4 bytes of the PNG signature.\n  return dataView.byteLength >= 24 && dataView.getUint32(0, BIG_ENDIAN) === 0x89504e47;\n}\n\nfunction getPngSize(dataView) {\n  // Extract size from a binary PNG file\n  return {\n    width: dataView.getUint32(16, BIG_ENDIAN),\n    height: dataView.getUint32(20, BIG_ENDIAN)\n  };\n}\n\n// GIF\n\nexport function isGif(dataView) {\n  // Check first 4 bytes of the GIF signature (\"GIF8\").\n  return dataView.byteLength >= 10 && dataView.getUint32(0, BIG_ENDIAN) === 0x47494638;\n}\n\n// Extract size from a binary GIF file\n// TODO: GIF is not this simple\nfunction getGifSize(dataView) {\n  // GIF is little endian.\n  return {\n    width: dataView.getUint16(6, LITTLE_ENDIAN),\n    height: dataView.getUint16(8, LITTLE_ENDIAN)\n  };\n}\n\n// BMP\n\n// TODO: BMP is not this simple\nexport function isBmp(dataView) {\n  // Check magic number is valid (first 2 characters should be \"BM\").\n  // The mandatory bitmap file header is 14 bytes long.\n  return (\n    dataView.byteLength >= 14 &&\n    dataView.getUint16(0, BIG_ENDIAN) === 0x424d &&\n    dataView.getUint32(2, LITTLE_ENDIAN) === dataView.byteLength\n  );\n}\n\nfunction getBmpSize(dataView) {\n  // BMP is little endian.\n  return {\n    width: dataView.getUint32(18, LITTLE_ENDIAN),\n    height: dataView.getUint32(22, LITTLE_ENDIAN)\n  };\n}\n\n// JPEG\n\nexport function isJpeg(dataView) {\n  // Check file contains the JPEG \"start of image\" (SOI) marker\n  // followed by another marker.\n  return (\n    dataView.byteLength >= 3 &&\n    dataView.getUint16(0, BIG_ENDIAN) === 0xffd8 &&\n    dataView.getUint8(2, BIG_ENDIAN) === 0xff\n  );\n}\n\n// Extract width and height from a binary JPEG file\nfunction getJpegSize(dataView) {\n  // Check file contains the JPEG \"start of image\" (SOI) marker.\n  if (dataView.byteLength < 2 || dataView.getUint16(0, BIG_ENDIAN) !== 0xffd8) {\n    return null;\n  }\n\n  const {tableMarkers, sofMarkers} = getJpegMarkers();\n\n  // Exclude the two byte SOI marker.\n  let i = 2;\n  while (i < dataView.byteLength) {\n    const marker = dataView.getUint16(i, BIG_ENDIAN);\n\n    // The frame that contains the width and height of the JPEG image.\n    if (sofMarkers.has(marker)) {\n      return {\n        height: dataView.getUint16(i + 5, BIG_ENDIAN), // Number of lines\n        width: dataView.getUint16(i + 7, BIG_ENDIAN) // Number of pixels per line\n      };\n    }\n\n    // Miscellaneous tables/data preceding the frame header.\n    if (!tableMarkers.has(marker)) {\n      return null;\n    }\n\n    // Length includes size of length parameter but not the two byte header.\n    i += 2;\n    i += dataView.getUint16(i, BIG_ENDIAN);\n  }\n\n  return null;\n}\n\nfunction getJpegMarkers() {\n  // Tables/misc header markers.\n  // DQT, DHT, DAC, DRI, COM, APP_n\n  const tableMarkers = new Set([0xffdb, 0xffc4, 0xffcc, 0xffdd, 0xfffe]);\n  for (let i = 0xffe0; i < 0xfff0; ++i) {\n    tableMarkers.add(i);\n  }\n\n  // SOF markers and DHP marker.\n  // These markers are after tables/misc data.\n  const sofMarkers = new Set([\n    0xffc0,\n    0xffc1,\n    0xffc2,\n    0xffc3,\n    0xffc5,\n    0xffc6,\n    0xffc7,\n    0xffc9,\n    0xffca,\n    0xffcb,\n    0xffcd,\n    0xffce,\n    0xffcf,\n    0xffde\n  ]);\n\n  return {tableMarkers, sofMarkers};\n}\n"]},"metadata":{},"sourceType":"module"}