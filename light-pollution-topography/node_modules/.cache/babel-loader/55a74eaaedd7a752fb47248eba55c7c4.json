{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport Layer from './layer';\nimport debug from '../debug';\nimport { flatten } from '../utils/flatten';\nvar TRACE_RENDER_LAYERS = 'compositeLayer.renderLayers';\n\nvar CompositeLayer = function (_Layer) {\n  _inherits(CompositeLayer, _Layer);\n\n  function CompositeLayer() {\n    _classCallCheck(this, CompositeLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CompositeLayer).apply(this, arguments));\n  }\n\n  _createClass(CompositeLayer, [{\n    key: \"getSubLayers\",\n    value: function getSubLayers() {\n      return this.internalState && this.internalState.subLayers || [];\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {}\n  }, {\n    key: \"setState\",\n    value: function setState(updateObject) {\n      _get(_getPrototypeOf(CompositeLayer.prototype), \"setState\", this).call(this, updateObject);\n\n      this.setNeedsUpdate();\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(_ref) {\n      var info = _ref.info;\n      var object = info.object;\n      var isDataWrapped = object && object.__source && object.__source.parent && object.__source.parent.id === this.id;\n\n      if (!isDataWrapped) {\n        return info;\n      }\n\n      return Object.assign(info, {\n        object: object.__source.object,\n        index: object.__source.index\n      });\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      return null;\n    }\n  }, {\n    key: \"shouldRenderSubLayer\",\n    value: function shouldRenderSubLayer(id, data) {\n      var overridingProps = this.props._subLayerProps;\n      return data && data.length || overridingProps && overridingProps[id];\n    }\n  }, {\n    key: \"getSubLayerClass\",\n    value: function getSubLayerClass(id, DefaultLayerClass) {\n      var overridingProps = this.props._subLayerProps;\n      return overridingProps && overridingProps[id] && overridingProps[id].type || DefaultLayerClass;\n    }\n  }, {\n    key: \"getSubLayerRow\",\n    value: function getSubLayerRow(row, sourceObject, sourceObjectIndex) {\n      row.__source = {\n        parent: this,\n        object: sourceObject,\n        index: sourceObjectIndex\n      };\n      return row;\n    }\n  }, {\n    key: \"getSubLayerAccessor\",\n    value: function getSubLayerAccessor(accessor) {\n      if (typeof accessor === 'function') {\n        var objectInfo = {\n          data: this.props.data,\n          target: []\n        };\n        return function (x, i) {\n          if (x.__source) {\n            objectInfo.index = x.__source.index;\n            return accessor(x.__source.object, objectInfo);\n          }\n\n          return accessor(x, i);\n        };\n      }\n\n      return accessor;\n    }\n  }, {\n    key: \"getSubLayerProps\",\n    value: function getSubLayerProps() {\n      var sublayerProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _this$props = this.props,\n          opacity = _this$props.opacity,\n          pickable = _this$props.pickable,\n          visible = _this$props.visible,\n          parameters = _this$props.parameters,\n          getPolygonOffset = _this$props.getPolygonOffset,\n          highlightedObjectIndex = _this$props.highlightedObjectIndex,\n          autoHighlight = _this$props.autoHighlight,\n          highlightColor = _this$props.highlightColor,\n          coordinateSystem = _this$props.coordinateSystem,\n          coordinateOrigin = _this$props.coordinateOrigin,\n          wrapLongitude = _this$props.wrapLongitude,\n          positionFormat = _this$props.positionFormat,\n          modelMatrix = _this$props.modelMatrix,\n          extensions = _this$props.extensions,\n          overridingProps = _this$props._subLayerProps;\n      var newProps = {\n        opacity: opacity,\n        pickable: pickable,\n        visible: visible,\n        parameters: parameters,\n        getPolygonOffset: getPolygonOffset,\n        highlightedObjectIndex: highlightedObjectIndex,\n        autoHighlight: autoHighlight,\n        highlightColor: highlightColor,\n        coordinateSystem: coordinateSystem,\n        coordinateOrigin: coordinateOrigin,\n        wrapLongitude: wrapLongitude,\n        positionFormat: positionFormat,\n        modelMatrix: modelMatrix,\n        extensions: extensions\n      };\n      var overridingSublayerProps = overridingProps && overridingProps[sublayerProps.id];\n      var overridingSublayerTriggers = overridingSublayerProps && overridingSublayerProps.updateTriggers;\n      var sublayerId = sublayerProps.id || 'sublayer';\n\n      if (overridingSublayerProps) {\n        var propTypes = this.constructor._propTypes;\n\n        for (var key in overridingSublayerProps) {\n          var propType = propTypes[key];\n\n          if (propType && propType.type === 'accessor') {\n            overridingSublayerProps[key] = this.getSubLayerAccessor(overridingSublayerProps[key]);\n          }\n        }\n      }\n\n      Object.assign(newProps, sublayerProps, overridingSublayerProps, {\n        id: \"\".concat(this.props.id, \"-\").concat(sublayerId),\n        updateTriggers: Object.assign({\n          all: this.props.updateTriggers.all\n        }, sublayerProps.updateTriggers, overridingSublayerTriggers)\n      });\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = extensions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var extension = _step.value;\n          var passThroughProps = extension.getSubLayerProps.call(this, extension);\n\n          if (passThroughProps) {\n            Object.assign(newProps, passThroughProps, {\n              updateTriggers: Object.assign(newProps.updateTriggers, passThroughProps.updateTriggers)\n            });\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return newProps;\n    }\n  }, {\n    key: \"_getAttributeManager\",\n    value: function _getAttributeManager() {\n      return null;\n    }\n  }, {\n    key: \"_renderLayers\",\n    value: function _renderLayers() {\n      var subLayers = this.internalState.subLayers;\n      var shouldUpdate = !subLayers || this.needsUpdate();\n\n      if (shouldUpdate) {\n        subLayers = this.renderLayers();\n        subLayers = flatten(subLayers, Boolean);\n        this.internalState.subLayers = subLayers;\n      }\n\n      debug(TRACE_RENDER_LAYERS, this, shouldUpdate, subLayers);\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = subLayers[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var layer = _step2.value;\n          layer.parent = this;\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n            _iterator2[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"isComposite\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"isLoaded\",\n    get: function get() {\n      return _get(_getPrototypeOf(CompositeLayer.prototype), \"isLoaded\", this) && this.getSubLayers().every(function (layer) {\n        return layer.isLoaded;\n      });\n    }\n  }]);\n\n  return CompositeLayer;\n}(Layer);\n\nexport { CompositeLayer as default };\nCompositeLayer.layerName = 'CompositeLayer';","map":{"version":3,"sources":["../../../src/lib/composite-layer.js"],"names":["TRACE_RENDER_LAYERS","CompositeLayer","Layer","layer","updateObject","info","object","isDataWrapped","index","id","data","overridingProps","DefaultLayerClass","row","sourceObject","sourceObjectIndex","parent","accessor","objectInfo","target","x","sublayerProps","opacity","pickable","visible","parameters","getPolygonOffset","highlightedObjectIndex","autoHighlight","highlightColor","coordinateSystem","coordinateOrigin","wrapLongitude","positionFormat","modelMatrix","extensions","newProps","overridingSublayerProps","overridingSublayerTriggers","sublayerId","propTypes","propType","Object","updateTriggers","all","extension","passThroughProps","subLayers","shouldUpdate","flatten","debug"],"mappings":";;;;;;AAmBA,OAAA,KAAA,MAAA,SAAA;AACA,OAAA,KAAA,MAAA,UAAA;AACA,SAAA,OAAA,QAAA,kBAAA;AAEA,IAAMA,mBAAmB,GAAzB,6BAAA;;IAEqBC,c;;;;;;;;;;;mCASJ;AACb,aAAQ,KAAA,aAAA,IAAsB,KAAA,aAAA,CAAvB,SAAC,IAAR,EAAA;AACD;;;sCAIiB,CAAE;;;6BAGXG,Y,EAAc;AACrB,MAAA,IAAA,CAAA,eAAA,CAAA,cAAA,CAAA,SAAA,CAAA,EAAA,UAAA,EAAA,IAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAA,YAAA;;AAMA,WAAA,cAAA;AACD;;;yCAMsB;AAAA,UAAPC,IAAO,GAAA,IAAA,CAAPA,IAAO;AAAA,UACdC,MADc,GACJD,IADI,CAAA,MAAA;AAErB,UAAME,aAAa,GACjBD,MAAM,IAAIA,MAAM,CAAhBA,QAAAA,IAA6BA,MAAM,CAANA,QAAAA,CAA7BA,MAAAA,IAAuDA,MAAM,CAANA,QAAAA,CAAAA,MAAAA,CAAAA,EAAAA,KAA8B,KADvF,EAAA;;AAGA,UAAI,CAAJ,aAAA,EAAoB;AAClB,eAAA,IAAA;AACD;;AAED,aAAO,MAAM,CAAN,MAAA,CAAA,IAAA,EAAoB;AAEzBA,QAAAA,MAAM,EAAEA,MAAM,CAANA,QAAAA,CAFiB,MAAA;AAGzBE,QAAAA,KAAK,EAAEF,MAAM,CAANA,QAAAA,CAAgBE;AAHE,OAApB,CAAP;AAKD;;;mCAGc;AACb,aAAA,IAAA;AACD;;;yCAGoBC,E,EAAIC,I,EAAM;AAAA,UACNC,eADM,GACa,KADb,KACa,CADb,cAAA;AAG7B,aAAQD,IAAI,IAAIA,IAAI,CAAb,MAACA,IAAyBC,eAAe,IAAIA,eAAe,CAAnE,EAAmE,CAAnE;AACD;;;qCAGgBF,E,EAAIG,iB,EAAmB;AAAA,UACfD,eADe,GACI,KADJ,KACI,CADJ,cAAA;AAGtC,aACGA,eAAe,IAAIA,eAAe,CAAlCA,EAAkC,CAAlCA,IAA0CA,eAAe,CAAfA,EAAe,CAAfA,CAA3C,IAACA,IADH,iBAAA;AAGD;;;mCAIcE,G,EAAKC,Y,EAAcC,iB,EAAmB;AACnDF,MAAAA,GAAG,CAAHA,QAAAA,GAAe;AACbG,QAAAA,MAAM,EADO,IAAA;AAEbV,QAAAA,MAAM,EAFO,YAAA;AAGbE,QAAAA,KAAK,EAAEO;AAHM,OAAfF;AAKA,aAAA,GAAA;AACD;;;wCAKmBI,Q,EAAU;AAC5B,UAAI,OAAA,QAAA,KAAJ,UAAA,EAAoC;AAClC,YAAMC,UAAU,GAAG;AACjBR,UAAAA,IAAI,EAAE,KAAA,KAAA,CADW,IAAA;AAEjBS,UAAAA,MAAM,EAAE;AAFS,SAAnB;AAIA,eAAO,UAAA,CAAA,EAAA,CAAA,EAAU;AACf,cAAIC,CAAC,CAAL,QAAA,EAAgB;AACdF,YAAAA,UAAU,CAAVA,KAAAA,GAAmBE,CAAC,CAADA,QAAAA,CAAnBF,KAAAA;AACA,mBAAOD,QAAQ,CAACG,CAAC,CAADA,QAAAA,CAAD,MAAA,EAAf,UAAe,CAAf;AACD;;AACD,iBAAOH,QAAQ,CAAA,CAAA,EAAf,CAAe,CAAf;AALF,SAAA;AAOD;;AACD,aAAA,QAAA;AACD;;;uCAGoC;AAAA,UAApBI,aAAoB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;AAAA,UAAA,WAAA,GAiB/B,KAjB+B,KAAA;AAAA,UAEjCC,OAFiC,GAAA,WAAA,CAAA,OAAA;AAAA,UAGjCC,QAHiC,GAAA,WAAA,CAAA,QAAA;AAAA,UAIjCC,OAJiC,GAAA,WAAA,CAAA,OAAA;AAAA,UAKjCC,UALiC,GAAA,WAAA,CAAA,UAAA;AAAA,UAMjCC,gBANiC,GAAA,WAAA,CAAA,gBAAA;AAAA,UAOjCC,sBAPiC,GAAA,WAAA,CAAA,sBAAA;AAAA,UAQjCC,aARiC,GAAA,WAAA,CAAA,aAAA;AAAA,UASjCC,cATiC,GAAA,WAAA,CAAA,cAAA;AAAA,UAUjCC,gBAViC,GAAA,WAAA,CAAA,gBAAA;AAAA,UAWjCC,gBAXiC,GAAA,WAAA,CAAA,gBAAA;AAAA,UAYjCC,aAZiC,GAAA,WAAA,CAAA,aAAA;AAAA,UAajCC,cAbiC,GAAA,WAAA,CAAA,cAAA;AAAA,UAcjCC,WAdiC,GAAA,WAAA,CAAA,WAAA;AAAA,UAejCC,UAfiC,GAAA,WAAA,CAAA,UAAA;AAAA,UAgBjBxB,eAhBiB,GAAA,WAAA,CAAA,cAAA;AAkBnC,UAAMyB,QAAQ,GAAG;AACfd,QAAAA,OAAO,EADQ,OAAA;AAEfC,QAAAA,QAAQ,EAFO,QAAA;AAGfC,QAAAA,OAAO,EAHQ,OAAA;AAIfC,QAAAA,UAAU,EAJK,UAAA;AAKfC,QAAAA,gBAAgB,EALD,gBAAA;AAMfC,QAAAA,sBAAsB,EANP,sBAAA;AAOfC,QAAAA,aAAa,EAPE,aAAA;AAQfC,QAAAA,cAAc,EARC,cAAA;AASfC,QAAAA,gBAAgB,EATD,gBAAA;AAUfC,QAAAA,gBAAgB,EAVD,gBAAA;AAWfC,QAAAA,aAAa,EAXE,aAAA;AAYfC,QAAAA,cAAc,EAZC,cAAA;AAafC,QAAAA,WAAW,EAbI,WAAA;AAcfC,QAAAA,UAAU,EAAVA;AAde,OAAjB;AAiBA,UAAME,uBAAuB,GAAG1B,eAAe,IAAIA,eAAe,CAACU,aAAa,CAAhF,EAAkE,CAAlE;AACA,UAAMiB,0BAA0B,GAC9BD,uBAAuB,IAAIA,uBAAuB,CADpD,cAAA;AAEA,UAAME,UAAU,GAAGlB,aAAa,CAAbA,EAAAA,IAAnB,UAAA;;AAEA,UAAA,uBAAA,EAA6B;AAC3B,YAAMmB,SAAS,GAAG,KAAA,WAAA,CAAlB,UAAA;;AACA,aAAK,IAAL,GAAA,IAAA,uBAAA,EAA2C;AACzC,cAAMC,QAAQ,GAAGD,SAAS,CAA1B,GAA0B,CAA1B;;AAEA,cAAIC,QAAQ,IAAIA,QAAQ,CAARA,IAAAA,KAAhB,UAAA,EAA8C;AAC5CJ,YAAAA,uBAAuB,CAAvBA,GAAuB,CAAvBA,GAA+B,KAAA,mBAAA,CAAyBA,uBAAuB,CAA/EA,GAA+E,CAAhD,CAA/BA;AACD;AACF;AACF;;AAEDK,MAAAA,MAAM,CAANA,MAAAA,CAAAA,QAAAA,EAAAA,aAAAA,EAAAA,uBAAAA,EAKE;AACEjC,QAAAA,EAAE,EAAA,GAAA,MAAA,CAAK,KAAA,KAAA,CAAL,EAAA,EAAA,GAAA,EAAA,MAAA,CADJ,UACI,CADJ;AAEEkC,QAAAA,cAAc,EAAE,MAAM,CAAN,MAAA,CACd;AACEC,UAAAA,GAAG,EAAE,KAAA,KAAA,CAAA,cAAA,CAA0BA;AADjC,SADc,EAIdvB,aAAa,CAJC,cAAA,EAAA,0BAAA;AAFlB,OALFqB;AAnDmC,UAAA,yBAAA,GAAA,IAAA;AAAA,UAAA,iBAAA,GAAA,KAAA;AAAA,UAAA,cAAA,GAAA,SAAA;;AAAA,UAAA;AAqEnC,aAAA,IAAA,SAAA,GAAwBP,UAAxB,CAAA,MAAA,CAAA,QAAA,CAAwBA,EAAxB,EAAA,KAAA,EAAA,EAAA,yBAAA,GAAA,CAAA,KAAA,GAAA,SAAA,CAAA,IAAA,EAAA,EAAA,IAAA,CAAA,EAAA,yBAAA,GAAA,IAAA,EAAoC;AAAA,cAAzBU,SAAyB,GAAA,KAAA,CAAA,KAAA;AAClC,cAAMC,gBAAgB,GAAGD,SAAS,CAATA,gBAAAA,CAAAA,IAAAA,CAAAA,IAAAA,EAAzB,SAAyBA,CAAzB;;AACA,cAAA,gBAAA,EAAsB;AACpBH,YAAAA,MAAM,CAANA,MAAAA,CAAAA,QAAAA,EAAAA,gBAAAA,EAA0C;AACxCC,cAAAA,cAAc,EAAED,MAAM,CAANA,MAAAA,CAAcN,QAAQ,CAAtBM,cAAAA,EAAuCI,gBAAgB,CAAvDJ,cAAAA;AADwB,aAA1CA;AAGD;AACF;AA5EkC,OAAA,CAAA,OAAA,GAAA,EAAA;AAAA,QAAA,iBAAA,GAAA,IAAA;AAAA,QAAA,cAAA,GAAA,GAAA;AAAA,OAAA,SAAA;AAAA,YAAA;AAAA,cAAA,CAAA,yBAAA,IAAA,SAAA,CAAA,QAAA,CAAA,IAAA,IAAA,EAAA;AAAA,YAAA,SAAA,CAAA,QAAA,CAAA;AAAA;AAAA,SAAA,SAAA;AAAA,cAAA,iBAAA,EAAA;AAAA,kBAAA,cAAA;AAAA;AAAA;AAAA;;AA8EnC,aAAA,QAAA;AACD;;;2CAEsB;AACrB,aAAA,IAAA;AACD;;;oCAGe;AAAA,UACTK,SADS,GACI,KADJ,aACI,CADJ,SAAA;AAEd,UAAMC,YAAY,GAAG,CAAA,SAAA,IAAc,KAAnC,WAAmC,EAAnC;;AACA,UAAA,YAAA,EAAkB;AAChBD,QAAAA,SAAS,GAAG,KAAZA,YAAY,EAAZA;AAIAA,QAAAA,SAAS,GAAGE,OAAO,CAAA,SAAA,EAAnBF,OAAmB,CAAnBA;AACA,aAAA,aAAA,CAAA,SAAA,GAAA,SAAA;AACD;;AACDG,MAAAA,KAAK,CAAA,mBAAA,EAAA,IAAA,EAAA,YAAA,EAALA,SAAK,CAALA;AAXc,UAAA,0BAAA,GAAA,IAAA;AAAA,UAAA,kBAAA,GAAA,KAAA;AAAA,UAAA,eAAA,GAAA,SAAA;;AAAA,UAAA;AAed,aAAA,IAAA,UAAA,GAAoBH,SAApB,CAAA,MAAA,CAAA,QAAA,CAAoBA,EAApB,EAAA,MAAA,EAAA,EAAA,0BAAA,GAAA,CAAA,MAAA,GAAA,UAAA,CAAA,IAAA,EAAA,EAAA,IAAA,CAAA,EAAA,0BAAA,GAAA,IAAA,EAA+B;AAAA,cAApB5C,KAAoB,GAAA,MAAA,CAAA,KAAA;AAC7BA,UAAAA,KAAK,CAALA,MAAAA,GAAAA,IAAAA;AACD;AAjBa,OAAA,CAAA,OAAA,GAAA,EAAA;AAAA,QAAA,kBAAA,GAAA,IAAA;AAAA,QAAA,eAAA,GAAA,GAAA;AAAA,OAAA,SAAA;AAAA,YAAA;AAAA,cAAA,CAAA,0BAAA,IAAA,UAAA,CAAA,QAAA,CAAA,IAAA,IAAA,EAAA;AAAA,YAAA,UAAA,CAAA,QAAA,CAAA;AAAA;AAAA,SAAA,SAAA;AAAA,cAAA,kBAAA,EAAA;AAAA,kBAAA,eAAA;AAAA;AAAA;AAAA;AAkBf;;;wBA5MiB;AAChB,aAAA,IAAA;AACD;;;wBAEc;AACb,aAAO,IAAA,CAAA,eAAA,CAAA,cAAA,CAAA,SAAA,CAAA,EAAA,UAAA,EAAA,IAAA,CAAA,IAAkB,KAAA,YAAA,GAAA,KAAA,CAA0B,UAAA,KAAA,EAAK;AAAA,eAAIA,KAAK,CAAT,QAAA;AAAxD,OAAyB,CAAzB;AACD;;;;EAPyCD,K;;SAAvBD,c;AAgNrBA,cAAc,CAAdA,SAAAA,GAAAA,gBAAAA","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport Layer from './layer';\nimport debug from '../debug';\nimport {flatten} from '../utils/flatten';\n\nconst TRACE_RENDER_LAYERS = 'compositeLayer.renderLayers';\n\nexport default class CompositeLayer extends Layer {\n  get isComposite() {\n    return true;\n  }\n\n  get isLoaded() {\n    return super.isLoaded && this.getSubLayers().every(layer => layer.isLoaded);\n  }\n\n  getSubLayers() {\n    return (this.internalState && this.internalState.subLayers) || [];\n  }\n\n  // initializeState is usually not needed for composite layers\n  // Provide empty definition to disable check for missing definition\n  initializeState() {}\n\n  // Updates selected state members and marks the composite layer to need rerender\n  setState(updateObject) {\n    super.setState(updateObject);\n    // Trigger a layer update\n    // Although conceptually layer.draw and compositeLayer.renderLayers are equivalent,\n    // they are executed during different lifecycles.\n    // draw can be called without calling updateState (e.g. most viewport changes),\n    // while renderLayers can only be called during a recursive layer update.\n    this.setNeedsUpdate();\n  }\n\n  // called to augment the info object that is bubbled up from a sublayer\n  // override Layer.getPickingInfo() because decoding / setting uniform do\n  // not apply to a composite layer.\n  // @return null to cancel event\n  getPickingInfo({info}) {\n    const {object} = info;\n    const isDataWrapped =\n      object && object.__source && object.__source.parent && object.__source.parent.id === this.id;\n\n    if (!isDataWrapped) {\n      return info;\n    }\n\n    return Object.assign(info, {\n      // override object with picked data\n      object: object.__source.object,\n      index: object.__source.index\n    });\n  }\n\n  // Implement to generate subLayers\n  renderLayers() {\n    return null;\n  }\n\n  // Returns true if sub layer needs to be rendered\n  shouldRenderSubLayer(id, data) {\n    const {_subLayerProps: overridingProps} = this.props;\n\n    return (data && data.length) || (overridingProps && overridingProps[id]);\n  }\n\n  // Returns sub layer class for a specific sublayer\n  getSubLayerClass(id, DefaultLayerClass) {\n    const {_subLayerProps: overridingProps} = this.props;\n\n    return (\n      (overridingProps && overridingProps[id] && overridingProps[id].type) || DefaultLayerClass\n    );\n  }\n\n  // When casting user data into another format to pass to sublayers,\n  // add reference to the original object and object index\n  getSubLayerRow(row, sourceObject, sourceObjectIndex) {\n    row.__source = {\n      parent: this,\n      object: sourceObject,\n      index: sourceObjectIndex\n    };\n    return row;\n  }\n\n  // Some composite layers cast user data into another format before passing to sublayers\n  // We need to unwrap them before calling the accessor so that they see the original data\n  // objects\n  getSubLayerAccessor(accessor) {\n    if (typeof accessor === 'function') {\n      const objectInfo = {\n        data: this.props.data,\n        target: []\n      };\n      return (x, i) => {\n        if (x.__source) {\n          objectInfo.index = x.__source.index;\n          return accessor(x.__source.object, objectInfo);\n        }\n        return accessor(x, i);\n      };\n    }\n    return accessor;\n  }\n\n  // Returns sub layer props for a specific sublayer\n  getSubLayerProps(sublayerProps = {}) {\n    const {\n      opacity,\n      pickable,\n      visible,\n      parameters,\n      getPolygonOffset,\n      highlightedObjectIndex,\n      autoHighlight,\n      highlightColor,\n      coordinateSystem,\n      coordinateOrigin,\n      wrapLongitude,\n      positionFormat,\n      modelMatrix,\n      extensions,\n      _subLayerProps: overridingProps\n    } = this.props;\n    const newProps = {\n      opacity,\n      pickable,\n      visible,\n      parameters,\n      getPolygonOffset,\n      highlightedObjectIndex,\n      autoHighlight,\n      highlightColor,\n      coordinateSystem,\n      coordinateOrigin,\n      wrapLongitude,\n      positionFormat,\n      modelMatrix,\n      extensions\n    };\n\n    const overridingSublayerProps = overridingProps && overridingProps[sublayerProps.id];\n    const overridingSublayerTriggers =\n      overridingSublayerProps && overridingSublayerProps.updateTriggers;\n    const sublayerId = sublayerProps.id || 'sublayer';\n\n    if (overridingSublayerProps) {\n      const propTypes = this.constructor._propTypes;\n      for (const key in overridingSublayerProps) {\n        const propType = propTypes[key];\n        // eslint-disable-next-line\n        if (propType && propType.type === 'accessor') {\n          overridingSublayerProps[key] = this.getSubLayerAccessor(overridingSublayerProps[key]);\n        }\n      }\n    }\n\n    Object.assign(\n      newProps,\n      sublayerProps,\n      // experimental feature that allows users to override sublayer props via parent layer prop\n      overridingSublayerProps,\n      {\n        id: `${this.props.id}-${sublayerId}`,\n        updateTriggers: Object.assign(\n          {\n            all: this.props.updateTriggers.all\n          },\n          sublayerProps.updateTriggers,\n          overridingSublayerTriggers\n        )\n      }\n    );\n\n    // Pass through extension props\n    for (const extension of extensions) {\n      const passThroughProps = extension.getSubLayerProps.call(this, extension);\n      if (passThroughProps) {\n        Object.assign(newProps, passThroughProps, {\n          updateTriggers: Object.assign(newProps.updateTriggers, passThroughProps.updateTriggers)\n        });\n      }\n    }\n\n    return newProps;\n  }\n\n  _getAttributeManager() {\n    return null;\n  }\n\n  // Called by layer manager to render subLayers\n  _renderLayers() {\n    let {subLayers} = this.internalState;\n    const shouldUpdate = !subLayers || this.needsUpdate();\n    if (shouldUpdate) {\n      subLayers = this.renderLayers();\n      // Flatten the returned array, removing any null, undefined or false\n      // this allows layers to render sublayers conditionally\n      // (see CompositeLayer.renderLayers docs)\n      subLayers = flatten(subLayers, Boolean);\n      this.internalState.subLayers = subLayers;\n    }\n    debug(TRACE_RENDER_LAYERS, this, shouldUpdate, subLayers);\n\n    // populate reference to parent layer (this layer)\n    // NOTE: needs to be done even when reusing layers as the parent may have changed\n    for (const layer of subLayers) {\n      layer.parent = this;\n    }\n  }\n}\n\nCompositeLayer.layerName = 'CompositeLayer';\n"]},"metadata":{},"sourceType":"module"}