{"ast":null,"code":"// automatically generated by the FlatBuffers compiler, do not modify\nimport * as NS7624605610262437867 from './Schema';\nexport var org;\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        flatbuf.Schema = NS7624605610262437867.org.apache.arrow.flatbuf.Schema;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n *\n * @enum {number}\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        let MessageHeader;\n\n        (function (MessageHeader) {\n          MessageHeader[MessageHeader[\"NONE\"] = 0] = \"NONE\";\n          MessageHeader[MessageHeader[\"Schema\"] = 1] = \"Schema\";\n          MessageHeader[MessageHeader[\"DictionaryBatch\"] = 2] = \"DictionaryBatch\";\n          MessageHeader[MessageHeader[\"RecordBatch\"] = 3] = \"RecordBatch\";\n          MessageHeader[MessageHeader[\"Tensor\"] = 4] = \"Tensor\";\n          MessageHeader[MessageHeader[\"SparseTensor\"] = 5] = \"SparseTensor\";\n        })(MessageHeader = flatbuf.MessageHeader || (flatbuf.MessageHeader = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class FieldNode {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns FieldNode\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * The number of value slots in the Arrow array at this level of a nested\n           * tree\n           *\n           * @returns flatbuffers.Long\n           */\n\n\n          length() {\n            return this.bb.readInt64(this.bb_pos);\n          }\n          /**\n           * The number of observed nulls. Fields with null_count == 0 may choose not\n           * to write their physical validity bitmap out as a materialized buffer,\n           * instead setting the length of the bitmap buffer to 0.\n           *\n           * @returns flatbuffers.Long\n           */\n\n\n          nullCount() {\n            return this.bb.readInt64(this.bb_pos + 8);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Long length\n           * @param flatbuffers.Long null_count\n           * @returns flatbuffers.Offset\n           */\n\n\n          static createFieldNode(builder, length, null_count) {\n            builder.prep(8, 16);\n            builder.writeInt64(null_count);\n            builder.writeInt64(length);\n            return builder.offset();\n          }\n\n        }\n\n        flatbuf.FieldNode = FieldNode;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class RecordBatch {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns RecordBatch\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param RecordBatch= obj\n           * @returns RecordBatch\n           */\n\n\n          static getRootAsRecordBatch(bb, obj) {\n            return (obj || new RecordBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * number of records / rows. The arrays in the batch should all have this\n           * length\n           *\n           * @returns flatbuffers.Long\n           */\n\n\n          length() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n\n            return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n          }\n          /**\n           * Nodes correspond to the pre-ordered flattened logical schema\n           *\n           * @param number index\n           * @param org.apache.arrow.flatbuf.FieldNode= obj\n           * @returns org.apache.arrow.flatbuf.FieldNode\n           */\n\n\n          nodes(index, obj) {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n\n            return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode()).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n          }\n          /**\n           * @returns number\n           */\n\n\n          nodesLength() {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n          }\n          /**\n           * Buffers correspond to the pre-ordered flattened buffer tree\n           *\n           * The number of buffers appended to this list depends on the schema. For\n           * example, most primitive arrays will have 2 buffers, 1 for the validity\n           * bitmap and 1 for the values. For struct arrays, there will only be a\n           * single buffer for the validity (nulls) bitmap\n           *\n           * @param number index\n           * @param org.apache.arrow.flatbuf.Buffer= obj\n           * @returns org.apache.arrow.flatbuf.Buffer\n           */\n\n\n          buffers(index, obj) {\n            let offset = this.bb.__offset(this.bb_pos, 8);\n\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.Buffer()).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n          }\n          /**\n           * @returns number\n           */\n\n\n          buffersLength() {\n            let offset = this.bb.__offset(this.bb_pos, 8);\n\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startRecordBatch(builder) {\n            builder.startObject(3);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Long length\n           */\n\n\n          static addLength(builder, length) {\n            builder.addFieldInt64(0, length, builder.createLong(0, 0));\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset nodesOffset\n           */\n\n\n          static addNodes(builder, nodesOffset) {\n            builder.addFieldOffset(1, nodesOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param number numElems\n           */\n\n\n          static startNodesVector(builder, numElems) {\n            builder.startVector(16, numElems, 8);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset buffersOffset\n           */\n\n\n          static addBuffers(builder, buffersOffset) {\n            builder.addFieldOffset(2, buffersOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param number numElems\n           */\n\n\n          static startBuffersVector(builder, numElems) {\n            builder.startVector(16, numElems, 8);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endRecordBatch(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createRecordBatch(builder, length, nodesOffset, buffersOffset) {\n            RecordBatch.startRecordBatch(builder);\n            RecordBatch.addLength(builder, length);\n            RecordBatch.addNodes(builder, nodesOffset);\n            RecordBatch.addBuffers(builder, buffersOffset);\n            return RecordBatch.endRecordBatch(builder);\n          }\n\n        }\n\n        flatbuf.RecordBatch = RecordBatch;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class DictionaryBatch {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns DictionaryBatch\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param DictionaryBatch= obj\n           * @returns DictionaryBatch\n           */\n\n\n          static getRootAsDictionaryBatch(bb, obj) {\n            return (obj || new DictionaryBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @returns flatbuffers.Long\n           */\n\n\n          id() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n\n            return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n          }\n          /**\n           * @param org.apache.arrow.flatbuf.RecordBatch= obj\n           * @returns org.apache.arrow.flatbuf.RecordBatch|null\n           */\n\n\n          data(obj) {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n\n            return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n          }\n          /**\n           * If isDelta is true the values in the dictionary are to be appended to a\n           * dictionary with the indicated id\n           *\n           * @returns boolean\n           */\n\n\n          isDelta() {\n            let offset = this.bb.__offset(this.bb_pos, 8);\n\n            return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startDictionaryBatch(builder) {\n            builder.startObject(3);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Long id\n           */\n\n\n          static addId(builder, id) {\n            builder.addFieldInt64(0, id, builder.createLong(0, 0));\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset dataOffset\n           */\n\n\n          static addData(builder, dataOffset) {\n            builder.addFieldOffset(1, dataOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param boolean isDelta\n           */\n\n\n          static addIsDelta(builder, isDelta) {\n            builder.addFieldInt8(2, +isDelta, +false);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endDictionaryBatch(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createDictionaryBatch(builder, id, dataOffset, isDelta) {\n            DictionaryBatch.startDictionaryBatch(builder);\n            DictionaryBatch.addId(builder, id);\n            DictionaryBatch.addData(builder, dataOffset);\n            DictionaryBatch.addIsDelta(builder, isDelta);\n            return DictionaryBatch.endDictionaryBatch(builder);\n          }\n\n        }\n\n        flatbuf.DictionaryBatch = DictionaryBatch;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class Message {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Message\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Message= obj\n           * @returns Message\n           */\n\n\n          static getRootAsMessage(bb, obj) {\n            return (obj || new Message()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @returns org.apache.arrow.flatbuf.MetadataVersion\n           */\n\n\n          version() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n\n            return offset ?\n            /**  */\n            this.bb.readInt16(this.bb_pos + offset) : NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1;\n          }\n          /**\n           * @returns org.apache.arrow.flatbuf.MessageHeader\n           */\n\n\n          headerType() {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n\n            return offset ?\n            /**  */\n            this.bb.readUint8(this.bb_pos + offset) : org.apache.arrow.flatbuf.MessageHeader.NONE;\n          }\n          /**\n           * @param flatbuffers.Table obj\n           * @returns ?flatbuffers.Table\n           */\n\n\n          header(obj) {\n            let offset = this.bb.__offset(this.bb_pos, 8);\n\n            return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n          }\n          /**\n           * @returns flatbuffers.Long\n           */\n\n\n          bodyLength() {\n            let offset = this.bb.__offset(this.bb_pos, 10);\n\n            return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n          }\n          /**\n           * @param number index\n           * @param org.apache.arrow.flatbuf.KeyValue= obj\n           * @returns org.apache.arrow.flatbuf.KeyValue\n           */\n\n\n          customMetadata(index, obj) {\n            let offset = this.bb.__offset(this.bb_pos, 12);\n\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n          }\n          /**\n           * @returns number\n           */\n\n\n          customMetadataLength() {\n            let offset = this.bb.__offset(this.bb_pos, 12);\n\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startMessage(builder) {\n            builder.startObject(5);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param org.apache.arrow.flatbuf.MetadataVersion version\n           */\n\n\n          static addVersion(builder, version) {\n            builder.addFieldInt16(0, version, NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param org.apache.arrow.flatbuf.MessageHeader headerType\n           */\n\n\n          static addHeaderType(builder, headerType) {\n            builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset headerOffset\n           */\n\n\n          static addHeader(builder, headerOffset) {\n            builder.addFieldOffset(2, headerOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Long bodyLength\n           */\n\n\n          static addBodyLength(builder, bodyLength) {\n            builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset customMetadataOffset\n           */\n\n\n          static addCustomMetadata(builder, customMetadataOffset) {\n            builder.addFieldOffset(4, customMetadataOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param Array.<flatbuffers.Offset> data\n           * @returns flatbuffers.Offset\n           */\n\n\n          static createCustomMetadataVector(builder, data) {\n            builder.startVector(4, data.length, 4);\n\n            for (let i = data.length - 1; i >= 0; i--) {\n              builder.addOffset(data[i]);\n            }\n\n            return builder.endVector();\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param number numElems\n           */\n\n\n          static startCustomMetadataVector(builder, numElems) {\n            builder.startVector(4, numElems, 4);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endMessage(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset offset\n           */\n\n\n          static finishMessageBuffer(builder, offset) {\n            builder.finish(offset);\n          }\n\n          static createMessage(builder, version, headerType, headerOffset, bodyLength, customMetadataOffset) {\n            Message.startMessage(builder);\n            Message.addVersion(builder, version);\n            Message.addHeaderType(builder, headerType);\n            Message.addHeader(builder, headerOffset);\n            Message.addBodyLength(builder, bodyLength);\n            Message.addCustomMetadata(builder, customMetadataOffset);\n            return Message.endMessage(builder);\n          }\n\n        }\n\n        flatbuf.Message = Message;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));","map":{"version":3,"sources":["fb/Message.ts"],"names":[],"mappings":"AAAA;AAGA,OAAO,KAAK,qBAAZ,MAAuC,UAAvC;AACA,OAAM,IAAW,GAAX;;AAAN,CAAA,UAAiB,GAAjB,EAAoB;AAAC,MAAA,MAAA;;AAAA,GAAA,UAAA,MAAA,EAAM;AAAC,QAAA,KAAA;;AAAA,KAAA,UAAA,KAAA,EAAK;AAAC,UAAA,OAAA;;AAAA,OAAA,UAAA,OAAA,EAAO;AACvB,QAAA,OAAA,CAAA,MAAA,GAAS,qBAAqB,CAAC,GAAtB,CAA0B,MAA1B,CAAiC,KAAjC,CAAuC,OAAvC,CAA+C,MAAxD;AACjB,OAFiC,EAAA,OAAO,GAAP,KAAA,CAAA,OAAA,KAAA,KAAA,CAAA,OAAA,GAAO,EAAP,CAAA;AAEjC,KAF2B,EAAA,KAAK,GAAL,MAAA,CAAA,KAAA,KAAA,MAAA,CAAA,KAAA,GAAK,EAAL,CAAA;AAE3B,GAFoB,EAAA,MAAM,GAAN,GAAA,CAAA,MAAA,KAAA,GAAA,CAAA,MAAA,GAAM,EAAN,CAAA;AAEpB,CAFD,EAAiB,GAAG,KAAH,GAAG,GAAA,EAAA,CAApB;AAGA;;;;;;;;;;;;;;AAYA,CAAA,UAAiB,GAAjB,EAAoB;AAAC,MAAA,MAAA;;AAAA,GAAA,UAAA,MAAA,EAAM;AAAC,QAAA,KAAA;;AAAA,KAAA,UAAA,KAAA,EAAK;AAAC,UAAA,OAAA;;AAAA,OAAA,UAAA,OAAA,EAAO;AACrC,YAAY,aAAZ;;AAAA,SAAA,UAAY,aAAZ,EAAyB;AACrB,UAAA,aAAA,CAAA,aAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA;AACA,UAAA,aAAA,CAAA,aAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;AACA,UAAA,aAAA,CAAA,aAAA,CAAA,iBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,iBAAA;AACA,UAAA,aAAA,CAAA,aAAA,CAAA,aAAA,CAAA,GAAA,CAAA,CAAA,GAAA,aAAA;AACA,UAAA,aAAA,CAAA,aAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;AACA,UAAA,aAAA,CAAA,aAAA,CAAA,cAAA,CAAA,GAAA,CAAA,CAAA,GAAA,cAAA;AACH,SAPD,EAAY,aAAa,GAAb,OAAA,CAAA,aAAA,KAAA,OAAA,CAAA,aAAA,GAAa,EAAb,CAAZ;AAQH,OATiC,EAAA,OAAO,GAAP,KAAA,CAAA,OAAA,KAAA,KAAA,CAAA,OAAA,GAAO,EAAP,CAAA;AASjC,KAT2B,EAAA,KAAK,GAAL,MAAA,CAAA,KAAA,KAAA,MAAA,CAAA,KAAA,GAAK,EAAL,CAAA;AAS3B,GAToB,EAAA,MAAM,GAAN,GAAA,CAAA,MAAA,KAAA,GAAA,CAAA,MAAA,GAAM,EAAN,CAAA;AASpB,CATD,EAAiB,GAAG,KAAH,GAAG,GAAA,EAAA,CAApB;AAWA;;;;;;;;;;;;;;;AAaA,CAAA,UAAiB,GAAjB,EAAoB;AAAC,MAAA,MAAA;;AAAA,GAAA,UAAA,MAAA,EAAM;AAAC,QAAA,KAAA;;AAAA,KAAA,UAAA,KAAA,EAAK;AAAC,UAAA,OAAA;;AAAA,OAAA,UAAA,OAAA,EAAO;AACrC,cAAa,SAAb,CAAsB;AAAtB,UAAA,WAAA,GAAA;AACI,iBAAA,EAAA,GAAoC,IAApC;AAEA,iBAAA,MAAA,GAAiB,CAAjB;AA8CH;AA7CG;;;;;;;AAKA,UAAA,MAAM,CAAC,CAAD,EAAY,EAAZ,EAAsC;AACxC,iBAAK,MAAL,GAAc,CAAd;AACA,iBAAK,EAAL,GAAU,EAAV;AACA,mBAAO,IAAP;AACH;AAED;;;;;;;;AAMA,UAAA,MAAM,GAAA;AACF,mBAAO,KAAK,EAAL,CAAS,SAAT,CAAmB,KAAK,MAAxB,CAAP;AACH;AAED;;;;;;;;;AAOA,UAAA,SAAS,GAAA;AACL,mBAAO,KAAK,EAAL,CAAS,SAAT,CAAmB,KAAK,MAAL,GAAc,CAAjC,CAAP;AACH;AAED;;;;;;;;AAMA,iBAAO,eAAP,CAAuB,OAAvB,EAAqD,MAArD,EAA+E,UAA/E,EAA2G;AACvG,YAAA,OAAO,CAAC,IAAR,CAAa,CAAb,EAAgB,EAAhB;AACA,YAAA,OAAO,CAAC,UAAR,CAAmB,UAAnB;AACA,YAAA,OAAO,CAAC,UAAR,CAAmB,MAAnB;AACA,mBAAO,OAAO,CAAC,MAAR,EAAP;AACH;;AA/CiB;;AAAT,QAAA,OAAA,CAAA,SAAA,GAAS,SAAT;AAkDhB,OAnDiC,EAAA,OAAO,GAAP,KAAA,CAAA,OAAA,KAAA,KAAA,CAAA,OAAA,GAAO,EAAP,CAAA;AAmDjC,KAnD2B,EAAA,KAAK,GAAL,MAAA,CAAA,KAAA,KAAA,MAAA,CAAA,KAAA,GAAK,EAAL,CAAA;AAmD3B,GAnDoB,EAAA,MAAM,GAAN,GAAA,CAAA,MAAA,KAAA,GAAA,CAAA,MAAA,GAAM,EAAN,CAAA;AAmDpB,CAnDD,EAAiB,GAAG,KAAH,GAAG,GAAA,EAAA,CAApB;AAoDA;;;;;;;;;AAOA,CAAA,UAAiB,GAAjB,EAAoB;AAAC,MAAA,MAAA;;AAAA,GAAA,UAAA,MAAA,EAAM;AAAC,QAAA,KAAA;;AAAA,KAAA,UAAA,KAAA,EAAK;AAAC,UAAA,OAAA;;AAAA,OAAA,UAAA,OAAA,EAAO;AACrC,cAAa,WAAb,CAAwB;AAAxB,UAAA,WAAA,GAAA;AACI,iBAAA,EAAA,GAAoC,IAApC;AAEA,iBAAA,MAAA,GAAiB,CAAjB;AA4IH;AA3IG;;;;;;;AAKA,UAAA,MAAM,CAAC,CAAD,EAAY,EAAZ,EAAsC;AACxC,iBAAK,MAAL,GAAc,CAAd;AACA,iBAAK,EAAL,GAAU,EAAV;AACA,mBAAO,IAAP;AACH;AAED;;;;;;;AAKA,iBAAO,oBAAP,CAA4B,EAA5B,EAAwD,GAAxD,EAAyE;AACrE,mBAAO,CAAC,GAAG,IAAI,IAAI,WAAJ,EAAR,EAAyB,MAAzB,CAAgC,EAAE,CAAC,SAAH,CAAa,EAAE,CAAC,QAAH,EAAb,IAA8B,EAAE,CAAC,QAAH,EAA9D,EAA6E,EAA7E,CAAP;AACH;AAED;;;;;;;;AAMA,UAAA,MAAM,GAAA;AACF,gBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,CAA/B,CAAb;;AACA,mBAAO,MAAM,GAAG,KAAK,EAAL,CAAS,SAAT,CAAmB,KAAK,MAAL,GAAc,MAAjC,CAAH,GAA8C,KAAK,EAAL,CAAS,UAAT,CAAoB,CAApB,EAAuB,CAAvB,CAA3D;AACH;AAED;;;;;;;;;AAOA,UAAA,KAAK,CAAC,KAAD,EAAgB,GAAhB,EAAwD;AACzD,gBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,CAA/B,CAAb;;AACA,mBAAO,MAAM,GAAG,CAAC,GAAG,IAAI,IAAI,GAAG,CAAC,MAAJ,CAAW,KAAX,CAAiB,OAAjB,CAAyB,SAA7B,EAAR,EAAgD,MAAhD,CAAuD,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAL,GAAc,MAAhC,IAA0C,KAAK,GAAG,EAAzG,EAA6G,KAAK,EAAlH,CAAH,GAA4H,IAAzI;AACH;AAED;;;;;AAGA,UAAA,WAAW,GAAA;AACP,gBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,CAA/B,CAAb;;AACA,mBAAO,MAAM,GAAG,KAAK,EAAL,CAAS,YAAT,CAAsB,KAAK,MAAL,GAAc,MAApC,CAAH,GAAiD,CAA9D;AACH;AAED;;;;;;;;;;;;;;AAYA,UAAA,OAAO,CAAC,KAAD,EAAgB,GAAhB,EAA2E;AAC9E,gBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,CAA/B,CAAb;;AACA,mBAAO,MAAM,GAAG,CAAC,GAAG,IAAI,IAAI,qBAAqB,CAAC,GAAtB,CAA0B,MAA1B,CAAiC,KAAjC,CAAuC,OAAvC,CAA+C,MAAnD,EAAR,EAAmE,MAAnE,CAA0E,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAL,GAAc,MAAhC,IAA0C,KAAK,GAAG,EAA5H,EAAgI,KAAK,EAArI,CAAH,GAA+I,IAA5J;AACH;AAED;;;;;AAGA,UAAA,aAAa,GAAA;AACT,gBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,CAA/B,CAAb;;AACA,mBAAO,MAAM,GAAG,KAAK,EAAL,CAAS,YAAT,CAAsB,KAAK,MAAL,GAAc,MAApC,CAAH,GAAiD,CAA9D;AACH;AAED;;;;;AAGA,iBAAO,gBAAP,CAAwB,OAAxB,EAAoD;AAChD,YAAA,OAAO,CAAC,WAAR,CAAoB,CAApB;AACH;AAED;;;;;;AAIA,iBAAO,SAAP,CAAiB,OAAjB,EAA+C,MAA/C,EAAuE;AACnE,YAAA,OAAO,CAAC,aAAR,CAAsB,CAAtB,EAAyB,MAAzB,EAAiC,OAAO,CAAC,UAAR,CAAmB,CAAnB,EAAsB,CAAtB,CAAjC;AACH;AAED;;;;;;AAIA,iBAAO,QAAP,CAAgB,OAAhB,EAA8C,WAA9C,EAA6E;AACzE,YAAA,OAAO,CAAC,cAAR,CAAuB,CAAvB,EAA0B,WAA1B,EAAuC,CAAvC;AACH;AAED;;;;;;AAIA,iBAAO,gBAAP,CAAwB,OAAxB,EAAsD,QAAtD,EAAsE;AAClE,YAAA,OAAO,CAAC,WAAR,CAAoB,EAApB,EAAwB,QAAxB,EAAkC,CAAlC;AACH;AAED;;;;;;AAIA,iBAAO,UAAP,CAAkB,OAAlB,EAAgD,aAAhD,EAAiF;AAC7E,YAAA,OAAO,CAAC,cAAR,CAAuB,CAAvB,EAA0B,aAA1B,EAAyC,CAAzC;AACH;AAED;;;;;;AAIA,iBAAO,kBAAP,CAA0B,OAA1B,EAAwD,QAAxD,EAAwE;AACpE,YAAA,OAAO,CAAC,WAAR,CAAoB,EAApB,EAAwB,QAAxB,EAAkC,CAAlC;AACH;AAED;;;;;;AAIA,iBAAO,cAAP,CAAsB,OAAtB,EAAkD;AAC9C,gBAAI,MAAM,GAAG,OAAO,CAAC,SAAR,EAAb;AACA,mBAAO,MAAP;AACH;;AAED,iBAAO,iBAAP,CAAyB,OAAzB,EAAuD,MAAvD,EAAiF,WAAjF,EAAkH,aAAlH,EAAmJ;AAC/I,YAAA,WAAW,CAAC,gBAAZ,CAA6B,OAA7B;AACA,YAAA,WAAW,CAAC,SAAZ,CAAsB,OAAtB,EAA+B,MAA/B;AACA,YAAA,WAAW,CAAC,QAAZ,CAAqB,OAArB,EAA8B,WAA9B;AACA,YAAA,WAAW,CAAC,UAAZ,CAAuB,OAAvB,EAAgC,aAAhC;AACA,mBAAO,WAAW,CAAC,cAAZ,CAA2B,OAA3B,CAAP;AACH;;AA9ImB;;AAAX,QAAA,OAAA,CAAA,WAAA,GAAW,WAAX;AAgJhB,OAjJiC,EAAA,OAAO,GAAP,KAAA,CAAA,OAAA,KAAA,KAAA,CAAA,OAAA,GAAO,EAAP,CAAA;AAiJjC,KAjJ2B,EAAA,KAAK,GAAL,MAAA,CAAA,KAAA,KAAA,MAAA,CAAA,KAAA,GAAK,EAAL,CAAA;AAiJ3B,GAjJoB,EAAA,MAAM,GAAN,GAAA,CAAA,MAAA,KAAA,GAAA,CAAA,MAAA,GAAM,EAAN,CAAA;AAiJpB,CAjJD,EAAiB,GAAG,KAAH,GAAG,GAAA,EAAA,CAApB;AAkJA;;;;;;;;;;;;AAUA,CAAA,UAAiB,GAAjB,EAAoB;AAAC,MAAA,MAAA;;AAAA,GAAA,UAAA,MAAA,EAAM;AAAC,QAAA,KAAA;;AAAA,KAAA,UAAA,KAAA,EAAK;AAAC,UAAA,OAAA;;AAAA,OAAA,UAAA,OAAA,EAAO;AACrC,cAAa,eAAb,CAA4B;AAA5B,UAAA,WAAA,GAAA;AACI,iBAAA,EAAA,GAAoC,IAApC;AAEA,iBAAA,MAAA,GAAiB,CAAjB;AAgGH;AA/FG;;;;;;;AAKA,UAAA,MAAM,CAAC,CAAD,EAAY,EAAZ,EAAsC;AACxC,iBAAK,MAAL,GAAc,CAAd;AACA,iBAAK,EAAL,GAAU,EAAV;AACA,mBAAO,IAAP;AACH;AAED;;;;;;;AAKA,iBAAO,wBAAP,CAAgC,EAAhC,EAA4D,GAA5D,EAAiF;AAC7E,mBAAO,CAAC,GAAG,IAAI,IAAI,eAAJ,EAAR,EAA6B,MAA7B,CAAoC,EAAE,CAAC,SAAH,CAAa,EAAE,CAAC,QAAH,EAAb,IAA8B,EAAE,CAAC,QAAH,EAAlE,EAAiF,EAAjF,CAAP;AACH;AAED;;;;;AAGA,UAAA,EAAE,GAAA;AACE,gBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,CAA/B,CAAb;;AACA,mBAAO,MAAM,GAAG,KAAK,EAAL,CAAS,SAAT,CAAmB,KAAK,MAAL,GAAc,MAAjC,CAAH,GAA8C,KAAK,EAAL,CAAS,UAAT,CAAoB,CAApB,EAAuB,CAAvB,CAA3D;AACH;AAED;;;;;;AAIA,UAAA,IAAI,CAAC,GAAD,EAA2C;AAC3C,gBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,CAA/B,CAAb;;AACA,mBAAO,MAAM,GAAG,CAAC,GAAG,IAAI,IAAI,GAAG,CAAC,MAAJ,CAAW,KAAX,CAAiB,OAAjB,CAAyB,WAA7B,EAAR,EAAkD,MAAlD,CAAyD,KAAK,EAAL,CAAS,UAAT,CAAoB,KAAK,MAAL,GAAc,MAAlC,CAAzD,EAAoG,KAAK,EAAzG,CAAH,GAAmH,IAAhI;AACH;AAED;;;;;;;;AAMA,UAAA,OAAO,GAAA;AACH,gBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,CAA/B,CAAb;;AACA,mBAAO,MAAM,GAAG,CAAC,CAAC,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAL,GAAc,MAAhC,CAAL,GAA+C,KAA5D;AACH;AAED;;;;;AAGA,iBAAO,oBAAP,CAA4B,OAA5B,EAAwD;AACpD,YAAA,OAAO,CAAC,WAAR,CAAoB,CAApB;AACH;AAED;;;;;;AAIA,iBAAO,KAAP,CAAa,OAAb,EAA2C,EAA3C,EAA+D;AAC3D,YAAA,OAAO,CAAC,aAAR,CAAsB,CAAtB,EAAyB,EAAzB,EAA6B,OAAO,CAAC,UAAR,CAAmB,CAAnB,EAAsB,CAAtB,CAA7B;AACH;AAED;;;;;;AAIA,iBAAO,OAAP,CAAe,OAAf,EAA6C,UAA7C,EAA2E;AACvE,YAAA,OAAO,CAAC,cAAR,CAAuB,CAAvB,EAA0B,UAA1B,EAAsC,CAAtC;AACH;AAED;;;;;;AAIA,iBAAO,UAAP,CAAkB,OAAlB,EAAgD,OAAhD,EAAgE;AAC5D,YAAA,OAAO,CAAC,YAAR,CAAqB,CAArB,EAAwB,CAAC,OAAzB,EAAkC,CAAC,KAAnC;AACH;AAED;;;;;;AAIA,iBAAO,kBAAP,CAA0B,OAA1B,EAAsD;AAClD,gBAAI,MAAM,GAAG,OAAO,CAAC,SAAR,EAAb;AACA,mBAAO,MAAP;AACH;;AAED,iBAAO,qBAAP,CAA6B,OAA7B,EAA2D,EAA3D,EAAiF,UAAjF,EAAiH,OAAjH,EAAiI;AAC7H,YAAA,eAAe,CAAC,oBAAhB,CAAqC,OAArC;AACA,YAAA,eAAe,CAAC,KAAhB,CAAsB,OAAtB,EAA+B,EAA/B;AACA,YAAA,eAAe,CAAC,OAAhB,CAAwB,OAAxB,EAAiC,UAAjC;AACA,YAAA,eAAe,CAAC,UAAhB,CAA2B,OAA3B,EAAoC,OAApC;AACA,mBAAO,eAAe,CAAC,kBAAhB,CAAmC,OAAnC,CAAP;AACH;;AAlGuB;;AAAf,QAAA,OAAA,CAAA,eAAA,GAAe,eAAf;AAoGhB,OArGiC,EAAA,OAAO,GAAP,KAAA,CAAA,OAAA,KAAA,KAAA,CAAA,OAAA,GAAO,EAAP,CAAA;AAqGjC,KArG2B,EAAA,KAAK,GAAL,MAAA,CAAA,KAAA,KAAA,MAAA,CAAA,KAAA,GAAK,EAAL,CAAA;AAqG3B,GArGoB,EAAA,MAAM,GAAN,GAAA,CAAA,MAAA,KAAA,GAAA,CAAA,MAAA,GAAM,EAAN,CAAA;AAqGpB,CArGD,EAAiB,GAAG,KAAH,GAAG,GAAA,EAAA,CAApB;AAsGA;;;;;AAGA,CAAA,UAAiB,GAAjB,EAAoB;AAAC,MAAA,MAAA;;AAAA,GAAA,UAAA,MAAA,EAAM;AAAC,QAAA,KAAA;;AAAA,KAAA,UAAA,KAAA,EAAK;AAAC,UAAA,OAAA;;AAAA,OAAA,UAAA,OAAA,EAAO;AACrC,cAAa,OAAb,CAAoB;AAApB,UAAA,WAAA,GAAA;AACI,iBAAA,EAAA,GAAoC,IAApC;AAEA,iBAAA,MAAA,GAAiB,CAAjB;AAsKH;AArKG;;;;;;;AAKA,UAAA,MAAM,CAAC,CAAD,EAAY,EAAZ,EAAsC;AACxC,iBAAK,MAAL,GAAc,CAAd;AACA,iBAAK,EAAL,GAAU,EAAV;AACA,mBAAO,IAAP;AACH;AAED;;;;;;;AAKA,iBAAO,gBAAP,CAAwB,EAAxB,EAAoD,GAApD,EAAiE;AAC7D,mBAAO,CAAC,GAAG,IAAI,IAAI,OAAJ,EAAR,EAAqB,MAArB,CAA4B,EAAE,CAAC,SAAH,CAAa,EAAE,CAAC,QAAH,EAAb,IAA8B,EAAE,CAAC,QAAH,EAA1D,EAAyE,EAAzE,CAAP;AACH;AAED;;;;;AAGA,UAAA,OAAO,GAAA;AACH,gBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,CAA/B,CAAb;;AACA,mBAAO,MAAM;AAAG;AAAS,iBAAK,EAAL,CAAS,SAAT,CAAmB,KAAK,MAAL,GAAc,MAAjC,CAAZ,GAAwD,qBAAqB,CAAC,GAAtB,CAA0B,MAA1B,CAAiC,KAAjC,CAAuC,OAAvC,CAA+C,eAA/C,CAA+D,EAApI;AACH;AAED;;;;;AAGA,UAAA,UAAU,GAAA;AACN,gBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,CAA/B,CAAb;;AACA,mBAAO,MAAM;AAAG;AAAS,iBAAK,EAAL,CAAS,SAAT,CAAmB,KAAK,MAAL,GAAc,MAAjC,CAAZ,GAAwD,GAAG,CAAC,MAAJ,CAAW,KAAX,CAAiB,OAAjB,CAAyB,aAAzB,CAAuC,IAA5G;AACH;AAED;;;;;;AAIA,UAAA,MAAM,CAA8B,GAA9B,EAAoC;AACtC,gBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,CAA/B,CAAb;;AACA,mBAAO,MAAM,GAAG,KAAK,EAAL,CAAS,OAAT,CAAiB,GAAjB,EAAsB,KAAK,MAAL,GAAc,MAApC,CAAH,GAAiD,IAA9D;AACH;AAED;;;;;AAGA,UAAA,UAAU,GAAA;AACN,gBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,EAA/B,CAAb;;AACA,mBAAO,MAAM,GAAG,KAAK,EAAL,CAAS,SAAT,CAAmB,KAAK,MAAL,GAAc,MAAjC,CAAH,GAA8C,KAAK,EAAL,CAAS,UAAT,CAAoB,CAApB,EAAuB,CAAvB,CAA3D;AACH;AAED;;;;;;;AAKA,UAAA,cAAc,CAAC,KAAD,EAAgB,GAAhB,EAA6E;AACvF,gBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,EAA/B,CAAb;;AACA,mBAAO,MAAM,GAAG,CAAC,GAAG,IAAI,IAAI,qBAAqB,CAAC,GAAtB,CAA0B,MAA1B,CAAiC,KAAjC,CAAuC,OAAvC,CAA+C,QAAnD,EAAR,EAAqE,MAArE,CAA4E,KAAK,EAAL,CAAS,UAAT,CAAoB,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAL,GAAc,MAAhC,IAA0C,KAAK,GAAG,CAAtE,CAA5E,EAAsJ,KAAK,EAA3J,CAAH,GAAqK,IAAlL;AACH;AAED;;;;;AAGA,UAAA,oBAAoB,GAAA;AAChB,gBAAI,MAAM,GAAG,KAAK,EAAL,CAAS,QAAT,CAAkB,KAAK,MAAvB,EAA+B,EAA/B,CAAb;;AACA,mBAAO,MAAM,GAAG,KAAK,EAAL,CAAS,YAAT,CAAsB,KAAK,MAAL,GAAc,MAApC,CAAH,GAAiD,CAA9D;AACH;AAED;;;;;AAGA,iBAAO,YAAP,CAAoB,OAApB,EAAgD;AAC5C,YAAA,OAAO,CAAC,WAAR,CAAoB,CAApB;AACH;AAED;;;;;;AAIA,iBAAO,UAAP,CAAkB,OAAlB,EAAgD,OAAhD,EAAuH;AACnH,YAAA,OAAO,CAAC,aAAR,CAAsB,CAAtB,EAAyB,OAAzB,EAAkC,qBAAqB,CAAC,GAAtB,CAA0B,MAA1B,CAAiC,KAAjC,CAAuC,OAAvC,CAA+C,eAA/C,CAA+D,EAAjG;AACH;AAED;;;;;;AAIA,iBAAO,aAAP,CAAqB,OAArB,EAAmD,UAAnD,EAAqG;AACjG,YAAA,OAAO,CAAC,YAAR,CAAqB,CAArB,EAAwB,UAAxB,EAAoC,GAAG,CAAC,MAAJ,CAAW,KAAX,CAAiB,OAAjB,CAAyB,aAAzB,CAAuC,IAA3E;AACH;AAED;;;;;;AAIA,iBAAO,SAAP,CAAiB,OAAjB,EAA+C,YAA/C,EAA+E;AAC3E,YAAA,OAAO,CAAC,cAAR,CAAuB,CAAvB,EAA0B,YAA1B,EAAwC,CAAxC;AACH;AAED;;;;;;AAIA,iBAAO,aAAP,CAAqB,OAArB,EAAmD,UAAnD,EAA+E;AAC3E,YAAA,OAAO,CAAC,aAAR,CAAsB,CAAtB,EAAyB,UAAzB,EAAqC,OAAO,CAAC,UAAR,CAAmB,CAAnB,EAAsB,CAAtB,CAArC;AACH;AAED;;;;;;AAIA,iBAAO,iBAAP,CAAyB,OAAzB,EAAuD,oBAAvD,EAA+F;AAC3F,YAAA,OAAO,CAAC,cAAR,CAAuB,CAAvB,EAA0B,oBAA1B,EAAgD,CAAhD;AACH;AAED;;;;;;;AAKA,iBAAO,0BAAP,CAAkC,OAAlC,EAAgE,IAAhE,EAA0F;AACtF,YAAA,OAAO,CAAC,WAAR,CAAoB,CAApB,EAAuB,IAAI,CAAC,MAA5B,EAAoC,CAApC;;AACA,iBAAK,IAAI,CAAC,GAAG,IAAI,CAAC,MAAL,GAAc,CAA3B,EAA8B,CAAC,IAAI,CAAnC,EAAsC,CAAC,EAAvC,EAA2C;AACvC,cAAA,OAAO,CAAC,SAAR,CAAkB,IAAI,CAAC,CAAD,CAAtB;AACH;;AACD,mBAAO,OAAO,CAAC,SAAR,EAAP;AACH;AAED;;;;;;AAIA,iBAAO,yBAAP,CAAiC,OAAjC,EAA+D,QAA/D,EAA+E;AAC3E,YAAA,OAAO,CAAC,WAAR,CAAoB,CAApB,EAAuB,QAAvB,EAAiC,CAAjC;AACH;AAED;;;;;;AAIA,iBAAO,UAAP,CAAkB,OAAlB,EAA8C;AAC1C,gBAAI,MAAM,GAAG,OAAO,CAAC,SAAR,EAAb;AACA,mBAAO,MAAP;AACH;AAED;;;;;;AAIA,iBAAO,mBAAP,CAA2B,OAA3B,EAAyD,MAAzD,EAAmF;AAC/E,YAAA,OAAO,CAAC,MAAR,CAAe,MAAf;AACH;;AAED,iBAAO,aAAP,CAAqB,OAArB,EAAmD,OAAnD,EAA4H,UAA5H,EAAgL,YAAhL,EAAkN,UAAlN,EAAgP,oBAAhP,EAAwR;AACpR,YAAA,OAAO,CAAC,YAAR,CAAqB,OAArB;AACA,YAAA,OAAO,CAAC,UAAR,CAAmB,OAAnB,EAA4B,OAA5B;AACA,YAAA,OAAO,CAAC,aAAR,CAAsB,OAAtB,EAA+B,UAA/B;AACA,YAAA,OAAO,CAAC,SAAR,CAAkB,OAAlB,EAA2B,YAA3B;AACA,YAAA,OAAO,CAAC,aAAR,CAAsB,OAAtB,EAA+B,UAA/B;AACA,YAAA,OAAO,CAAC,iBAAR,CAA0B,OAA1B,EAAmC,oBAAnC;AACA,mBAAO,OAAO,CAAC,UAAR,CAAmB,OAAnB,CAAP;AACH;;AAxKe;;AAAP,QAAA,OAAA,CAAA,OAAA,GAAO,OAAP;AA0KhB,OA3KiC,EAAA,OAAO,GAAP,KAAA,CAAA,OAAA,KAAA,KAAA,CAAA,OAAA,GAAO,EAAP,CAAA;AA2KjC,KA3K2B,EAAA,KAAK,GAAL,MAAA,CAAA,KAAA,KAAA,MAAA,CAAA,KAAA,GAAK,EAAL,CAAA;AA2K3B,GA3KoB,EAAA,MAAM,GAAN,GAAA,CAAA,MAAA,KAAA,GAAA,CAAA,MAAA,GAAM,EAAN,CAAA;AA2KpB,CA3KD,EAAiB,GAAG,KAAH,GAAG,GAAA,EAAA,CAApB","sourcesContent":["// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS7624605610262437867 from './Schema';\nexport namespace org.apache.arrow.flatbuf {\n    export import Schema = NS7624605610262437867.org.apache.arrow.flatbuf.Schema;\n}\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum MessageHeader {\n        NONE = 0,\n        Schema = 1,\n        DictionaryBatch = 2,\n        RecordBatch = 3,\n        Tensor = 4,\n        SparseTensor = 5\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FieldNode {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FieldNode\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FieldNode {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * The number of value slots in the Arrow array at this level of a nested\n         * tree\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos);\n        }\n\n        /**\n         * The number of observed nulls. Fields with null_count == 0 may choose not\n         * to write their physical validity bitmap out as a materialized buffer,\n         * instead setting the length of the bitmap buffer to 0.\n         *\n         * @returns flatbuffers.Long\n         */\n        nullCount(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos + 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long length\n         * @param flatbuffers.Long null_count\n         * @returns flatbuffers.Offset\n         */\n        static createFieldNode(builder: flatbuffers.Builder, length: flatbuffers.Long, null_count: flatbuffers.Long): flatbuffers.Offset {\n            builder.prep(8, 16);\n            builder.writeInt64(null_count);\n            builder.writeInt64(length);\n            return builder.offset();\n        }\n\n    }\n}\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class RecordBatch {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns RecordBatch\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): RecordBatch {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param RecordBatch= obj\n         * @returns RecordBatch\n         */\n        static getRootAsRecordBatch(bb: flatbuffers.ByteBuffer, obj?: RecordBatch): RecordBatch {\n            return (obj || new RecordBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * number of records / rows. The arrays in the batch should all have this\n         * length\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * Nodes correspond to the pre-ordered flattened logical schema\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.FieldNode= obj\n         * @returns org.apache.arrow.flatbuf.FieldNode\n         */\n        nodes(index: number, obj?: org.apache.arrow.flatbuf.FieldNode): org.apache.arrow.flatbuf.FieldNode | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        nodesLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * Buffers correspond to the pre-ordered flattened buffer tree\n         *\n         * The number of buffers appended to this list depends on the schema. For\n         * example, most primitive arrays will have 2 buffers, 1 for the validity\n         * bitmap and 1 for the values. For struct arrays, there will only be a\n         * single buffer for the validity (nulls) bitmap\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Buffer= obj\n         * @returns org.apache.arrow.flatbuf.Buffer\n         */\n        buffers(index: number, obj?: NS7624605610262437867.org.apache.arrow.flatbuf.Buffer): NS7624605610262437867.org.apache.arrow.flatbuf.Buffer | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.Buffer).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        buffersLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startRecordBatch(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long length\n         */\n        static addLength(builder: flatbuffers.Builder, length: flatbuffers.Long) {\n            builder.addFieldInt64(0, length, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset nodesOffset\n         */\n        static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, nodesOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(16, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset buffersOffset\n         */\n        static addBuffers(builder: flatbuffers.Builder, buffersOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, buffersOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startBuffersVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(16, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endRecordBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createRecordBatch(builder: flatbuffers.Builder, length: flatbuffers.Long, nodesOffset: flatbuffers.Offset, buffersOffset: flatbuffers.Offset): flatbuffers.Offset {\n            RecordBatch.startRecordBatch(builder);\n            RecordBatch.addLength(builder, length);\n            RecordBatch.addNodes(builder, nodesOffset);\n            RecordBatch.addBuffers(builder, buffersOffset);\n            return RecordBatch.endRecordBatch(builder);\n        }\n    }\n}\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class DictionaryBatch {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DictionaryBatch\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryBatch {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DictionaryBatch= obj\n         * @returns DictionaryBatch\n         */\n        static getRootAsDictionaryBatch(bb: flatbuffers.ByteBuffer, obj?: DictionaryBatch): DictionaryBatch {\n            return (obj || new DictionaryBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns flatbuffers.Long\n         */\n        id(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * @param org.apache.arrow.flatbuf.RecordBatch= obj\n         * @returns org.apache.arrow.flatbuf.RecordBatch|null\n         */\n        data(obj?: org.apache.arrow.flatbuf.RecordBatch): org.apache.arrow.flatbuf.RecordBatch | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * If isDelta is true the values in the dictionary are to be appended to a\n         * dictionary with the indicated id\n         *\n         * @returns boolean\n         */\n        isDelta(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDictionaryBatch(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long id\n         */\n        static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n            builder.addFieldInt64(0, id, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset dataOffset\n         */\n        static addData(builder: flatbuffers.Builder, dataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, dataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isDelta\n         */\n        static addIsDelta(builder: flatbuffers.Builder, isDelta: boolean) {\n            builder.addFieldInt8(2, +isDelta, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDictionaryBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDictionaryBatch(builder: flatbuffers.Builder, id: flatbuffers.Long, dataOffset: flatbuffers.Offset, isDelta: boolean): flatbuffers.Offset {\n            DictionaryBatch.startDictionaryBatch(builder);\n            DictionaryBatch.addId(builder, id);\n            DictionaryBatch.addData(builder, dataOffset);\n            DictionaryBatch.addIsDelta(builder, isDelta);\n            return DictionaryBatch.endDictionaryBatch(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Message {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Message\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Message {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Message= obj\n         * @returns Message\n         */\n        static getRootAsMessage(bb: flatbuffers.ByteBuffer, obj?: Message): Message {\n            return (obj || new Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.MetadataVersion\n         */\n        version(): NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1;\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.MessageHeader\n         */\n        headerType(): org.apache.arrow.flatbuf.MessageHeader {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.MessageHeader.NONE;\n        }\n\n        /**\n         * @param flatbuffers.Table obj\n         * @returns ?flatbuffers.Table\n         */\n        header<T extends flatbuffers.Table>(obj: T): T | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n        }\n\n        /**\n         * @returns flatbuffers.Long\n         */\n        bodyLength(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue): NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startMessage(builder: flatbuffers.Builder) {\n            builder.startObject(5);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.MetadataVersion version\n         */\n        static addVersion(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion) {\n            builder.addFieldInt16(0, version, NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.MessageHeader headerType\n         */\n        static addHeaderType(builder: flatbuffers.Builder, headerType: org.apache.arrow.flatbuf.MessageHeader) {\n            builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset headerOffset\n         */\n        static addHeader(builder: flatbuffers.Builder, headerOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, headerOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long bodyLength\n         */\n        static addBodyLength(builder: flatbuffers.Builder, bodyLength: flatbuffers.Long) {\n            builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(4, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endMessage(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset offset\n         */\n        static finishMessageBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n            builder.finish(offset);\n        }\n\n        static createMessage(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion, headerType: org.apache.arrow.flatbuf.MessageHeader, headerOffset: flatbuffers.Offset, bodyLength: flatbuffers.Long, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Message.startMessage(builder);\n            Message.addVersion(builder, version);\n            Message.addHeaderType(builder, headerType);\n            Message.addHeader(builder, headerOffset);\n            Message.addBodyLength(builder, bodyLength);\n            Message.addCustomMetadata(builder, customMetadataOffset);\n            return Message.endMessage(builder);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}