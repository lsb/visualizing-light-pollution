{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _GL_TYPE_TO_ARRAY_TYP;\n\nimport { GL_TYPE as GL } from '../constants';\nvar GL_TYPE_TO_ARRAY_TYPE = (_GL_TYPE_TO_ARRAY_TYP = {}, _defineProperty(_GL_TYPE_TO_ARRAY_TYP, GL.DOUBLE, Float64Array), _defineProperty(_GL_TYPE_TO_ARRAY_TYP, GL.FLOAT, Float32Array), _defineProperty(_GL_TYPE_TO_ARRAY_TYP, GL.UNSIGNED_SHORT, Uint16Array), _defineProperty(_GL_TYPE_TO_ARRAY_TYP, GL.UNSIGNED_INT, Uint32Array), _defineProperty(_GL_TYPE_TO_ARRAY_TYP, GL.UNSIGNED_BYTE, Uint8Array), _defineProperty(_GL_TYPE_TO_ARRAY_TYP, GL.BYTE, Int8Array), _defineProperty(_GL_TYPE_TO_ARRAY_TYP, GL.SHORT, Int16Array), _defineProperty(_GL_TYPE_TO_ARRAY_TYP, GL.INT, Int32Array), _GL_TYPE_TO_ARRAY_TYP);\nvar NAME_TO_GL_TYPE = {\n  DOUBLE: GL.DOUBLE,\n  FLOAT: GL.FLOAT,\n  UNSIGNED_SHORT: GL.UNSIGNED_SHORT,\n  UNSIGNED_INT: GL.UNSIGNED_INT,\n  UNSIGNED_BYTE: GL.UNSIGNED_BYTE,\n  BYTE: GL.BYTE,\n  SHORT: GL.SHORT,\n  INT: GL.INT\n};\nvar ERR_TYPE_CONVERSION = 'Failed to convert GL type';\n\nvar GLType = function () {\n  function GLType() {\n    _classCallCheck(this, GLType);\n  }\n\n  _createClass(GLType, null, [{\n    key: \"fromTypedArray\",\n    value: function fromTypedArray(arrayOrType) {\n      arrayOrType = ArrayBuffer.isView(arrayOrType) ? arrayOrType.constructor : arrayOrType;\n\n      for (var glType in GL_TYPE_TO_ARRAY_TYPE) {\n        var ArrayType = GL_TYPE_TO_ARRAY_TYPE[glType];\n\n        if (ArrayType === arrayOrType) {\n          return glType;\n        }\n      }\n\n      throw new Error(ERR_TYPE_CONVERSION);\n    }\n  }, {\n    key: \"fromName\",\n    value: function fromName(name) {\n      var glType = NAME_TO_GL_TYPE[name];\n\n      if (!glType) {\n        throw new Error(ERR_TYPE_CONVERSION);\n      }\n\n      return glType;\n    }\n  }, {\n    key: \"getArrayType\",\n    value: function getArrayType(glType) {\n      var clamped = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      switch (glType) {\n        case GL.UNSIGNED_SHORT_5_6_5:\n        case GL.UNSIGNED_SHORT_4_4_4_4:\n        case GL.UNSIGNED_SHORT_5_5_5_1:\n          return Uint16Array;\n\n        default:\n          var ArrayType = GL_TYPE_TO_ARRAY_TYPE[glType];\n\n          if (!ArrayType) {\n            throw new Error(ERR_TYPE_CONVERSION);\n          }\n\n          return ArrayType;\n      }\n    }\n  }, {\n    key: \"getByteSize\",\n    value: function getByteSize(glType) {\n      var ArrayType = GLType.getArrayType(glType);\n      return ArrayType.BYTES_PER_ELEMENT;\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(glType) {\n      return Boolean(GLType.getArrayType(glType));\n    }\n  }, {\n    key: \"createTypedArray\",\n    value: function createTypedArray(glType, buffer) {\n      var byteOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var length = arguments.length > 3 ? arguments[3] : undefined;\n\n      if (length === undefined) {\n        length = (buffer.byteLength - byteOffset) / GLType.getByteSize(glType);\n      }\n\n      var ArrayType = GLType.getArrayType(glType);\n      return new ArrayType(buffer, byteOffset, length);\n    }\n  }]);\n\n  return GLType;\n}();\n\nexport { GLType as default };","map":{"version":3,"sources":["../../../../src/geometry/gl/gl-type.js"],"names":["GL_TYPE","GL_TYPE_TO_ARRAY_TYPE","GL","NAME_TO_GL_TYPE","DOUBLE","FLOAT","UNSIGNED_SHORT","UNSIGNED_INT","UNSIGNED_BYTE","BYTE","SHORT","INT","ERR_TYPE_CONVERSION","GLType","arrayOrType","ArrayBuffer","ArrayType","name","glType","clamped","Boolean","buffer","byteOffset","length"],"mappings":"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","sourcesContent":["import {GL_TYPE as GL} from '../constants';\n\nconst GL_TYPE_TO_ARRAY_TYPE = {\n  [GL.DOUBLE]: Float64Array,\n  [GL.FLOAT]: Float32Array,\n  [GL.UNSIGNED_SHORT]: Uint16Array,\n  [GL.UNSIGNED_INT]: Uint32Array,\n  [GL.UNSIGNED_BYTE]: Uint8Array,\n  [GL.BYTE]: Int8Array,\n  [GL.SHORT]: Int16Array,\n  [GL.INT]: Int32Array\n};\n\nconst NAME_TO_GL_TYPE = {\n  DOUBLE: GL.DOUBLE,\n  FLOAT: GL.FLOAT,\n  UNSIGNED_SHORT: GL.UNSIGNED_SHORT,\n  UNSIGNED_INT: GL.UNSIGNED_INT,\n  UNSIGNED_BYTE: GL.UNSIGNED_BYTE,\n  BYTE: GL.BYTE,\n  SHORT: GL.SHORT,\n  INT: GL.INT\n};\n\nconst ERR_TYPE_CONVERSION = 'Failed to convert GL type';\n\n// Converts TYPED ARRAYS to corresponding GL constant\n// Used to auto deduce gl parameter types\nexport default class GLType {\n  // Signature: fromTypedArray(new Uint8Array())\n  // Signature: fromTypedArray(Uint8Array)\n  static fromTypedArray(arrayOrType) {\n    // If typed array, look up constructor\n    arrayOrType = ArrayBuffer.isView(arrayOrType) ? arrayOrType.constructor : arrayOrType;\n    for (const glType in GL_TYPE_TO_ARRAY_TYPE) {\n      const ArrayType = GL_TYPE_TO_ARRAY_TYPE[glType];\n      if (ArrayType === arrayOrType) {\n        return glType;\n      }\n    }\n    throw new Error(ERR_TYPE_CONVERSION);\n  }\n\n  static fromName(name) {\n    const glType = NAME_TO_GL_TYPE[name];\n    if (!glType) {\n      throw new Error(ERR_TYPE_CONVERSION);\n    }\n    return glType;\n  }\n\n  // Converts GL constant to corresponding typed array type\n  // eslint-disable-next-line complexity\n  static getArrayType(glType, clamped = false) {\n    switch (glType) {\n      case GL.UNSIGNED_SHORT_5_6_5:\n      case GL.UNSIGNED_SHORT_4_4_4_4:\n      case GL.UNSIGNED_SHORT_5_5_5_1:\n        return Uint16Array;\n\n      default:\n        const ArrayType = GL_TYPE_TO_ARRAY_TYPE[glType];\n        if (!ArrayType) {\n          throw new Error(ERR_TYPE_CONVERSION);\n        }\n        return ArrayType;\n    }\n  }\n\n  static getByteSize(glType) {\n    const ArrayType = GLType.getArrayType(glType);\n    return ArrayType.BYTES_PER_ELEMENT;\n  }\n\n  static validate(glType) {\n    return Boolean(GLType.getArrayType(glType));\n  }\n\n  static createTypedArray(glType, buffer, byteOffset = 0, length) {\n    if (length === undefined) {\n      length = (buffer.byteLength - byteOffset) / GLType.getByteSize(glType);\n    }\n\n    const ArrayType = GLType.getArrayType(glType);\n\n    return new ArrayType(buffer, byteOffset, length);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}