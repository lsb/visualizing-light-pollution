{"ast":null,"code":"import { assert } from '@loaders.gl/loader-utils';\nvar DEFAULT_OPTIONS = {\n  dataType: 'arraybuffer',\n  nothrow: true\n};\n\nvar isDataURL = function isDataURL(url) {\n  return url.startsWith('data:');\n};\n\nexport function readFileSyncBrowser(uri, options) {\n  options = getReadFileOptions(options);\n\n  if (isDataURL(uri)) {}\n\n  if (!options.nothrow) {\n    assert(false);\n  }\n\n  return null;\n}\n\nfunction getReadFileOptions() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  options = Object.assign({}, DEFAULT_OPTIONS, options);\n  options.responseType = options.responseType || options.dataType;\n  return options;\n}","map":{"version":3,"sources":["../../../../src/lib/fetch/read-file.browser.js"],"names":["DEFAULT_OPTIONS","dataType","nothrow","isDataURL","url","options","getReadFileOptions","assert","Object"],"mappings":"AACA,SAAA,MAAA,QAAA,0BAAA;AAEA,IAAMA,eAAe,GAAG;AACtBC,EAAAA,QAAQ,EADc,aAAA;AAGtBC,EAAAA,OAAO,EAAE;AAHa,CAAxB;;AAMA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAA,GAAA,EAAG;AAAA,SAAIC,GAAG,CAAHA,UAAAA,CAAJ,OAAIA,CAAJ;AAArB,CAAA;;AAGA,OAAO,SAAA,mBAAA,CAAA,GAAA,EAAA,OAAA,EAA2C;AAChDC,EAAAA,OAAO,GAAGC,kBAAkB,CAA5BD,OAA4B,CAA5BA;;AAEA,MAAIF,SAAS,CAAb,GAAa,CAAb,EAAoB,CAGnB;;AAED,MAAI,CAACE,OAAO,CAAZ,OAAA,EAAsB;AAEpBE,IAAAA,MAAM,CAANA,KAAM,CAANA;AACD;;AAED,SAAA,IAAA;AACD;;AAID,SAAA,kBAAA,GAA0C;AAAA,MAAdF,OAAc,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;AACxCA,EAAAA,OAAO,GAAGG,MAAM,CAANA,MAAAA,CAAAA,EAAAA,EAAAA,eAAAA,EAAVH,OAAUG,CAAVH;AACAA,EAAAA,OAAO,CAAPA,YAAAA,GAAuBA,OAAO,CAAPA,YAAAA,IAAwBA,OAAO,CAAtDA,QAAAA;AACA,SAAA,OAAA;AACD","sourcesContent":["// TODO - this file is not tested\nimport {assert} from '@loaders.gl/loader-utils';\n\nconst DEFAULT_OPTIONS = {\n  dataType: 'arraybuffer',\n  // TODO - this was mostly set to true to make test cases work\n  nothrow: true\n};\n\nconst isDataURL = url => url.startsWith('data:');\n\n// In a few cases (data URIs, files under Node) \"files\" can be read synchronously\nexport function readFileSyncBrowser(uri, options) {\n  options = getReadFileOptions(options);\n\n  if (isDataURL(uri)) {\n    // TODO - removed until decodeDataUri does not depend on Node.js Buffer\n    //   return decodeDataUri(uri);\n  }\n\n  if (!options.nothrow) {\n    // throw new Error('Cant load URI synchronously');\n    assert(false);\n  }\n\n  return null;\n}\n\n// HELPER FUNCTIONS\n\nfunction getReadFileOptions(options = {}) {\n  options = Object.assign({}, DEFAULT_OPTIONS, options);\n  options.responseType = options.responseType || options.dataType;\n  return options;\n}\n"]},"metadata":{},"sourceType":"module"}