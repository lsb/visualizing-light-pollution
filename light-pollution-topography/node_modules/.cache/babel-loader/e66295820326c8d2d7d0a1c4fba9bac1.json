{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { Framebuffer, Texture2D, isWebGL2, readPixelsToArray, cssToDeviceRatio, cssToDevicePixels } from '@luma.gl/core';\nimport assert from '../utils/assert';\nimport PickLayersPass from '../passes/pick-layers-pass';\nimport { getClosestObject, getUniqueObjects } from './picking/query-object';\nimport { processPickInfo, getLayerPickingInfo } from './picking/pick-info';\n\nvar DeckPicker = function () {\n  function DeckPicker(gl) {\n    _classCallCheck(this, DeckPicker);\n\n    this.gl = gl;\n    this.pickingFBO = null;\n    this.pickLayersPass = new PickLayersPass(gl);\n    this.layerFilter = null;\n    this.lastPickedInfo = {\n      index: -1,\n      layerId: null,\n      info: null\n    };\n    this._onError = null;\n  }\n\n  _createClass(DeckPicker, [{\n    key: \"setProps\",\n    value: function setProps(props) {\n      if ('layerFilter' in props) {\n        this.layerFilter = props.layerFilter;\n      }\n\n      if ('onError' in props) {\n        this._onError = props.onError;\n      }\n    }\n  }, {\n    key: \"finalize\",\n    value: function finalize() {\n      if (this.pickingFBO) {\n        this.pickingFBO[\"delete\"]();\n      }\n\n      if (this.depthFBO) {\n        this.depthFBO.color[\"delete\"]();\n        this.depthFBO[\"delete\"]();\n      }\n    }\n  }, {\n    key: \"pickObject\",\n    value: function pickObject(opts) {\n      return this._pickClosestObject(opts);\n    }\n  }, {\n    key: \"pickObjects\",\n    value: function pickObjects(opts) {\n      return this._pickVisibleObjects(opts);\n    }\n  }, {\n    key: \"getLastPickedObject\",\n    value: function getLastPickedObject(_ref) {\n      var x = _ref.x,\n          y = _ref.y,\n          layers = _ref.layers,\n          viewports = _ref.viewports;\n      var lastPickedInfo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.lastPickedInfo.info;\n      var lastPickedLayerId = lastPickedInfo && lastPickedInfo.layer && lastPickedInfo.layer.id;\n      var layer = lastPickedLayerId ? layers.find(function (l) {\n        return l.id === lastPickedLayerId;\n      }) : null;\n      var coordinate = viewports[0] && viewports[0].unproject([x, y]);\n      var info = {\n        x: x,\n        y: y,\n        coordinate: coordinate,\n        lngLat: coordinate,\n        layer: layer\n      };\n\n      if (layer) {\n        return Object.assign({}, lastPickedInfo, info);\n      }\n\n      return Object.assign(info, {\n        color: null,\n        object: null,\n        index: -1\n      });\n    }\n  }, {\n    key: \"_resizeBuffer\",\n    value: function _resizeBuffer() {\n      var gl = this.gl;\n\n      if (!this.pickingFBO) {\n        this.pickingFBO = new Framebuffer(gl);\n\n        if (Framebuffer.isSupported(gl, {\n          colorBufferFloat: true\n        })) {\n          this.depthFBO = new Framebuffer(gl);\n          this.depthFBO.attach(_defineProperty({}, 36064, new Texture2D(gl, {\n            format: isWebGL2(gl) ? 34836 : 6408,\n            type: 5126\n          })));\n        }\n      }\n\n      this.pickingFBO.resize({\n        width: gl.canvas.width,\n        height: gl.canvas.height\n      });\n      this.depthFBO.resize({\n        width: gl.canvas.width,\n        height: gl.canvas.height\n      });\n      return this.pickingFBO;\n    }\n  }, {\n    key: \"_pickClosestObject\",\n    value: function _pickClosestObject(_ref2) {\n      var layers = _ref2.layers,\n          viewports = _ref2.viewports,\n          x = _ref2.x,\n          y = _ref2.y,\n          _ref2$radius = _ref2.radius,\n          radius = _ref2$radius === void 0 ? 0 : _ref2$radius,\n          _ref2$depth = _ref2.depth,\n          depth = _ref2$depth === void 0 ? 1 : _ref2$depth,\n          _ref2$mode = _ref2.mode,\n          mode = _ref2$mode === void 0 ? 'query' : _ref2$mode,\n          unproject3D = _ref2.unproject3D,\n          onViewportActive = _ref2.onViewportActive;\n\n      this._resizeBuffer();\n\n      var pixelRatio = cssToDeviceRatio(this.gl);\n      var devicePixelRange = cssToDevicePixels(this.gl, [x, y], true);\n      var devicePixel = [devicePixelRange.x + Math.floor(devicePixelRange.width / 2), devicePixelRange.y + Math.floor(devicePixelRange.height / 2)];\n      var deviceRadius = Math.round(radius * pixelRatio);\n      var _this$pickingFBO = this.pickingFBO,\n          width = _this$pickingFBO.width,\n          height = _this$pickingFBO.height;\n\n      var deviceRect = this._getPickingRect({\n        deviceX: devicePixel[0],\n        deviceY: devicePixel[1],\n        deviceRadius: deviceRadius,\n        deviceWidth: width,\n        deviceHeight: height\n      });\n\n      var infos;\n      var result = [];\n      var affectedLayers = {};\n\n      for (var i = 0; i < depth; i++) {\n        var pickedColors = deviceRect && this._drawAndSample({\n          layers: layers,\n          viewports: viewports,\n          onViewportActive: onViewportActive,\n          deviceRect: deviceRect,\n          pass: \"picking:\".concat(mode),\n          redrawReason: mode\n        });\n\n        var pickInfo = getClosestObject({\n          pickedColors: pickedColors,\n          layers: layers,\n          deviceX: devicePixel[0],\n          deviceY: devicePixel[1],\n          deviceRadius: deviceRadius,\n          deviceRect: deviceRect\n        });\n        var z = void 0;\n\n        if (pickInfo.pickedLayer && unproject3D && this.depthFBO) {\n          var zValues = this._drawAndSample({\n            layers: [pickInfo.pickedLayer],\n            viewports: viewports,\n            onViewportActive: onViewportActive,\n            deviceRect: {\n              x: pickInfo.pickedX,\n              y: pickInfo.pickedY,\n              width: 1,\n              height: 1\n            },\n            pass: \"picking:\".concat(mode),\n            redrawReason: 'pick-z',\n            pickZ: true\n          });\n\n          z = zValues[0] * viewports[0].distanceScales.metersPerUnit[2] + viewports[0].position[2];\n        }\n\n        if (pickInfo.pickedColor && i + 1 < depth) {\n          var layerId = pickInfo.pickedColor[3] - 1;\n          affectedLayers[layerId] = true;\n          layers[layerId].clearPickingColor(pickInfo.pickedColor);\n        }\n\n        infos = processPickInfo({\n          pickInfo: pickInfo,\n          lastPickedInfo: this.lastPickedInfo,\n          mode: mode,\n          layers: layers,\n          viewports: viewports,\n          x: x,\n          y: y,\n          z: z,\n          pixelRatio: pixelRatio\n        });\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = infos.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var info = _step.value;\n\n            if (info.layer) {\n              result.push(info);\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n              _iterator[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        if (!pickInfo.pickedColor) {\n          break;\n        }\n      }\n\n      for (var _layerId in affectedLayers) {\n        layers[_layerId].restorePickingColors();\n      }\n\n      return {\n        result: result,\n        emptyInfo: infos && infos.get(null)\n      };\n    }\n  }, {\n    key: \"_pickVisibleObjects\",\n    value: function _pickVisibleObjects(_ref3) {\n      var layers = _ref3.layers,\n          viewports = _ref3.viewports,\n          x = _ref3.x,\n          y = _ref3.y,\n          _ref3$width = _ref3.width,\n          width = _ref3$width === void 0 ? 1 : _ref3$width,\n          _ref3$height = _ref3.height,\n          height = _ref3$height === void 0 ? 1 : _ref3$height,\n          _ref3$mode = _ref3.mode,\n          mode = _ref3$mode === void 0 ? 'query' : _ref3$mode,\n          onViewportActive = _ref3.onViewportActive;\n\n      this._resizeBuffer();\n\n      var pixelRatio = cssToDeviceRatio(this.gl);\n      var leftTop = cssToDevicePixels(this.gl, [x, y], true);\n      var deviceLeft = leftTop.x;\n      var deviceTop = leftTop.y + leftTop.height;\n      var rightBottom = cssToDevicePixels(this.gl, [x + width, y + height], true);\n      var deviceRight = rightBottom.x + rightBottom.width;\n      var deviceBottom = rightBottom.y;\n      var deviceRect = {\n        x: deviceLeft,\n        y: deviceBottom,\n        width: deviceRight - deviceLeft,\n        height: deviceTop - deviceBottom\n      };\n\n      var pickedColors = this._drawAndSample({\n        layers: layers,\n        viewports: viewports,\n        onViewportActive: onViewportActive,\n        deviceRect: deviceRect,\n        pass: \"picking:\".concat(mode),\n        redrawReason: mode\n      });\n\n      var pickInfos = getUniqueObjects({\n        pickedColors: pickedColors,\n        layers: layers\n      });\n      var uniqueInfos = new Map();\n      pickInfos.forEach(function (pickInfo) {\n        var info = {\n          color: pickInfo.pickedColor,\n          layer: null,\n          index: pickInfo.pickedObjectIndex,\n          picked: true,\n          x: x,\n          y: y,\n          width: width,\n          height: height,\n          pixelRatio: pixelRatio\n        };\n        info = getLayerPickingInfo({\n          layer: pickInfo.pickedLayer,\n          info: info,\n          mode: mode\n        });\n\n        if (!uniqueInfos.has(info.object)) {\n          uniqueInfos.set(info.object, info);\n        }\n      });\n      return Array.from(uniqueInfos.values());\n    }\n  }, {\n    key: \"_drawAndSample\",\n    value: function _drawAndSample(_ref4) {\n      var layers = _ref4.layers,\n          viewports = _ref4.viewports,\n          onViewportActive = _ref4.onViewportActive,\n          deviceRect = _ref4.deviceRect,\n          pass = _ref4.pass,\n          redrawReason = _ref4.redrawReason,\n          pickZ = _ref4.pickZ;\n      assert(deviceRect.width > 0 && deviceRect.height > 0);\n      var pickableLayers = layers.filter(function (layer) {\n        return layer.isPickable();\n      });\n\n      if (pickableLayers.length < 1) {\n        return null;\n      }\n\n      var pickingFBO = pickZ ? this.depthFBO : this.pickingFBO;\n      this.pickLayersPass.render({\n        layers: layers,\n        layerFilter: this.layerFilter,\n        onError: this._onError,\n        viewports: viewports,\n        onViewportActive: onViewportActive,\n        pickingFBO: pickingFBO,\n        deviceRect: deviceRect,\n        pass: pass,\n        redrawReason: redrawReason,\n        pickZ: pickZ\n      });\n      var x = deviceRect.x,\n          y = deviceRect.y,\n          width = deviceRect.width,\n          height = deviceRect.height;\n      var pickedColors = new (pickZ ? Float32Array : Uint8Array)(width * height * 4);\n      readPixelsToArray(pickingFBO, {\n        sourceX: x,\n        sourceY: y,\n        sourceWidth: width,\n        sourceHeight: height,\n        target: pickedColors\n      });\n      return pickedColors;\n    }\n  }, {\n    key: \"_getPickingRect\",\n    value: function _getPickingRect(_ref5) {\n      var deviceX = _ref5.deviceX,\n          deviceY = _ref5.deviceY,\n          deviceRadius = _ref5.deviceRadius,\n          deviceWidth = _ref5.deviceWidth,\n          deviceHeight = _ref5.deviceHeight;\n      var x = Math.max(0, deviceX - deviceRadius);\n      var y = Math.max(0, deviceY - deviceRadius);\n      var width = Math.min(deviceWidth, deviceX + deviceRadius + 1) - x;\n      var height = Math.min(deviceHeight, deviceY + deviceRadius + 1) - y;\n\n      if (width <= 0 || height <= 0) {\n        return null;\n      }\n\n      return {\n        x: x,\n        y: y,\n        width: width,\n        height: height\n      };\n    }\n  }]);\n\n  return DeckPicker;\n}();\n\nexport { DeckPicker as default };","map":{"version":3,"sources":["../../../src/lib/deck-picker.js"],"names":["DeckPicker","index","layerId","info","props","opts","x","y","layers","viewports","lastPickedInfo","lastPickedLayerId","layer","l","coordinate","lngLat","Object","color","object","gl","colorBufferFloat","format","isWebGL2","type","width","height","radius","depth","mode","unproject3D","onViewportActive","pixelRatio","cssToDeviceRatio","devicePixelRange","cssToDevicePixels","devicePixel","Math","deviceRadius","deviceRect","deviceX","deviceY","deviceWidth","deviceHeight","result","affectedLayers","i","pickedColors","pass","redrawReason","pickInfo","getClosestObject","z","zValues","pickZ","infos","processPickInfo","emptyInfo","leftTop","deviceLeft","deviceTop","rightBottom","deviceRight","deviceBottom","pickInfos","getUniqueObjects","uniqueInfos","picked","getLayerPickingInfo","Array","assert","pickableLayers","pickingFBO","layerFilter","onError","readPixelsToArray","sourceX","sourceY","sourceWidth","sourceHeight","target"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Framebuffer,\n  Texture2D,\n  isWebGL2,\n  readPixelsToArray,\n  cssToDeviceRatio,\n  cssToDevicePixels\n} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\nimport assert from '../utils/assert';\nimport PickLayersPass from '../passes/pick-layers-pass';\nimport {getClosestObject, getUniqueObjects} from './picking/query-object';\nimport {processPickInfo, getLayerPickingInfo} from './picking/pick-info';\n\nexport default class DeckPicker {\n  constructor(gl) {\n    this.gl = gl;\n    this.pickingFBO = null;\n    this.pickLayersPass = new PickLayersPass(gl);\n    this.layerFilter = null;\n    this.lastPickedInfo = {\n      // For callback tracking and auto highlight\n      index: -1,\n      layerId: null,\n      info: null\n    };\n    this._onError = null;\n  }\n\n  setProps(props) {\n    if ('layerFilter' in props) {\n      this.layerFilter = props.layerFilter;\n    }\n\n    if ('onError' in props) {\n      this._onError = props.onError;\n    }\n  }\n\n  finalize() {\n    if (this.pickingFBO) {\n      this.pickingFBO.delete();\n    }\n    if (this.depthFBO) {\n      this.depthFBO.color.delete();\n      this.depthFBO.delete();\n    }\n  }\n\n  // Pick the closest info at given coordinate\n  pickObject(opts) {\n    return this._pickClosestObject(opts);\n  }\n\n  // Get all unique infos within a bounding box\n  pickObjects(opts) {\n    return this._pickVisibleObjects(opts);\n  }\n\n  // Returns a new picking info object by assuming the last picked object is still picked\n  getLastPickedObject({x, y, layers, viewports}, lastPickedInfo = this.lastPickedInfo.info) {\n    const lastPickedLayerId = lastPickedInfo && lastPickedInfo.layer && lastPickedInfo.layer.id;\n    const layer = lastPickedLayerId ? layers.find(l => l.id === lastPickedLayerId) : null;\n    const coordinate = viewports[0] && viewports[0].unproject([x, y]);\n\n    const info = {\n      x,\n      y,\n      coordinate,\n      // TODO remove the lngLat prop after compatibility check\n      lngLat: coordinate,\n      layer\n    };\n\n    if (layer) {\n      return Object.assign({}, lastPickedInfo, info);\n    }\n    return Object.assign(info, {color: null, object: null, index: -1});\n  }\n\n  // Private\n  _resizeBuffer() {\n    const {gl} = this;\n    // Create a frame buffer if not already available\n    if (!this.pickingFBO) {\n      this.pickingFBO = new Framebuffer(gl);\n      if (Framebuffer.isSupported(gl, {colorBufferFloat: true})) {\n        this.depthFBO = new Framebuffer(gl);\n        this.depthFBO.attach({\n          [GL.COLOR_ATTACHMENT0]: new Texture2D(gl, {\n            format: isWebGL2(gl) ? GL.RGBA32F : GL.RGBA,\n            type: GL.FLOAT\n          })\n        });\n      }\n    }\n    // Resize it to current canvas size (this is a noop if size hasn't changed)\n    this.pickingFBO.resize({width: gl.canvas.width, height: gl.canvas.height});\n    this.depthFBO.resize({width: gl.canvas.width, height: gl.canvas.height});\n    return this.pickingFBO;\n  }\n\n  // Pick the closest object at the given (x,y) coordinate\n  // eslint-disable-next-line max-statements,complexity\n  _pickClosestObject({\n    layers,\n    viewports,\n    x,\n    y,\n    radius = 0,\n    depth = 1,\n    mode = 'query',\n    unproject3D,\n    onViewportActive\n  }) {\n    this._resizeBuffer();\n    // Convert from canvas top-left to WebGL bottom-left coordinates\n    // Top-left coordinates [x, y] to bottom-left coordinates [deviceX, deviceY]\n    // And compensate for pixelRatio\n    const pixelRatio = cssToDeviceRatio(this.gl);\n    const devicePixelRange = cssToDevicePixels(this.gl, [x, y], true);\n    const devicePixel = [\n      devicePixelRange.x + Math.floor(devicePixelRange.width / 2),\n      devicePixelRange.y + Math.floor(devicePixelRange.height / 2)\n    ];\n\n    const deviceRadius = Math.round(radius * pixelRatio);\n    const {width, height} = this.pickingFBO;\n    const deviceRect = this._getPickingRect({\n      deviceX: devicePixel[0],\n      deviceY: devicePixel[1],\n      deviceRadius,\n      deviceWidth: width,\n      deviceHeight: height\n    });\n\n    let infos;\n    const result = [];\n    const affectedLayers = {};\n\n    for (let i = 0; i < depth; i++) {\n      const pickedColors =\n        deviceRect &&\n        this._drawAndSample({\n          layers,\n          viewports,\n          onViewportActive,\n          deviceRect,\n          pass: `picking:${mode}`,\n          redrawReason: mode\n        });\n\n      const pickInfo = getClosestObject({\n        pickedColors,\n        layers,\n        deviceX: devicePixel[0],\n        deviceY: devicePixel[1],\n        deviceRadius,\n        deviceRect\n      });\n\n      let z;\n      if (pickInfo.pickedLayer && unproject3D && this.depthFBO) {\n        const zValues = this._drawAndSample({\n          layers: [pickInfo.pickedLayer],\n          viewports,\n          onViewportActive,\n          deviceRect: {x: pickInfo.pickedX, y: pickInfo.pickedY, width: 1, height: 1},\n          pass: `picking:${mode}`,\n          redrawReason: 'pick-z',\n          pickZ: true\n        });\n        // picked value is in common space (pixels) from the camera target (viewport.position)\n        // convert it to meters from the ground\n        z = zValues[0] * viewports[0].distanceScales.metersPerUnit[2] + viewports[0].position[2];\n      }\n\n      // Only exclude if we need to run picking again.\n      // We need to run picking again if an object is detected AND\n      // we have not exhausted the requested depth.\n      if (pickInfo.pickedColor && i + 1 < depth) {\n        const layerId = pickInfo.pickedColor[3] - 1;\n        affectedLayers[layerId] = true;\n        layers[layerId].clearPickingColor(pickInfo.pickedColor);\n      }\n\n      // This logic needs to run even if no object is picked.\n      infos = processPickInfo({\n        pickInfo,\n        lastPickedInfo: this.lastPickedInfo,\n        mode,\n        layers,\n        viewports,\n        x,\n        y,\n        z,\n        pixelRatio\n      });\n\n      for (const info of infos.values()) {\n        if (info.layer) {\n          result.push(info);\n        }\n      }\n\n      // If no object is picked stop.\n      if (!pickInfo.pickedColor) {\n        break;\n      }\n    }\n\n    // reset only affected buffers\n    for (const layerId in affectedLayers) {\n      layers[layerId].restorePickingColors();\n    }\n\n    return {result, emptyInfo: infos && infos.get(null)};\n  }\n\n  // Pick all objects within the given bounding box\n  _pickVisibleObjects({\n    layers,\n    viewports,\n    x,\n    y,\n    width = 1,\n    height = 1,\n    mode = 'query',\n    onViewportActive\n  }) {\n    this._resizeBuffer();\n    // Convert from canvas top-left to WebGL bottom-left coordinates\n    // And compensate for pixelRatio\n    const pixelRatio = cssToDeviceRatio(this.gl);\n    const leftTop = cssToDevicePixels(this.gl, [x, y], true);\n\n    // take left and top (y inverted in device pixels) from start location\n    const deviceLeft = leftTop.x;\n    const deviceTop = leftTop.y + leftTop.height;\n\n    // take right and bottom (y inverted in device pixels) from end location\n    const rightBottom = cssToDevicePixels(this.gl, [x + width, y + height], true);\n    const deviceRight = rightBottom.x + rightBottom.width;\n    const deviceBottom = rightBottom.y;\n\n    const deviceRect = {\n      x: deviceLeft,\n      y: deviceBottom,\n      // deviceTop and deviceRight represent the first pixel outside the desired rect\n      width: deviceRight - deviceLeft,\n      height: deviceTop - deviceBottom\n    };\n\n    const pickedColors = this._drawAndSample({\n      layers,\n      viewports,\n      onViewportActive,\n      deviceRect,\n      pass: `picking:${mode}`,\n      redrawReason: mode\n    });\n\n    const pickInfos = getUniqueObjects({pickedColors, layers});\n\n    // Only return unique infos, identified by info.object\n    const uniqueInfos = new Map();\n\n    pickInfos.forEach(pickInfo => {\n      let info = {\n        color: pickInfo.pickedColor,\n        layer: null,\n        index: pickInfo.pickedObjectIndex,\n        picked: true,\n        x,\n        y,\n        width,\n        height,\n        pixelRatio\n      };\n\n      info = getLayerPickingInfo({layer: pickInfo.pickedLayer, info, mode});\n      if (!uniqueInfos.has(info.object)) {\n        uniqueInfos.set(info.object, info);\n      }\n    });\n\n    return Array.from(uniqueInfos.values());\n  }\n\n  // returns pickedColor or null if no pickable layers found.\n  _drawAndSample({layers, viewports, onViewportActive, deviceRect, pass, redrawReason, pickZ}) {\n    assert(deviceRect.width > 0 && deviceRect.height > 0);\n\n    const pickableLayers = layers.filter(layer => layer.isPickable());\n    if (pickableLayers.length < 1) {\n      return null;\n    }\n\n    const pickingFBO = pickZ ? this.depthFBO : this.pickingFBO;\n\n    this.pickLayersPass.render({\n      layers,\n      layerFilter: this.layerFilter,\n      onError: this._onError,\n      viewports,\n      onViewportActive,\n      pickingFBO,\n      deviceRect,\n      pass,\n      redrawReason,\n      pickZ\n    });\n\n    // Read from an already rendered picking buffer\n    // Returns an Uint8ClampedArray of picked pixels\n    const {x, y, width, height} = deviceRect;\n    const pickedColors = new (pickZ ? Float32Array : Uint8Array)(width * height * 4);\n    readPixelsToArray(pickingFBO, {\n      sourceX: x,\n      sourceY: y,\n      sourceWidth: width,\n      sourceHeight: height,\n      target: pickedColors\n    });\n\n    return pickedColors;\n  }\n\n  // Calculate a picking rect centered on deviceX and deviceY and clipped to device\n  // Returns null if pixel is outside of device\n  _getPickingRect({deviceX, deviceY, deviceRadius, deviceWidth, deviceHeight}) {\n    // Create a box of size `radius * 2 + 1` centered at [deviceX, deviceY]\n    const x = Math.max(0, deviceX - deviceRadius);\n    const y = Math.max(0, deviceY - deviceRadius);\n    const width = Math.min(deviceWidth, deviceX + deviceRadius + 1) - x;\n    const height = Math.min(deviceHeight, deviceY + deviceRadius + 1) - y;\n\n    // x, y out of bounds.\n    if (width <= 0 || height <= 0) {\n      return null;\n    }\n\n    return {x, y, width, height};\n  }\n}\n"]},"metadata":{},"sourceType":"module"}