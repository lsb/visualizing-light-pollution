{"ast":null,"code":"import _classCallCheck from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _construct from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/construct\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { toArrayBufferView } from './buffer';\nimport { BigIntAvailable, BigInt64Array, BigUint64Array } from './compat';\n/** @ignore */\n\nexport var isArrowBigNumSymbol = Symbol.for('isArrowBigNum');\n/** @ignore */\n\nfunction BigNum(x) {\n  for (var _len = arguments.length, xs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    xs[_key - 1] = arguments[_key];\n  }\n\n  if (xs.length === 0) {\n    return Object.setPrototypeOf(toArrayBufferView(this['TypedArray'], x), this.constructor.prototype);\n  }\n\n  return Object.setPrototypeOf(_construct(this['TypedArray'], [x].concat(xs)), this.constructor.prototype);\n}\n\nBigNum.prototype[isArrowBigNumSymbol] = true;\n\nBigNum.prototype.toJSON = function () {\n  return \"\\\"\".concat(bignumToString(this), \"\\\"\");\n};\n\nBigNum.prototype.valueOf = function () {\n  return bignumToNumber(this);\n};\n\nBigNum.prototype.toString = function () {\n  return bignumToString(this);\n};\n\nBigNum.prototype[Symbol.toPrimitive] = function () {\n  var hint = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';\n\n  switch (hint) {\n    case 'number':\n      return bignumToNumber(this);\n\n    case 'string':\n      return bignumToString(this);\n\n    case 'default':\n      return bignumToBigInt(this);\n  }\n\n  return bignumToString(this);\n};\n/** @ignore */\n\n\nfunction SignedBigNum() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  return BigNum.apply(this, args);\n}\n/** @ignore */\n\n\nfunction UnsignedBigNum() {\n  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    args[_key3] = arguments[_key3];\n  }\n\n  return BigNum.apply(this, args);\n}\n/** @ignore */\n\n\nfunction DecimalBigNum() {\n  for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    args[_key4] = arguments[_key4];\n  }\n\n  return BigNum.apply(this, args);\n}\n\nObject.setPrototypeOf(SignedBigNum.prototype, Object.create(Int32Array.prototype));\nObject.setPrototypeOf(UnsignedBigNum.prototype, Object.create(Uint32Array.prototype));\nObject.setPrototypeOf(DecimalBigNum.prototype, Object.create(Uint32Array.prototype));\nObject.assign(SignedBigNum.prototype, BigNum.prototype, {\n  'constructor': SignedBigNum,\n  'signed': true,\n  'TypedArray': Int32Array,\n  'BigIntArray': BigInt64Array\n});\nObject.assign(UnsignedBigNum.prototype, BigNum.prototype, {\n  'constructor': UnsignedBigNum,\n  'signed': false,\n  'TypedArray': Uint32Array,\n  'BigIntArray': BigUint64Array\n});\nObject.assign(DecimalBigNum.prototype, BigNum.prototype, {\n  'constructor': DecimalBigNum,\n  'signed': true,\n  'TypedArray': Uint32Array,\n  'BigIntArray': BigUint64Array\n});\n/** @ignore */\n\nfunction bignumToNumber(bn) {\n  var buffer = bn.buffer,\n      byteOffset = bn.byteOffset,\n      length = bn.length,\n      signed = bn['signed'];\n  var words = new Int32Array(buffer, byteOffset, length);\n  var number = 0,\n      i = 0,\n      n = words.length,\n      hi,\n      lo;\n\n  while (i < n) {\n    lo = words[i++];\n    hi = words[i++];\n    signed || (hi = hi >>> 0);\n    number += (lo >>> 0) + hi * Math.pow(i, 32);\n  }\n\n  return number;\n}\n/** @ignore */\n\n\nexport var bignumToString;\n/** @ignore */\n\nexport var bignumToBigInt;\n\nif (!BigIntAvailable) {\n  bignumToString = decimalToString;\n  bignumToBigInt = bignumToString;\n} else {\n  bignumToBigInt = function bignumToBigInt(a) {\n    return a.byteLength === 8 ? new a['BigIntArray'](a.buffer, a.byteOffset, 1)[0] : decimalToString(a);\n  };\n\n  bignumToString = function bignumToString(a) {\n    return a.byteLength === 8 ? \"\".concat(new a['BigIntArray'](a.buffer, a.byteOffset, 1)[0]) : decimalToString(a);\n  };\n}\n/** @ignore */\n\n\nfunction decimalToString(a) {\n  var digits = '';\n  var base64 = new Uint32Array(2);\n  var base32 = new Uint16Array(a.buffer, a.byteOffset, a.byteLength / 2);\n  var checks = new Uint32Array((base32 = new Uint16Array(base32).reverse()).buffer);\n  var i = -1,\n      n = base32.length - 1;\n\n  do {\n    for (base64[0] = base32[i = 0]; i < n;) {\n      base32[i++] = base64[1] = base64[0] / 10;\n      base64[0] = (base64[0] - base64[1] * 10 << 16) + base32[i];\n    }\n\n    base32[i] = base64[1] = base64[0] / 10;\n    base64[0] = base64[0] - base64[1] * 10;\n    digits = \"\".concat(base64[0]).concat(digits);\n  } while (checks[0] || checks[1] || checks[2] || checks[3]);\n\n  return digits ? digits : \"0\";\n}\n/** @ignore */\n\n\nexport var BN = /*#__PURE__*/function () {\n  function BN(num, isSigned) {\n    _classCallCheck(this, BN);\n\n    return BN.new(num, isSigned);\n  }\n  /** @nocollapse */\n\n\n  _createClass(BN, null, [{\n    key: \"new\",\n    value: function _new(num, isSigned) {\n      switch (isSigned) {\n        case true:\n          return new SignedBigNum(num);\n\n        case false:\n          return new UnsignedBigNum(num);\n      }\n\n      switch (num.constructor) {\n        case Int8Array:\n        case Int16Array:\n        case Int32Array:\n        case BigInt64Array:\n          return new SignedBigNum(num);\n      }\n\n      if (num.byteLength === 16) {\n        return new DecimalBigNum(num);\n      }\n\n      return new UnsignedBigNum(num);\n    }\n    /** @nocollapse */\n\n  }, {\n    key: \"signed\",\n    value: function signed(num) {\n      return new SignedBigNum(num);\n    }\n    /** @nocollapse */\n\n  }, {\n    key: \"unsigned\",\n    value: function unsigned(num) {\n      return new UnsignedBigNum(num);\n    }\n    /** @nocollapse */\n\n  }, {\n    key: \"decimal\",\n    value: function decimal(num) {\n      return new DecimalBigNum(num);\n    }\n  }]);\n\n  return BN;\n}();","map":{"version":3,"sources":["util/bn.ts"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAA+B,iBAA/B,QAAwD,UAAxD;AAGA,SAAS,eAAT,EAA0B,aAA1B,EAAyC,cAAzC,QAA+D,UAA/D;AAEA;;AACA,OAAO,IAAM,mBAAmB,GAAG,MAAM,CAAC,GAAP,CAAW,eAAX,CAA5B;AAMP;;AACA,SAAS,MAAT,CAA2B,CAA3B,EAA6C;AAAA,oCAAP,EAAO;AAAP,IAAA,EAAO;AAAA;;AACzC,MAAI,EAAE,CAAC,MAAH,KAAc,CAAlB,EAAqB;AACjB,WAAO,MAAM,CAAC,cAAP,CAAsB,iBAAiB,CAAC,KAAK,YAAL,CAAD,EAAqB,CAArB,CAAvC,EAAgE,KAAK,WAAL,CAAiB,SAAjF,CAAP;AACH;;AACD,SAAO,MAAM,CAAC,cAAP,YAA0B,KAAK,YAAL,CAA1B,GAA6C,CAA7C,SAAmD,EAAnD,IAAwD,KAAK,WAAL,CAAiB,SAAzE,CAAP;AACH;;AAED,MAAM,CAAC,SAAP,CAAiB,mBAAjB,IAAwC,IAAxC;;AACA,MAAM,CAAC,SAAP,CAAiB,MAAjB,GAA0B,YAAA;AAA+C,qBAAW,cAAc,CAAC,IAAD,CAAzB;AAAqC,CAA9G;;AACA,MAAM,CAAC,SAAP,CAAiB,OAAjB,GAA2B,YAAA;AAA+C,SAAO,cAAc,CAAC,IAAD,CAArB;AAA8B,CAAxG;;AACA,MAAM,CAAC,SAAP,CAAiB,QAAjB,GAA4B,YAAA;AAA+C,SAAO,cAAc,CAAC,IAAD,CAArB;AAA8B,CAAzG;;AACA,MAAM,CAAC,SAAP,CAAiB,MAAM,CAAC,WAAxB,IAAuC,YAA8F;AAAA,MAAjD,IAAiD,uEAAT,SAAS;;AACjI,UAAQ,IAAR;AACI,SAAK,QAAL;AAAe,aAAO,cAAc,CAAC,IAAD,CAArB;;AACf,SAAK,QAAL;AAAe,aAAO,cAAc,CAAC,IAAD,CAArB;;AACf,SAAK,SAAL;AAAgB,aAAO,cAAc,CAAC,IAAD,CAArB;AAHpB;;AAKA,SAAO,cAAc,CAAC,IAAD,CAArB;AACH,CAPD;AAeA;;;AACA,SAAS,YAAT,GAAmE;AAAA,qCAA/B,IAA+B;AAA/B,IAAA,IAA+B;AAAA;;AAAI,SAAO,MAAM,CAAC,KAAP,CAAa,IAAb,EAAmB,IAAnB,CAAP;AAAkC;AACzG;;;AACA,SAAS,cAAT,GAAqE;AAAA,qCAA/B,IAA+B;AAA/B,IAAA,IAA+B;AAAA;;AAAI,SAAO,MAAM,CAAC,KAAP,CAAa,IAAb,EAAmB,IAAnB,CAAP;AAAkC;AAC3G;;;AACA,SAAS,aAAT,GAAoE;AAAA,qCAA/B,IAA+B;AAA/B,IAAA,IAA+B;AAAA;;AAAI,SAAO,MAAM,CAAC,KAAP,CAAa,IAAb,EAAmB,IAAnB,CAAP;AAAkC;;AAE1G,MAAM,CAAC,cAAP,CAAsB,YAAY,CAAC,SAAnC,EAAgD,MAAM,CAAC,MAAP,CAAc,UAAU,CAAC,SAAzB,CAAhD;AACA,MAAM,CAAC,cAAP,CAAsB,cAAc,CAAC,SAArC,EAAgD,MAAM,CAAC,MAAP,CAAc,WAAW,CAAC,SAA1B,CAAhD;AACA,MAAM,CAAC,cAAP,CAAsB,aAAa,CAAC,SAApC,EAAgD,MAAM,CAAC,MAAP,CAAc,WAAW,CAAC,SAA1B,CAAhD;AACA,MAAM,CAAC,MAAP,CAAc,YAAY,CAAC,SAA3B,EAAwC,MAAM,CAAC,SAA/C,EAA0D;AAAE,iBAAe,YAAjB;AAAiC,YAAU,IAA3C;AAAkD,gBAAc,UAAhE;AAA6E,iBAAe;AAA5F,CAA1D;AACA,MAAM,CAAC,MAAP,CAAc,cAAc,CAAC,SAA7B,EAAwC,MAAM,CAAC,SAA/C,EAA0D;AAAE,iBAAe,cAAjB;AAAiC,YAAU,KAA3C;AAAkD,gBAAc,WAAhE;AAA6E,iBAAe;AAA5F,CAA1D;AACA,MAAM,CAAC,MAAP,CAAc,aAAa,CAAC,SAA5B,EAAwC,MAAM,CAAC,SAA/C,EAA0D;AAAE,iBAAe,aAAjB;AAAiC,YAAU,IAA3C;AAAkD,gBAAc,WAAhE;AAA6E,iBAAe;AAA5F,CAA1D;AAEA;;AACA,SAAS,cAAT,CAAmD,EAAnD,EAAwD;AAAA,MAC9C,MAD8C,GACG,EADH,CAC9C,MAD8C;AAAA,MACtC,UADsC,GACG,EADH,CACtC,UADsC;AAAA,MAC1B,MAD0B,GACG,EADH,CAC1B,MAD0B;AAAA,MACR,MADQ,GACG,EADH,CAClB,QADkB;AAEpD,MAAI,KAAK,GAAG,IAAI,UAAJ,CAAe,MAAf,EAAuB,UAAvB,EAAmC,MAAnC,CAAZ;AACA,MAAI,MAAM,GAAG,CAAb;AAAA,MAAgB,CAAC,GAAG,CAApB;AAAA,MAAuB,CAAC,GAAG,KAAK,CAAC,MAAjC;AAAA,MAAyC,EAAzC;AAAA,MAA6C,EAA7C;;AACA,SAAO,CAAC,GAAG,CAAX,EAAc;AACV,IAAA,EAAE,GAAG,KAAK,CAAC,CAAC,EAAF,CAAV;AACA,IAAA,EAAE,GAAG,KAAK,CAAC,CAAC,EAAF,CAAV;AACA,IAAA,MAAM,KAAK,EAAE,GAAG,EAAE,KAAK,CAAjB,CAAN;AACA,IAAA,MAAM,IAAI,CAAC,EAAE,KAAK,CAAR,IAAc,EAAE,YAAI,CAAJ,EAAS,EAAT,CAA1B;AACH;;AACD,SAAO,MAAP;AACH;AAED;;;AACA,OAAO,IAAI,cAAJ;AACP;;AACA,OAAO,IAAI,cAAJ;;AAEP,IAAI,CAAC,eAAL,EAAsB;AAClB,EAAA,cAAc,GAAG,eAAjB;AACA,EAAA,cAAc,GAAS,cAAvB;AACH,CAHD,MAGO;AACH,EAAA,cAAc,GAAI,wBAA4B,CAA5B;AAAA,WAAqC,CAAC,CAAC,UAAF,KAAiB,CAAjB,GAAqB,IAAI,CAAC,CAAC,aAAD,CAAL,CAAqB,CAAC,CAAC,MAAvB,EAA+B,CAAC,CAAC,UAAjC,EAA6C,CAA7C,EAAgD,CAAhD,CAArB,GAA+E,eAAe,CAAC,CAAD,CAAnI;AAAA,GAAlB;;AACA,EAAA,cAAc,GAAI,wBAA4B,CAA5B;AAAA,WAAqC,CAAC,CAAC,UAAF,KAAiB,CAAjB,aAAwB,IAAI,CAAC,CAAC,aAAD,CAAL,CAAqB,CAAC,CAAC,MAAvB,EAA+B,CAAC,CAAC,UAAjC,EAA6C,CAA7C,EAAgD,CAAhD,CAAxB,IAA+E,eAAe,CAAC,CAAD,CAAnI;AAAA,GAAlB;AACH;AAED;;;AACA,SAAS,eAAT,CAAoD,CAApD,EAAwD;AACpD,MAAI,MAAM,GAAG,EAAb;AACA,MAAI,MAAM,GAAG,IAAI,WAAJ,CAAgB,CAAhB,CAAb;AACA,MAAI,MAAM,GAAG,IAAI,WAAJ,CAAgB,CAAC,CAAC,MAAlB,EAA0B,CAAC,CAAC,UAA5B,EAAwC,CAAC,CAAC,UAAF,GAAe,CAAvD,CAAb;AACA,MAAI,MAAM,GAAG,IAAI,WAAJ,CAAgB,CAAC,MAAM,GAAG,IAAI,WAAJ,CAAgB,MAAhB,EAAwB,OAAxB,EAAV,EAA6C,MAA7D,CAAb;AACA,MAAI,CAAC,GAAG,CAAC,CAAT;AAAA,MAAY,CAAC,GAAG,MAAM,CAAC,MAAP,GAAgB,CAAhC;;AACA,KAAG;AACC,SAAK,MAAM,CAAC,CAAD,CAAN,GAAY,MAAM,CAAC,CAAC,GAAG,CAAL,CAAvB,EAAgC,CAAC,GAAG,CAApC,GAAwC;AACpC,MAAA,MAAM,CAAC,CAAC,EAAF,CAAN,GAAc,MAAM,CAAC,CAAD,CAAN,GAAY,MAAM,CAAC,CAAD,CAAN,GAAY,EAAtC;AACA,MAAA,MAAM,CAAC,CAAD,CAAN,GAAY,CAAE,MAAM,CAAC,CAAD,CAAN,GAAY,MAAM,CAAC,CAAD,CAAN,GAAY,EAAzB,IAAgC,EAAjC,IAAuC,MAAM,CAAC,CAAD,CAAzD;AACH;;AACD,IAAA,MAAM,CAAC,CAAD,CAAN,GAAY,MAAM,CAAC,CAAD,CAAN,GAAY,MAAM,CAAC,CAAD,CAAN,GAAY,EAApC;AACA,IAAA,MAAM,CAAC,CAAD,CAAN,GAAY,MAAM,CAAC,CAAD,CAAN,GAAY,MAAM,CAAC,CAAD,CAAN,GAAY,EAApC;AACA,IAAA,MAAM,aAAM,MAAM,CAAC,CAAD,CAAZ,SAAkB,MAAlB,CAAN;AACH,GARD,QAQS,MAAM,CAAC,CAAD,CAAN,IAAa,MAAM,CAAC,CAAD,CAAnB,IAA0B,MAAM,CAAC,CAAD,CAAhC,IAAuC,MAAM,CAAC,CAAD,CARtD;;AASA,SAAO,MAAM,GAAG,MAAH,MAAb;AACH;AAED;;;AACA,WAAa,EAAb;AA+BI,cAAY,GAAZ,EAAoB,QAApB,EAAsC;AAAA;;AAClC,WAAO,EAAE,CAAC,GAAH,CAAO,GAAP,EAAY,QAAZ,CAAP;AACH;AAhCD;;;AADJ;AAAA;AAAA,yBAE6C,GAF7C,EAEqD,QAFrD,EAEuE;AAC/D,cAAQ,QAAR;AACI,aAAK,IAAL;AAAW,iBAAO,IAAW,YAAX,CAAyB,GAAzB,CAAP;;AACX,aAAK,KAAL;AAAY,iBAAO,IAAW,cAAX,CAA2B,GAA3B,CAAP;AAFhB;;AAIA,cAAQ,GAAG,CAAC,WAAZ;AACI,aAAK,SAAL;AACA,aAAK,UAAL;AACA,aAAK,UAAL;AACA,aAAK,aAAL;AACI,iBAAO,IAAW,YAAX,CAAyB,GAAzB,CAAP;AALR;;AAOA,UAAI,GAAG,CAAC,UAAJ,KAAmB,EAAvB,EAA2B;AACvB,eAAO,IAAW,aAAX,CAA0B,GAA1B,CAAP;AACH;;AACD,aAAO,IAAW,cAAX,CAA2B,GAA3B,CAAP;AACH;AACD;;AAnBJ;AAAA;AAAA,2BAoB6C,GApB7C,EAoBmD;AAC3C,aAAO,IAAW,YAAX,CAAyB,GAAzB,CAAP;AACH;AACD;;AAvBJ;AAAA;AAAA,6BAwBgD,GAxBhD,EAwBsD;AAC9C,aAAO,IAAW,cAAX,CAA2B,GAA3B,CAAP;AACH;AACD;;AA3BJ;AAAA;AAAA,4BA4B+C,GA5B/C,EA4BqD;AAC7C,aAAO,IAAW,aAAX,CAA0B,GAA1B,CAAP;AACH;AA9BL;;AAAA;AAAA","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { ArrayBufferViewInput, toArrayBufferView } from './buffer';\nimport { TypedArray, TypedArrayConstructor } from '../interfaces';\nimport { BigIntArray, BigIntArrayConstructor } from '../interfaces';\nimport { BigIntAvailable, BigInt64Array, BigUint64Array } from './compat';\n\n/** @ignore */\nexport const isArrowBigNumSymbol = Symbol.for('isArrowBigNum');\n\n/** @ignore */ type BigNumArray = IntArray | UintArray;\n/** @ignore */ type IntArray = Int8Array | Int16Array | Int32Array;\n/** @ignore */ type UintArray = Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray;\n\n/** @ignore */\nfunction BigNum(this: any, x: any, ...xs: any) {\n    if (xs.length === 0) {\n        return Object.setPrototypeOf(toArrayBufferView(this['TypedArray'], x), this.constructor.prototype);\n    }\n    return Object.setPrototypeOf(new this['TypedArray'](x, ...xs), this.constructor.prototype);\n}\n\nBigNum.prototype[isArrowBigNumSymbol] = true;\nBigNum.prototype.toJSON = function<T extends BN<BigNumArray>>(this: T) { return `\"${bignumToString(this)}\"`; };\nBigNum.prototype.valueOf = function<T extends BN<BigNumArray>>(this: T) { return bignumToNumber(this); };\nBigNum.prototype.toString = function<T extends BN<BigNumArray>>(this: T) { return bignumToString(this); };\nBigNum.prototype[Symbol.toPrimitive] = function<T extends BN<BigNumArray>>(this: T, hint: 'string' | 'number' | 'default' = 'default') {\n    switch (hint) {\n        case 'number': return bignumToNumber(this);\n        case 'string': return bignumToString(this);\n        case 'default': return bignumToBigInt(this);\n    }\n    return bignumToString(this);\n};\n\n/** @ignore */\ntype TypedArrayConstructorArgs =\n    [number | void] |\n    [Iterable<number> | Iterable<bigint>] |\n    [ArrayBufferLike, number | void, number | void] ;\n\n/** @ignore */\nfunction SignedBigNum(this: any, ...args: TypedArrayConstructorArgs) { return BigNum.apply(this, args); }\n/** @ignore */\nfunction UnsignedBigNum(this: any, ...args: TypedArrayConstructorArgs) { return BigNum.apply(this, args); }\n/** @ignore */\nfunction DecimalBigNum(this: any, ...args: TypedArrayConstructorArgs) { return BigNum.apply(this, args); }\n\nObject.setPrototypeOf(SignedBigNum.prototype,   Object.create(Int32Array.prototype));\nObject.setPrototypeOf(UnsignedBigNum.prototype, Object.create(Uint32Array.prototype));\nObject.setPrototypeOf(DecimalBigNum.prototype,  Object.create(Uint32Array.prototype));\nObject.assign(SignedBigNum.prototype,   BigNum.prototype, { 'constructor': SignedBigNum,   'signed': true,  'TypedArray': Int32Array,  'BigIntArray': BigInt64Array  });\nObject.assign(UnsignedBigNum.prototype, BigNum.prototype, { 'constructor': UnsignedBigNum, 'signed': false, 'TypedArray': Uint32Array, 'BigIntArray': BigUint64Array });\nObject.assign(DecimalBigNum.prototype,  BigNum.prototype, { 'constructor': DecimalBigNum,  'signed': true,  'TypedArray': Uint32Array, 'BigIntArray': BigUint64Array });\n\n/** @ignore */\nfunction bignumToNumber<T extends BN<BigNumArray>>(bn: T) {\n    let { buffer, byteOffset, length, 'signed': signed } = bn;\n    let words = new Int32Array(buffer, byteOffset, length);\n    let number = 0, i = 0, n = words.length, hi, lo;\n    while (i < n) {\n        lo = words[i++];\n        hi = words[i++];\n        signed || (hi = hi >>> 0);\n        number += (lo >>> 0) + (hi * (i ** 32));\n    }\n    return number;\n}\n\n/** @ignore */\nexport let bignumToString: { <T extends BN<BigNumArray>>(a: T): string; };\n/** @ignore */\nexport let bignumToBigInt: { <T extends BN<BigNumArray>>(a: T): bigint; };\n\nif (!BigIntAvailable) {\n    bignumToString = decimalToString;\n    bignumToBigInt = <any> bignumToString;\n} else {\n    bignumToBigInt = (<T extends BN<BigNumArray>>(a: T) => a.byteLength === 8 ? new a['BigIntArray'](a.buffer, a.byteOffset, 1)[0] : <any>decimalToString(a));\n    bignumToString = (<T extends BN<BigNumArray>>(a: T) => a.byteLength === 8 ? `${new a['BigIntArray'](a.buffer, a.byteOffset, 1)[0]}` : decimalToString(a));\n}\n\n/** @ignore */\nfunction decimalToString<T extends BN<BigNumArray>>(a: T) {\n    let digits = '';\n    let base64 = new Uint32Array(2);\n    let base32 = new Uint16Array(a.buffer, a.byteOffset, a.byteLength / 2);\n    let checks = new Uint32Array((base32 = new Uint16Array(base32).reverse()).buffer);\n    let i = -1, n = base32.length - 1;\n    do {\n        for (base64[0] = base32[i = 0]; i < n;) {\n            base32[i++] = base64[1] = base64[0] / 10;\n            base64[0] = ((base64[0] - base64[1] * 10) << 16) + base32[i];\n        }\n        base32[i] = base64[1] = base64[0] / 10;\n        base64[0] = base64[0] - base64[1] * 10;\n        digits = `${base64[0]}${digits}`;\n    } while (checks[0] || checks[1] || checks[2] || checks[3]);\n    return digits ? digits : `0`;\n}\n\n/** @ignore */\nexport class BN<T extends BigNumArray> {\n    /** @nocollapse */\n    public static new<T extends BigNumArray>(num: T, isSigned?: boolean): (T & BN<T>) {\n        switch (isSigned) {\n            case true: return new (<any> SignedBigNum)(num) as (T & BN<T>);\n            case false: return new (<any> UnsignedBigNum)(num) as (T & BN<T>);\n        }\n        switch (num.constructor) {\n            case Int8Array:\n            case Int16Array:\n            case Int32Array:\n            case BigInt64Array:\n                return new (<any> SignedBigNum)(num) as (T & BN<T>);\n        }\n        if (num.byteLength === 16) {\n            return new (<any> DecimalBigNum)(num) as (T & BN<T>);\n        }\n        return new (<any> UnsignedBigNum)(num) as (T & BN<T>);\n    }\n    /** @nocollapse */\n    public static signed<T extends IntArray>(num: T): (T & BN<T>) {\n        return new (<any> SignedBigNum)(num) as (T & BN<T>);\n    }\n    /** @nocollapse */\n    public static unsigned<T extends UintArray>(num: T): (T & BN<T>) {\n        return new (<any> UnsignedBigNum)(num) as (T & BN<T>);\n    }\n    /** @nocollapse */\n    public static decimal<T extends UintArray>(num: T): (T & BN<T>) {\n        return new (<any> DecimalBigNum)(num) as (T & BN<T>);\n    }\n    constructor(num: T, isSigned?: boolean) {\n        return BN.new(num, isSigned) as any;\n    }\n}\n\n/** @ignore */\nexport interface BN<T extends BigNumArray> extends TypedArrayLike<T> {\n\n    new<T extends ArrayBufferViewInput>(buffer: T, signed?: boolean): T;\n\n    readonly signed: boolean;\n    readonly TypedArray: TypedArrayConstructor<TypedArray>;\n    readonly BigIntArray: BigIntArrayConstructor<BigIntArray>;\n\n    [Symbol.toStringTag]:\n        'Int8Array'         |\n        'Int16Array'        |\n        'Int32Array'        |\n        'Uint8Array'        |\n        'Uint16Array'       |\n        'Uint32Array'       |\n        'Uint8ClampedArray';\n\n    /**\n     * Convert the bytes to their (positive) decimal representation for printing\n     */\n    toString(): string;\n    /**\n     * Down-convert the bytes to a 53-bit precision integer. Invoked by JS for\n     * arithmetic operators, like `+`. Easy (and unsafe) way to convert BN to\n     * number via `+bn_inst`\n     */\n    valueOf(): number;\n    /**\n     * Return the JSON representation of the bytes. Must be wrapped in double-quotes,\n     * so it's compatible with JSON.stringify().\n     */\n    toJSON(): string;\n    [Symbol.toPrimitive](hint?: any): number | string | bigint;\n}\n\n/** @ignore */\ninterface TypedArrayLike<T extends BigNumArray> {\n\n    readonly length: number;\n    readonly buffer: ArrayBuffer;\n    readonly byteLength: number;\n    readonly byteOffset: number;\n    readonly BYTES_PER_ELEMENT: number;\n\n    includes(searchElement: number, fromIndex?: number | undefined): boolean;\n    copyWithin(target: number, start: number, end?: number | undefined): this;\n    every(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): boolean;\n    fill(value: number, start?: number | undefined, end?: number | undefined): this;\n    filter(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): T;\n    find(predicate: (value: number, index: number, obj: T) => boolean, thisArg?: any): number | undefined;\n    findIndex(predicate: (value: number, index: number, obj: T) => boolean, thisArg?: any): number;\n    forEach(callbackfn: (value: number, index: number, array: T) => void, thisArg?: any): void;\n    indexOf(searchElement: number, fromIndex?: number | undefined): number;\n    join(separator?: string | undefined): string;\n    lastIndexOf(searchElement: number, fromIndex?: number | undefined): number;\n    map(callbackfn: (value: number, index: number, array: T) => number, thisArg?: any): T;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number, initialValue: number): number;\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: T) => U, initialValue: U): U;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number, initialValue: number): number;\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: T) => U, initialValue: U): U;\n    reverse(): T;\n    set(array: ArrayLike<number>, offset?: number | undefined): void;\n    slice(start?: number | undefined, end?: number | undefined): T;\n    some(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): boolean;\n    sort(compareFn?: ((a: number, b: number) => number) | undefined): this;\n    subarray(begin: number, end?: number | undefined): T;\n    toLocaleString(): string;\n    entries(): IterableIterator<[number, number]>;\n    keys(): IterableIterator<number>;\n    values(): IterableIterator<number>;\n}\n"]},"metadata":{},"sourceType":"module"}