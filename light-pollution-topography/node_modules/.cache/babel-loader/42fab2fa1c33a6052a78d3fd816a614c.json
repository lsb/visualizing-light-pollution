{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nexport function getErrorMessageFromResponseSync(response) {\n  return \"Failed to fetch resource \".concat(response.url, \"(\").concat(response.status, \"): \").concat(response.statusText, \" \");\n}\nexport function getErrorMessageFromResponse(_x) {\n  return _getErrorMessageFromResponse.apply(this, arguments);\n}\n\nfunction _getErrorMessageFromResponse() {\n  _getErrorMessageFromResponse = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(response) {\n    var message, contentType;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            message = \"Failed to fetch resource \".concat(response.url, \" (\").concat(response.status, \"): \");\n            _context.prev = 1;\n            contentType = response.headers.get('Content-Type');\n\n            if (!contentType.includes('application/json')) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.t0 = message;\n            _context.next = 7;\n            return response.text();\n\n          case 7:\n            message = _context.t0 += _context.sent;\n            _context.next = 11;\n            break;\n\n          case 10:\n            message += response.statusText;\n\n          case 11:\n            _context.next = 16;\n            break;\n\n          case 13:\n            _context.prev = 13;\n            _context.t1 = _context[\"catch\"](1);\n            return _context.abrupt(\"return\", message);\n\n          case 16:\n            return _context.abrupt(\"return\", message);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 13]]);\n  }));\n  return _getErrorMessageFromResponse.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../src/lib/fetch/fetch-error-message.js"],"names":["response","message","contentType"],"mappings":";;AAAA,OAAO,SAAA,+BAAA,CAAA,QAAA,EAAmD;AACxD,SAAA,4BAAA,MAAA,CAAmCA,QAAQ,CAA3C,GAAA,EAAA,GAAA,EAAA,MAAA,CAAmDA,QAAQ,CAA3D,MAAA,EAAA,KAAA,EAAA,MAAA,CAAwEA,QAAQ,CAAhF,UAAA,EAAA,GAAA,CAAA;AACD;AAED,OAAA,SAAA,2BAAA,CAAA,EAAA,EAAA;AAAA,SAAA,4BAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;;4EAAO,SAAA,OAAA,CAAA,QAAA,EAAA;AAAA,QAAA,OAAA,EAAA,WAAA;AAAA,WAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,aAAA,CAAA,EAAA;AAAA,gBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,eAAA,CAAA;AACDC,YAAAA,OADC,GAAA,4BAAA,MAAA,CACqCD,QAAQ,CAD7C,GAAA,EAAA,IAAA,EAAA,MAAA,CACsDA,QAAQ,CAD9D,MAAA,EAAA,KAAA,CACDC;AADC,YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAGGC,YAAAA,WAHH,GAGiBF,QAAQ,CAARA,OAAAA,CAAAA,GAAAA,CAHjB,cAGiBA,CAAdE;;AAHH,gBAAA,CAICA,WAAW,CAAXA,QAAAA,CAJD,kBAICA,CAJD,EAAA;AAAA,cAAA,QAAA,CAAA,IAAA,GAAA,EAAA;AAAA;AAAA;;AAAA,YAAA,QAAA,CAAA,EAAA,GAAA,OAAA;AAAA,YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA,mBAKgBF,QAAQ,CALxB,IAKgBA,EALhB;;AAAA,eAAA,CAAA;AAKDC,YAAAA,OALC,GAAA,QAAA,CAAA,EAAA,IAAA,QAAA,CAAA,IAKDA;AALC,YAAA,QAAA,CAAA,IAAA,GAAA,EAAA;AAAA;;AAAA,eAAA,EAAA;AAODA,YAAAA,OAAO,IAAID,QAAQ,CAAnBC,UAAAA;;AAPC,eAAA,EAAA;AAAA,YAAA,QAAA,CAAA,IAAA,GAAA,EAAA;AAAA;;AAAA,eAAA,EAAA;AAAA,YAAA,QAAA,CAAA,IAAA,GAAA,EAAA;AAAA,YAAA,QAAA,CAAA,EAAA,GAAA,QAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA;AAAA,mBAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAAA,OAAA,CAAA;;AAAA,eAAA,EAAA;AAAA,mBAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAAA,OAAA,CAAA;;AAAA,eAAA,EAAA;AAAA,eAAA,KAAA;AAAA,mBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,KAAA,EAAA,OAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,CAAA","sourcesContent":["export function getErrorMessageFromResponseSync(response) {\n  return `Failed to fetch resource ${response.url}(${response.status}): ${response.statusText} `;\n}\n\nexport async function getErrorMessageFromResponse(response) {\n  let message = `Failed to fetch resource ${response.url} (${response.status}): `;\n  try {\n    const contentType = response.headers.get('Content-Type');\n    if (contentType.includes('application/json')) {\n      message += await response.text();\n    } else {\n      message += response.statusText;\n    }\n  } catch (error) {\n    // eslint forbids return in finally statement\n    return message;\n  }\n  return message;\n}\n"]},"metadata":{},"sourceType":"module"}