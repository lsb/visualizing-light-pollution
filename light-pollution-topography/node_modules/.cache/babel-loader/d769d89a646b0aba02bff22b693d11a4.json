{"ast":null,"code":"export function processPickInfo(_ref) {\n  var pickInfo = _ref.pickInfo,\n      lastPickedInfo = _ref.lastPickedInfo,\n      mode = _ref.mode,\n      layers = _ref.layers,\n      viewports = _ref.viewports,\n      x = _ref.x,\n      y = _ref.y,\n      z = _ref.z,\n      pixelRatio = _ref.pixelRatio;\n  var pickedColor = pickInfo.pickedColor,\n      pickedLayer = pickInfo.pickedLayer,\n      pickedObjectIndex = pickInfo.pickedObjectIndex;\n  var affectedLayers = pickedLayer ? [pickedLayer] : [];\n\n  if (mode === 'hover') {\n    var lastPickedObjectIndex = lastPickedInfo.index;\n    var lastPickedLayerId = lastPickedInfo.layerId;\n    var pickedLayerId = pickedLayer && pickedLayer.props.id;\n\n    if (pickedLayerId !== lastPickedLayerId || pickedObjectIndex !== lastPickedObjectIndex) {\n      if (pickedLayerId !== lastPickedLayerId) {\n        var lastPickedLayer = layers.find(function (layer) {\n          return layer.props.id === lastPickedLayerId;\n        });\n\n        if (lastPickedLayer) {\n          affectedLayers.unshift(lastPickedLayer);\n        }\n      }\n\n      lastPickedInfo.layerId = pickedLayerId;\n      lastPickedInfo.index = pickedObjectIndex;\n      lastPickedInfo.info = null;\n    }\n  }\n\n  var viewport = getViewportFromCoordinates({\n    viewports: viewports\n  });\n  var coordinate = viewport && viewport.unproject([x, y], {\n    targetZ: z\n  });\n  var baseInfo = {\n    color: null,\n    layer: null,\n    index: -1,\n    picked: false,\n    x: x,\n    y: y,\n    pixel: [x, y],\n    coordinate: coordinate,\n    lngLat: coordinate,\n    devicePixel: [pickInfo.pickedX, pickInfo.pickedY],\n    pixelRatio: pixelRatio\n  };\n  var infos = new Map();\n  infos.set(null, baseInfo);\n  affectedLayers.forEach(function (layer) {\n    var info = Object.assign({}, baseInfo);\n\n    if (layer === pickedLayer) {\n      info.color = pickedColor;\n      info.index = pickedObjectIndex;\n      info.picked = true;\n    }\n\n    info = getLayerPickingInfo({\n      layer: layer,\n      info: info,\n      mode: mode\n    });\n\n    if (layer === pickedLayer && mode === 'hover') {\n      lastPickedInfo.info = info;\n    }\n\n    if (info) {\n      infos.set(info.layer.id, info);\n    }\n\n    if (mode === 'hover' && layer.props.autoHighlight) {\n      layer.setModuleParameters({\n        pickingSelectedColor: pickedLayer === layer ? pickedColor : null\n      });\n      layer.setNeedsRedraw();\n    }\n  });\n  return infos;\n}\nexport function getLayerPickingInfo(_ref2) {\n  var layer = _ref2.layer,\n      info = _ref2.info,\n      mode = _ref2.mode;\n\n  while (layer && info) {\n    var sourceLayer = info.layer || layer;\n    info.layer = layer;\n    info = layer.getPickingInfo({\n      info: info,\n      mode: mode,\n      sourceLayer: sourceLayer\n    });\n    layer = layer.parent;\n  }\n\n  return info;\n}\n\nfunction getViewportFromCoordinates(_ref3) {\n  var viewports = _ref3.viewports;\n  var viewport = viewports[0];\n  return viewport;\n}","map":{"version":3,"sources":["../../../../src/lib/picking/pick-info.js"],"names":["pickInfo","lastPickedInfo","mode","layers","viewports","x","y","z","pixelRatio","pickedColor","pickedLayer","pickedObjectIndex","affectedLayers","lastPickedObjectIndex","lastPickedLayerId","pickedLayerId","lastPickedLayer","layer","viewport","getViewportFromCoordinates","coordinate","targetZ","baseInfo","color","index","picked","pixel","lngLat","devicePixel","infos","info","Object","getLayerPickingInfo","pickingSelectedColor","sourceLayer"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// TODO - break this monster function into 3+ parts\n/* eslint-disable max-depth, max-statements */\n\nexport function processPickInfo({\n  pickInfo,\n  lastPickedInfo,\n  mode,\n  layers,\n  viewports,\n  x,\n  y,\n  z,\n  pixelRatio\n}) {\n  const {pickedColor, pickedLayer, pickedObjectIndex} = pickInfo;\n\n  const affectedLayers = pickedLayer ? [pickedLayer] : [];\n\n  if (mode === 'hover') {\n    // only invoke onHover events if picked object has changed\n    const lastPickedObjectIndex = lastPickedInfo.index;\n    const lastPickedLayerId = lastPickedInfo.layerId;\n    const pickedLayerId = pickedLayer && pickedLayer.props.id;\n\n    // proceed only if picked object changed\n    if (pickedLayerId !== lastPickedLayerId || pickedObjectIndex !== lastPickedObjectIndex) {\n      if (pickedLayerId !== lastPickedLayerId) {\n        // We cannot store a ref to lastPickedLayer in the context because\n        // the state of an outdated layer is no longer valid\n        // and the props may have changed\n        const lastPickedLayer = layers.find(layer => layer.props.id === lastPickedLayerId);\n        if (lastPickedLayer) {\n          // Let leave event fire before enter event\n          affectedLayers.unshift(lastPickedLayer);\n        }\n      }\n\n      // Update layer manager context\n      lastPickedInfo.layerId = pickedLayerId;\n      lastPickedInfo.index = pickedObjectIndex;\n      lastPickedInfo.info = null;\n    }\n  }\n\n  const viewport = getViewportFromCoordinates({viewports}); // TODO - add coords\n  const coordinate = viewport && viewport.unproject([x, y], {targetZ: z});\n\n  const baseInfo = {\n    color: null,\n    layer: null,\n    index: -1,\n    picked: false,\n    x,\n    y,\n    pixel: [x, y],\n    coordinate,\n    // TODO remove the lngLat prop after compatibility check\n    lngLat: coordinate,\n    devicePixel: [pickInfo.pickedX, pickInfo.pickedY],\n    pixelRatio\n  };\n\n  // Use a Map to store all picking infos.\n  // The following two forEach loops are the result of\n  // https://github.com/uber/deck.gl/issues/443\n  // Please be very careful when changing this pattern\n  const infos = new Map();\n\n  // Make sure infos always contain something even if no layer is affected\n  infos.set(null, baseInfo);\n\n  affectedLayers.forEach(layer => {\n    let info = Object.assign({}, baseInfo);\n\n    if (layer === pickedLayer) {\n      info.color = pickedColor;\n      info.index = pickedObjectIndex;\n      info.picked = true;\n    }\n\n    info = getLayerPickingInfo({layer, info, mode});\n\n    if (layer === pickedLayer && mode === 'hover') {\n      lastPickedInfo.info = info;\n    }\n\n    // This guarantees that there will be only one copy of info for\n    // one composite layer\n    if (info) {\n      infos.set(info.layer.id, info);\n    }\n\n    if (mode === 'hover' && layer.props.autoHighlight) {\n      layer.setModuleParameters({\n        pickingSelectedColor: pickedLayer === layer ? pickedColor : null\n      });\n      // setModuleParameters does not trigger redraw\n      layer.setNeedsRedraw();\n    }\n  });\n\n  return infos;\n}\n\n// Walk up the layer composite chain to populate the info object\nexport function getLayerPickingInfo({layer, info, mode}) {\n  while (layer && info) {\n    // For a composite layer, sourceLayer will point to the sublayer\n    // where the event originates from.\n    // It provides additional context for the composite layer's\n    // getPickingInfo() method to populate the info object\n    const sourceLayer = info.layer || layer;\n    info.layer = layer;\n    // layer.pickLayer() function requires a non-null ```layer.state```\n    // object to function properly. So the layer referenced here\n    // must be the \"current\" layer, not an \"out-dated\" / \"invalidated\" layer\n    info = layer.getPickingInfo({info, mode, sourceLayer});\n    layer = layer.parent;\n  }\n  return info;\n}\n\n// Indentifies which viewport, if any corresponds to x and y\n// Returns first viewport if no match\n// TODO - need to determine which viewport we are in\n// TODO - document concept of \"primary viewport\" that matches all coords?\n// TODO - static method on Viewport class?\nfunction getViewportFromCoordinates({viewports}) {\n  const viewport = viewports[0];\n  return viewport;\n}\n"]},"metadata":{},"sourceType":"module"}