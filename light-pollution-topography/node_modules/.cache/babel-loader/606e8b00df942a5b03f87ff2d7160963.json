{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { toUint8Array } from './buffer';\nimport { TextDecoder as TextDecoderPolyfill, TextEncoder as TextEncoderPolyfill } from 'text-encoding-utf-8';\n/** @ignore @suppress {missingRequire} */\n\nvar _Buffer = typeof Buffer === 'function' ? Buffer : null;\n/** @ignore */\n\n\nvar useNativeEncoders = typeof TextDecoder === 'function' && typeof TextEncoder === 'function';\n/** @ignore */\n\nexport var decodeUtf8 = function (TextDecoder) {\n  if (useNativeEncoders || !_Buffer) {\n    var decoder = new TextDecoder('utf-8');\n    return function (buffer) {\n      return decoder.decode(buffer);\n    };\n  }\n\n  return function (input) {\n    var _toUint8Array = toUint8Array(input),\n        buffer = _toUint8Array.buffer,\n        byteOffset = _toUint8Array.byteOffset,\n        length = _toUint8Array.length;\n\n    return _Buffer.from(buffer, byteOffset, length).toString();\n  };\n}(typeof TextDecoder !== 'undefined' ? TextDecoder : TextDecoderPolyfill);\n/** @ignore */\n\nexport var encodeUtf8 = function (TextEncoder) {\n  if (useNativeEncoders || !_Buffer) {\n    var encoder = new TextEncoder();\n    return function (value) {\n      return encoder.encode(value);\n    };\n  }\n\n  return function () {\n    var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    return toUint8Array(_Buffer.from(input, 'utf8'));\n  };\n}(typeof TextEncoder !== 'undefined' ? TextEncoder : TextEncoderPolyfill);","map":{"version":3,"sources":["util/utf8.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAS,YAAT,QAA6B,UAA7B;AACA,SACI,WAAW,IAAI,mBADnB,EAEI,WAAW,IAAI,mBAFnB,QAGO,qBAHP;AAKA;;AACA,IAAM,OAAO,GAAG,OAAO,MAAP,KAAkB,UAAlB,GAA+B,MAA/B,GAAwC,IAAxD;AACA;;;AACA,IAAM,iBAAiB,GAAG,OAAO,WAAP,KAAuB,UAAvB,IAAqC,OAAO,WAAP,KAAuB,UAAtF;AAEA;;AACA,OAAO,IAAM,UAAU,GAAI,UAAC,WAAD,EAAgB;AACvC,MAAI,iBAAiB,IAAI,CAAC,OAA1B,EAAmC;AAC/B,QAAM,OAAO,GAAG,IAAI,WAAJ,CAAgB,OAAhB,CAAhB;AACA,WAAO,UAAC,MAAD;AAAA,aAA4C,OAAO,CAAC,MAAR,CAAe,MAAf,CAA5C;AAAA,KAAP;AACH;;AACD,SAAO,UAAC,KAAD,EAA6C;AAAA,wBACT,YAAY,CAAC,KAAD,CADH;AAAA,QACxC,MADwC,iBACxC,MADwC;AAAA,QAChC,UADgC,iBAChC,UADgC;AAAA,QACpB,MADoB,iBACpB,MADoB;;AAEhD,WAAO,OAAO,CAAC,IAAR,CAAa,MAAb,EAAqB,UAArB,EAAiC,MAAjC,EAAyC,QAAzC,EAAP;AACH,GAHD;AAIH,CATyB,CASvB,OAAO,WAAP,KAAuB,WAAvB,GAAqC,WAArC,GAAmD,mBAT5B,CAAnB;AAWP;;AACA,OAAO,IAAM,UAAU,GAAI,UAAC,WAAD,EAAgB;AACvC,MAAI,iBAAiB,IAAI,CAAC,OAA1B,EAAmC;AAC/B,QAAM,OAAO,GAAG,IAAI,WAAJ,EAAhB;AACA,WAAO,UAAC,KAAD;AAAA,aAAoB,OAAO,CAAC,MAAR,CAAe,KAAf,CAApB;AAAA,KAAP;AACH;;AACD,SAAO;AAAA,QAAC,KAAD,uEAAS,EAAT;AAAA,WAAgB,YAAY,CAAC,OAAO,CAAC,IAAR,CAAa,KAAb,EAAoB,MAApB,CAAD,CAA5B;AAAA,GAAP;AACH,CANyB,CAMvB,OAAO,WAAP,KAAuB,WAAvB,GAAqC,WAArC,GAAmD,mBAN5B,CAAnB","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { toUint8Array } from './buffer';\nimport {\n    TextDecoder as TextDecoderPolyfill,\n    TextEncoder as TextEncoderPolyfill,\n} from 'text-encoding-utf-8';\n\n/** @ignore @suppress {missingRequire} */\nconst _Buffer = typeof Buffer === 'function' ? Buffer : null;\n/** @ignore */\nconst useNativeEncoders = typeof TextDecoder === 'function' && typeof TextEncoder === 'function';\n\n/** @ignore */\nexport const decodeUtf8 = ((TextDecoder) => {\n    if (useNativeEncoders || !_Buffer) {\n        const decoder = new TextDecoder('utf-8');\n        return (buffer?: ArrayBuffer | ArrayBufferView) => decoder.decode(buffer);\n    }\n    return (input: ArrayBufferLike | ArrayBufferView) => {\n        const { buffer, byteOffset, length } = toUint8Array(input);\n        return _Buffer.from(buffer, byteOffset, length).toString();\n    };\n})(typeof TextDecoder !== 'undefined' ? TextDecoder : TextDecoderPolyfill);\n\n/** @ignore */\nexport const encodeUtf8 = ((TextEncoder) => {\n    if (useNativeEncoders || !_Buffer) {\n        const encoder = new TextEncoder();\n        return (value?: string) => encoder.encode(value);\n    }\n    return (input = '') => toUint8Array(_Buffer.from(input, 'utf8'));\n})(typeof TextEncoder !== 'undefined' ? TextEncoder : TextEncoderPolyfill);\n"]},"metadata":{},"sourceType":"module"}