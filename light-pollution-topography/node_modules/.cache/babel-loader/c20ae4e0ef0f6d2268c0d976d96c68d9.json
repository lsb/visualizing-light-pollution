{"ast":null,"code":"import { copyPaddedStringToDataView, copyPaddedArrayBufferToDataView } from '@loaders.gl/loader-utils';\nvar MAGIC_glTF = 0x46546c67;\nvar MAGIC_JSON = 0x4e4f534a;\nvar MAGIC_BIN = 0x004e4942;\nvar LE = true;\nexport default function encodeGLBSync(glb, dataView) {\n  var byteOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var _glb$magic = glb.magic,\n      magic = _glb$magic === void 0 ? MAGIC_glTF : _glb$magic,\n      _glb$version = glb.version,\n      version = _glb$version === void 0 ? 2 : _glb$version,\n      _glb$json = glb.json,\n      json = _glb$json === void 0 ? {} : _glb$json,\n      binary = glb.binary;\n  var byteOffsetStart = byteOffset;\n\n  if (dataView) {\n    dataView.setUint32(byteOffset + 0, magic, LE);\n    dataView.setUint32(byteOffset + 4, version, LE);\n    dataView.setUint32(byteOffset + 8, 0, LE);\n  }\n\n  var byteOffsetFileLength = byteOffset + 8;\n  byteOffset += 12;\n  var byteOffsetJsonHeader = byteOffset;\n\n  if (dataView) {\n    dataView.setUint32(byteOffset + 0, 0, LE);\n    dataView.setUint32(byteOffset + 4, MAGIC_JSON, LE);\n  }\n\n  byteOffset += 8;\n  var jsonString = JSON.stringify(json);\n  byteOffset = copyPaddedStringToDataView(dataView, byteOffset, jsonString, 4);\n\n  if (dataView) {\n    var jsonByteLength = byteOffset - byteOffsetJsonHeader - 8;\n    dataView.setUint32(byteOffsetJsonHeader + 0, jsonByteLength, LE);\n  }\n\n  if (binary) {\n    var byteOffsetBinHeader = byteOffset;\n\n    if (dataView) {\n      dataView.setUint32(byteOffset + 0, 0, LE);\n      dataView.setUint32(byteOffset + 4, MAGIC_BIN, LE);\n    }\n\n    byteOffset += 8;\n    byteOffset = copyPaddedArrayBufferToDataView(dataView, byteOffset, binary, 4);\n\n    if (dataView) {\n      var binByteLength = byteOffset - byteOffsetBinHeader - 8;\n      dataView.setUint32(byteOffsetBinHeader + 0, binByteLength, LE);\n    }\n  }\n\n  if (dataView) {\n    var fileByteLength = byteOffset - byteOffsetStart;\n    dataView.setUint32(byteOffsetFileLength, fileByteLength, LE);\n  }\n\n  return byteOffset;\n}","map":{"version":3,"sources":["../../../src/lib/encode-glb.js"],"names":["MAGIC_glTF","MAGIC_JSON","MAGIC_BIN","LE","byteOffset","options","magic","version","json","binary","glb","byteOffsetStart","dataView","byteOffsetFileLength","byteOffsetJsonHeader","jsonString","JSON","copyPaddedStringToDataView","jsonByteLength","byteOffsetBinHeader","copyPaddedArrayBufferToDataView","binByteLength","fileByteLength"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase, max-statements */\nimport {\n  copyPaddedStringToDataView,\n  copyPaddedArrayBufferToDataView\n} from '@loaders.gl/loader-utils';\n\nconst MAGIC_glTF = 0x46546c67; // glTF in ASCII\nconst MAGIC_JSON = 0x4e4f534a; // JSON in ASCII\nconst MAGIC_BIN = 0x004e4942; // BIN\\0 in ASCII\n\nconst LE = true; // Binary GLTF is little endian.\n\n// Encode the full GLB buffer with header etc\n// https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#\n// glb-file-format-specification\nexport default function encodeGLBSync(glb, dataView, byteOffset = 0, options = {}) {\n  const {magic = MAGIC_glTF, version = 2, json = {}, binary} = glb;\n\n  const byteOffsetStart = byteOffset;\n\n  // Write GLB Header\n  if (dataView) {\n    dataView.setUint32(byteOffset + 0, magic, LE); // Magic number (the ASCII string 'glTF').\n    dataView.setUint32(byteOffset + 4, version, LE); // Version 2 of binary glTF container format uint32\n    dataView.setUint32(byteOffset + 8, 0, LE); // Total byte length of generated file (uint32), will be set last\n  }\n  const byteOffsetFileLength = byteOffset + 8;\n  byteOffset += 12; // GLB_FILE_HEADER_SIZE\n\n  // Write the JSON chunk header\n  const byteOffsetJsonHeader = byteOffset;\n  if (dataView) {\n    dataView.setUint32(byteOffset + 0, 0, LE); // Byte length of json chunk (will be written later)\n    dataView.setUint32(byteOffset + 4, MAGIC_JSON, LE); // Chunk type\n  }\n  byteOffset += 8; // GLB_CHUNK_HEADER_SIZE\n\n  // Write the JSON chunk\n  const jsonString = JSON.stringify(json);\n  byteOffset = copyPaddedStringToDataView(dataView, byteOffset, jsonString, 4);\n\n  // Now we know the JSON chunk length so we can write it.\n  if (dataView) {\n    const jsonByteLength = byteOffset - byteOffsetJsonHeader - 8; // GLB_CHUNK_HEADER_SIZE\n    dataView.setUint32(byteOffsetJsonHeader + 0, jsonByteLength, LE); // Byte length of json chunk (uint32)\n  }\n\n  // Write the BIN chunk if present. The BIN chunk is optional.\n  if (binary) {\n    const byteOffsetBinHeader = byteOffset;\n\n    // Write the BIN chunk header\n    if (dataView) {\n      dataView.setUint32(byteOffset + 0, 0, LE); // Byte length BIN (uint32)\n      dataView.setUint32(byteOffset + 4, MAGIC_BIN, LE); // Chunk type\n    }\n    byteOffset += 8; // GLB_CHUNK_HEADER_SIZE\n\n    byteOffset = copyPaddedArrayBufferToDataView(dataView, byteOffset, binary, 4);\n\n    // Now we know the BIN chunk length so we can write it.\n    if (dataView) {\n      const binByteLength = byteOffset - byteOffsetBinHeader - 8; // GLB_CHUNK_HEADER_SIZE\n      dataView.setUint32(byteOffsetBinHeader + 0, binByteLength, LE); // Byte length BIN (uint32)\n    }\n  }\n\n  // Now we know the glb file length so we can write it.\n  if (dataView) {\n    const fileByteLength = byteOffset - byteOffsetStart;\n    dataView.setUint32(byteOffsetFileLength, fileByteLength, LE); // Total byte length of generated file (uint32)\n  }\n\n  return byteOffset;\n}\n"]},"metadata":{},"sourceType":"module"}