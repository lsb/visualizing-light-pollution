{"ast":null,"code":"import { registerLoaders } from '@loaders.gl/core';\nimport { ImageLoader } from '@loaders.gl/images';\nimport { global } from 'probe.gl/env';\nimport log from '../utils/log';\nimport { register } from '../debug';\nimport jsonLoader from '../utils/json-loader';\nvar version = typeof \"8.1.1\" !== 'undefined' ? \"8.1.1\" : global.DECK_VERSION || 'untranspiled source';\nvar existingVersion = global.deck && global.deck.VERSION;\n\nif (existingVersion && existingVersion !== version) {\n  throw new Error(\"deck.gl - multiple versions detected: \".concat(existingVersion, \" vs \").concat(version));\n}\n\nif (!existingVersion) {\n  if (process.env.NODE_ENV !== 'production') {\n    log.log(0, \"deck.gl \".concat(version, \" - set deck.log.level=1 (or higher) to trace attribute updates\"))();\n  }\n\n  global.deck = Object.assign(global.deck || {}, {\n    VERSION: version,\n    version: version,\n    log: log,\n    _registerLoggers: register\n  });\n  registerLoaders([jsonLoader, ImageLoader]);\n}\n\nexport default global.deck;","map":{"version":3,"sources":["../../../src/lib/init.js"],"names":["version","global","existingVersion","process","log","VERSION","_registerLoggers","register","registerLoaders"],"mappings":"AAoBA,SAAA,eAAA,QAAA,kBAAA;AACA,SAAA,WAAA,QAAA,oBAAA;AAEA,SAAA,MAAA,QAAA,cAAA;AACA,OAAA,GAAA,MAAA,cAAA;AACA,SAAA,QAAA,QAAA,UAAA;AACA,OAAA,UAAA,MAAA,sBAAA;AAKA,IAAMA,OAAO,GACX,OAAA,OAAA,KAAA,WAAA,GAAA,OAAA,GAAmDC,MAAM,CAANA,YAAAA,IADrD,qBAAA;AAIA,IAAMC,eAAe,GAAGD,MAAM,CAANA,IAAAA,IAAeA,MAAM,CAANA,IAAAA,CAAvC,OAAA;;AAEA,IAAIC,eAAe,IAAIA,eAAe,KAAtC,OAAA,EAAoD;AAClD,QAAM,IAAA,KAAA,CAAA,yCAAA,MAAA,CAAA,eAAA,EAAA,MAAA,EAAA,MAAA,CAAN,OAAM,CAAA,CAAN;AACD;;AAED,IAAI,CAAJ,eAAA,EAAsB;AAEpB,MAAIC,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAAJ,YAAA,EAA2C;AACzCC,IAAAA,GAAG,CAAHA,GAAAA,CAAAA,CAAAA,EAAAA,WAAAA,MAAAA,CAAAA,OAAAA,EAAAA,gEAAAA,CAAAA;AAID;;AAEDH,EAAAA,MAAM,CAANA,IAAAA,GAAc,MAAM,CAAN,MAAA,CAAcA,MAAM,CAANA,IAAAA,IAAd,EAAA,EAAiC;AAC7CI,IAAAA,OAAO,EADsC,OAAA;AAE7CL,IAAAA,OAAO,EAFsC,OAAA;AAG7CI,IAAAA,GAAG,EAH0C,GAAA;AAK7CE,IAAAA,gBAAgB,EAAEC;AAL2B,GAAjC,CAAdN;AAQAO,EAAAA,eAAe,CAAC,CAAA,UAAA,EAAhBA,WAAgB,CAAD,CAAfA;AACD;;AAED,eAAeP,MAAM,CAArB,IAAA","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {registerLoaders} from '@loaders.gl/core';\nimport {ImageLoader} from '@loaders.gl/images';\n\nimport {global} from 'probe.gl/env';\nimport log from '../utils/log';\nimport {register} from '../debug';\nimport jsonLoader from '../utils/json-loader';\n\n// Version detection using babel plugin\n// Fallback for tests and SSR since global variable is defined by Webpack.\n/* global __VERSION__ */\nconst version =\n  typeof __VERSION__ !== 'undefined' ? __VERSION__ : global.DECK_VERSION || 'untranspiled source';\n\n// Note: a `deck` object not created by deck.gl may exist in the global scope\nconst existingVersion = global.deck && global.deck.VERSION;\n\nif (existingVersion && existingVersion !== version) {\n  throw new Error(`deck.gl - multiple versions detected: ${existingVersion} vs ${version}`);\n}\n\nif (!existingVersion) {\n  // eslint-disable-next-line\n  if (process.env.NODE_ENV !== 'production') {\n    log.log(\n      0,\n      `deck.gl ${version} - set deck.log.level=1 (or higher) to trace attribute updates`\n    )();\n  }\n\n  global.deck = Object.assign(global.deck || {}, {\n    VERSION: version,\n    version,\n    log,\n    // experimental\n    _registerLoggers: register\n  });\n\n  registerLoaders([jsonLoader, ImageLoader]);\n}\n\nexport default global.deck;\n"]},"metadata":{},"sourceType":"module"}