{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { Layer, project32, phongLighting, picking, COORDINATE_SYSTEM, log } from '@deck.gl/core';\nimport { Model, Geometry, Texture2D, isWebGL2 } from '@luma.gl/core';\nimport { hasFeature, FEATURES } from '@luma.gl/webgl';\nimport { MATRIX_ATTRIBUTES, shouldComposeModelMatrix } from '../utils/matrix';\nimport vs from './simple-mesh-layer-vertex.glsl';\nimport fs from './simple-mesh-layer-fragment.glsl';\n\nfunction getTextureFromData(gl, data, opts) {\n  if (data instanceof Texture2D) {\n    return data;\n  }\n\n  return new Texture2D(gl, Object.assign({\n    data: data\n  }, opts));\n}\n\nfunction validateGeometryAttributes(attributes) {\n  log.assert(attributes.positions || attributes.POSITION, 'SimpleMeshLayer requires \"postions\" or \"POSITION\" attribute in mesh property.');\n}\n\nfunction getGeometry(data) {\n  if (data.attributes) {\n    validateGeometryAttributes(data.attributes);\n\n    if (data instanceof Geometry) {\n      return data;\n    } else {\n      return new Geometry(data);\n    }\n  } else if (data.positions || data.POSITION) {\n    validateGeometryAttributes(data);\n    return new Geometry({\n      attributes: data\n    });\n  }\n\n  throw Error('Invalid mesh');\n}\n\nvar DEFAULT_COLOR = [0, 0, 0, 255];\nvar defaultProps = {\n  mesh: {\n    value: null,\n    type: 'object',\n    async: true\n  },\n  texture: {\n    type: 'object',\n    value: null,\n    async: true\n  },\n  sizeScale: {\n    type: 'number',\n    value: 1,\n    min: 0\n  },\n  parameters: {\n    depthTest: true,\n    depthFunc: 515\n  },\n  _instanced: true,\n  wireframe: false,\n  material: true,\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getOrientation: {\n    type: 'accessor',\n    value: [0, 0, 0]\n  },\n  getScale: {\n    type: 'accessor',\n    value: [1, 1, 1]\n  },\n  getTranslation: {\n    type: 'accessor',\n    value: [0, 0, 0]\n  },\n  getTransformMatrix: {\n    type: 'accessor',\n    value: []\n  }\n};\n\nvar SimpleMeshLayer = function (_Layer) {\n  _inherits(SimpleMeshLayer, _Layer);\n\n  function SimpleMeshLayer() {\n    _classCallCheck(this, SimpleMeshLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SimpleMeshLayer).apply(this, arguments));\n  }\n\n  _createClass(SimpleMeshLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      var transpileToGLSL100 = !isWebGL2(this.context.gl);\n      var defines = {};\n\n      if (hasFeature(this.context.gl, FEATURES.GLSL_DERIVATIVES)) {\n        defines.DERIVATIVES_AVAILABLE = 1;\n      }\n\n      return _get(_getPrototypeOf(SimpleMeshLayer.prototype), \"getShaders\", this).call(this, {\n        vs: vs,\n        fs: fs,\n        modules: [project32, phongLighting, picking],\n        transpileToGLSL100: transpileToGLSL100,\n        defines: defines\n      });\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      var attributeManager = this.getAttributeManager();\n      attributeManager.addInstanced({\n        instancePositions: {\n          transition: true,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          size: 3,\n          accessor: 'getPosition'\n        },\n        instanceColors: {\n          type: 5121,\n          transition: true,\n          size: this.props.colorFormat.length,\n          normalized: true,\n          accessor: 'getColor',\n          defaultValue: [0, 0, 0, 255]\n        },\n        instanceModelMatrix: MATRIX_ATTRIBUTES\n      });\n      this.setState({\n        emptyTexture: new Texture2D(this.context.gl, {\n          data: new Uint8Array(4),\n          width: 1,\n          height: 1\n        })\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n          oldProps = _ref.oldProps,\n          changeFlags = _ref.changeFlags;\n\n      _get(_getPrototypeOf(SimpleMeshLayer.prototype), \"updateState\", this).call(this, {\n        props: props,\n        oldProps: oldProps,\n        changeFlags: changeFlags\n      });\n\n      if (props.mesh !== oldProps.mesh || changeFlags.extensionsChanged) {\n        if (this.state.model) {\n          this.state.model[\"delete\"]();\n        }\n\n        if (props.mesh) {\n          this.setState({\n            model: this.getModel(props.mesh)\n          });\n          var attributes = props.mesh.attributes || props.mesh;\n          this.setState({\n            hasNormals: Boolean(attributes.NORMAL || attributes.normals)\n          });\n        }\n\n        this.getAttributeManager().invalidateAll();\n      }\n\n      if (props.texture !== oldProps.texture) {\n        this.setTexture(props.texture);\n      }\n\n      if (this.state.model) {\n        this.state.model.setDrawMode(this.props.wireframe ? 3 : 4);\n      }\n    }\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState() {\n      _get(_getPrototypeOf(SimpleMeshLayer.prototype), \"finalizeState\", this).call(this);\n\n      this.state.emptyTexture[\"delete\"]();\n\n      if (this.state.texture) {\n        this.state.texture[\"delete\"]();\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref2) {\n      var uniforms = _ref2.uniforms;\n\n      if (!this.state.model) {\n        return;\n      }\n\n      var viewport = this.context.viewport;\n      var _this$props = this.props,\n          sizeScale = _this$props.sizeScale,\n          coordinateSystem = _this$props.coordinateSystem,\n          _instanced = _this$props._instanced;\n      this.state.model.draw({\n        uniforms: Object.assign({}, uniforms, {\n          sizeScale: sizeScale,\n          composeModelMatrix: !_instanced || shouldComposeModelMatrix(viewport, coordinateSystem),\n          flatShading: !this.state.hasNormals\n        })\n      });\n    }\n  }, {\n    key: \"getModel\",\n    value: function getModel(mesh) {\n      var model = new Model(this.context.gl, Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: getGeometry(mesh),\n        isInstanced: true\n      }));\n      var _this$state = this.state,\n          texture = _this$state.texture,\n          emptyTexture = _this$state.emptyTexture;\n      model.setUniforms({\n        sampler: texture || emptyTexture,\n        hasTexture: Boolean(texture)\n      });\n      return model;\n    }\n  }, {\n    key: \"setTexture\",\n    value: function setTexture(image) {\n      var gl = this.context.gl;\n      var _this$state2 = this.state,\n          emptyTexture = _this$state2.emptyTexture,\n          model = _this$state2.model;\n\n      if (this.state.texture) {\n        this.state.texture[\"delete\"]();\n      }\n\n      var texture = image ? getTextureFromData(gl, image) : null;\n      this.setState({\n        texture: texture\n      });\n\n      if (model) {\n        model.setUniforms({\n          sampler: texture || emptyTexture,\n          hasTexture: Boolean(texture)\n        });\n      }\n    }\n  }]);\n\n  return SimpleMeshLayer;\n}(Layer);\n\nexport { SimpleMeshLayer as default };\nSimpleMeshLayer.layerName = 'SimpleMeshLayer';\nSimpleMeshLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/simple-mesh-layer/simple-mesh-layer.js"],"names":["data","log","attributes","validateGeometryAttributes","Error","DEFAULT_COLOR","defaultProps","mesh","value","type","async","texture","sizeScale","min","parameters","depthTest","depthFunc","_instanced","wireframe","material","getPosition","x","getColor","getOrientation","getScale","getTranslation","getTransformMatrix","SimpleMeshLayer","Layer","transpileToGLSL100","isWebGL2","defines","hasFeature","FEATURES","vs","fs","modules","attributeManager","instancePositions","transition","fp64","size","accessor","instanceColors","normalized","defaultValue","instanceModelMatrix","MATRIX_ATTRIBUTES","emptyTexture","width","height","props","oldProps","changeFlags","model","hasNormals","Boolean","uniforms","viewport","coordinateSystem","composeModelMatrix","shouldComposeModelMatrix","flatShading","id","geometry","getGeometry","isInstanced","sampler","hasTexture","image","gl","getTextureFromData"],"mappings":";;;;;;AAwBA,SAAA,KAAA,EAAA,SAAA,EAAA,aAAA,EAAA,OAAA,EAAA,iBAAA,EAAA,GAAA,QAAA,eAAA;AAEA,SAAA,KAAA,EAAA,QAAA,EAAA,SAAA,EAAA,QAAA,QAAA,eAAA;AACA,SAAA,UAAA,EAAA,QAAA,QAAA,gBAAA;AAEA,SAAA,iBAAA,EAAA,wBAAA,QAAA,iBAAA;AAEA,OAAA,EAAA,MAAA,iCAAA;AACA,OAAA,EAAA,MAAA,mCAAA;;AAMA,SAAA,kBAAA,CAAA,EAAA,EAAA,IAAA,EAAA,IAAA,EAA4C;AAC1C,MAAIA,IAAI,YAAR,SAAA,EAA+B;AAC7B,WAAA,IAAA;AACD;;AACD,SAAO,IAAA,SAAA,CAAA,EAAA,EAAkB,MAAM,CAAN,MAAA,CAAc;AAACA,IAAAA,IAAI,EAAJA;AAAD,GAAd,EAAzB,IAAyB,CAAlB,CAAP;AACD;;AAED,SAAA,0BAAA,CAAA,UAAA,EAAgD;AAC9CC,EAAAA,GAAG,CAAHA,MAAAA,CACEC,UAAU,CAAVA,SAAAA,IAAwBA,UAAU,CADpCD,QAAAA,EAAAA,+EAAAA;AAID;;AAMD,SAAA,WAAA,CAAA,IAAA,EAA2B;AACzB,MAAID,IAAI,CAAR,UAAA,EAAqB;AACnBG,IAAAA,0BAA0B,CAACH,IAAI,CAA/BG,UAA0B,CAA1BA;;AACA,QAAIH,IAAI,YAAR,QAAA,EAA8B;AAC5B,aAAA,IAAA;AADF,KAAA,MAEO;AACL,aAAO,IAAA,QAAA,CAAP,IAAO,CAAP;AACD;AANH,GAAA,MAOO,IAAIA,IAAI,CAAJA,SAAAA,IAAkBA,IAAI,CAA1B,QAAA,EAAqC;AAC1CG,IAAAA,0BAA0B,CAA1BA,IAA0B,CAA1BA;AACA,WAAO,IAAA,QAAA,CAAa;AAClBD,MAAAA,UAAU,EAAEF;AADM,KAAb,CAAP;AAGD;;AACD,QAAMI,KAAK,CAAX,cAAW,CAAX;AACD;;AAED,IAAMC,aAAa,GAAG,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAtB,GAAsB,CAAtB;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE;AAACC,IAAAA,KAAK,EAAN,IAAA;AAAcC,IAAAA,IAAI,EAAlB,QAAA;AAA8BC,IAAAA,KAAK,EAAE;AAArC,GADa;AAEnBC,EAAAA,OAAO,EAAE;AAACF,IAAAA,IAAI,EAAL,QAAA;AAAiBD,IAAAA,KAAK,EAAtB,IAAA;AAA8BE,IAAAA,KAAK,EAAE;AAArC,GAFU;AAGnBE,EAAAA,SAAS,EAAE;AAACH,IAAAA,IAAI,EAAL,QAAA;AAAiBD,IAAAA,KAAK,EAAtB,CAAA;AAA2BK,IAAAA,GAAG,EAAE;AAAhC,GAHQ;AAKnBC,EAAAA,UAAU,EAAE;AACVC,IAAAA,SAAS,EADC,IAAA;AAEVC,IAAAA,SAAS,EAAA;AAFC,GALO;AAYnBC,EAAAA,UAAU,EAZS,IAAA;AAgBnBC,EAAAA,SAAS,EAhBU,KAAA;AAkBnBC,EAAAA,QAAQ,EAlBW,IAAA;AAmBnBC,EAAAA,WAAW,EAAE;AAACX,IAAAA,IAAI,EAAL,UAAA;AAAmBD,IAAAA,KAAK,EAAE,SAAA,KAAA,CAAA,CAAA,EAAC;AAAA,aAAIa,CAAC,CAAL,QAAA;AAAA;AAA3B,GAnBM;AAoBnBC,EAAAA,QAAQ,EAAE;AAACb,IAAAA,IAAI,EAAL,UAAA;AAAmBD,IAAAA,KAAK,EAAEH;AAA1B,GApBS;AAyBnBkB,EAAAA,cAAc,EAAE;AAACd,IAAAA,IAAI,EAAL,UAAA;AAAmBD,IAAAA,KAAK,EAAE,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA;AAA1B,GAzBG;AA0BnBgB,EAAAA,QAAQ,EAAE;AAACf,IAAAA,IAAI,EAAL,UAAA;AAAmBD,IAAAA,KAAK,EAAE,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA;AAA1B,GA1BS;AA2BnBiB,EAAAA,cAAc,EAAE;AAAChB,IAAAA,IAAI,EAAL,UAAA;AAAmBD,IAAAA,KAAK,EAAE,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA;AAA1B,GA3BG;AA6BnBkB,EAAAA,kBAAkB,EAAE;AAACjB,IAAAA,IAAI,EAAL,UAAA;AAAmBD,IAAAA,KAAK,EAAE;AAA1B;AA7BD,CAArB;;IAgCqBmB,e;;;;;;;;;;;iCACN;AACX,UAAME,kBAAkB,GAAG,CAACC,QAAQ,CAAC,KAAA,OAAA,CAArC,EAAoC,CAApC;AAEA,UAAMC,OAAO,GAAb,EAAA;;AAEA,UAAIC,UAAU,CAAC,KAAA,OAAA,CAAD,EAAA,EAAkBC,QAAQ,CAAxC,gBAAc,CAAd,EAA4D;AAC1DF,QAAAA,OAAO,CAAPA,qBAAAA,GAAAA,CAAAA;AACD;;AAED,aAAA,IAAA,CAAA,eAAA,CAAA,eAAA,CAAA,SAAA,CAAA,EAAA,YAAA,EAAA,IAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAwB;AACtBG,QAAAA,EAAE,EADoB,EAAA;AAEtBC,QAAAA,EAAE,EAFoB,EAAA;AAGtBC,QAAAA,OAAO,EAAE,CAAA,SAAA,EAAA,aAAA,EAHa,OAGb,CAHa;AAItBP,QAAAA,kBAAkB,EAJI,kBAAA;AAKtBE,QAAAA,OAAO,EAAPA;AALsB,OAAxB,CAAA;AAOD;;;sCAEiB;AAChB,UAAMM,gBAAgB,GAAG,KAAzB,mBAAyB,EAAzB;AAEAA,MAAAA,gBAAgB,CAAhBA,YAAAA,CAA8B;AAC5BC,QAAAA,iBAAiB,EAAE;AACjBC,UAAAA,UAAU,EADO,IAAA;AAEjB9B,UAAAA,IAAI,EAFa,IAAA;AAGjB+B,UAAAA,IAAI,EAAE,KAHW,iBAGX,EAHW;AAIjBC,UAAAA,IAAI,EAJa,CAAA;AAKjBC,UAAAA,QAAQ,EAAE;AALO,SADS;AAQ5BC,QAAAA,cAAc,EAAE;AACdlC,UAAAA,IAAI,EADU,IAAA;AAEd8B,UAAAA,UAAU,EAFI,IAAA;AAGdE,UAAAA,IAAI,EAAE,KAAA,KAAA,CAAA,WAAA,CAHQ,MAAA;AAIdG,UAAAA,UAAU,EAJI,IAAA;AAKdF,UAAAA,QAAQ,EALM,UAAA;AAMdG,UAAAA,YAAY,EAAE,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA;AANA,SARY;AAgB5BC,QAAAA,mBAAmB,EAAEC;AAhBO,OAA9BV;AAmBA,WAAA,QAAA,CAAc;AAGZW,QAAAA,YAAY,EAAE,IAAA,SAAA,CAAc,KAAA,OAAA,CAAd,EAAA,EAA+B;AAC3ChD,UAAAA,IAAI,EAAE,IAAA,UAAA,CADqC,CACrC,CADqC;AAE3CiD,UAAAA,KAAK,EAFsC,CAAA;AAG3CC,UAAAA,MAAM,EAAE;AAHmC,SAA/B;AAHF,OAAd;AASD;;;sCAE2C;AAAA,UAA/BC,KAA+B,GAAA,IAAA,CAA/BA,KAA+B;AAAA,UAAxBC,QAAwB,GAAA,IAAA,CAAxBA,QAAwB;AAAA,UAAdC,WAAc,GAAA,IAAA,CAAdA,WAAc;;AAC1C,MAAA,IAAA,CAAA,eAAA,CAAA,eAAA,CAAA,SAAA,CAAA,EAAA,aAAA,EAAA,IAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAkB;AAACF,QAAAA,KAAK,EAAN,KAAA;AAAQC,QAAAA,QAAQ,EAAhB,QAAA;AAAkBC,QAAAA,WAAW,EAAXA;AAAlB,OAAlB;;AAEA,UAAIF,KAAK,CAALA,IAAAA,KAAeC,QAAQ,CAAvBD,IAAAA,IAAgCE,WAAW,CAA/C,iBAAA,EAAmE;AACjE,YAAI,KAAA,KAAA,CAAJ,KAAA,EAAsB;AACpB,eAAA,KAAA,CAAA,KAAA,CAAA,QAAA;AACD;;AACD,YAAIF,KAAK,CAAT,IAAA,EAAgB;AACd,eAAA,QAAA,CAAc;AAACG,YAAAA,KAAK,EAAE,KAAA,QAAA,CAAcH,KAAK,CAAnB,IAAA;AAAR,WAAd;AAEA,cAAMjD,UAAU,GAAGiD,KAAK,CAALA,IAAAA,CAAAA,UAAAA,IAAyBA,KAAK,CAAjD,IAAA;AACA,eAAA,QAAA,CAAc;AACZI,YAAAA,UAAU,EAAEC,OAAO,CAACtD,UAAU,CAAVA,MAAAA,IAAqBA,UAAU,CAAhC,OAAA;AADP,WAAd;AAGD;;AACD,aAAA,mBAAA,GAAA,aAAA;AACD;;AAED,UAAIiD,KAAK,CAALA,OAAAA,KAAkBC,QAAQ,CAA9B,OAAA,EAAwC;AACtC,aAAA,UAAA,CAAgBD,KAAK,CAArB,OAAA;AACD;;AAED,UAAI,KAAA,KAAA,CAAJ,KAAA,EAAsB;AACpB,aAAA,KAAA,CAAA,KAAA,CAAA,WAAA,CAA6B,KAAA,KAAA,CAAA,SAAA,GAAA,CAAA,GAA7B,CAAA;AACD;AACF;;;oCAEe;AACd,MAAA,IAAA,CAAA,eAAA,CAAA,eAAA,CAAA,SAAA,CAAA,EAAA,eAAA,EAAA,IAAA,CAAA,CAAA,IAAA,CAAA,IAAA;;AAEA,WAAA,KAAA,CAAA,YAAA,CAAA,QAAA;;AACA,UAAI,KAAA,KAAA,CAAJ,OAAA,EAAwB;AACtB,aAAA,KAAA,CAAA,OAAA,CAAA,QAAA;AACD;AACF;;;gCAEgB;AAAA,UAAXM,QAAW,GAAA,KAAA,CAAXA,QAAW;;AACf,UAAI,CAAC,KAAA,KAAA,CAAL,KAAA,EAAuB;AACrB;AACD;;AAHc,UAKRC,QALQ,GAKI,KALJ,OAKI,CALJ,QAAA;AAAA,UAAA,WAAA,GAMmC,KANnC,KAAA;AAAA,UAMR9C,SANQ,GAAA,WAAA,CAAA,SAAA;AAAA,UAMG+C,gBANH,GAAA,WAAA,CAAA,gBAAA;AAAA,UAMqB1C,UANrB,GAAA,WAAA,CAAA,UAAA;AAQf,WAAA,KAAA,CAAA,KAAA,CAAA,IAAA,CAAsB;AACpBwC,QAAAA,QAAQ,EAAE,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,QAAA,EAA4B;AACpC7C,UAAAA,SAAS,EAD2B,SAAA;AAEpCgD,UAAAA,kBAAkB,EAAE,CAAA,UAAA,IAAeC,wBAAwB,CAAA,QAAA,EAFvB,gBAEuB,CAFvB;AAGpCC,UAAAA,WAAW,EAAE,CAAC,KAAA,KAAA,CAAWP;AAHW,SAA5B;AADU,OAAtB;AAOD;;;6BAEQhD,I,EAAM;AACb,UAAM+C,KAAK,GAAG,IAAA,KAAA,CACZ,KAAA,OAAA,CADY,EAAA,EAEZ,MAAM,CAAN,MAAA,CAAA,EAAA,EAAkB,KAAlB,UAAkB,EAAlB,EAAqC;AACnCS,QAAAA,EAAE,EAAE,KAAA,KAAA,CAD+B,EAAA;AAEnCC,QAAAA,QAAQ,EAAEC,WAAW,CAFc,IAEd,CAFc;AAGnCC,QAAAA,WAAW,EAAE;AAHsB,OAArC,CAFY,CAAd;AADa,UAAA,WAAA,GAUmB,KAVnB,KAAA;AAAA,UAUNvD,OAVM,GAAA,WAAA,CAAA,OAAA;AAAA,UAUGqC,YAVH,GAAA,WAAA,CAAA,YAAA;AAWbM,MAAAA,KAAK,CAALA,WAAAA,CAAkB;AAChBa,QAAAA,OAAO,EAAExD,OAAO,IADA,YAAA;AAEhByD,QAAAA,UAAU,EAAEZ,OAAO,CAAA,OAAA;AAFH,OAAlBF;AAKA,aAAA,KAAA;AACD;;;+BAEUe,K,EAAO;AAAA,UACTC,EADS,GACH,KADG,OACH,CADG,EAAA;AAAA,UAAA,YAAA,GAEc,KAFd,KAAA;AAAA,UAETtB,YAFS,GAAA,YAAA,CAAA,YAAA;AAAA,UAEKM,KAFL,GAAA,YAAA,CAAA,KAAA;;AAIhB,UAAI,KAAA,KAAA,CAAJ,OAAA,EAAwB;AACtB,aAAA,KAAA,CAAA,OAAA,CAAA,QAAA;AACD;;AAED,UAAM3C,OAAO,GAAG0D,KAAK,GAAGE,kBAAkB,CAAA,EAAA,EAArB,KAAqB,CAArB,GAArB,IAAA;AACA,WAAA,QAAA,CAAc;AAAC5D,QAAAA,OAAO,EAAPA;AAAD,OAAd;;AAEA,UAAA,KAAA,EAAW;AAGT2C,QAAAA,KAAK,CAALA,WAAAA,CAAkB;AAChBa,UAAAA,OAAO,EAAExD,OAAO,IADA,YAAA;AAEhByD,UAAAA,UAAU,EAAEZ,OAAO,CAAA,OAAA;AAFH,SAAlBF;AAID;AACF;;;;EA/I0C1B,K;;SAAxBD,e;AAkJrBA,eAAe,CAAfA,SAAAA,GAAAA,iBAAAA;AACAA,eAAe,CAAfA,YAAAA,GAAAA,YAAAA","sourcesContent":["// Note: This file will either be moved back to deck.gl or reformatted to web-monorepo standards\n// Disabling lint temporarily to facilitate copying code in and out of this repo\n/* eslint-disable */\n\n// Copyright (c) 2015 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, phongLighting, picking, COORDINATE_SYSTEM, log} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, Texture2D, isWebGL2} from '@luma.gl/core';\nimport {hasFeature, FEATURES} from '@luma.gl/webgl';\n\nimport {MATRIX_ATTRIBUTES, shouldComposeModelMatrix} from '../utils/matrix';\n\nimport vs from './simple-mesh-layer-vertex.glsl';\nimport fs from './simple-mesh-layer-fragment.glsl';\n\n/*\n * Convert image data into texture\n * @returns {Texture2D} texture\n */\nfunction getTextureFromData(gl, data, opts) {\n  if (data instanceof Texture2D) {\n    return data;\n  }\n  return new Texture2D(gl, Object.assign({data}, opts));\n}\n\nfunction validateGeometryAttributes(attributes) {\n  log.assert(\n    attributes.positions || attributes.POSITION,\n    'SimpleMeshLayer requires \"postions\" or \"POSITION\" attribute in mesh property.'\n  );\n}\n\n/*\n * Convert mesh data into geometry\n * @returns {Geometry} geometry\n */\nfunction getGeometry(data) {\n  if (data.attributes) {\n    validateGeometryAttributes(data.attributes);\n    if (data instanceof Geometry) {\n      return data;\n    } else {\n      return new Geometry(data);\n    }\n  } else if (data.positions || data.POSITION) {\n    validateGeometryAttributes(data);\n    return new Geometry({\n      attributes: data\n    });\n  }\n  throw Error('Invalid mesh');\n}\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  mesh: {value: null, type: 'object', async: true},\n  texture: {type: 'object', value: null, async: true},\n  sizeScale: {type: 'number', value: 1, min: 0},\n  // TODO - parameters should be merged, not completely overridden\n  parameters: {\n    depthTest: true,\n    depthFunc: GL.LEQUAL\n  },\n\n  // _instanced is a hack to use world position instead of meter offsets in mesh\n  // TODO - formalize API\n  _instanced: true,\n  // NOTE(Tarek): Quick and dirty wireframe. Just draws\n  // the same mesh with LINE_STRIPS. Won't follow edges\n  // of the original mesh.\n  wireframe: false,\n  // Optional material for 'lighting' shader module\n  material: true,\n  getPosition: {type: 'accessor', value: x => x.position},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  // yaw, pitch and roll are in degrees\n  // https://en.wikipedia.org/wiki/Euler_angles\n  // [pitch, yaw, roll]\n  getOrientation: {type: 'accessor', value: [0, 0, 0]},\n  getScale: {type: 'accessor', value: [1, 1, 1]},\n  getTranslation: {type: 'accessor', value: [0, 0, 0]},\n  // 4x4 matrix\n  getTransformMatrix: {type: 'accessor', value: []}\n};\n\nexport default class SimpleMeshLayer extends Layer {\n  getShaders() {\n    const transpileToGLSL100 = !isWebGL2(this.context.gl);\n\n    const defines = {};\n\n    if (hasFeature(this.context.gl, FEATURES.GLSL_DERIVATIVES)) {\n      defines.DERIVATIVES_AVAILABLE = 1;\n    }\n\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, phongLighting, picking],\n      transpileToGLSL100,\n      defines\n    });\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n\n    attributeManager.addInstanced({\n      instancePositions: {\n        transition: true,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        size: 3,\n        accessor: 'getPosition'\n      },\n      instanceColors: {\n        type: GL.UNSIGNED_BYTE,\n        transition: true,\n        size: this.props.colorFormat.length,\n        normalized: true,\n        accessor: 'getColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceModelMatrix: MATRIX_ATTRIBUTES\n    });\n\n    this.setState({\n      // Avoid luma.gl's missing uniform warning\n      // TODO - add feature to luma.gl to specify ignored uniforms?\n      emptyTexture: new Texture2D(this.context.gl, {\n        data: new Uint8Array(4),\n        width: 1,\n        height: 1\n      })\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    if (props.mesh !== oldProps.mesh || changeFlags.extensionsChanged) {\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      if (props.mesh) {\n        this.setState({model: this.getModel(props.mesh)});\n\n        const attributes = props.mesh.attributes || props.mesh;\n        this.setState({\n          hasNormals: Boolean(attributes.NORMAL || attributes.normals)\n        });\n      }\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (props.texture !== oldProps.texture) {\n      this.setTexture(props.texture);\n    }\n\n    if (this.state.model) {\n      this.state.model.setDrawMode(this.props.wireframe ? GL.LINE_STRIP : GL.TRIANGLES);\n    }\n  }\n\n  finalizeState() {\n    super.finalizeState();\n\n    this.state.emptyTexture.delete();\n    if (this.state.texture) {\n      this.state.texture.delete();\n    }\n  }\n\n  draw({uniforms}) {\n    if (!this.state.model) {\n      return;\n    }\n\n    const {viewport} = this.context;\n    const {sizeScale, coordinateSystem, _instanced} = this.props;\n\n    this.state.model.draw({\n      uniforms: Object.assign({}, uniforms, {\n        sizeScale,\n        composeModelMatrix: !_instanced || shouldComposeModelMatrix(viewport, coordinateSystem),\n        flatShading: !this.state.hasNormals\n      })\n    });\n  }\n\n  getModel(mesh) {\n    const model = new Model(\n      this.context.gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: getGeometry(mesh),\n        isInstanced: true\n      })\n    );\n\n    const {texture, emptyTexture} = this.state;\n    model.setUniforms({\n      sampler: texture || emptyTexture,\n      hasTexture: Boolean(texture)\n    });\n\n    return model;\n  }\n\n  setTexture(image) {\n    const {gl} = this.context;\n    const {emptyTexture, model} = this.state;\n\n    if (this.state.texture) {\n      this.state.texture.delete();\n    }\n\n    const texture = image ? getTextureFromData(gl, image) : null;\n    this.setState({texture});\n\n    if (model) {\n      // props.mesh may not be ready at this time.\n      // The sampler will be set when `getModel` is called\n      model.setUniforms({\n        sampler: texture || emptyTexture,\n        hasTexture: Boolean(texture)\n      });\n    }\n  }\n}\n\nSimpleMeshLayer.layerName = 'SimpleMeshLayer';\nSimpleMeshLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}