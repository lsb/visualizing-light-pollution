{"ast":null,"code":"import { encodeGLTFSync } from './lib/encode-gltf';\nexport default {\n  name: 'glTF',\n  extensions: ['glb'],\n  mimeType: 'model/gltf+json',\n  encodeSync: encodeSync,\n  binary: true,\n  options: {}\n};\n\nfunction encodeSync(gltf) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$byteOffset = options.byteOffset,\n      byteOffset = _options$byteOffset === void 0 ? 0 : _options$byteOffset;\n  var byteLength = encodeGLTFSync(gltf, null, byteOffset, options);\n  var arrayBuffer = new ArrayBuffer(byteLength);\n  var dataView = new DataView(arrayBuffer);\n  encodeGLTFSync(gltf, dataView, byteOffset, options);\n  return arrayBuffer;\n}","map":{"version":3,"sources":["../../src/gltf-writer.js"],"names":["name","extensions","mimeType","encodeSync","binary","options","byteOffset","byteLength","encodeGLTFSync","arrayBuffer","dataView"],"mappings":"AAAA,SAAA,cAAA,QAAA,mBAAA;AAEA,eAAe;AACbA,EAAAA,IAAI,EADS,MAAA;AAEbC,EAAAA,UAAU,EAAE,CAFC,KAED,CAFC;AAIbC,EAAAA,QAAQ,EAJK,iBAAA;AAKbC,EAAAA,UAAU,EALG,UAAA;AAMbC,EAAAA,MAAM,EANO,IAAA;AAObC,EAAAA,OAAO,EAAE;AAPI,CAAf;;AAUA,SAAA,UAAA,CAAA,IAAA,EAAwC;AAAA,MAAdA,OAAc,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;AAAA,MAAA,mBAAA,GACbA,OADa,CAAA,UAAA;AAAA,MAC/BC,UAD+B,GAAA,mBAAA,KAAA,KAAA,CAAA,GAAA,CAAA,GAAA,mBAAA;AAItC,MAAMC,UAAU,GAAGC,cAAc,CAAA,IAAA,EAAA,IAAA,EAAA,UAAA,EAAjC,OAAiC,CAAjC;AACA,MAAMC,WAAW,GAAG,IAAA,WAAA,CAApB,UAAoB,CAApB;AACA,MAAMC,QAAQ,GAAG,IAAA,QAAA,CAAjB,WAAiB,CAAjB;AACAF,EAAAA,cAAc,CAAA,IAAA,EAAA,QAAA,EAAA,UAAA,EAAdA,OAAc,CAAdA;AAEA,SAAA,WAAA;AACD","sourcesContent":["import {encodeGLTFSync} from './lib/encode-gltf';\n\nexport default {\n  name: 'glTF',\n  extensions: ['glb'], // We only support encoding to binary GLB, not to JSON GLTF\n  // mimeType: 'model/gltf-binary',\n  mimeType: 'model/gltf+json',\n  encodeSync,\n  binary: true,\n  options: {}\n};\n\nfunction encodeSync(gltf, options = {}) {\n  const {byteOffset = 0} = options;\n\n  // Calculate length, then create arraybuffer and encode\n  const byteLength = encodeGLTFSync(gltf, null, byteOffset, options);\n  const arrayBuffer = new ArrayBuffer(byteLength);\n  const dataView = new DataView(arrayBuffer);\n  encodeGLTFSync(gltf, dataView, byteOffset, options);\n\n  return arrayBuffer;\n}\n"]},"metadata":{},"sourceType":"module"}