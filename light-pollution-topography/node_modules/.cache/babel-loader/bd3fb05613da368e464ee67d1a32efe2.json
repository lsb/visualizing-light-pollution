{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport function getBool(_data, _index, byte, bit) {\n  return (byte & 1 << bit) !== 0;\n}\n/** @ignore */\n\nexport function getBit(_data, _index, byte, bit) {\n  return (byte & 1 << bit) >> bit;\n}\n/** @ignore */\n\nexport function setBool(bytes, index, value) {\n  return value ? !!(bytes[index >> 3] |= 1 << index % 8) || true : !(bytes[index >> 3] &= ~(1 << index % 8)) && false;\n}\n/** @ignore */\n\nexport function truncateBitmap(offset, length, bitmap) {\n  const alignedSize = bitmap.byteLength + 7 & ~7;\n\n  if (offset > 0 || bitmap.byteLength < alignedSize) {\n    const bytes = new Uint8Array(alignedSize); // If the offset is a multiple of 8 bits, it's safe to slice the bitmap\n\n    bytes.set(offset % 8 === 0 ? bitmap.subarray(offset >> 3) : // Otherwise iterate each bit from the offset and return a new one\n    packBools(iterateBits(bitmap, offset, length, null, getBool)).subarray(0, alignedSize));\n    return bytes;\n  }\n\n  return bitmap;\n}\n/** @ignore */\n\nexport function packBools(values) {\n  let xs = [];\n  let i = 0,\n      bit = 0,\n      byte = 0;\n\n  for (const value of values) {\n    value && (byte |= 1 << bit);\n\n    if (++bit === 8) {\n      xs[i++] = byte;\n      byte = bit = 0;\n    }\n  }\n\n  if (i === 0 || bit > 0) {\n    xs[i++] = byte;\n  }\n\n  let b = new Uint8Array(xs.length + 7 & ~7);\n  b.set(xs);\n  return b;\n}\n/** @ignore */\n\nexport function* iterateBits(bytes, begin, length, context, get) {\n  let bit = begin % 8;\n  let byteIndex = begin >> 3;\n  let index = 0,\n      remaining = length;\n\n  for (; remaining > 0; bit = 0) {\n    let byte = bytes[byteIndex++];\n\n    do {\n      yield get(context, index++, byte, bit);\n    } while (--remaining > 0 && ++bit < 8);\n  }\n}\n/**\n * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.\n * @param vector The Uint8Array of bits for which to compute the population count.\n * @param lhs The range's left-hand side (or start) bit\n * @param rhs The range's right-hand side (or end) bit\n */\n\n/** @ignore */\n\nexport function popcnt_bit_range(data, lhs, rhs) {\n  if (rhs - lhs <= 0) {\n    return 0;\n  } // If the bit range is less than one byte, sum the 1 bits in the bit range\n\n\n  if (rhs - lhs < 8) {\n    let sum = 0;\n\n    for (const bit of iterateBits(data, lhs, rhs - lhs, data, getBit)) {\n      sum += bit;\n    }\n\n    return sum;\n  } // Get the next lowest multiple of 8 from the right hand side\n\n\n  const rhsInside = rhs >> 3 << 3; // Get the next highest multiple of 8 from the left hand side\n\n  const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\n  return (// Get the popcnt of bits between the left hand side, and the next highest multiple of 8\n    popcnt_bit_range(data, lhs, lhsInside) + // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\n    popcnt_bit_range(data, rhsInside, rhs) + // Get the popcnt of all bits between the left and right hand sides' multiples of 8\n    popcnt_array(data, lhsInside >> 3, rhsInside - lhsInside >> 3)\n  );\n}\n/** @ignore */\n\nexport function popcnt_array(arr, byteOffset, byteLength) {\n  let cnt = 0,\n      pos = byteOffset | 0;\n  const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n  const len = byteLength === void 0 ? arr.byteLength : pos + byteLength;\n\n  while (len - pos >= 4) {\n    cnt += popcnt_uint32(view.getUint32(pos));\n    pos += 4;\n  }\n\n  while (len - pos >= 2) {\n    cnt += popcnt_uint32(view.getUint16(pos));\n    pos += 2;\n  }\n\n  while (len - pos >= 1) {\n    cnt += popcnt_uint32(view.getUint8(pos));\n    pos += 1;\n  }\n\n  return cnt;\n}\n/** @ignore */\n\nexport function popcnt_uint32(uint32) {\n  let i = uint32 | 0;\n  i = i - (i >>> 1 & 0x55555555);\n  i = (i & 0x33333333) + (i >>> 2 & 0x33333333);\n  return (i + (i >>> 4) & 0x0F0F0F0F) * 0x01010101 >>> 24;\n}","map":{"version":3,"sources":["util/bit.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport function getBool(_data: any, _index: number, byte: number, bit: number) {\n    return (byte & 1 << bit) !== 0;\n}\n\n/** @ignore */\nexport function getBit(_data: any, _index: number, byte: number, bit: number): 0 | 1 {\n    return (byte & 1 << bit) >> bit as (0 | 1);\n}\n\n/** @ignore */\nexport function setBool(bytes: Uint8Array, index: number, value: any) {\n    return value ?\n        !!(bytes[index >> 3] |=  (1 << (index % 8))) || true :\n        !(bytes[index >> 3] &= ~(1 << (index % 8))) && false ;\n}\n\n/** @ignore */\nexport function truncateBitmap(offset: number, length: number, bitmap: Uint8Array) {\n    const alignedSize = (bitmap.byteLength + 7) & ~7;\n    if (offset > 0 || bitmap.byteLength < alignedSize) {\n        const bytes = new Uint8Array(alignedSize);\n        // If the offset is a multiple of 8 bits, it's safe to slice the bitmap\n        bytes.set(offset % 8 === 0 ? bitmap.subarray(offset >> 3) :\n            // Otherwise iterate each bit from the offset and return a new one\n            packBools(iterateBits(bitmap, offset, length, null, getBool)).subarray(0, alignedSize));\n        return bytes;\n    }\n    return bitmap;\n}\n\n/** @ignore */\nexport function packBools(values: Iterable<any>) {\n    let xs: number[] = [];\n    let i = 0, bit = 0, byte = 0;\n    for (const value of values) {\n        value && (byte |= 1 << bit);\n        if (++bit === 8) {\n            xs[i++] = byte;\n            byte = bit = 0;\n        }\n    }\n    if (i === 0 || bit > 0) { xs[i++] = byte; }\n    let b = new Uint8Array((xs.length + 7) & ~7);\n    b.set(xs);\n    return b;\n}\n\n/** @ignore */\nexport function* iterateBits<T>(bytes: Uint8Array, begin: number, length: number, context: any,\n                                get: (context: any, index: number, byte: number, bit: number) => T) {\n    let bit = begin % 8;\n    let byteIndex = begin >> 3;\n    let index = 0, remaining = length;\n    for (; remaining > 0; bit = 0) {\n        let byte = bytes[byteIndex++];\n        do {\n            yield get(context, index++, byte, bit);\n        } while (--remaining > 0 && ++bit < 8);\n    }\n}\n\n/**\n * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.\n * @param vector The Uint8Array of bits for which to compute the population count.\n * @param lhs The range's left-hand side (or start) bit\n * @param rhs The range's right-hand side (or end) bit\n */\n/** @ignore */\nexport function popcnt_bit_range(data: Uint8Array, lhs: number, rhs: number): number {\n    if (rhs - lhs <= 0) { return 0; }\n    // If the bit range is less than one byte, sum the 1 bits in the bit range\n    if (rhs - lhs < 8) {\n        let sum = 0;\n        for (const bit of iterateBits(data, lhs, rhs - lhs, data, getBit)) {\n            sum += bit;\n        }\n        return sum;\n    }\n    // Get the next lowest multiple of 8 from the right hand side\n    const rhsInside = rhs >> 3 << 3;\n    // Get the next highest multiple of 8 from the left hand side\n    const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\n    return (\n        // Get the popcnt of bits between the left hand side, and the next highest multiple of 8\n        popcnt_bit_range(data, lhs, lhsInside) +\n        // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\n        popcnt_bit_range(data, rhsInside, rhs) +\n        // Get the popcnt of all bits between the left and right hand sides' multiples of 8\n        popcnt_array(data, lhsInside >> 3, (rhsInside - lhsInside) >> 3)\n    );\n}\n\n/** @ignore */\nexport function popcnt_array(arr: ArrayBufferView, byteOffset?: number, byteLength?: number) {\n    let cnt = 0, pos = byteOffset! | 0;\n    const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n    const len =  byteLength === void 0 ? arr.byteLength : pos + byteLength;\n    while (len - pos >= 4) {\n        cnt += popcnt_uint32(view.getUint32(pos));\n        pos += 4;\n    }\n    while (len - pos >= 2) {\n        cnt += popcnt_uint32(view.getUint16(pos));\n        pos += 2;\n    }\n    while (len - pos >= 1) {\n        cnt += popcnt_uint32(view.getUint8(pos));\n        pos += 1;\n    }\n    return cnt;\n}\n\n/** @ignore */\nexport function popcnt_uint32(uint32: number): number {\n    let i = uint32 | 0;\n    i = i - ((i >>> 1) & 0x55555555);\n    i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\n    return (((i + (i >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n}\n"]},"metadata":{},"sourceType":"module"}