{"ast":null,"code":"import { log } from '@deck.gl/core';\nvar MISSING_CHAR_WIDTH = 32;\nexport function nextPowOfTwo(number) {\n  return Math.pow(2, Math.ceil(Math.log2(number)));\n}\nexport function buildMapping(_ref) {\n  var characterSet = _ref.characterSet,\n      getFontWidth = _ref.getFontWidth,\n      fontHeight = _ref.fontHeight,\n      buffer = _ref.buffer,\n      maxCanvasWidth = _ref.maxCanvasWidth,\n      _ref$mapping = _ref.mapping,\n      mapping = _ref$mapping === void 0 ? {} : _ref$mapping,\n      _ref$xOffset = _ref.xOffset,\n      xOffset = _ref$xOffset === void 0 ? 0 : _ref$xOffset,\n      _ref$yOffset = _ref.yOffset,\n      yOffset = _ref$yOffset === void 0 ? 0 : _ref$yOffset;\n  var row = 0;\n  var x = xOffset;\n  var i = 0;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = characterSet[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var _char = _step.value;\n\n      if (!mapping[_char]) {\n        var width = getFontWidth(_char, i++);\n\n        if (x + width + buffer * 2 > maxCanvasWidth) {\n          x = 0;\n          row++;\n        }\n\n        mapping[_char] = {\n          x: x + buffer,\n          y: yOffset + row * (fontHeight + buffer * 2) + buffer,\n          width: width,\n          height: fontHeight\n        };\n        x += width + buffer * 2;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n        _iterator[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  var rowHeight = fontHeight + buffer * 2;\n  return {\n    mapping: mapping,\n    xOffset: x,\n    yOffset: yOffset + row * rowHeight,\n    canvasHeight: nextPowOfTwo(yOffset + (row + 1) * rowHeight)\n  };\n}\n\nfunction getTextWidth(text, mapping) {\n  var width = 0;\n\n  for (var i = 0; i < text.length; i++) {\n    var character = text[i];\n    var frameWidth = null;\n    var frame = mapping && mapping[character];\n\n    if (frame) {\n      frameWidth = frame.width;\n    }\n\n    width += frameWidth;\n  }\n\n  return width;\n}\n\nfunction breakAll(text, maxWidth, iconMapping) {\n  var rows = [];\n  var rowStartCharIndex = 0;\n  var rowOffsetLeft = 0;\n\n  for (var i = 0; i < text.length; i++) {\n    var textWidth = getTextWidth(text[i], iconMapping);\n\n    if (rowOffsetLeft + textWidth > maxWidth) {\n      if (rowStartCharIndex < i) {\n        rows.push(text.substring(rowStartCharIndex, i));\n      }\n\n      rowStartCharIndex = i;\n      rowOffsetLeft = 0;\n    }\n\n    rowOffsetLeft += textWidth;\n  }\n\n  if (rowStartCharIndex < text.length) {\n    rows.push(text.substring(rowStartCharIndex));\n  }\n\n  return {\n    rows: rows,\n    lastRowStartCharIndex: rowStartCharIndex,\n    lastRowOffsetLeft: rowOffsetLeft\n  };\n}\n\nfunction breakWord(text, maxWidth, iconMapping) {\n  var rows = [];\n  var rowStartCharIndex = 0;\n  var groupStartCharIndex = 0;\n  var rowOffsetLeft = 0;\n  var group = null;\n\n  for (var i = 0; i < text.length; i++) {\n    if (text[i] === ' ') {\n      group = text[i];\n      groupStartCharIndex = i + 1;\n    } else if (i + 1 < text.length && text[i + 1] === ' ' || i + 1 === text.length) {\n      group = text.substring(groupStartCharIndex, i + 1);\n      groupStartCharIndex = i + 1;\n    } else {\n      group = null;\n    }\n\n    if (group) {\n      var groupWidth = getTextWidth(group, iconMapping);\n\n      if (rowOffsetLeft + groupWidth > maxWidth) {\n        var lastGroupStartIndex = groupStartCharIndex - group.length;\n\n        if (rowStartCharIndex < lastGroupStartIndex) {\n          rows.push(text.substring(rowStartCharIndex, lastGroupStartIndex));\n          rowStartCharIndex = lastGroupStartIndex;\n          rowOffsetLeft = 0;\n        }\n\n        if (groupWidth > maxWidth) {\n          var subGroups = breakAll(group, maxWidth, iconMapping);\n\n          if (subGroups.rows.length > 1) {\n            rows = rows.concat(subGroups.rows.slice(0, subGroups.rows.length - 1));\n          }\n\n          rowStartCharIndex = rowStartCharIndex + subGroups.lastRowStartCharIndex;\n          groupWidth = subGroups.lastRowOffsetLeft;\n        }\n      }\n\n      rowOffsetLeft += groupWidth;\n    }\n  }\n\n  if (rowStartCharIndex < text.length) {\n    rows.push(text.substring(rowStartCharIndex));\n  }\n\n  return {\n    rows: rows,\n    lastRowStartCharIndex: rowStartCharIndex,\n    lastRowOffsetLeft: rowOffsetLeft\n  };\n}\n\nexport function autoWrapping(text, wordBreak, maxWidth, iconMapping) {\n  if (wordBreak === 'break-all') {\n    return breakAll(text, maxWidth, iconMapping);\n  }\n\n  return breakWord(text, maxWidth, iconMapping);\n}\n\nfunction transformRow(row, iconMapping) {\n  var x = 0;\n  var rowHeight = 0;\n  var leftOffsets = new Array(row.length);\n\n  for (var i = 0; i < row.length; i++) {\n    var character = row[i];\n    var frame = iconMapping[character];\n\n    if (frame) {\n      if (!rowHeight) {\n        rowHeight = frame.height;\n      }\n\n      leftOffsets[i] = x + frame.width / 2;\n      x += frame.width;\n    } else {\n      log.warn(\"Missing character: \".concat(character))();\n      leftOffsets[i] = x;\n      x += MISSING_CHAR_WIDTH;\n    }\n  }\n\n  return {\n    leftOffsets: leftOffsets,\n    rowWidth: x,\n    rowHeight: rowHeight\n  };\n}\n\nexport function transformParagraph(paragraph, lineHeight, wordBreak, maxWidth, iconMapping) {\n  var result = new Array(paragraph.length);\n  var autoWrappingEnabled = (wordBreak === 'break-word' || wordBreak === 'break-all') && isFinite(maxWidth) && maxWidth > 0;\n  var size = [0, 0];\n  var rowOffsetTop = 0;\n  var lineStartIndex = 0;\n\n  for (var i = 0; i <= paragraph.length; i++) {\n    var _char2 = paragraph[i];\n    var line = void 0;\n\n    if (_char2 === '\\n' || _char2 === undefined) {\n      line = paragraph.slice(lineStartIndex, i);\n    }\n\n    if (line) {\n      var rows = autoWrappingEnabled ? autoWrapping(line, wordBreak, maxWidth, iconMapping).rows : [line];\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = rows[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var row = _step2.value;\n\n          var _transformRow = transformRow(row, iconMapping, lineHeight),\n              rowWidth = _transformRow.rowWidth,\n              rowHeight = _transformRow.rowHeight,\n              leftOffsets = _transformRow.leftOffsets;\n\n          var _iteratorNormalCompletion3 = true;\n          var _didIteratorError3 = false;\n          var _iteratorError3 = undefined;\n\n          try {\n            for (var _iterator3 = leftOffsets[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n              var x = _step3.value;\n              result[lineStartIndex++] = {\n                x: x,\n                y: rowOffsetTop + rowHeight / 2,\n                rowWidth: rowWidth\n              };\n            }\n          } catch (err) {\n            _didIteratorError3 = true;\n            _iteratorError3 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion3 && _iterator3[\"return\"] != null) {\n                _iterator3[\"return\"]();\n              }\n            } finally {\n              if (_didIteratorError3) {\n                throw _iteratorError3;\n              }\n            }\n          }\n\n          rowOffsetTop = rowOffsetTop + rowHeight * lineHeight;\n          size[0] = autoWrappingEnabled ? maxWidth : Math.max(size[0], rowWidth);\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n            _iterator2[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n\n    if (_char2 === '\\n') {\n      result[lineStartIndex++] = {\n        x: 0,\n        y: 0,\n        rowWidth: 0\n      };\n    }\n  }\n\n  size[1] = rowOffsetTop;\n  return {\n    characters: result,\n    size: size\n  };\n}\nexport function getTextFromBuffer(_ref2) {\n  var value = _ref2.value,\n      length = _ref2.length,\n      stride = _ref2.stride,\n      offset = _ref2.offset,\n      startIndices = _ref2.startIndices;\n  var bytesPerElement = value.BYTES_PER_ELEMENT;\n  var elementStride = stride ? stride / bytesPerElement : 1;\n  var elementOffset = offset ? offset / bytesPerElement : 0;\n  var characterCount = startIndices[length] || Math.floor((value.length - elementOffset - bytesPerElement) / elementStride) + 1;\n  var texts = new Array(length);\n  var codes = value;\n\n  if (elementStride > 1 || elementOffset > 0) {\n    codes = new value.constructor(characterCount);\n\n    for (var i = 0; i < characterCount; i++) {\n      codes[i] = value[i * elementStride + elementOffset];\n    }\n  }\n\n  for (var index = 0; index < length; index++) {\n    var startIndex = startIndices[index];\n    var endIndex = startIndices[index + 1] || characterCount;\n    texts[index] = String.fromCharCode.apply(null, codes.subarray(startIndex, endIndex));\n  }\n\n  return {\n    texts: texts,\n    characterCount: characterCount\n  };\n}","map":{"version":3,"sources":["../../../src/text-layer/utils.js"],"names":["MISSING_CHAR_WIDTH","Math","characterSet","getFontWidth","fontHeight","buffer","maxCanvasWidth","mapping","xOffset","yOffset","row","x","i","char","width","y","height","rowHeight","canvasHeight","nextPowOfTwo","text","character","frameWidth","frame","rows","rowStartCharIndex","rowOffsetLeft","textWidth","getTextWidth","lastRowStartCharIndex","lastRowOffsetLeft","groupStartCharIndex","group","groupWidth","lastGroupStartIndex","subGroups","breakAll","wordBreak","breakWord","leftOffsets","iconMapping","log","rowWidth","result","paragraph","autoWrappingEnabled","isFinite","maxWidth","size","rowOffsetTop","lineStartIndex","line","autoWrapping","transformRow","characters","value","length","stride","offset","startIndices","bytesPerElement","elementStride","elementOffset","characterCount","texts","codes","index","startIndex","endIndex","String"],"mappings":"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","sourcesContent":["// TODO merge with icon-layer/icon-manager\nimport {log} from '@deck.gl/core';\n\nconst MISSING_CHAR_WIDTH = 32;\n\nexport function nextPowOfTwo(number) {\n  return Math.pow(2, Math.ceil(Math.log2(number)));\n}\n\n/**\n * Generate character mapping table or update from an existing mapping table\n * @param characterSet {Array|Set} new characters\n * @param getFontWidth {Function} function to get width of each character\n * @param fontHeight {Number} height of font\n * @param buffer {Number} buffer surround each character\n * @param maxCanvasWidth {Number} max width of font atlas\n * @param mapping {Object} old mapping table\n * @param xOffset {Number} x position of last character in old mapping table\n * @param yOffset {Number} y position of last character in old mapping table\n * @returns {{\n *   mapping: Object,\n *   xOffset: Number, x position of last character\n *   yOffset: Number, y position of last character in old mapping table\n *   canvasHeight: Number, height of the font atlas canvas, power of 2\n *  }}\n */\nexport function buildMapping({\n  characterSet,\n  getFontWidth,\n  fontHeight,\n  buffer,\n  maxCanvasWidth,\n  mapping = {},\n  xOffset = 0,\n  yOffset = 0\n}) {\n  let row = 0;\n  // continue from x position of last character in the old mapping\n  let x = xOffset;\n\n  let i = 0;\n  for (const char of characterSet) {\n    if (!mapping[char]) {\n      // measure texts\n      // TODO - use Advanced text metrics when they are adopted:\n      // https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics\n      const width = getFontWidth(char, i++);\n\n      if (x + width + buffer * 2 > maxCanvasWidth) {\n        x = 0;\n        row++;\n      }\n      mapping[char] = {\n        x: x + buffer,\n        y: yOffset + row * (fontHeight + buffer * 2) + buffer,\n        width,\n        height: fontHeight\n      };\n      x += width + buffer * 2;\n    }\n  }\n\n  const rowHeight = fontHeight + buffer * 2;\n\n  return {\n    mapping,\n    xOffset: x,\n    yOffset: yOffset + row * rowHeight,\n    canvasHeight: nextPowOfTwo(yOffset + (row + 1) * rowHeight)\n  };\n}\n\nfunction getTextWidth(text, mapping) {\n  let width = 0;\n  for (let i = 0; i < text.length; i++) {\n    const character = text[i];\n    let frameWidth = null;\n    const frame = mapping && mapping[character];\n    if (frame) {\n      frameWidth = frame.width;\n    }\n\n    width += frameWidth;\n  }\n\n  return width;\n}\n\nfunction breakAll(text, maxWidth, iconMapping) {\n  const rows = [];\n  let rowStartCharIndex = 0;\n  let rowOffsetLeft = 0;\n\n  for (let i = 0; i < text.length; i++) {\n    // 2. figure out where to break lines\n    const textWidth = getTextWidth(text[i], iconMapping);\n    if (rowOffsetLeft + textWidth > maxWidth) {\n      if (rowStartCharIndex < i) {\n        rows.push(text.substring(rowStartCharIndex, i));\n      }\n      rowStartCharIndex = i;\n      rowOffsetLeft = 0;\n    }\n    rowOffsetLeft += textWidth;\n  }\n\n  // last row\n  if (rowStartCharIndex < text.length) {\n    rows.push(text.substring(rowStartCharIndex));\n  }\n\n  return {\n    rows,\n    lastRowStartCharIndex: rowStartCharIndex,\n    lastRowOffsetLeft: rowOffsetLeft\n  };\n}\n\n/* eslint-disable max-statements, complexity, max-depth */\nfunction breakWord(text, maxWidth, iconMapping) {\n  let rows = [];\n  let rowStartCharIndex = 0;\n  let groupStartCharIndex = 0;\n  let rowOffsetLeft = 0;\n  let group = null;\n\n  for (let i = 0; i < text.length; i++) {\n    // 1. break text into word groups\n    //  - if current char is white space\n    //  - else if next char is white space\n    //  - else if reach last char\n    if (text[i] === ' ') {\n      group = text[i];\n      groupStartCharIndex = i + 1;\n    } else if ((i + 1 < text.length && text[i + 1] === ' ') || i + 1 === text.length) {\n      group = text.substring(groupStartCharIndex, i + 1);\n      groupStartCharIndex = i + 1;\n    } else {\n      group = null;\n    }\n\n    if (group) {\n      // 2. break text into next row at maxWidth\n      let groupWidth = getTextWidth(group, iconMapping);\n      if (rowOffsetLeft + groupWidth > maxWidth) {\n        const lastGroupStartIndex = groupStartCharIndex - group.length;\n        if (rowStartCharIndex < lastGroupStartIndex) {\n          rows.push(text.substring(rowStartCharIndex, lastGroupStartIndex));\n          rowStartCharIndex = lastGroupStartIndex;\n          rowOffsetLeft = 0;\n        }\n\n        // if a single text group is bigger than maxWidth, then `break-all`\n        if (groupWidth > maxWidth) {\n          const subGroups = breakAll(group, maxWidth, iconMapping);\n          if (subGroups.rows.length > 1) {\n            // add all the sub rows to results except last row\n            rows = rows.concat(subGroups.rows.slice(0, subGroups.rows.length - 1));\n          }\n          // move reference to last row\n          rowStartCharIndex = rowStartCharIndex + subGroups.lastRowStartCharIndex;\n          groupWidth = subGroups.lastRowOffsetLeft;\n        }\n      }\n      rowOffsetLeft += groupWidth;\n    }\n  }\n\n  // last row\n  if (rowStartCharIndex < text.length) {\n    rows.push(text.substring(rowStartCharIndex));\n  }\n\n  return {\n    rows,\n    lastRowStartCharIndex: rowStartCharIndex,\n    lastRowOffsetLeft: rowOffsetLeft\n  };\n}\n/* eslint-enable max-statements, complexity, max-depth */\n\nexport function autoWrapping(text, wordBreak, maxWidth, iconMapping) {\n  if (wordBreak === 'break-all') {\n    return breakAll(text, maxWidth, iconMapping);\n  }\n  return breakWord(text, maxWidth, iconMapping);\n}\n\nfunction transformRow(row, iconMapping) {\n  let x = 0;\n  let rowHeight = 0;\n\n  const leftOffsets = new Array(row.length);\n  for (let i = 0; i < row.length; i++) {\n    const character = row[i];\n    const frame = iconMapping[character];\n    if (frame) {\n      if (!rowHeight) {\n        // frame.height should be a constant\n        rowHeight = frame.height;\n      }\n      leftOffsets[i] = x + frame.width / 2;\n      x += frame.width;\n    } else {\n      log.warn(`Missing character: ${character}`)();\n      leftOffsets[i] = x;\n      x += MISSING_CHAR_WIDTH;\n    }\n  }\n\n  return {\n    leftOffsets,\n    rowWidth: x,\n    rowHeight\n  };\n}\n\n/**\n * Transform a text paragraph to an array of characters, each character contains\n * @param paragraph: {String}\n * @param iconMapping {Object} character mapping table for retrieving a character from font atlas\n * @param lineHeight {Number} css line-height\n * @param wordBreak {String} css word-break option\n * @param maxWidth {number} css max-width\n * @param transformedData {Array} output transformed data array, each datum contains\n *   - text: character\n *   - index: character index in the paragraph\n *   - x: x offset in the row,\n *   - y: y offset in the paragraph\n *   - size: [width, height] size of the paragraph\n *   - rowSize: [rowWidth, rowHeight] size of the row\n *   - len: length of the paragraph\n */\n/* eslint-disable max-params, max-depth, complexity */\nexport function transformParagraph(paragraph, lineHeight, wordBreak, maxWidth, iconMapping) {\n  const result = new Array(paragraph.length);\n  const autoWrappingEnabled =\n    (wordBreak === 'break-word' || wordBreak === 'break-all') && isFinite(maxWidth) && maxWidth > 0;\n\n  // maxWidth and height of the paragraph\n  const size = [0, 0];\n  let rowOffsetTop = 0;\n  let lineStartIndex = 0;\n\n  for (let i = 0; i <= paragraph.length; i++) {\n    const char = paragraph[i];\n    let line;\n    if (char === '\\n' || char === undefined) {\n      line = paragraph.slice(lineStartIndex, i);\n    }\n\n    if (line) {\n      const rows = autoWrappingEnabled\n        ? autoWrapping(line, wordBreak, maxWidth, iconMapping).rows\n        : [line];\n\n      for (const row of rows) {\n        const {rowWidth, rowHeight, leftOffsets} = transformRow(row, iconMapping, lineHeight);\n\n        for (const x of leftOffsets) {\n          result[lineStartIndex++] = {\n            x,\n            y: rowOffsetTop + rowHeight / 2,\n            rowWidth\n          };\n        }\n\n        rowOffsetTop = rowOffsetTop + rowHeight * lineHeight;\n        size[0] = autoWrappingEnabled ? maxWidth : Math.max(size[0], rowWidth);\n      }\n    }\n\n    if (char === '\\n') {\n      // Make sure result.length matches paragraph.length\n      result[lineStartIndex++] = {x: 0, y: 0, rowWidth: 0};\n    }\n  }\n\n  // last row\n  size[1] = rowOffsetTop;\n  return {characters: result, size};\n}\n/* eslint-enable max-depth, complexity */\n\nexport function getTextFromBuffer({value, length, stride, offset, startIndices}) {\n  const bytesPerElement = value.BYTES_PER_ELEMENT;\n  const elementStride = stride ? stride / bytesPerElement : 1;\n  const elementOffset = offset ? offset / bytesPerElement : 0;\n  const characterCount =\n    startIndices[length] ||\n    Math.floor((value.length - elementOffset - bytesPerElement) / elementStride) + 1;\n\n  const texts = new Array(length);\n\n  let codes = value;\n  if (elementStride > 1 || elementOffset > 0) {\n    codes = new value.constructor(characterCount);\n    for (let i = 0; i < characterCount; i++) {\n      codes[i] = value[i * elementStride + elementOffset];\n    }\n  }\n\n  for (let index = 0; index < length; index++) {\n    const startIndex = startIndices[index];\n    const endIndex = startIndices[index + 1] || characterCount;\n    texts[index] = String.fromCharCode.apply(null, codes.subarray(startIndex, endIndex));\n  }\n\n  return {texts, characterCount};\n}\n"]},"metadata":{},"sourceType":"module"}