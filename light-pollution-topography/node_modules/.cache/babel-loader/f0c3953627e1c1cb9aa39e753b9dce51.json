{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { Tesselator } from '@deck.gl/core';\nvar START_CAP = 1;\nvar END_CAP = 2;\nvar INVALID = 4;\n\nvar PathTesselator = function (_Tesselator) {\n  _inherits(PathTesselator, _Tesselator);\n\n  function PathTesselator(opts) {\n    _classCallCheck(this, PathTesselator);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PathTesselator).call(this, _objectSpread({}, opts, {\n      attributes: {\n        positions: {\n          size: 3,\n          padding: 18,\n          type: opts.fp64 ? Float64Array : Float32Array\n        },\n        segmentTypes: {\n          size: 1,\n          type: Uint8ClampedArray\n        }\n      }\n    })));\n  }\n\n  _createClass(PathTesselator, [{\n    key: \"getGeometryFromBuffer\",\n    value: function getGeometryFromBuffer(buffer) {\n      if (this.normalize) {\n        return _get(_getPrototypeOf(PathTesselator.prototype), \"getGeometryFromBuffer\", this).call(this, buffer);\n      }\n\n      return function () {\n        return null;\n      };\n    }\n  }, {\n    key: \"get\",\n    value: function get(attributeName) {\n      return this.attributes[attributeName];\n    }\n  }, {\n    key: \"getGeometrySize\",\n    value: function getGeometrySize(path) {\n      if (!this.normalize) {\n        var _numPoints = path.length / this.positionSize;\n\n        return this.opts.loop ? _numPoints + 2 : _numPoints;\n      }\n\n      var numPoints = this.getPathLength(path);\n\n      if (numPoints < 2) {\n        return 0;\n      }\n\n      if (this.isClosed(path)) {\n        return numPoints < 3 ? 0 : numPoints + 2;\n      }\n\n      return numPoints;\n    }\n  }, {\n    key: \"updateGeometryAttributes\",\n    value: function updateGeometryAttributes(path, context) {\n      if (context.geometrySize === 0) {\n        return;\n      }\n\n      this._updateSegmentTypes(path, context);\n\n      this._updatePositions(path, context);\n    }\n  }, {\n    key: \"_updateSegmentTypes\",\n    value: function _updateSegmentTypes(path, context) {\n      var segmentTypes = this.attributes.segmentTypes;\n      var isPathClosed = this.isClosed(path);\n      var vertexStart = context.vertexStart,\n          geometrySize = context.geometrySize;\n      segmentTypes.fill(0, vertexStart, vertexStart + geometrySize);\n\n      if (isPathClosed) {\n        segmentTypes[vertexStart] = INVALID;\n        segmentTypes[vertexStart + geometrySize - 2] = INVALID;\n      } else {\n        segmentTypes[vertexStart] += START_CAP;\n        segmentTypes[vertexStart + geometrySize - 2] += END_CAP;\n      }\n\n      segmentTypes[vertexStart + geometrySize - 1] = INVALID;\n    }\n  }, {\n    key: \"_updatePositions\",\n    value: function _updatePositions(path, context) {\n      var positions = this.attributes.positions;\n\n      if (!positions) {\n        return;\n      }\n\n      var vertexStart = context.vertexStart,\n          geometrySize = context.geometrySize;\n\n      for (var i = vertexStart, ptIndex = 0; ptIndex < geometrySize; i++, ptIndex++) {\n        var p = this.getPointOnPath(path, ptIndex);\n        positions[i * 3] = p[0];\n        positions[i * 3 + 1] = p[1];\n        positions[i * 3 + 2] = p[2] || 0;\n      }\n    }\n  }, {\n    key: \"getPathLength\",\n    value: function getPathLength(path) {\n      if (Number.isFinite(path[0])) {\n        return path.length / this.positionSize;\n      }\n\n      return path.length;\n    }\n  }, {\n    key: \"getPointOnPath\",\n    value: function getPointOnPath(path, index) {\n      if (Number.isFinite(path[0])) {\n        var positionSize = this.positionSize;\n\n        if (index * positionSize >= path.length) {\n          index += 1 - path.length / positionSize;\n        }\n\n        return [path[index * positionSize], path[index * positionSize + 1], positionSize === 3 ? path[index * positionSize + 2] : 0];\n      }\n\n      if (index >= path.length) {\n        index += 1 - path.length;\n      }\n\n      return path[index];\n    }\n  }, {\n    key: \"isClosed\",\n    value: function isClosed(path) {\n      if (!this.normalize) {\n        return this.opts.loop;\n      }\n\n      var numPoints = this.getPathLength(path);\n      var firstPoint = this.getPointOnPath(path, 0);\n      var lastPoint = this.getPointOnPath(path, numPoints - 1);\n      return firstPoint[0] === lastPoint[0] && firstPoint[1] === lastPoint[1] && firstPoint[2] === lastPoint[2];\n    }\n  }]);\n\n  return PathTesselator;\n}(Tesselator);\n\nexport { PathTesselator as default };","map":{"version":3,"sources":["../../../src/path-layer/path-tesselator.js"],"names":["START_CAP","END_CAP","INVALID","PathTesselator","Tesselator","attributes","positions","size","padding","type","opts","Float32Array","segmentTypes","Uint8ClampedArray","buffer","attributeName","path","numPoints","context","isPathClosed","vertexStart","geometrySize","i","ptIndex","p","Number","index","positionSize","firstPoint","lastPoint"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {Tesselator} from '@deck.gl/core';\n\nconst START_CAP = 1;\nconst END_CAP = 2;\nconst INVALID = 4;\n\n// This class is set up to allow querying one attribute at a time\n// the way the AttributeManager expects it\nexport default class PathTesselator extends Tesselator {\n  constructor(opts) {\n    super({\n      ...opts,\n      attributes: {\n        // Padding covers shaderAttributes for last segment in largest case fp64\n        // additional vertex + hi & low parts, 3 * 6\n        positions: {size: 3, padding: 18, type: opts.fp64 ? Float64Array : Float32Array},\n        segmentTypes: {size: 1, type: Uint8ClampedArray}\n      }\n    });\n  }\n\n  getGeometryFromBuffer(buffer) {\n    if (this.normalize) {\n      return super.getGeometryFromBuffer(buffer);\n    }\n    // we don't need to read the positions if no normalization\n    return () => null;\n  }\n\n  /* Getters */\n  get(attributeName) {\n    return this.attributes[attributeName];\n  }\n\n  /* Implement base Tesselator interface */\n  getGeometrySize(path) {\n    if (!this.normalize) {\n      const numPoints = path.length / this.positionSize;\n      return this.opts.loop ? numPoints + 2 : numPoints;\n    }\n\n    const numPoints = this.getPathLength(path);\n    if (numPoints < 2) {\n      // invalid path\n      return 0;\n    }\n    if (this.isClosed(path)) {\n      // minimum 3 vertices\n      return numPoints < 3 ? 0 : numPoints + 2;\n    }\n    return numPoints;\n  }\n\n  updateGeometryAttributes(path, context) {\n    if (context.geometrySize === 0) {\n      return;\n    }\n    this._updateSegmentTypes(path, context);\n    this._updatePositions(path, context);\n  }\n\n  _updateSegmentTypes(path, context) {\n    const {segmentTypes} = this.attributes;\n    const isPathClosed = this.isClosed(path);\n    const {vertexStart, geometrySize} = context;\n\n    // positions   --  A0 A1 B0 B1 B2 B3 B0 B1 B2 --\n    // segmentTypes     3  4  4  0  0  0  0  4  4\n    segmentTypes.fill(0, vertexStart, vertexStart + geometrySize);\n    if (isPathClosed) {\n      segmentTypes[vertexStart] = INVALID;\n      segmentTypes[vertexStart + geometrySize - 2] = INVALID;\n    } else {\n      segmentTypes[vertexStart] += START_CAP;\n      segmentTypes[vertexStart + geometrySize - 2] += END_CAP;\n    }\n    segmentTypes[vertexStart + geometrySize - 1] = INVALID;\n  }\n\n  _updatePositions(path, context) {\n    const {positions} = this.attributes;\n    if (!positions) {\n      return;\n    }\n    const {vertexStart, geometrySize} = context;\n\n    // positions   --  A0 A1 B0 B1 B2 B3 B0 B1 B2 --\n    // segmentTypes     3  4  4  0  0  0  0  4  4\n    for (let i = vertexStart, ptIndex = 0; ptIndex < geometrySize; i++, ptIndex++) {\n      const p = this.getPointOnPath(path, ptIndex);\n      positions[i * 3] = p[0];\n      positions[i * 3 + 1] = p[1];\n      positions[i * 3 + 2] = p[2] || 0;\n    }\n  }\n\n  /* Utilities */\n  getPathLength(path) {\n    if (Number.isFinite(path[0])) {\n      // flat format\n      return path.length / this.positionSize;\n    }\n    return path.length;\n  }\n\n  getPointOnPath(path, index) {\n    if (Number.isFinite(path[0])) {\n      // flat format\n      const {positionSize} = this;\n      if (index * positionSize >= path.length) {\n        // loop\n        index += 1 - path.length / positionSize;\n      }\n      // TODO - avoid creating new arrays when using binary\n      return [\n        path[index * positionSize],\n        path[index * positionSize + 1],\n        positionSize === 3 ? path[index * positionSize + 2] : 0\n      ];\n    }\n    if (index >= path.length) {\n      // loop\n      index += 1 - path.length;\n    }\n    return path[index];\n  }\n\n  isClosed(path) {\n    if (!this.normalize) {\n      return this.opts.loop;\n    }\n    const numPoints = this.getPathLength(path);\n    const firstPoint = this.getPointOnPath(path, 0);\n    const lastPoint = this.getPointOnPath(path, numPoints - 1);\n    return (\n      firstPoint[0] === lastPoint[0] &&\n      firstPoint[1] === lastPoint[1] &&\n      firstPoint[2] === lastPoint[2]\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}