{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport log from '../utils/log';\nimport { createMat4, extractCameraVectors, getFrustumPlanes as _getFrustumPlanes } from '../utils/math-utils';\nimport { Matrix4, Vector3, equals as _equals } from 'math.gl';\nimport * as mat4 from 'gl-matrix/mat4';\nimport { getDistanceScales as _getDistanceScales, getMeterZoom, lngLatToWorld, worldToLngLat, worldToPixels, pixelsToWorld } from '@math.gl/web-mercator';\nimport { PROJECTION_MODE } from '../lib/constants';\nvar DEGREES_TO_RADIANS = Math.PI / 180;\nvar IDENTITY = createMat4();\nvar ZERO_VECTOR = [0, 0, 0];\nvar DEFAULT_ZOOM = 0;\nvar DEFAULT_DISTANCE_SCALES = {\n  unitsPerMeter: [1, 1, 1],\n  metersPerUnit: [1, 1, 1]\n};\n\nvar Viewport = function () {\n  function Viewport() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Viewport);\n\n    var _opts$id = opts.id,\n        id = _opts$id === void 0 ? null : _opts$id,\n        _opts$x = opts.x,\n        x = _opts$x === void 0 ? 0 : _opts$x,\n        _opts$y = opts.y,\n        y = _opts$y === void 0 ? 0 : _opts$y,\n        _opts$width = opts.width,\n        width = _opts$width === void 0 ? 1 : _opts$width,\n        _opts$height = opts.height,\n        height = _opts$height === void 0 ? 1 : _opts$height;\n    this.id = id || this.constructor.displayName || 'viewport';\n    this.x = x;\n    this.y = y;\n    this.width = width || 1;\n    this.height = height || 1;\n    this._frustumPlanes = {};\n\n    this._initViewMatrix(opts);\n\n    this._initProjectionMatrix(opts);\n\n    this._initPixelMatrices();\n\n    this.equals = this.equals.bind(this);\n    this.project = this.project.bind(this);\n    this.unproject = this.unproject.bind(this);\n    this.projectPosition = this.projectPosition.bind(this);\n    this.unprojectPosition = this.unprojectPosition.bind(this);\n    this.projectFlat = this.projectFlat.bind(this);\n    this.unprojectFlat = this.unprojectFlat.bind(this);\n  }\n\n  _createClass(Viewport, [{\n    key: \"equals\",\n    value: function equals(viewport) {\n      if (!(viewport instanceof Viewport)) {\n        return false;\n      }\n\n      return viewport.width === this.width && viewport.height === this.height && viewport.scale === this.scale && _equals(viewport.projectionMatrix, this.projectionMatrix) && _equals(viewport.viewMatrix, this.viewMatrix);\n    }\n  }, {\n    key: \"project\",\n    value: function project(xyz) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref$topLeft = _ref.topLeft,\n          topLeft = _ref$topLeft === void 0 ? true : _ref$topLeft;\n\n      var worldPosition = this.projectPosition(xyz);\n      var coord = worldToPixels(worldPosition, this.pixelProjectionMatrix);\n\n      var _coord = _slicedToArray(coord, 2),\n          x = _coord[0],\n          y = _coord[1];\n\n      var y2 = topLeft ? y : this.height - y;\n      return xyz.length === 2 ? [x, y2] : [x, y2, coord[2]];\n    }\n  }, {\n    key: \"unproject\",\n    value: function unproject(xyz) {\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref2$topLeft = _ref2.topLeft,\n          topLeft = _ref2$topLeft === void 0 ? true : _ref2$topLeft,\n          targetZ = _ref2.targetZ;\n\n      var _xyz = _slicedToArray(xyz, 3),\n          x = _xyz[0],\n          y = _xyz[1],\n          z = _xyz[2];\n\n      var y2 = topLeft ? y : this.height - y;\n      var targetZWorld = targetZ && targetZ * this.distanceScales.unitsPerMeter[2];\n      var coord = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix, targetZWorld);\n\n      var _this$unprojectPositi = this.unprojectPosition(coord),\n          _this$unprojectPositi2 = _slicedToArray(_this$unprojectPositi, 3),\n          X = _this$unprojectPositi2[0],\n          Y = _this$unprojectPositi2[1],\n          Z = _this$unprojectPositi2[2];\n\n      if (Number.isFinite(z)) {\n        return [X, Y, Z];\n      }\n\n      return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n    }\n  }, {\n    key: \"projectPosition\",\n    value: function projectPosition(xyz) {\n      var _this$projectFlat = this.projectFlat(xyz),\n          _this$projectFlat2 = _slicedToArray(_this$projectFlat, 2),\n          X = _this$projectFlat2[0],\n          Y = _this$projectFlat2[1];\n\n      var Z = (xyz[2] || 0) * this.distanceScales.unitsPerMeter[2];\n      return [X, Y, Z];\n    }\n  }, {\n    key: \"unprojectPosition\",\n    value: function unprojectPosition(xyz) {\n      var _this$unprojectFlat = this.unprojectFlat(xyz),\n          _this$unprojectFlat2 = _slicedToArray(_this$unprojectFlat, 2),\n          X = _this$unprojectFlat2[0],\n          Y = _this$unprojectFlat2[1];\n\n      var Z = (xyz[2] || 0) * this.distanceScales.metersPerUnit[2];\n      return [X, Y, Z];\n    }\n  }, {\n    key: \"projectFlat\",\n    value: function projectFlat(xyz) {\n      if (this.isGeospatial) {\n        return lngLatToWorld(xyz);\n      }\n\n      return xyz;\n    }\n  }, {\n    key: \"unprojectFlat\",\n    value: function unprojectFlat(xyz) {\n      if (this.isGeospatial) {\n        return worldToLngLat(xyz);\n      }\n\n      return xyz;\n    }\n  }, {\n    key: \"getDistanceScales\",\n    value: function getDistanceScales() {\n      var coordinateOrigin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      if (coordinateOrigin) {\n        return _getDistanceScales({\n          longitude: coordinateOrigin[0],\n          latitude: coordinateOrigin[1],\n          highPrecision: true\n        });\n      }\n\n      return this.distanceScales;\n    }\n  }, {\n    key: \"containsPixel\",\n    value: function containsPixel(_ref3) {\n      var x = _ref3.x,\n          y = _ref3.y,\n          _ref3$width = _ref3.width,\n          width = _ref3$width === void 0 ? 1 : _ref3$width,\n          _ref3$height = _ref3.height,\n          height = _ref3$height === void 0 ? 1 : _ref3$height;\n      return x < this.x + this.width && this.x < x + width && y < this.y + this.height && this.y < y + height;\n    }\n  }, {\n    key: \"getFrustumPlanes\",\n    value: function getFrustumPlanes() {\n      if (this._frustumPlanes.near) {\n        return this._frustumPlanes;\n      }\n\n      var _this$projectionProps = this.projectionProps,\n          near = _this$projectionProps.near,\n          far = _this$projectionProps.far,\n          fovyRadians = _this$projectionProps.fovyRadians,\n          aspect = _this$projectionProps.aspect;\n      Object.assign(this._frustumPlanes, _getFrustumPlanes({\n        aspect: aspect,\n        near: near,\n        far: far,\n        fovyRadians: fovyRadians,\n        position: this.cameraPosition,\n        direction: this.cameraDirection,\n        up: this.cameraUp,\n        right: this.cameraRight\n      }));\n      return this._frustumPlanes;\n    }\n  }, {\n    key: \"getCameraPosition\",\n    value: function getCameraPosition() {\n      return this.cameraPosition;\n    }\n  }, {\n    key: \"getCameraDirection\",\n    value: function getCameraDirection() {\n      return this.cameraDirection;\n    }\n  }, {\n    key: \"getCameraUp\",\n    value: function getCameraUp() {\n      return this.cameraUp;\n    }\n  }, {\n    key: \"_createProjectionMatrix\",\n    value: function _createProjectionMatrix(_ref4) {\n      var orthographic = _ref4.orthographic,\n          fovyRadians = _ref4.fovyRadians,\n          aspect = _ref4.aspect,\n          focalDistance = _ref4.focalDistance,\n          near = _ref4.near,\n          far = _ref4.far;\n      return orthographic ? new Matrix4().orthographic({\n        fovy: fovyRadians,\n        aspect: aspect,\n        focalDistance: focalDistance,\n        near: near,\n        far: far\n      }) : new Matrix4().perspective({\n        fovy: fovyRadians,\n        aspect: aspect,\n        near: near,\n        far: far\n      });\n    }\n  }, {\n    key: \"_initViewMatrix\",\n    value: function _initViewMatrix(opts) {\n      var _opts$viewMatrix = opts.viewMatrix,\n          viewMatrix = _opts$viewMatrix === void 0 ? IDENTITY : _opts$viewMatrix,\n          _opts$longitude = opts.longitude,\n          longitude = _opts$longitude === void 0 ? null : _opts$longitude,\n          _opts$latitude = opts.latitude,\n          latitude = _opts$latitude === void 0 ? null : _opts$latitude,\n          _opts$zoom = opts.zoom,\n          zoom = _opts$zoom === void 0 ? null : _opts$zoom,\n          _opts$position = opts.position,\n          position = _opts$position === void 0 ? null : _opts$position,\n          _opts$modelMatrix = opts.modelMatrix,\n          modelMatrix = _opts$modelMatrix === void 0 ? null : _opts$modelMatrix,\n          _opts$focalDistance = opts.focalDistance,\n          focalDistance = _opts$focalDistance === void 0 ? 1 : _opts$focalDistance,\n          _opts$distanceScales = opts.distanceScales,\n          distanceScales = _opts$distanceScales === void 0 ? null : _opts$distanceScales;\n      this.isGeospatial = Number.isFinite(latitude) && Number.isFinite(longitude);\n      this.zoom = zoom;\n\n      if (!Number.isFinite(this.zoom)) {\n        this.zoom = this.isGeospatial ? getMeterZoom({\n          latitude: latitude\n        }) + Math.log2(focalDistance) : DEFAULT_ZOOM;\n      }\n\n      var scale = Math.pow(2, this.zoom);\n      this.scale = scale;\n      this.distanceScales = this.isGeospatial ? _getDistanceScales({\n        latitude: latitude,\n        longitude: longitude\n      }) : distanceScales || DEFAULT_DISTANCE_SCALES;\n      this.focalDistance = focalDistance;\n      this.distanceScales.metersPerUnit = new Vector3(this.distanceScales.metersPerUnit);\n      this.distanceScales.unitsPerMeter = new Vector3(this.distanceScales.unitsPerMeter);\n      this.position = ZERO_VECTOR;\n      this.meterOffset = ZERO_VECTOR;\n\n      if (position) {\n        this.position = position;\n        this.modelMatrix = modelMatrix;\n        this.meterOffset = modelMatrix ? modelMatrix.transformVector(position) : position;\n      }\n\n      if (this.isGeospatial) {\n        this.longitude = longitude;\n        this.latitude = latitude;\n        this.center = this._getCenterInWorld({\n          longitude: longitude,\n          latitude: latitude\n        });\n      } else {\n        this.center = position ? this.projectPosition(position) : [0, 0, 0];\n      }\n\n      this.viewMatrixUncentered = viewMatrix;\n      this.viewMatrix = new Matrix4().multiplyRight(this.viewMatrixUncentered).translate(new Vector3(this.center || ZERO_VECTOR).negate());\n    }\n  }, {\n    key: \"_getCenterInWorld\",\n    value: function _getCenterInWorld(_ref5) {\n      var longitude = _ref5.longitude,\n          latitude = _ref5.latitude;\n      var meterOffset = this.meterOffset,\n          distanceScales = this.distanceScales;\n      var center2d = this.projectFlat([longitude, latitude]);\n      var center = new Vector3(center2d[0], center2d[1], 0);\n\n      if (meterOffset) {\n        var commonPosition = new Vector3(meterOffset).scale(distanceScales.unitsPerMeter);\n        center.add(commonPosition);\n      }\n\n      return center;\n    }\n  }, {\n    key: \"_initProjectionMatrix\",\n    value: function _initProjectionMatrix(opts) {\n      var _opts$projectionMatri = opts.projectionMatrix,\n          projectionMatrix = _opts$projectionMatri === void 0 ? null : _opts$projectionMatri,\n          _opts$orthographic = opts.orthographic,\n          orthographic = _opts$orthographic === void 0 ? false : _opts$orthographic,\n          fovyRadians = opts.fovyRadians,\n          _opts$fovy = opts.fovy,\n          fovy = _opts$fovy === void 0 ? 75 : _opts$fovy,\n          _opts$near = opts.near,\n          near = _opts$near === void 0 ? 0.1 : _opts$near,\n          _opts$far = opts.far,\n          far = _opts$far === void 0 ? 1000 : _opts$far,\n          _opts$focalDistance2 = opts.focalDistance,\n          focalDistance = _opts$focalDistance2 === void 0 ? 1 : _opts$focalDistance2;\n      this.projectionProps = {\n        orthographic: orthographic,\n        fovyRadians: fovyRadians || fovy * DEGREES_TO_RADIANS,\n        aspect: this.width / this.height,\n        focalDistance: focalDistance,\n        near: near,\n        far: far\n      };\n      this.projectionMatrix = projectionMatrix || this._createProjectionMatrix(this.projectionProps);\n    }\n  }, {\n    key: \"_initPixelMatrices\",\n    value: function _initPixelMatrices() {\n      var vpm = createMat4();\n      mat4.multiply(vpm, vpm, this.projectionMatrix);\n      mat4.multiply(vpm, vpm, this.viewMatrix);\n      this.viewProjectionMatrix = vpm;\n      this.viewMatrixInverse = mat4.invert([], this.viewMatrix) || this.viewMatrix;\n\n      var _extractCameraVectors = extractCameraVectors({\n        viewMatrix: this.viewMatrix,\n        viewMatrixInverse: this.viewMatrixInverse\n      }),\n          eye = _extractCameraVectors.eye,\n          direction = _extractCameraVectors.direction,\n          up = _extractCameraVectors.up,\n          right = _extractCameraVectors.right;\n\n      this.cameraPosition = eye;\n      this.cameraDirection = direction;\n      this.cameraUp = up;\n      this.cameraRight = right;\n      var viewportMatrix = createMat4();\n      var pixelProjectionMatrix = createMat4();\n      mat4.scale(viewportMatrix, viewportMatrix, [this.width / 2, -this.height / 2, 1]);\n      mat4.translate(viewportMatrix, viewportMatrix, [1, -1, 0]);\n      mat4.multiply(pixelProjectionMatrix, viewportMatrix, this.viewProjectionMatrix);\n      this.pixelProjectionMatrix = pixelProjectionMatrix;\n      this.viewportMatrix = viewportMatrix;\n      this.pixelUnprojectionMatrix = mat4.invert(createMat4(), this.pixelProjectionMatrix);\n\n      if (!this.pixelUnprojectionMatrix) {\n        log.warn('Pixel project matrix not invertible')();\n      }\n    }\n  }, {\n    key: \"metersPerPixel\",\n    get: function get() {\n      return this.distanceScales.metersPerUnit[2] / this.scale;\n    }\n  }, {\n    key: \"projectionMode\",\n    get: function get() {\n      if (this.isGeospatial) {\n        return this.zoom < 12 ? PROJECTION_MODE.WEB_MERCATOR : PROJECTION_MODE.WEB_MERCATOR_AUTO_OFFSET;\n      }\n\n      return PROJECTION_MODE.IDENTITY;\n    }\n  }]);\n\n  return Viewport;\n}();\n\nexport { Viewport as default };\nViewport.displayName = 'Viewport';","map":{"version":3,"sources":["../../../src/viewports/viewport.js"],"names":["getFrustumPlanes","equals","getDistanceScales","DEGREES_TO_RADIANS","Math","IDENTITY","createMat4","ZERO_VECTOR","DEFAULT_ZOOM","DEFAULT_DISTANCE_SCALES","unitsPerMeter","metersPerUnit","Viewport","opts","id","x","y","width","height","PROJECTION_MODE","viewport","xyz","topLeft","worldPosition","coord","worldToPixels","y2","targetZ","z","targetZWorld","pixelsToWorld","X","Y","Z","Number","lngLatToWorld","worldToLngLat","coordinateOrigin","longitude","latitude","highPrecision","near","far","fovyRadians","aspect","Object","position","direction","up","right","cameraRight","orthographic","focalDistance","fovy","viewMatrix","zoom","modelMatrix","distanceScales","scale","meterOffset","center2d","center","commonPosition","projectionMatrix","vpm","mat4","eye","extractCameraVectors","viewMatrixInverse","viewportMatrix","pixelProjectionMatrix","log"],"mappings":";;;AAoBA,OAAA,GAAA,MAAA,cAAA;AACA,SAAA,UAAA,EAAA,oBAAA,EAA0CA,gBAAgB,IAA1D,iBAAA,QAAA,qBAAA;AAEA,SAAA,OAAA,EAAA,OAAA,EAA0BC,MAAM,IAAhC,OAAA,QAAA,SAAA;AACA,OAAO,KAAP,IAAA,MAAA,gBAAA;AAEA,SACEC,iBAAiB,IADnB,kBAAA,EAAA,YAAA,EAAA,aAAA,EAAA,aAAA,EAAA,aAAA,EAAA,aAAA,QAAA,uBAAA;AASA,SAAA,eAAA,QAAA,kBAAA;AAEA,IAAMC,kBAAkB,GAAGC,IAAI,CAAJA,EAAAA,GAA3B,GAAA;AAEA,IAAMC,QAAQ,GAAGC,UAAjB,EAAA;AAEA,IAAMC,WAAW,GAAG,CAAA,CAAA,EAAA,CAAA,EAApB,CAAoB,CAApB;AAEA,IAAMC,YAAY,GAAlB,CAAA;AAEA,IAAMC,uBAAuB,GAAG;AAC9BC,EAAAA,aAAa,EAAE,CAAA,CAAA,EAAA,CAAA,EADe,CACf,CADe;AAE9BC,EAAAA,aAAa,EAAE,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA;AAFe,CAAhC;;IAKqBC,Q;AAQnB,WAAA,QAAA,GAAuB;AAAA,QAAXC,IAAW,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,CAAA;;AAAA,QAAA,QAAA,GAQjBA,IARiB,CAAA,EAAA;AAAA,QAEnBC,EAFmB,GAAA,QAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,QAAA;AAAA,QAAA,OAAA,GAQjBD,IARiB,CAAA,CAAA;AAAA,QAInBE,CAJmB,GAAA,OAAA,KAAA,KAAA,CAAA,GAAA,CAAA,GAAA,OAAA;AAAA,QAAA,OAAA,GAQjBF,IARiB,CAAA,CAAA;AAAA,QAKnBG,CALmB,GAAA,OAAA,KAAA,KAAA,CAAA,GAAA,CAAA,GAAA,OAAA;AAAA,QAAA,WAAA,GAQjBH,IARiB,CAAA,KAAA;AAAA,QAMnBI,KANmB,GAAA,WAAA,KAAA,KAAA,CAAA,GAAA,CAAA,GAAA,WAAA;AAAA,QAAA,YAAA,GAQjBJ,IARiB,CAAA,MAAA;AAAA,QAOnBK,MAPmB,GAAA,YAAA,KAAA,KAAA,CAAA,GAAA,CAAA,GAAA,YAAA;AAUrB,SAAA,EAAA,GAAUJ,EAAE,IAAI,KAAA,WAAA,CAANA,WAAAA,IAAV,UAAA;AAEA,SAAA,CAAA,GAAA,CAAA;AACA,SAAA,CAAA,GAAA,CAAA;AAEA,SAAA,KAAA,GAAaG,KAAK,IAAlB,CAAA;AACA,SAAA,MAAA,GAAcC,MAAM,IAApB,CAAA;AACA,SAAA,cAAA,GAAA,EAAA;;AAEA,SAAA,eAAA,CAAA,IAAA;;AACA,SAAA,qBAAA,CAAA,IAAA;;AACA,SAAA,kBAAA;;AAGA,SAAA,MAAA,GAAc,KAAA,MAAA,CAAA,IAAA,CAAd,IAAc,CAAd;AACA,SAAA,OAAA,GAAe,KAAA,OAAA,CAAA,IAAA,CAAf,IAAe,CAAf;AACA,SAAA,SAAA,GAAiB,KAAA,SAAA,CAAA,IAAA,CAAjB,IAAiB,CAAjB;AACA,SAAA,eAAA,GAAuB,KAAA,eAAA,CAAA,IAAA,CAAvB,IAAuB,CAAvB;AACA,SAAA,iBAAA,GAAyB,KAAA,iBAAA,CAAA,IAAA,CAAzB,IAAyB,CAAzB;AACA,SAAA,WAAA,GAAmB,KAAA,WAAA,CAAA,IAAA,CAAnB,IAAmB,CAAnB;AACA,SAAA,aAAA,GAAqB,KAAA,aAAA,CAAA,IAAA,CAArB,IAAqB,CAArB;AACD;;;;2BAiBME,Q,EAAU;AACf,UAAI,EAAEA,QAAQ,YAAd,QAAI,CAAJ,EAAqC;AACnC,eAAA,KAAA;AACD;;AAED,aACEA,QAAQ,CAARA,KAAAA,KAAmB,KAAnBA,KAAAA,IACAA,QAAQ,CAARA,MAAAA,KAAoB,KADpBA,MAAAA,IAEAA,QAAQ,CAARA,KAAAA,KAAmB,KAFnBA,KAAAA,IAGAnB,OAAM,CAACmB,QAAQ,CAAT,gBAAA,EAA4B,KAHlCA,gBAGM,CAHNA,IAIAnB,OAAM,CAACmB,QAAQ,CAAT,UAAA,EAAsB,KAL9B,UAKQ,CALR;AAQD;;;4BAcOC,G,EAA4B;AAAA,UAAA,IAAA,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;AAAA,UAAA,YAAA,GAAA,IAAA,CAAtBC,OAAsB;AAAA,UAAtBA,OAAsB,GAAA,YAAA,KAAA,KAAA,CAAA,GAAZ,IAAY,GAAA,YAAA;;AAClC,UAAMC,aAAa,GAAG,KAAA,eAAA,CAAtB,GAAsB,CAAtB;AACA,UAAMC,KAAK,GAAGC,aAAa,CAAA,aAAA,EAAgB,KAA3C,qBAA2B,CAA3B;;AAFkC,UAAA,MAAA,GAAA,cAAA,CAAA,KAAA,EAAA,CAAA,CAAA;AAAA,UAI3BV,CAJ2B,GAAA,MAAA,CAAA,CAAA,CAAA;AAAA,UAIxBC,CAJwB,GAAA,MAAA,CAAA,CAAA,CAAA;;AAKlC,UAAMU,EAAE,GAAGJ,OAAO,GAAA,CAAA,GAAO,KAAA,MAAA,GAAzB,CAAA;AACA,aAAOD,GAAG,CAAHA,MAAAA,KAAAA,CAAAA,GAAmB,CAAA,CAAA,EAAnBA,EAAmB,CAAnBA,GAA6B,CAAA,CAAA,EAAA,EAAA,EAAQG,KAAK,CAAjD,CAAiD,CAAb,CAApC;AACD;;;8BAYSH,G,EAAqC;AAAA,UAAA,KAAA,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;AAAA,UAAA,aAAA,GAAA,KAAA,CAA/BC,OAA+B;AAAA,UAA/BA,OAA+B,GAAA,aAAA,KAAA,KAAA,CAAA,GAArB,IAAqB,GAAA,aAAA;AAAA,UAAfK,OAAe,GAAA,KAAA,CAAfA,OAAe;;AAAA,UAAA,IAAA,GAAA,cAAA,CAAA,GAAA,EAAA,CAAA,CAAA;AAAA,UACtCZ,CADsC,GAAA,IAAA,CAAA,CAAA,CAAA;AAAA,UACnCC,CADmC,GAAA,IAAA,CAAA,CAAA,CAAA;AAAA,UAChCY,CADgC,GAAA,IAAA,CAAA,CAAA,CAAA;;AAG7C,UAAMF,EAAE,GAAGJ,OAAO,GAAA,CAAA,GAAO,KAAA,MAAA,GAAzB,CAAA;AACA,UAAMO,YAAY,GAAGF,OAAO,IAAIA,OAAO,GAAG,KAAA,cAAA,CAAA,aAAA,CAA1C,CAA0C,CAA1C;AACA,UAAMH,KAAK,GAAGM,aAAa,CAAC,CAAA,CAAA,EAAA,EAAA,EAAD,CAAC,CAAD,EAAa,KAAb,uBAAA,EAA3B,YAA2B,CAA3B;;AAL6C,UAAA,qBAAA,GAM3B,KAAA,iBAAA,CAN2B,KAM3B,CAN2B;AAAA,UAAA,sBAAA,GAAA,cAAA,CAAA,qBAAA,EAAA,CAAA,CAAA;AAAA,UAMtCC,CANsC,GAAA,sBAAA,CAAA,CAAA,CAAA;AAAA,UAMnCC,CANmC,GAAA,sBAAA,CAAA,CAAA,CAAA;AAAA,UAMhCC,CANgC,GAAA,sBAAA,CAAA,CAAA,CAAA;;AAQ7C,UAAIC,MAAM,CAANA,QAAAA,CAAJ,CAAIA,CAAJ,EAAwB;AACtB,eAAO,CAAA,CAAA,EAAA,CAAA,EAAP,CAAO,CAAP;AACD;;AACD,aAAOA,MAAM,CAANA,QAAAA,CAAAA,OAAAA,IAA2B,CAAA,CAAA,EAAA,CAAA,EAA3BA,OAA2B,CAA3BA,GAA6C,CAAA,CAAA,EAApD,CAAoD,CAApD;AACD;;;oCAKeb,G,EAAK;AAAA,UAAA,iBAAA,GACJ,KAAA,WAAA,CADI,GACJ,CADI;AAAA,UAAA,kBAAA,GAAA,cAAA,CAAA,iBAAA,EAAA,CAAA,CAAA;AAAA,UACZU,CADY,GAAA,kBAAA,CAAA,CAAA,CAAA;AAAA,UACTC,CADS,GAAA,kBAAA,CAAA,CAAA,CAAA;;AAEnB,UAAMC,CAAC,GAAG,CAACZ,GAAG,CAAHA,CAAG,CAAHA,IAAD,CAAA,IAAgB,KAAA,cAAA,CAAA,aAAA,CAA1B,CAA0B,CAA1B;AACA,aAAO,CAAA,CAAA,EAAA,CAAA,EAAP,CAAO,CAAP;AACD;;;sCAEiBA,G,EAAK;AAAA,UAAA,mBAAA,GACN,KAAA,aAAA,CADM,GACN,CADM;AAAA,UAAA,oBAAA,GAAA,cAAA,CAAA,mBAAA,EAAA,CAAA,CAAA;AAAA,UACdU,CADc,GAAA,oBAAA,CAAA,CAAA,CAAA;AAAA,UACXC,CADW,GAAA,oBAAA,CAAA,CAAA,CAAA;;AAErB,UAAMC,CAAC,GAAG,CAACZ,GAAG,CAAHA,CAAG,CAAHA,IAAD,CAAA,IAAgB,KAAA,cAAA,CAAA,aAAA,CAA1B,CAA0B,CAA1B;AACA,aAAO,CAAA,CAAA,EAAA,CAAA,EAAP,CAAO,CAAP;AACD;;;gCAWWA,G,EAAK;AACf,UAAI,KAAJ,YAAA,EAAuB;AACrB,eAAOc,aAAa,CAApB,GAAoB,CAApB;AACD;;AACD,aAAA,GAAA;AACD;;;kCAUad,G,EAAK;AACjB,UAAI,KAAJ,YAAA,EAAuB;AACrB,eAAOe,aAAa,CAApB,GAAoB,CAApB;AACD;;AACD,aAAA,GAAA;AACD;;;wCAE0C;AAAA,UAAzBC,gBAAyB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAN,IAAM;;AACzC,UAAA,gBAAA,EAAsB;AACpB,eAAOnC,kBAAiB,CAAC;AACvBoC,UAAAA,SAAS,EAAED,gBAAgB,CADJ,CACI,CADJ;AAEvBE,UAAAA,QAAQ,EAAEF,gBAAgB,CAFH,CAEG,CAFH;AAGvBG,UAAAA,aAAa,EAAE;AAHQ,SAAD,CAAxB;AAKD;;AACD,aAAO,KAAP,cAAA;AACD;;;yCAE4C;AAAA,UAA9BzB,CAA8B,GAAA,KAAA,CAA9BA,CAA8B;AAAA,UAA3BC,CAA2B,GAAA,KAAA,CAA3BA,CAA2B;AAAA,UAAA,WAAA,GAAA,KAAA,CAAxBC,KAAwB;AAAA,UAAxBA,KAAwB,GAAA,WAAA,KAAA,KAAA,CAAA,GAAhB,CAAgB,GAAA,WAAA;AAAA,UAAA,YAAA,GAAA,KAAA,CAAbC,MAAa;AAAA,UAAbA,MAAa,GAAA,YAAA,KAAA,KAAA,CAAA,GAAJ,CAAI,GAAA,YAAA;AAC3C,aACEH,CAAC,GAAG,KAAA,CAAA,GAAS,KAAbA,KAAAA,IACA,KAAA,CAAA,GAASA,CAAC,GADVA,KAAAA,IAEAC,CAAC,GAAG,KAAA,CAAA,GAAS,KAFbD,MAAAA,IAGA,KAAA,CAAA,GAASC,CAAC,GAJZ,MAAA;AAMD;;;uCAGkB;AACjB,UAAI,KAAA,cAAA,CAAJ,IAAA,EAA8B;AAC5B,eAAO,KAAP,cAAA;AACD;;AAHgB,UAAA,qBAAA,GAKwB,KALxB,eAAA;AAAA,UAKVyB,IALU,GAAA,qBAAA,CAAA,IAAA;AAAA,UAKJC,GALI,GAAA,qBAAA,CAAA,GAAA;AAAA,UAKCC,WALD,GAAA,qBAAA,CAAA,WAAA;AAAA,UAKcC,MALd,GAAA,qBAAA,CAAA,MAAA;AAOjBC,MAAAA,MAAM,CAANA,MAAAA,CACE,KADFA,cAAAA,EAEE7C,iBAAgB,CAAC;AACf4C,QAAAA,MAAM,EADS,MAAA;AAEfH,QAAAA,IAAI,EAFW,IAAA;AAGfC,QAAAA,GAAG,EAHY,GAAA;AAIfC,QAAAA,WAAW,EAJI,WAAA;AAKfG,QAAAA,QAAQ,EAAE,KALK,cAAA;AAMfC,QAAAA,SAAS,EAAE,KANI,eAAA;AAOfC,QAAAA,EAAE,EAAE,KAPW,QAAA;AAQfC,QAAAA,KAAK,EAAE,KAAKC;AARG,OAAD,CAFlBL;AAcA,aAAO,KAAP,cAAA;AACD;;;wCAImB;AAClB,aAAO,KAAP,cAAA;AACD;;;yCAEoB;AACnB,aAAO,KAAP,eAAA;AACD;;;kCAEa;AACZ,aAAO,KAAP,QAAA;AACD;;;mDAIsF;AAAA,UAA9DM,YAA8D,GAAA,KAAA,CAA9DA,YAA8D;AAAA,UAAhDR,WAAgD,GAAA,KAAA,CAAhDA,WAAgD;AAAA,UAAnCC,MAAmC,GAAA,KAAA,CAAnCA,MAAmC;AAAA,UAA3BQ,aAA2B,GAAA,KAAA,CAA3BA,aAA2B;AAAA,UAAZX,IAAY,GAAA,KAAA,CAAZA,IAAY;AAAA,UAANC,GAAM,GAAA,KAAA,CAANA,GAAM;AACrF,aAAOS,YAAY,GACf,IAAA,OAAA,GAAA,YAAA,CAA2B;AAACE,QAAAA,IAAI,EAAL,WAAA;AAAoBT,QAAAA,MAAM,EAA1B,MAAA;AAA4BQ,QAAAA,aAAa,EAAzC,aAAA;AAA2CX,QAAAA,IAAI,EAA/C,IAAA;AAAiDC,QAAAA,GAAG,EAAHA;AAAjD,OAA3B,CADe,GAEf,IAAA,OAAA,GAAA,WAAA,CAA0B;AAACW,QAAAA,IAAI,EAAL,WAAA;AAAoBT,QAAAA,MAAM,EAA1B,MAAA;AAA4BH,QAAAA,IAAI,EAAhC,IAAA;AAAkCC,QAAAA,GAAG,EAAHA;AAAlC,OAA1B,CAFJ;AAGD;;;oCAGe7B,I,EAAM;AAAA,UAAA,gBAAA,GAchBA,IAdgB,CAAA,UAAA;AAAA,UAGlByC,UAHkB,GAAA,gBAAA,KAAA,KAAA,CAAA,GAAA,QAAA,GAAA,gBAAA;AAAA,UAAA,eAAA,GAchBzC,IAdgB,CAAA,SAAA;AAAA,UAKlByB,SALkB,GAAA,eAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,eAAA;AAAA,UAAA,cAAA,GAchBzB,IAdgB,CAAA,QAAA;AAAA,UAMlB0B,QANkB,GAAA,cAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,cAAA;AAAA,UAAA,UAAA,GAchB1B,IAdgB,CAAA,IAAA;AAAA,UAOlB0C,IAPkB,GAAA,UAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,UAAA;AAAA,UAAA,cAAA,GAchB1C,IAdgB,CAAA,QAAA;AAAA,UASlBiC,QATkB,GAAA,cAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,cAAA;AAAA,UAAA,iBAAA,GAchBjC,IAdgB,CAAA,WAAA;AAAA,UAUlB2C,WAVkB,GAAA,iBAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,iBAAA;AAAA,UAAA,mBAAA,GAchB3C,IAdgB,CAAA,aAAA;AAAA,UAWlBuC,aAXkB,GAAA,mBAAA,KAAA,KAAA,CAAA,GAAA,CAAA,GAAA,mBAAA;AAAA,UAAA,oBAAA,GAchBvC,IAdgB,CAAA,cAAA;AAAA,UAalB4C,cAbkB,GAAA,oBAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,oBAAA;AAiBpB,WAAA,YAAA,GAAoBvB,MAAM,CAANA,QAAAA,CAAAA,QAAAA,KAA6BA,MAAM,CAANA,QAAAA,CAAjD,SAAiDA,CAAjD;AAEA,WAAA,IAAA,GAAA,IAAA;;AACA,UAAI,CAACA,MAAM,CAANA,QAAAA,CAAgB,KAArB,IAAKA,CAAL,EAAiC;AAC/B,aAAA,IAAA,GAAY,KAAA,YAAA,GACR,YAAY,CAAC;AAACK,UAAAA,QAAQ,EAARA;AAAD,SAAD,CAAZ,GAA2BnC,IAAI,CAAJA,IAAAA,CADnB,aACmBA,CADnB,GAAZ,YAAA;AAGD;;AACD,UAAMsD,KAAK,GAAGtD,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAY,KAA1B,IAAcA,CAAd;AACA,WAAA,KAAA,GAAA,KAAA;AAGA,WAAA,cAAA,GAAsB,KAAA,YAAA,GAClBF,kBAAiB,CAAC;AAACqC,QAAAA,QAAQ,EAAT,QAAA;AAAWD,QAAAA,SAAS,EAATA;AAAX,OAAD,CADC,GAElBmB,cAAc,IAFlB,uBAAA;AAIA,WAAA,aAAA,GAAA,aAAA;AAEA,WAAA,cAAA,CAAA,aAAA,GAAoC,IAAA,OAAA,CAAY,KAAA,cAAA,CAAhD,aAAoC,CAApC;AACA,WAAA,cAAA,CAAA,aAAA,GAAoC,IAAA,OAAA,CAAY,KAAA,cAAA,CAAhD,aAAoC,CAApC;AAEA,WAAA,QAAA,GAAA,WAAA;AACA,WAAA,WAAA,GAAA,WAAA;;AACA,UAAA,QAAA,EAAc;AAEZ,aAAA,QAAA,GAAA,QAAA;AACA,aAAA,WAAA,GAAA,WAAA;AACA,aAAA,WAAA,GAAmBD,WAAW,GAAGA,WAAW,CAAXA,eAAAA,CAAH,QAAGA,CAAH,GAA9B,QAAA;AACD;;AAED,UAAI,KAAJ,YAAA,EAAuB;AAErB,aAAA,SAAA,GAAA,SAAA;AACA,aAAA,QAAA,GAAA,QAAA;AACA,aAAA,MAAA,GAAc,KAAA,iBAAA,CAAuB;AAAClB,UAAAA,SAAS,EAAV,SAAA;AAAYC,UAAAA,QAAQ,EAARA;AAAZ,SAAvB,CAAd;AAJF,OAAA,MAKO;AACL,aAAA,MAAA,GAAcO,QAAQ,GAAG,KAAA,eAAA,CAAH,QAAG,CAAH,GAAoC,CAAA,CAAA,EAAA,CAAA,EAA1D,CAA0D,CAA1D;AACD;;AACD,WAAA,oBAAA,GAAA,UAAA;AAEA,WAAA,UAAA,GAAkB,IAAA,OAAA,GAAA,aAAA,CAED,KAFC,oBAAA,EAAA,SAAA,CAIL,IAAA,OAAA,CAAY,KAAA,MAAA,IAAZ,WAAA,EAJb,MAIa,EAJK,CAAlB;AAKD;;;6CAGwC;AAAA,UAAtBR,SAAsB,GAAA,KAAA,CAAtBA,SAAsB;AAAA,UAAXC,QAAW,GAAA,KAAA,CAAXA,QAAW;AAAA,UAChCoB,WADgC,GAAA,KAAA,WAAA;AAAA,UACnBF,cADmB,GAAA,KAAA,cAAA;AAIvC,UAAMG,QAAQ,GAAG,KAAA,WAAA,CAAiB,CAAA,SAAA,EAAlC,QAAkC,CAAjB,CAAjB;AACA,UAAMC,MAAM,GAAG,IAAA,OAAA,CAAYD,QAAQ,CAApB,CAAoB,CAApB,EAAyBA,QAAQ,CAAjC,CAAiC,CAAjC,EAAf,CAAe,CAAf;;AAEA,UAAA,WAAA,EAAiB;AACf,YAAME,cAAc,GAAG,IAAA,OAAA,CAAA,WAAA,EAAA,KAAA,CAEdL,cAAc,CAFvB,aAAuB,CAAvB;AAGAI,QAAAA,MAAM,CAANA,GAAAA,CAAAA,cAAAA;AACD;;AAED,aAAA,MAAA;AACD;;;0CAEqBhD,I,EAAM;AAAA,UAAA,qBAAA,GAYtBA,IAZsB,CAAA,gBAAA;AAAA,UAGxBkD,gBAHwB,GAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,qBAAA;AAAA,UAAA,kBAAA,GAYtBlD,IAZsB,CAAA,YAAA;AAAA,UAMxBsC,YANwB,GAAA,kBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,GAAA,kBAAA;AAAA,UAOxBR,WAPwB,GAYtB9B,IAZsB,CAAA,WAAA;AAAA,UAAA,UAAA,GAYtBA,IAZsB,CAAA,IAAA;AAAA,UAQxBwC,IARwB,GAAA,UAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,UAAA;AAAA,UAAA,UAAA,GAYtBxC,IAZsB,CAAA,IAAA;AAAA,UASxB4B,IATwB,GAAA,UAAA,KAAA,KAAA,CAAA,GAAA,GAAA,GAAA,UAAA;AAAA,UAAA,SAAA,GAYtB5B,IAZsB,CAAA,GAAA;AAAA,UAUxB6B,GAVwB,GAAA,SAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,SAAA;AAAA,UAAA,oBAAA,GAYtB7B,IAZsB,CAAA,aAAA;AAAA,UAWxBuC,aAXwB,GAAA,oBAAA,KAAA,KAAA,CAAA,GAAA,CAAA,GAAA,oBAAA;AAc1B,WAAA,eAAA,GAAuB;AACrBD,QAAAA,YAAY,EADS,YAAA;AAErBR,QAAAA,WAAW,EAAEA,WAAW,IAAIU,IAAI,GAFX,kBAAA;AAGrBT,QAAAA,MAAM,EAAE,KAAA,KAAA,GAAa,KAHA,MAAA;AAIrBQ,QAAAA,aAAa,EAJQ,aAAA;AAKrBX,QAAAA,IAAI,EALiB,IAAA;AAMrBC,QAAAA,GAAG,EAAHA;AANqB,OAAvB;AASA,WAAA,gBAAA,GAAwBqB,gBAAgB,IAAI,KAAA,uBAAA,CAA6B,KAAzE,eAA4C,CAA5C;AACD;;;yCAEoB;AAGnB,UAAMC,GAAG,GAAG1D,UAAZ,EAAA;AACA2D,MAAAA,IAAI,CAAJA,QAAAA,CAAAA,GAAAA,EAAAA,GAAAA,EAAwB,KAAxBA,gBAAAA;AACAA,MAAAA,IAAI,CAAJA,QAAAA,CAAAA,GAAAA,EAAAA,GAAAA,EAAwB,KAAxBA,UAAAA;AACA,WAAA,oBAAA,GAAA,GAAA;AAKA,WAAA,iBAAA,GAAyBA,IAAI,CAAJA,MAAAA,CAAAA,EAAAA,EAAgB,KAAhBA,UAAAA,KAAoC,KAA7D,UAAA;;AAXmB,UAAA,qBAAA,GAciBE,oBAAoB,CAAC;AACvDb,QAAAA,UAAU,EAAE,KAD2C,UAAA;AAEvDc,QAAAA,iBAAiB,EAAE,KAAKA;AAF+B,OAAD,CAdrC;AAAA,UAcZF,GAdY,GAAA,qBAAA,CAAA,GAAA;AAAA,UAcPnB,SAdO,GAAA,qBAAA,CAAA,SAAA;AAAA,UAcIC,EAdJ,GAAA,qBAAA,CAAA,EAAA;AAAA,UAcQC,KAdR,GAAA,qBAAA,CAAA,KAAA;;AAkBnB,WAAA,cAAA,GAAA,GAAA;AACA,WAAA,eAAA,GAAA,SAAA;AACA,WAAA,QAAA,GAAA,EAAA;AACA,WAAA,WAAA,GAAA,KAAA;AAeA,UAAMoB,cAAc,GAAG/D,UAAvB,EAAA;AACA,UAAMgE,qBAAqB,GAAGhE,UAA9B,EAAA;AACA2D,MAAAA,IAAI,CAAJA,KAAAA,CAAAA,cAAAA,EAAAA,cAAAA,EAA2C,CAAC,KAAA,KAAA,GAAD,CAAA,EAAiB,CAAC,KAAD,MAAA,GAAjB,CAAA,EAA3CA,CAA2C,CAA3CA;AACAA,MAAAA,IAAI,CAAJA,SAAAA,CAAAA,cAAAA,EAAAA,cAAAA,EAA+C,CAAA,CAAA,EAAI,CAAJ,CAAA,EAA/CA,CAA+C,CAA/CA;AACAA,MAAAA,IAAI,CAAJA,QAAAA,CAAAA,qBAAAA,EAAAA,cAAAA,EAAqD,KAArDA,oBAAAA;AACA,WAAA,qBAAA,GAAA,qBAAA;AACA,WAAA,cAAA,GAAA,cAAA;AAEA,WAAA,uBAAA,GAA+BA,IAAI,CAAJA,MAAAA,CAAY3D,UAAZ2D,EAAAA,EAA0B,KAAzD,qBAA+BA,CAA/B;;AACA,UAAI,CAAC,KAAL,uBAAA,EAAmC;AACjCM,QAAAA,GAAG,CAAHA,IAAAA,CAAAA,qCAAAA;AAED;AACF;;;wBA1VoB;AACnB,aAAO,KAAA,cAAA,CAAA,aAAA,CAAA,CAAA,IAAuC,KAA9C,KAAA;AACD;;;wBAEoB;AACnB,UAAI,KAAJ,YAAA,EAAuB;AACrB,eAAO,KAAA,IAAA,GAAA,EAAA,GACHpD,eAAe,CADZ,YAAA,GAEHA,eAAe,CAFnB,wBAAA;AAGD;;AACD,aAAOA,eAAe,CAAtB,QAAA;AACD;;;;;;SApDkBP,Q;AAsYrBA,QAAQ,CAARA,WAAAA,GAAAA,UAAAA","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport log from '../utils/log';\nimport {createMat4, extractCameraVectors, getFrustumPlanes} from '../utils/math-utils';\n\nimport {Matrix4, Vector3, equals} from 'math.gl';\nimport * as mat4 from 'gl-matrix/mat4';\n\nimport {\n  getDistanceScales,\n  getMeterZoom,\n  lngLatToWorld,\n  worldToLngLat,\n  worldToPixels,\n  pixelsToWorld\n} from '@math.gl/web-mercator';\n\nimport {PROJECTION_MODE} from '../lib/constants';\n\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\nconst IDENTITY = createMat4();\n\nconst ZERO_VECTOR = [0, 0, 0];\n\nconst DEFAULT_ZOOM = 0;\n\nconst DEFAULT_DISTANCE_SCALES = {\n  unitsPerMeter: [1, 1, 1],\n  metersPerUnit: [1, 1, 1]\n};\n\nexport default class Viewport {\n  /**\n   * @classdesc\n   * Manages coordinate system transformations for deck.gl.\n   *\n   * Note: The Viewport is immutable in the sense that it only has accessors.\n   * A new viewport instance should be created if any parameters have changed.\n   */\n  constructor(opts = {}) {\n    const {\n      id = null,\n      // Window width/height in pixels (for pixel projection)\n      x = 0,\n      y = 0,\n      width = 1,\n      height = 1\n    } = opts;\n\n    this.id = id || this.constructor.displayName || 'viewport';\n\n    this.x = x;\n    this.y = y;\n    // Silently allow apps to send in w,h = 0,0\n    this.width = width || 1;\n    this.height = height || 1;\n    this._frustumPlanes = {};\n\n    this._initViewMatrix(opts);\n    this._initProjectionMatrix(opts);\n    this._initPixelMatrices();\n\n    // Bind methods for easy access\n    this.equals = this.equals.bind(this);\n    this.project = this.project.bind(this);\n    this.unproject = this.unproject.bind(this);\n    this.projectPosition = this.projectPosition.bind(this);\n    this.unprojectPosition = this.unprojectPosition.bind(this);\n    this.projectFlat = this.projectFlat.bind(this);\n    this.unprojectFlat = this.unprojectFlat.bind(this);\n  }\n\n  get metersPerPixel() {\n    return this.distanceScales.metersPerUnit[2] / this.scale;\n  }\n\n  get projectionMode() {\n    if (this.isGeospatial) {\n      return this.zoom < 12\n        ? PROJECTION_MODE.WEB_MERCATOR\n        : PROJECTION_MODE.WEB_MERCATOR_AUTO_OFFSET;\n    }\n    return PROJECTION_MODE.IDENTITY;\n  }\n\n  // Two viewports are equal if width and height are identical, and if\n  // their view and projection matrices are (approximately) equal.\n  equals(viewport) {\n    if (!(viewport instanceof Viewport)) {\n      return false;\n    }\n\n    return (\n      viewport.width === this.width &&\n      viewport.height === this.height &&\n      viewport.scale === this.scale &&\n      equals(viewport.projectionMatrix, this.projectionMatrix) &&\n      equals(viewport.viewMatrix, this.viewMatrix)\n    );\n    // TODO - check distance scales?\n  }\n\n  /**\n   * Projects xyz (possibly latitude and longitude) to pixel coordinates in window\n   * using viewport projection parameters\n   * - [longitude, latitude] to [x, y]\n   * - [longitude, latitude, Z] => [x, y, z]\n   * Note: By default, returns top-left coordinates for canvas/SVG type render\n   *\n   * @param {Array} lngLatZ - [lng, lat] or [lng, lat, Z]\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether projected coords are top left\n   * @return {Array} - [x, y] or [x, y, z] in top left coords\n   */\n  project(xyz, {topLeft = true} = {}) {\n    const worldPosition = this.projectPosition(xyz);\n    const coord = worldToPixels(worldPosition, this.pixelProjectionMatrix);\n\n    const [x, y] = coord;\n    const y2 = topLeft ? y : this.height - y;\n    return xyz.length === 2 ? [x, y2] : [x, y2, coord[2]];\n  }\n\n  /**\n   * Unproject pixel coordinates on screen onto world coordinates,\n   * (possibly [lon, lat]) on map.\n   * - [x, y] => [lng, lat]\n   * - [x, y, z] => [lng, lat, Z]\n   * @param {Array} xyz -\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether origin is top left\n   * @return {Array|null} - [lng, lat, Z] or [X, Y, Z]\n   */\n  unproject(xyz, {topLeft = true, targetZ} = {}) {\n    const [x, y, z] = xyz;\n\n    const y2 = topLeft ? y : this.height - y;\n    const targetZWorld = targetZ && targetZ * this.distanceScales.unitsPerMeter[2];\n    const coord = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix, targetZWorld);\n    const [X, Y, Z] = this.unprojectPosition(coord);\n\n    if (Number.isFinite(z)) {\n      return [X, Y, Z];\n    }\n    return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n  }\n\n  // NON_LINEAR PROJECTION HOOKS\n  // Used for web meractor projection\n\n  projectPosition(xyz) {\n    const [X, Y] = this.projectFlat(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.unitsPerMeter[2];\n    return [X, Y, Z];\n  }\n\n  unprojectPosition(xyz) {\n    const [X, Y] = this.unprojectFlat(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.metersPerUnit[2];\n    return [X, Y, Z];\n  }\n\n  /**\n   * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n   * Performs the nonlinear part of the web mercator projection.\n   * Remaining projection is done with 4x4 matrices which also handles\n   * perspective.\n   * @param {Array} lngLat - [lng, lat] coordinates\n   *   Specifies a point on the sphere to project onto the map.\n   * @return {Array} [x,y] coordinates.\n   */\n  projectFlat(xyz) {\n    if (this.isGeospatial) {\n      return lngLatToWorld(xyz);\n    }\n    return xyz;\n  }\n\n  /**\n   * Unproject world point [x,y] on map onto {lat, lon} on sphere\n   * @param {object|Vector} xy - object with {x,y} members\n   *  representing point on projected map plane\n   * @return {GeoCoordinates} - object with {lat,lon} of point on sphere.\n   *   Has toArray method if you need a GeoJSON Array.\n   *   Per cartographic tradition, lat and lon are specified as degrees.\n   */\n  unprojectFlat(xyz) {\n    if (this.isGeospatial) {\n      return worldToLngLat(xyz);\n    }\n    return xyz;\n  }\n\n  getDistanceScales(coordinateOrigin = null) {\n    if (coordinateOrigin) {\n      return getDistanceScales({\n        longitude: coordinateOrigin[0],\n        latitude: coordinateOrigin[1],\n        highPrecision: true\n      });\n    }\n    return this.distanceScales;\n  }\n\n  containsPixel({x, y, width = 1, height = 1}) {\n    return (\n      x < this.x + this.width &&\n      this.x < x + width &&\n      y < this.y + this.height &&\n      this.y < y + height\n    );\n  }\n\n  // Extract frustum planes in common space\n  getFrustumPlanes() {\n    if (this._frustumPlanes.near) {\n      return this._frustumPlanes;\n    }\n\n    const {near, far, fovyRadians, aspect} = this.projectionProps;\n\n    Object.assign(\n      this._frustumPlanes,\n      getFrustumPlanes({\n        aspect,\n        near,\n        far,\n        fovyRadians,\n        position: this.cameraPosition,\n        direction: this.cameraDirection,\n        up: this.cameraUp,\n        right: this.cameraRight\n      })\n    );\n\n    return this._frustumPlanes;\n  }\n\n  // EXPERIMENTAL METHODS\n\n  getCameraPosition() {\n    return this.cameraPosition;\n  }\n\n  getCameraDirection() {\n    return this.cameraDirection;\n  }\n\n  getCameraUp() {\n    return this.cameraUp;\n  }\n\n  // INTERNAL METHODS\n\n  _createProjectionMatrix({orthographic, fovyRadians, aspect, focalDistance, near, far}) {\n    return orthographic\n      ? new Matrix4().orthographic({fovy: fovyRadians, aspect, focalDistance, near, far})\n      : new Matrix4().perspective({fovy: fovyRadians, aspect, near, far});\n  }\n\n  /* eslint-disable complexity, max-statements */\n  _initViewMatrix(opts) {\n    const {\n      // view matrix\n      viewMatrix = IDENTITY,\n\n      longitude = null, // Anchor: lng lat zoom makes viewport work w/ geospatial coordinate systems\n      latitude = null,\n      zoom = null,\n\n      position = null, // Anchor position offset (in meters for geospatial viewports)\n      modelMatrix = null, // A model matrix to be applied to position, to match the layer props API\n      focalDistance = 1, // Only needed for orthographic views\n\n      distanceScales = null\n    } = opts;\n\n    // Check if we have a geospatial anchor\n    this.isGeospatial = Number.isFinite(latitude) && Number.isFinite(longitude);\n\n    this.zoom = zoom;\n    if (!Number.isFinite(this.zoom)) {\n      this.zoom = this.isGeospatial\n        ? getMeterZoom({latitude}) + Math.log2(focalDistance)\n        : DEFAULT_ZOOM;\n    }\n    const scale = Math.pow(2, this.zoom);\n    this.scale = scale;\n\n    // Calculate distance scales if lng/lat/zoom are provided\n    this.distanceScales = this.isGeospatial\n      ? getDistanceScales({latitude, longitude})\n      : distanceScales || DEFAULT_DISTANCE_SCALES;\n\n    this.focalDistance = focalDistance;\n\n    this.distanceScales.metersPerUnit = new Vector3(this.distanceScales.metersPerUnit);\n    this.distanceScales.unitsPerMeter = new Vector3(this.distanceScales.unitsPerMeter);\n\n    this.position = ZERO_VECTOR;\n    this.meterOffset = ZERO_VECTOR;\n    if (position) {\n      // Apply model matrix if supplied\n      this.position = position;\n      this.modelMatrix = modelMatrix;\n      this.meterOffset = modelMatrix ? modelMatrix.transformVector(position) : position;\n    }\n\n    if (this.isGeospatial) {\n      // Determine camera center\n      this.longitude = longitude;\n      this.latitude = latitude;\n      this.center = this._getCenterInWorld({longitude, latitude});\n    } else {\n      this.center = position ? this.projectPosition(position) : [0, 0, 0];\n    }\n    this.viewMatrixUncentered = viewMatrix;\n    // Make a centered version of the matrix for projection modes without an offset\n    this.viewMatrix = new Matrix4()\n      // Apply the uncentered view matrix\n      .multiplyRight(this.viewMatrixUncentered)\n      // And center it\n      .translate(new Vector3(this.center || ZERO_VECTOR).negate());\n  }\n  /* eslint-enable complexity, max-statements */\n\n  _getCenterInWorld({longitude, latitude}) {\n    const {meterOffset, distanceScales} = this;\n\n    // Make a centered version of the matrix for projection modes without an offset\n    const center2d = this.projectFlat([longitude, latitude]);\n    const center = new Vector3(center2d[0], center2d[1], 0);\n\n    if (meterOffset) {\n      const commonPosition = new Vector3(meterOffset)\n        // Convert to pixels in current zoom\n        .scale(distanceScales.unitsPerMeter);\n      center.add(commonPosition);\n    }\n\n    return center;\n  }\n\n  _initProjectionMatrix(opts) {\n    const {\n      // Projection matrix\n      projectionMatrix = null,\n\n      // Projection matrix parameters, used if projectionMatrix not supplied\n      orthographic = false,\n      fovyRadians,\n      fovy = 75,\n      near = 0.1, // Distance of near clipping plane\n      far = 1000, // Distance of far clipping plane\n      focalDistance = 1\n    } = opts;\n\n    this.projectionProps = {\n      orthographic,\n      fovyRadians: fovyRadians || fovy * DEGREES_TO_RADIANS,\n      aspect: this.width / this.height,\n      focalDistance,\n      near,\n      far\n    };\n\n    this.projectionMatrix = projectionMatrix || this._createProjectionMatrix(this.projectionProps);\n  }\n\n  _initPixelMatrices() {\n    // Note: As usual, matrix operations should be applied in \"reverse\" order\n    // since vectors will be multiplied in from the right during transformation\n    const vpm = createMat4();\n    mat4.multiply(vpm, vpm, this.projectionMatrix);\n    mat4.multiply(vpm, vpm, this.viewMatrix);\n    this.viewProjectionMatrix = vpm;\n\n    // console.log('VPM', this.viewMatrix, this.projectionMatrix, this.viewProjectionMatrix);\n\n    // Calculate inverse view matrix\n    this.viewMatrixInverse = mat4.invert([], this.viewMatrix) || this.viewMatrix;\n\n    // Decompose camera directions\n    const {eye, direction, up, right} = extractCameraVectors({\n      viewMatrix: this.viewMatrix,\n      viewMatrixInverse: this.viewMatrixInverse\n    });\n    this.cameraPosition = eye;\n    this.cameraDirection = direction;\n    this.cameraUp = up;\n    this.cameraRight = right;\n\n    // console.log(this.cameraPosition, this.cameraDirection, this.cameraUp);\n\n    /*\n     * Builds matrices that converts preprojected lngLats to screen pixels\n     * and vice versa.\n     * Note: Currently returns bottom-left coordinates!\n     * Note: Starts with the GL projection matrix and adds steps to the\n     *       scale and translate that matrix onto the window.\n     * Note: WebGL controls clip space to screen projection with gl.viewport\n     *       and does not need this step.\n     */\n\n    // matrix for conversion from world location to screen (pixel) coordinates\n    const viewportMatrix = createMat4(); // matrix from NDC to viewport.\n    const pixelProjectionMatrix = createMat4(); // matrix from world space to viewport.\n    mat4.scale(viewportMatrix, viewportMatrix, [this.width / 2, -this.height / 2, 1]);\n    mat4.translate(viewportMatrix, viewportMatrix, [1, -1, 0]);\n    mat4.multiply(pixelProjectionMatrix, viewportMatrix, this.viewProjectionMatrix);\n    this.pixelProjectionMatrix = pixelProjectionMatrix;\n    this.viewportMatrix = viewportMatrix;\n\n    this.pixelUnprojectionMatrix = mat4.invert(createMat4(), this.pixelProjectionMatrix);\n    if (!this.pixelUnprojectionMatrix) {\n      log.warn('Pixel project matrix not invertible')();\n      // throw new Error('Pixel project matrix not invertible');\n    }\n  }\n}\n\nViewport.displayName = 'Viewport';\n"]},"metadata":{},"sourceType":"module"}