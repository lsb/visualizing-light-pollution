{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { clampRange } from '../util/vector';\nimport { DataType } from '../type';\nimport { selectChunkArgs } from '../util/args';\nimport { AbstractVector, Vector } from '../vector';\n/** @ignore */\n\nexport class Chunked extends AbstractVector {\n  constructor(type, chunks = [], offsets = calculateOffsets(chunks)) {\n    super();\n    this._nullCount = -1;\n    this._type = type;\n    this._chunks = chunks;\n    this._chunkOffsets = offsets;\n    this._length = offsets[offsets.length - 1];\n    this._numChildren = (this._type.children || []).length;\n  }\n  /** @nocollapse */\n\n\n  static flatten(...vectors) {\n    return selectChunkArgs(Vector, vectors);\n  }\n  /** @nocollapse */\n\n\n  static concat(...vectors) {\n    const chunks = Chunked.flatten(...vectors);\n    return new Chunked(chunks[0].type, chunks);\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get length() {\n    return this._length;\n  }\n\n  get chunks() {\n    return this._chunks;\n  }\n\n  get typeId() {\n    return this._type.typeId;\n  }\n\n  get VectorName() {\n    return `Chunked<${this._type}>`;\n  }\n\n  get data() {\n    return this._chunks[0] ? this._chunks[0].data : null;\n  }\n\n  get ArrayType() {\n    return this._type.ArrayType;\n  }\n\n  get numChildren() {\n    return this._numChildren;\n  }\n\n  get stride() {\n    return this._chunks[0] ? this._chunks[0].stride : 1;\n  }\n\n  get byteLength() {\n    return this._chunks.reduce((byteLength, chunk) => byteLength + chunk.byteLength, 0);\n  }\n\n  get nullCount() {\n    let nullCount = this._nullCount;\n\n    if (nullCount < 0) {\n      this._nullCount = nullCount = this._chunks.reduce((x, {\n        nullCount\n      }) => x + nullCount, 0);\n    }\n\n    return nullCount;\n  }\n\n  get indices() {\n    if (DataType.isDictionary(this._type)) {\n      if (!this._indices) {\n        const chunks = this._chunks;\n        this._indices = chunks.length === 1 ? chunks[0].indices : Chunked.concat(...chunks.map(x => x.indices));\n      }\n\n      return this._indices;\n    }\n\n    return null;\n  }\n\n  get dictionary() {\n    if (DataType.isDictionary(this._type)) {\n      return this._chunks[this._chunks.length - 1].data.dictionary;\n    }\n\n    return null;\n  }\n\n  *[Symbol.iterator]() {\n    for (const chunk of this._chunks) {\n      yield* chunk;\n    }\n  }\n\n  clone(chunks = this._chunks) {\n    return new Chunked(this._type, chunks);\n  }\n\n  concat(...others) {\n    return this.clone(Chunked.flatten(this, ...others));\n  }\n\n  slice(begin, end) {\n    return clampRange(this, begin, end, this._sliceInternal);\n  }\n\n  getChildAt(index) {\n    if (index < 0 || index >= this._numChildren) {\n      return null;\n    }\n\n    let columns = this._children || (this._children = []);\n    let child, field, chunks;\n\n    if (child = columns[index]) {\n      return child;\n    }\n\n    if (field = (this._type.children || [])[index]) {\n      chunks = this._chunks.map(vector => vector.getChildAt(index)).filter(vec => vec != null);\n\n      if (chunks.length > 0) {\n        return columns[index] = new Chunked(field.type, chunks);\n      }\n    }\n\n    return null;\n  }\n\n  search(index, then) {\n    let idx = index; // binary search to find the child vector and value indices\n\n    let offsets = this._chunkOffsets,\n        rhs = offsets.length - 1; // return early if out of bounds, or if there's just one child\n\n    if (idx < 0) {\n      return null;\n    }\n\n    if (idx >= offsets[rhs]) {\n      return null;\n    }\n\n    if (rhs <= 1) {\n      return then ? then(this, 0, idx) : [0, idx];\n    }\n\n    let lhs = 0,\n        pos = 0,\n        mid = 0;\n\n    do {\n      if (lhs + 1 === rhs) {\n        return then ? then(this, lhs, idx - pos) : [lhs, idx - pos];\n      }\n\n      mid = lhs + (rhs - lhs) / 2 | 0;\n      idx >= offsets[mid] ? lhs = mid : rhs = mid;\n    } while (idx < offsets[rhs] && idx >= (pos = offsets[lhs]));\n\n    return null;\n  }\n\n  isValid(index) {\n    return !!this.search(index, this.isValidInternal);\n  }\n\n  get(index) {\n    return this.search(index, this.getInternal);\n  }\n\n  set(index, value) {\n    this.search(index, ({\n      chunks\n    }, i, j) => chunks[i].set(j, value));\n  }\n\n  indexOf(element, offset) {\n    if (offset && typeof offset === 'number') {\n      return this.search(offset, (self, i, j) => this.indexOfInternal(self, i, j, element));\n    }\n\n    return this.indexOfInternal(this, 0, Math.max(0, offset || 0), element);\n  }\n\n  toArray() {\n    const {\n      chunks\n    } = this;\n    const n = chunks.length;\n    let ArrayType = this._type.ArrayType;\n\n    if (n <= 0) {\n      return new ArrayType(0);\n    }\n\n    if (n <= 1) {\n      return chunks[0].toArray();\n    }\n\n    let len = 0,\n        src = new Array(n);\n\n    for (let i = -1; ++i < n;) {\n      len += (src[i] = chunks[i].toArray()).length;\n    }\n\n    if (ArrayType !== src[0].constructor) {\n      ArrayType = src[0].constructor;\n    }\n\n    let dst = new ArrayType(len);\n    let set = ArrayType === Array ? arraySet : typedSet;\n\n    for (let i = -1, idx = 0; ++i < n;) {\n      idx = set(src[i], dst, idx);\n    }\n\n    return dst;\n  }\n\n  getInternal({\n    _chunks\n  }, i, j) {\n    return _chunks[i].get(j);\n  }\n\n  isValidInternal({\n    _chunks\n  }, i, j) {\n    return _chunks[i].isValid(j);\n  }\n\n  indexOfInternal({\n    _chunks\n  }, chunkIndex, fromIndex, element) {\n    let i = chunkIndex - 1,\n        n = _chunks.length;\n    let start = fromIndex,\n        offset = 0,\n        found = -1;\n\n    while (++i < n) {\n      if (~(found = _chunks[i].indexOf(element, start))) {\n        return offset + found;\n      }\n\n      start = 0;\n      offset += _chunks[i].length;\n    }\n\n    return -1;\n  }\n\n  _sliceInternal(self, begin, end) {\n    const slices = [];\n    const {\n      chunks,\n      _chunkOffsets: chunkOffsets\n    } = self;\n\n    for (let i = -1, n = chunks.length; ++i < n;) {\n      const chunk = chunks[i];\n      const chunkLength = chunk.length;\n      const chunkOffset = chunkOffsets[i]; // If the child is to the right of the slice boundary, we can stop\n\n      if (chunkOffset >= end) {\n        break;\n      } // If the child is to the left of of the slice boundary, exclude\n\n\n      if (begin >= chunkOffset + chunkLength) {\n        continue;\n      } // If the child is between both left and right boundaries, include w/o slicing\n\n\n      if (chunkOffset >= begin && chunkOffset + chunkLength <= end) {\n        slices.push(chunk);\n        continue;\n      } // If the child overlaps one of the slice boundaries, include that slice\n\n\n      const from = Math.max(0, begin - chunkOffset);\n      const to = Math.min(end - chunkOffset, chunkLength);\n      slices.push(chunk.slice(from, to));\n    }\n\n    return self.clone(slices);\n  }\n\n}\n/** @ignore */\n\nfunction calculateOffsets(vectors) {\n  let offsets = new Uint32Array((vectors || []).length + 1);\n  let offset = offsets[0] = 0,\n      length = offsets.length;\n\n  for (let index = 0; ++index < length;) {\n    offsets[index] = offset += vectors[index - 1].length;\n  }\n\n  return offsets;\n}\n/** @ignore */\n\n\nconst typedSet = (src, dst, offset) => {\n  dst.set(src, offset);\n  return offset + src.length;\n};\n/** @ignore */\n\n\nconst arraySet = (src, dst, offset) => {\n  let idx = offset;\n\n  for (let i = -1, n = src.length; ++i < n;) {\n    dst[idx++] = src[i];\n  }\n\n  return idx;\n};","map":{"version":3,"sources":["vector/chunked.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { clampRange } from '../util/vector';\nimport { DataType, Dictionary } from '../type';\nimport { selectChunkArgs } from '../util/args';\nimport { DictionaryVector } from './dictionary';\nimport { AbstractVector, Vector } from '../vector';\nimport { Clonable, Sliceable, Applicative } from '../vector';\n\n/** @ignore */\ntype ChunkedDict<T extends DataType> = T extends Dictionary ? Vector<T['dictionary']> : null | never;\n/** @ignore */\ntype ChunkedKeys<T extends DataType> = T extends Dictionary ? Vector<T['indices']> | Chunked<T['indices']> : null | never;\n\n/** @ignore */\nexport type SearchContinuation<T extends Chunked> = (column: T, chunkIndex: number, valueIndex: number) => any;\n\n/** @ignore */\nexport class Chunked<T extends DataType = any>\n    extends AbstractVector<T>\n    implements Clonable<Chunked<T>>,\n               Sliceable<Chunked<T>>,\n               Applicative<T, Chunked<T>> {\n\n    /** @nocollapse */\n    public static flatten<T extends DataType>(...vectors: (Vector<T> | Vector<T>[])[]) {\n        return selectChunkArgs<Vector<T>>(Vector, vectors);\n    }\n\n    /** @nocollapse */\n    public static concat<T extends DataType>(...vectors: (Vector<T> | Vector<T>[])[]) {\n        const chunks = Chunked.flatten<T>(...vectors);\n        return new Chunked<T>(chunks[0].type, chunks);\n    }\n\n    protected _type: T;\n    protected _length: number;\n    protected _chunks: Vector<T>[];\n    protected _numChildren: number;\n    protected _children?: Chunked[];\n    protected _nullCount: number = -1;\n    protected _chunkOffsets: Uint32Array;\n\n    constructor(type: T, chunks: Vector<T>[] = [], offsets = calculateOffsets(chunks)) {\n        super();\n        this._type = type;\n        this._chunks = chunks;\n        this._chunkOffsets = offsets;\n        this._length = offsets[offsets.length - 1];\n        this._numChildren = (this._type.children || []).length;\n    }\n\n    public get type() { return this._type; }\n    public get length() { return this._length; }\n    public get chunks() { return this._chunks; }\n    public get typeId(): T['TType'] { return this._type.typeId; }\n    public get VectorName() { return `Chunked<${this._type}>`; }\n    public get data(): Data<T> {\n        return this._chunks[0] ? this._chunks[0].data : <any> null;\n    }\n\n    public get ArrayType() { return this._type.ArrayType; }\n    public get numChildren() { return this._numChildren; }\n    public get stride() { return this._chunks[0] ? this._chunks[0].stride : 1; }\n    public get byteLength(): number {\n        return this._chunks.reduce((byteLength, chunk) => byteLength + chunk.byteLength, 0);\n    }\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        if (nullCount < 0) {\n            this._nullCount = nullCount = this._chunks.reduce((x, { nullCount }) => x + nullCount, 0);\n        }\n        return nullCount;\n    }\n\n    protected _indices?: ChunkedKeys<T>;\n    public get indices(): ChunkedKeys<T> | null {\n        if (DataType.isDictionary(this._type)) {\n            if (!this._indices) {\n                const chunks = (<any> this._chunks) as DictionaryVector<T, any>[];\n                this._indices = (chunks.length === 1\n                    ? chunks[0].indices\n                    : Chunked.concat(...chunks.map((x) => x.indices))) as ChunkedKeys<T>;\n            }\n            return this._indices;\n        }\n        return null;\n    }\n    public get dictionary(): ChunkedDict<T> | null {\n        if (DataType.isDictionary(this._type)) {\n            return this._chunks[this._chunks.length - 1].data.dictionary as ChunkedDict<T>;\n        }\n        return null;\n    }\n\n    public *[Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        for (const chunk of this._chunks) {\n            yield* chunk;\n        }\n    }\n\n    public clone(chunks = this._chunks): Chunked<T> {\n        return new Chunked(this._type, chunks);\n    }\n\n    public concat(...others: Vector<T>[]): Chunked<T> {\n        return this.clone(Chunked.flatten(this, ...others));\n    }\n\n    public slice(begin?: number, end?: number): Chunked<T> {\n        return clampRange(this, begin, end, this._sliceInternal);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Chunked<R> | null {\n\n        if (index < 0 || index >= this._numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let child: Chunked<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (child = columns[index]) { return child; }\n        if (field = ((this._type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Chunked<R>(field.type, chunks));\n            }\n        }\n\n        return null;\n    }\n\n    public search(index: number): [number, number] | null;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N): ReturnType<N>;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N) {\n        let idx = index;\n        // binary search to find the child vector and value indices\n        let offsets = this._chunkOffsets, rhs = offsets.length - 1;\n        // return early if out of bounds, or if there's just one child\n        if (idx < 0            ) { return null; }\n        if (idx >= offsets[rhs]) { return null; }\n        if (rhs <= 1           ) { return then ? then(this, 0, idx) : [0, idx]; }\n        let lhs = 0, pos = 0, mid = 0;\n        do {\n            if (lhs + 1 === rhs) {\n                return then ? then(this, lhs, idx - pos) : [lhs, idx - pos];\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            idx >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        } while (idx < offsets[rhs] && idx >= (pos = offsets[lhs]));\n        return null;\n    }\n\n    public isValid(index: number): boolean {\n        return !!this.search(index, this.isValidInternal);\n    }\n\n    public get(index: number): T['TValue'] | null {\n        return this.search(index, this.getInternal);\n    }\n\n    public set(index: number, value: T['TValue'] | null): void {\n        this.search(index, ({ chunks }, i, j) => chunks[i].set(j, value));\n    }\n\n    public indexOf(element: T['TValue'], offset?: number): number {\n        if (offset && typeof offset === 'number') {\n            return this.search(offset, (self, i, j) => this.indexOfInternal(self, i, j, element))!;\n        }\n        return this.indexOfInternal(this, 0, Math.max(0, offset || 0), element);\n    }\n\n    public toArray(): T['TArray'] {\n        const { chunks } = this;\n        const n = chunks.length;\n        let ArrayType: any = this._type.ArrayType;\n        if (n <= 0) { return new ArrayType(0); }\n        if (n <= 1) { return chunks[0].toArray(); }\n        let len = 0, src = new Array(n);\n        for (let i = -1; ++i < n;) {\n            len += (src[i] = chunks[i].toArray()).length;\n        }\n        if (ArrayType !== src[0].constructor) {\n            ArrayType = src[0].constructor;\n        }\n        let dst = new ArrayType(len);\n        let set: any = ArrayType === Array ? arraySet : typedSet;\n        for (let i = -1, idx = 0; ++i < n;) {\n            idx = set(src[i], dst, idx);\n        }\n        return dst;\n    }\n\n    protected getInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].get(j); }\n    protected isValidInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].isValid(j); }\n    protected indexOfInternal({ _chunks }: Chunked<T>, chunkIndex: number, fromIndex: number, element: T['TValue']) {\n        let i = chunkIndex - 1, n = _chunks.length;\n        let start = fromIndex, offset = 0, found = -1;\n        while (++i < n) {\n            if (~(found = _chunks[i].indexOf(element, start))) {\n                return offset + found;\n            }\n            start = 0;\n            offset += _chunks[i].length;\n        }\n        return -1;\n    }\n\n    protected _sliceInternal(self: Chunked<T>, begin: number, end: number) {\n        const slices: Vector<T>[] = [];\n        const { chunks, _chunkOffsets: chunkOffsets } = self;\n        for (let i = -1, n = chunks.length; ++i < n;) {\n            const chunk = chunks[i];\n            const chunkLength = chunk.length;\n            const chunkOffset = chunkOffsets[i];\n            // If the child is to the right of the slice boundary, we can stop\n            if (chunkOffset >= end) { break; }\n            // If the child is to the left of of the slice boundary, exclude\n            if (begin >= chunkOffset + chunkLength) { continue; }\n            // If the child is between both left and right boundaries, include w/o slicing\n            if (chunkOffset >= begin && (chunkOffset + chunkLength) <= end) {\n                slices.push(chunk);\n                continue;\n            }\n            // If the child overlaps one of the slice boundaries, include that slice\n            const from = Math.max(0, begin - chunkOffset);\n            const to = Math.min(end - chunkOffset, chunkLength);\n            slices.push(chunk.slice(from, to) as Vector<T>);\n        }\n        return self.clone(slices);\n    }\n}\n\n/** @ignore */\nfunction calculateOffsets<T extends DataType>(vectors: Vector<T>[]) {\n    let offsets = new Uint32Array((vectors || []).length + 1);\n    let offset = offsets[0] = 0, length = offsets.length;\n    for (let index = 0; ++index < length;) {\n        offsets[index] = (offset += vectors[index - 1].length);\n    }\n    return offsets;\n}\n\n/** @ignore */\nconst typedSet = (src: TypedArray, dst: TypedArray, offset: number) => {\n    dst.set(src, offset);\n    return (offset + src.length);\n};\n\n/** @ignore */\nconst arraySet = (src: any[], dst: any[], offset: number) => {\n    let idx = offset;\n    for (let i = -1, n = src.length; ++i < n;) {\n        dst[idx++] = src[i];\n    }\n    return idx;\n};\n\n/** @ignore */\ninterface TypedArray extends ArrayBufferView {\n    readonly length: number;\n    readonly [n: number]: number;\n    set(array: ArrayLike<number>, offset?: number): void;\n}\n"]},"metadata":{},"sourceType":"module"}