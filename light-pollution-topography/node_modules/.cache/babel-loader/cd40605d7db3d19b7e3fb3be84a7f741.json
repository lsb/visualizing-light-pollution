{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { AsyncByteStream } from '../../io/stream';\n/** @ignore */\n\nexport function recordBatchWriterThroughDOMStream(writableStrategy, readableStrategy) {\n  const writer = new this(writableStrategy);\n  const reader = new AsyncByteStream(writer);\n  const readable = new ReadableStream({\n    type: 'bytes',\n\n    async cancel() {\n      await reader.cancel();\n    },\n\n    async pull(controller) {\n      await next(controller);\n    },\n\n    async start(controller) {\n      await next(controller);\n    }\n\n  }, {\n    'highWaterMark': 2 ** 14,\n    ...readableStrategy\n  });\n  return {\n    writable: new WritableStream(writer, writableStrategy),\n    readable\n  };\n\n  async function next(controller) {\n    let buf = null;\n    let size = controller.desiredSize;\n\n    while (buf = await reader.read(size || null)) {\n      controller.enqueue(buf);\n\n      if (size != null && (size -= buf.byteLength) <= 0) {\n        return;\n      }\n    }\n\n    controller.close();\n  }\n}","map":{"version":3,"sources":["io/whatwg/writer.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA,SAAS,eAAT,QAAgC,iBAAhC;AAGA;;AACA,OAAM,SAAU,iCAAV,CAEF,gBAFE,EAGF,gBAHE,EAGuD;AAGzD,QAAM,MAAM,GAAG,IAAI,IAAJ,CAAY,gBAAZ,CAAf;AACA,QAAM,MAAM,GAAG,IAAI,eAAJ,CAAoB,MAApB,CAAf;AACA,QAAM,QAAQ,GAAG,IAAI,cAAJ,CAAmB;AAChC,IAAA,IAAI,EAAE,OAD0B;;AAEhC,UAAM,MAAN,GAAY;AAAK,YAAM,MAAM,CAAC,MAAP,EAAN;AAAwB,KAFT;;AAGhC,UAAM,IAAN,CAAW,UAAX,EAAqB;AAAI,YAAM,IAAI,CAAC,UAAD,CAAV;AAAyB,KAHlB;;AAIhC,UAAM,KAAN,CAAY,UAAZ,EAAsB;AAAI,YAAM,IAAI,CAAC,UAAD,CAAV;AAAyB;;AAJnB,GAAnB,EAKd;AAAE,qBAAiB,KAAK,EAAxB;AAA4B,OAAG;AAA/B,GALc,CAAjB;AAOA,SAAO;AAAE,IAAA,QAAQ,EAAE,IAAI,cAAJ,CAAmB,MAAnB,EAA2B,gBAA3B,CAAZ;AAA0D,IAAA;AAA1D,GAAP;;AAEA,iBAAe,IAAf,CAAoB,UAApB,EAA2E;AACvE,QAAI,GAAG,GAAsB,IAA7B;AACA,QAAI,IAAI,GAAG,UAAU,CAAC,WAAtB;;AACA,WAAO,GAAG,GAAG,MAAM,MAAM,CAAC,IAAP,CAAY,IAAI,IAAI,IAApB,CAAnB,EAA8C;AAC1C,MAAA,UAAU,CAAC,OAAX,CAAmB,GAAnB;;AACA,UAAI,IAAI,IAAI,IAAR,IAAgB,CAAC,IAAI,IAAI,GAAG,CAAC,UAAb,KAA4B,CAAhD,EAAmD;AAAE;AAAS;AACjE;;AACD,IAAA,UAAU,CAAC,KAAX;AACH;AACJ","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { RecordBatch } from '../../recordbatch';\nimport { AsyncByteStream } from '../../io/stream';\nimport { RecordBatchWriter } from '../../ipc/writer';\n\n/** @ignore */\nexport function recordBatchWriterThroughDOMStream<T extends { [key: string]: DataType } = any>(\n    this: typeof RecordBatchWriter,\n    writableStrategy?: QueuingStrategy<RecordBatch<T>> & { autoDestroy: boolean },\n    readableStrategy?: { highWaterMark?: number, size?: any }\n) {\n\n    const writer = new this<T>(writableStrategy);\n    const reader = new AsyncByteStream(writer);\n    const readable = new ReadableStream({\n        type: 'bytes',\n        async cancel() { await reader.cancel(); },\n        async pull(controller) { await next(controller); },\n        async start(controller) { await next(controller); },\n    }, { 'highWaterMark': 2 ** 14, ...readableStrategy });\n\n    return { writable: new WritableStream(writer, writableStrategy), readable };\n\n    async function next(controller: ReadableStreamDefaultController<Uint8Array>) {\n        let buf: Uint8Array | null = null;\n        let size = controller.desiredSize;\n        while (buf = await reader.read(size || null)) {\n            controller.enqueue(buf);\n            if (size != null && (size -= buf.byteLength) <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}