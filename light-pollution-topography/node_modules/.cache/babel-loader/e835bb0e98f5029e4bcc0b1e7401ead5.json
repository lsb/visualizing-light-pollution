{"ast":null,"code":"import { assert } from '@loaders.gl/loader-utils';\nvar workerURLCache = new Map();\nexport function getWorkerURL(workerSource) {\n  var workerName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Worker';\n  assert(typeof workerSource === 'string', 'worker source');\n\n  if (workerSource.startsWith('url(') && workerSource.endsWith(')')) {\n    var workerUrl = workerSource.match(/^url\\((.*)\\)$/)[1];\n\n    if (workerUrl && !workerUrl.startsWith('http')) {\n      return workerUrl;\n    }\n\n    workerSource = buildScript(workerUrl);\n  }\n\n  var workerURL = workerURLCache.get(workerSource);\n\n  if (!workerURL) {\n    var blob = new Blob([workerSource], {\n      type: 'application/javascript'\n    });\n    workerURL = URL.createObjectURL(blob);\n    workerURLCache.set(workerSource, workerURL);\n  }\n\n  return workerURL;\n}\n\nfunction buildScript(workerUrl) {\n  return \"try {\\n  importScripts('\".concat(workerUrl, \"');\\n} catch (error) {\\n  console.error(error);\\n}\");\n}","map":{"version":3,"sources":["../../../src/worker-utils/get-worker-url.js"],"names":["workerURLCache","workerName","assert","workerSource","workerUrl","buildScript","workerURL","blob","type","URL"],"mappings":"AACA,SAAA,MAAA,QAAA,0BAAA;AAEA,IAAMA,cAAc,GAAG,IAAvB,GAAuB,EAAvB;AAIA,OAAO,SAAA,YAAA,CAAA,YAAA,EAA2D;AAAA,MAAvBC,UAAuB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAV,QAAU;AAChEC,EAAAA,MAAM,CAAC,OAAA,YAAA,KAAD,QAAA,EAANA,eAAM,CAANA;;AAKA,MAAIC,YAAY,CAAZA,UAAAA,CAAAA,MAAAA,KAAmCA,YAAY,CAAZA,QAAAA,CAAvC,GAAuCA,CAAvC,EAAmE;AACjE,QAAMC,SAAS,GAAGD,YAAY,CAAZA,KAAAA,CAAAA,eAAAA,EAAlB,CAAkBA,CAAlB;;AAGA,QAAIC,SAAS,IAAI,CAACA,SAAS,CAATA,UAAAA,CAAlB,MAAkBA,CAAlB,EAAgD;AAC9C,aAAA,SAAA;AACD;;AAKDD,IAAAA,YAAY,GAAGE,WAAW,CAA1BF,SAA0B,CAA1BA;AACD;;AAED,MAAIG,SAAS,GAAGN,cAAc,CAAdA,GAAAA,CAAhB,YAAgBA,CAAhB;;AAEA,MAAI,CAAJ,SAAA,EAAgB;AAGd,QAAMO,IAAI,GAAG,IAAA,IAAA,CAAS,CAAT,YAAS,CAAT,EAAyB;AAACC,MAAAA,IAAI,EAAE;AAAP,KAAzB,CAAb;AACAF,IAAAA,SAAS,GAAGG,GAAG,CAAHA,eAAAA,CAAZH,IAAYG,CAAZH;AACAN,IAAAA,cAAc,CAAdA,GAAAA,CAAAA,YAAAA,EAAAA,SAAAA;AACD;;AAED,SAAA,SAAA;AACD;;AAGD,SAAA,WAAA,CAAA,SAAA,EAAgC;AAC9B,SAAA,2BAAA,MAAA,CAAA,SAAA,EAAA,oDAAA,CAAA;AAMD","sourcesContent":["/* global URL, Blob */\nimport {assert} from '@loaders.gl/loader-utils';\n\nconst workerURLCache = new Map();\n\n// Creates a URL from worker source that can be used to create `Worker` instances\n// Packages (and then caches) the result of `webworkify` as an \"Object URL\"\nexport function getWorkerURL(workerSource, workerName = 'Worker') {\n  assert(typeof workerSource === 'string', 'worker source');\n\n  // CASE: url(./worker.js)\n  // This pattern is used to differentiate worker urls from worker source code\n  // Load from url is needed for testing, when using Webpack & webworker target\n  if (workerSource.startsWith('url(') && workerSource.endsWith(')')) {\n    const workerUrl = workerSource.match(/^url\\((.*)\\)$/)[1];\n\n    // A local script url, we can use it to initialize a Worker directly\n    if (workerUrl && !workerUrl.startsWith('http')) {\n      return workerUrl;\n    }\n\n    // Per spec, worker cannot be initialized with a script from a different origin\n    // However a local worker script can still import scripts from other origins,\n    // so we simply build a wrapper script\n    workerSource = buildScript(workerUrl);\n  }\n\n  let workerURL = workerURLCache.get(workerSource);\n\n  if (!workerURL) {\n    // NOTE: webworkify was previously used\n    // const blob = webworkify(workerSource, {bare: true});\n    const blob = new Blob([workerSource], {type: 'application/javascript'});\n    workerURL = URL.createObjectURL(blob);\n    workerURLCache.set(workerSource, workerURL);\n  }\n\n  return workerURL;\n}\n\n// Only use trusted sources!\nfunction buildScript(workerUrl) {\n  return `\\\ntry {\n  importScripts('${workerUrl}');\n} catch (error) {\n  console.error(error);\n}`;\n}\n"]},"metadata":{},"sourceType":"module"}