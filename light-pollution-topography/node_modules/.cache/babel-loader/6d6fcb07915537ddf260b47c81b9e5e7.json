{"ast":null,"code":"import _regeneratorRuntime from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _createSuper from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _inherits from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Table } from '../table';\nimport { IntVector } from '../vector/int';\nimport { Field, Schema } from '../schema';\nimport { Col } from './predicate';\nimport { RecordBatch } from '../recordbatch';\nimport { DataType } from '../type';\n\nTable.prototype.countBy = function (name) {\n  return new DataFrame(this.chunks).countBy(name);\n};\n\nTable.prototype.scan = function (next, bind) {\n  return new DataFrame(this.chunks).scan(next, bind);\n};\n\nTable.prototype.scanReverse = function (next, bind) {\n  return new DataFrame(this.chunks).scanReverse(next, bind);\n};\n\nTable.prototype.filter = function (predicate) {\n  return new DataFrame(this.chunks).filter(predicate);\n};\n\nexport var DataFrame = /*#__PURE__*/function (_Table) {\n  _inherits(DataFrame, _Table);\n\n  var _super = _createSuper(DataFrame);\n\n  function DataFrame() {\n    _classCallCheck(this, DataFrame);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DataFrame, [{\n    key: \"filter\",\n    value: function filter(predicate) {\n      return new FilteredDataFrame(this.chunks, predicate);\n    }\n  }, {\n    key: \"scan\",\n    value: function scan(next, bind) {\n      var batches = this.chunks,\n          numBatches = batches.length;\n\n      for (var batchIndex = -1; ++batchIndex < numBatches;) {\n        // load batches\n        var batch = batches[batchIndex];\n\n        if (bind) {\n          bind(batch);\n        } // yield all indices\n\n\n        for (var index = -1, numRows = batch.length; ++index < numRows;) {\n          next(index, batch);\n        }\n      }\n    }\n  }, {\n    key: \"scanReverse\",\n    value: function scanReverse(next, bind) {\n      var batches = this.chunks,\n          numBatches = batches.length;\n\n      for (var batchIndex = numBatches; --batchIndex >= 0;) {\n        // load batches\n        var batch = batches[batchIndex];\n\n        if (bind) {\n          bind(batch);\n        } // yield all indices\n\n\n        for (var index = batch.length; --index >= 0;) {\n          next(index, batch);\n        }\n      }\n    }\n  }, {\n    key: \"countBy\",\n    value: function countBy(name) {\n      var batches = this.chunks,\n          numBatches = batches.length;\n      var count_by = typeof name === 'string' ? new Col(name) : name; // Assume that all dictionary batches are deltas, which means that the\n      // last record batch has the most complete dictionary\n\n      count_by.bind(batches[numBatches - 1]);\n      var vector = count_by.vector;\n\n      if (!DataType.isDictionary(vector.type)) {\n        throw new Error('countBy currently only supports dictionary-encoded columns');\n      }\n\n      var countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n      var CountsArrayType = countByteLength == 4 ? Uint32Array : countByteLength >= 2 ? Uint16Array : Uint8Array;\n      var counts = new CountsArrayType(vector.dictionary.length);\n\n      for (var batchIndex = -1; ++batchIndex < numBatches;) {\n        // load batches\n        var batch = batches[batchIndex]; // rebind the countBy Col\n\n        count_by.bind(batch);\n        var keys = count_by.vector.indices; // yield all indices\n\n        for (var index = -1, numRows = batch.length; ++index < numRows;) {\n          var key = keys.get(index);\n\n          if (key !== null) {\n            counts[key]++;\n          }\n        }\n      }\n\n      return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n  }]);\n\n  return DataFrame;\n}(Table);\n/** @ignore */\n\nexport var CountByResult = /*#__PURE__*/function (_Table2) {\n  _inherits(CountByResult, _Table2);\n\n  var _super2 = _createSuper(CountByResult);\n\n  function CountByResult(values, counts) {\n    _classCallCheck(this, CountByResult);\n\n    var schema = new Schema([new Field('values', values.type), new Field('counts', counts.type)]);\n    return _super2.call(this, new RecordBatch(schema, counts.length, [values, counts]));\n  }\n\n  _createClass(CountByResult, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      var values = this.getColumnAt(0);\n      var counts = this.getColumnAt(1);\n      var result = {};\n\n      for (var i = -1; ++i < this.length;) {\n        result[values.get(i)] = counts.get(i);\n      }\n\n      return result;\n    }\n  }]);\n\n  return CountByResult;\n}(Table);\n/** @ignore */\n\nexport var FilteredDataFrame = /*#__PURE__*/function (_DataFrame) {\n  _inherits(FilteredDataFrame, _DataFrame);\n\n  var _super3 = _createSuper(FilteredDataFrame);\n\n  function FilteredDataFrame(batches, predicate) {\n    var _this;\n\n    _classCallCheck(this, FilteredDataFrame);\n\n    _this = _super3.call(this, batches);\n    _this._predicate = predicate;\n    return _this;\n  }\n\n  _createClass(FilteredDataFrame, [{\n    key: \"scan\",\n    value: function scan(next, bind) {\n      // inlined version of this:\n      // this.parent.scan((idx, columns) => {\n      //     if (this.predicate(idx, columns)) next(idx, columns);\n      // });\n      var batches = this._chunks;\n      var numBatches = batches.length;\n\n      for (var batchIndex = -1; ++batchIndex < numBatches;) {\n        // load batches\n        var batch = batches[batchIndex];\n\n        var predicate = this._predicate.bind(batch);\n\n        var isBound = false; // yield all indices\n\n        for (var index = -1, numRows = batch.length; ++index < numRows;) {\n          if (predicate(index, batch)) {\n            // bind batches lazily - if predicate doesn't match anything\n            // in the batch we don't need to call bind on the batch\n            if (bind && !isBound) {\n              bind(batch);\n              isBound = true;\n            }\n\n            next(index, batch);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"scanReverse\",\n    value: function scanReverse(next, bind) {\n      var batches = this._chunks;\n      var numBatches = batches.length;\n\n      for (var batchIndex = numBatches; --batchIndex >= 0;) {\n        // load batches\n        var batch = batches[batchIndex];\n\n        var predicate = this._predicate.bind(batch);\n\n        var isBound = false; // yield all indices\n\n        for (var index = batch.length; --index >= 0;) {\n          if (predicate(index, batch)) {\n            // bind batches lazily - if predicate doesn't match anything\n            // in the batch we don't need to call bind on the batch\n            if (bind && !isBound) {\n              bind(batch);\n              isBound = true;\n            }\n\n            next(index, batch);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"count\",\n    value: function count() {\n      // inlined version of this:\n      // let sum = 0;\n      // this.parent.scan((idx, columns) => {\n      //     if (this.predicate(idx, columns)) ++sum;\n      // });\n      // return sum;\n      var sum = 0;\n      var batches = this._chunks;\n      var numBatches = batches.length;\n\n      for (var batchIndex = -1; ++batchIndex < numBatches;) {\n        // load batches\n        var batch = batches[batchIndex];\n\n        var predicate = this._predicate.bind(batch); // yield all indices\n\n\n        for (var index = -1, numRows = batch.length; ++index < numRows;) {\n          if (predicate(index, batch)) {\n            ++sum;\n          }\n        }\n      }\n\n      return sum;\n    }\n  }, {\n    key: Symbol.iterator,\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function value() {\n      var batches, numBatches, batchIndex, batch, predicate, index, numRows;\n      return _regeneratorRuntime.wrap(function value$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // inlined version of this:\n              // this.parent.scan((idx, columns) => {\n              //     if (this.predicate(idx, columns)) next(idx, columns);\n              // });\n              batches = this._chunks;\n              numBatches = batches.length;\n              batchIndex = -1;\n\n            case 3:\n              if (!(++batchIndex < numBatches)) {\n                _context.next = 15;\n                break;\n              }\n\n              // load batches\n              batch = batches[batchIndex]; // TODO: bind batches lazily\n              // If predicate doesn't match anything in the batch we don't need\n              // to bind the callback\n\n              predicate = this._predicate.bind(batch); // yield all indices\n\n              index = -1, numRows = batch.length;\n\n            case 7:\n              if (!(++index < numRows)) {\n                _context.next = 13;\n                break;\n              }\n\n              if (!predicate(index, batch)) {\n                _context.next = 11;\n                break;\n              }\n\n              _context.next = 11;\n              return batch.get(index);\n\n            case 11:\n              _context.next = 7;\n              break;\n\n            case 13:\n              _context.next = 3;\n              break;\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, value, this);\n    })\n  }, {\n    key: \"filter\",\n    value: function filter(predicate) {\n      return new FilteredDataFrame(this._chunks, this._predicate.and(predicate));\n    }\n  }, {\n    key: \"countBy\",\n    value: function countBy(name) {\n      var batches = this._chunks,\n          numBatches = batches.length;\n      var count_by = typeof name === 'string' ? new Col(name) : name; // Assume that all dictionary batches are deltas, which means that the\n      // last record batch has the most complete dictionary\n\n      count_by.bind(batches[numBatches - 1]);\n      var vector = count_by.vector;\n\n      if (!DataType.isDictionary(vector.type)) {\n        throw new Error('countBy currently only supports dictionary-encoded columns');\n      }\n\n      var countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n      var CountsArrayType = countByteLength == 4 ? Uint32Array : countByteLength >= 2 ? Uint16Array : Uint8Array;\n      var counts = new CountsArrayType(vector.dictionary.length);\n\n      for (var batchIndex = -1; ++batchIndex < numBatches;) {\n        // load batches\n        var batch = batches[batchIndex];\n\n        var predicate = this._predicate.bind(batch); // rebind the countBy Col\n\n\n        count_by.bind(batch);\n        var keys = count_by.vector.indices; // yield all indices\n\n        for (var index = -1, numRows = batch.length; ++index < numRows;) {\n          var key = keys.get(index);\n\n          if (key !== null && predicate(index, batch)) {\n            counts[key]++;\n          }\n        }\n      }\n\n      return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n  }]);\n\n  return FilteredDataFrame;\n}(DataFrame);","map":{"version":3,"sources":["compute/dataframe.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table';\nimport { Vector } from '../vector';\nimport { IntVector } from '../vector/int';\nimport { Field, Schema } from '../schema';\nimport { Predicate, Col } from './predicate';\nimport { RecordBatch } from '../recordbatch';\nimport { VectorType as V } from '../interfaces';\nimport { DataType, Int, Struct, Dictionary } from '../type';\n\n/** @ignore */\nexport type BindFunc = (batch: RecordBatch) => void;\n/** @ignore */\nexport type NextFunc = (idx: number, batch: RecordBatch) => void;\n\nTable.prototype.countBy = function(this: Table, name: Col | string) { return new DataFrame(this.chunks).countBy(name); };\nTable.prototype.scan = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scan(next, bind); };\nTable.prototype.scanReverse = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scanReverse(next, bind); };\nTable.prototype.filter = function(this: Table, predicate: Predicate): FilteredDataFrame { return new DataFrame(this.chunks).filter(predicate); };\n\nexport class DataFrame<T extends { [key: string]: DataType } = any> extends Table<T> {\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(this.chunks, predicate);\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        const batches = this.chunks, numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                next(index, batch);\n            }\n        }\n    }\n    public scanReverse(next: NextFunc, bind?: BindFunc) {\n        const batches = this.chunks, numBatches = batches.length;\n        for (let batchIndex = numBatches; --batchIndex >= 0;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = batch.length; --index >= 0;) {\n                next(index, batch);\n            }\n        }\n    }\n    public countBy(name: Col | string) {\n        const batches = this.chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n\n/** @ignore */\nexport class CountByResult<T extends DataType = any, TCount extends Int = Int> extends Table<{ values: T,  counts: TCount }> {\n    constructor(values: Vector<T>, counts: V<TCount>) {\n        type R = { values: T, counts: TCount };\n        const schema = new Schema<R>([\n            new Field('values', values.type),\n            new Field('counts', counts.type)\n        ]);\n        super(new RecordBatch<R>(schema, counts.length, [values, counts]));\n    }\n    public toJSON(): Object {\n        const values = this.getColumnAt(0)!;\n        const counts = this.getColumnAt(1)!;\n        const result = {} as { [k: string]: number | null };\n        for (let i = -1; ++i < this.length;) {\n            result[values.get(i)] = counts.get(i);\n        }\n        return result;\n    }\n}\n\n/** @ignore */\nexport class FilteredDataFrame<T extends { [key: string]: DataType } = any> extends DataFrame<T> {\n    private _predicate: Predicate;\n    constructor (batches: RecordBatch<T>[], predicate: Predicate) {\n        super(batches);\n        this._predicate = predicate;\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            let isBound = false;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) {\n                    // bind batches lazily - if predicate doesn't match anything\n                    // in the batch we don't need to call bind on the batch\n                    if (bind && !isBound) {\n                        bind(batch);\n                        isBound = true;\n                    }\n                    next(index, batch);\n                }\n            }\n        }\n    }\n    public scanReverse(next: NextFunc, bind?: BindFunc) {\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = numBatches; --batchIndex >= 0;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            let isBound = false;\n            // yield all indices\n            for (let index = batch.length; --index >= 0;) {\n                if (predicate(index, batch)) {\n                    // bind batches lazily - if predicate doesn't match anything\n                    // in the batch we don't need to call bind on the batch\n                    if (bind && !isBound) {\n                        bind(batch);\n                        isBound = true;\n                    }\n                    next(index, batch);\n                }\n            }\n        }\n    }\n    public count(): number {\n        // inlined version of this:\n        // let sum = 0;\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) ++sum;\n        // });\n        // return sum;\n        let sum = 0;\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { ++sum; }\n            }\n        }\n        return sum;\n    }\n    public *[Symbol.iterator](): IterableIterator<Struct<T>['TValue']> {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { yield batch.get(index) as any; }\n            }\n        }\n    }\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(\n            this._chunks,\n            this._predicate.and(predicate)\n        );\n    }\n    public countBy(name: Col | string) {\n        const batches = this._chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null && predicate(index, batch)) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}