{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport parseImage from '../parsers/parse-image';\nimport { getImageUrls } from './load-image';\nimport { deepLoad } from './deep-load';\nexport function loadImageArray(_x, _x2) {\n  return _loadImageArray.apply(this, arguments);\n}\n\nfunction _loadImageArray() {\n  _loadImageArray = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(count, getUrl) {\n    var options,\n        imageUrls,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n            _context.next = 3;\n            return getImageArrayUrls(count, getUrl, options);\n\n          case 3:\n            imageUrls = _context.sent;\n            _context.next = 6;\n            return deepLoad(imageUrls, parseImage, options);\n\n          case 6:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _loadImageArray.apply(this, arguments);\n}\n\nexport function getImageArrayUrls(_x3, _x4) {\n  return _getImageArrayUrls.apply(this, arguments);\n}\n\nfunction _getImageArrayUrls() {\n  _getImageArrayUrls = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(count, getUrl) {\n    var options,\n        promises,\n        index,\n        promise,\n        _args2 = arguments;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            options = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};\n            promises = [];\n\n            for (index = 0; index < count; index++) {\n              promise = getImageUrls(getUrl, options, {\n                index: index\n              });\n              promises.push(promise);\n            }\n\n            _context2.next = 5;\n            return Promise.all(promises);\n\n          case 5:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getImageArrayUrls.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../src/lib/texture-loading-api/load-image-array.js"],"names":["options","imageUrls","getImageArrayUrls","deepLoad","promises","index","promise","getImageUrls","Promise"],"mappings":";;AAAA,OAAA,UAAA,MAAA,wBAAA;AACA,SAAA,YAAA,QAAA,cAAA;AACA,SAAA,QAAA,QAAA,aAAA;AAEA,OAAA,SAAA,cAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,SAAA,eAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;;+DAAO,SAAA,OAAA,CAAA,KAAA,EAAA,MAAA,EAAA;AAAA,QAAA,OAAA;AAAA,QAAA,SAAA;AAAA,QAAA,KAAA,GAAA,SAAA;AAAA,WAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,aAAA,CAAA,EAAA;AAAA,gBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,eAAA,CAAA;AAA6CA,YAAAA,OAA7C,GAAA,KAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,KAAA,CAAA,CAAA,CAAA,GAAA,EAA6CA;AAA7C,YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA,mBACmBE,iBAAiB,CAAA,KAAA,EAAA,MAAA,EADpC,OACoC,CADpC;;AAAA,eAAA,CAAA;AACCD,YAAAA,SADD,GAAA,QAAA,CAAA,IACCA;AADD,YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA,mBAEQE,QAAQ,CAAA,SAAA,EAAA,UAAA,EAFhB,OAEgB,CAFhB;;AAAA,eAAA,CAAA;AAAA,mBAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAAA,QAAA,CAAA,IAAA,CAAA;;AAAA,eAAA,CAAA;AAAA,eAAA,KAAA;AAAA,mBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,KAAA,EAAA,OAAA,CAAA;;;;;AAKP,OAAA,SAAA,iBAAA,CAAA,GAAA,EAAA,GAAA,EAAA;AAAA,SAAA,kBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;;kEAAO,SAAA,QAAA,CAAA,KAAA,EAAA,MAAA,EAAA;AAAA,QAAA,OAAA;AAAA,QAAA,QAAA;AAAA,QAAA,KAAA;AAAA,QAAA,OAAA;AAAA,QAAA,MAAA,GAAA,SAAA;AAAA,WAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,aAAA,CAAA,EAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,eAAA,CAAA;AAAgDH,YAAAA,OAAhD,GAAA,MAAA,CAAA,MAAA,GAAA,CAAA,IAAA,MAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,MAAA,CAAA,CAAA,CAAA,GAAA,EAAgDA;AAC/CI,YAAAA,QADD,GAAA,EACCA;;AACN,iBAASC,KAAT,GAAA,CAAA,EAAoBA,KAAK,GAAzB,KAAA,EAAmCA,KAAnC,EAAA,EAA4C;AACpCC,cAAAA,OADoC,GAC1BC,YAAY,CAAA,MAAA,EAAA,OAAA,EAAkB;AAACF,gBAAAA,KAAK,EAALA;AAAD,eAAlB,CAAtBC;AACNF,cAAAA,QAAQ,CAARA,IAAAA,CAAAA,OAAAA;AACD;;AALI,YAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,mBAMQI,OAAO,CAAPA,GAAAA,CANR,QAMQA,CANR;;AAAA,eAAA,CAAA;AAAA,mBAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA,SAAA,CAAA,IAAA,CAAA;;AAAA,eAAA,CAAA;AAAA,eAAA,KAAA;AAAA,mBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,KAAA,EAAA,QAAA,CAAA","sourcesContent":["import parseImage from '../parsers/parse-image';\nimport {getImageUrls} from './load-image';\nimport {deepLoad} from './deep-load';\n\nexport async function loadImageArray(count, getUrl, options = {}) {\n  const imageUrls = await getImageArrayUrls(count, getUrl, options);\n  return await deepLoad(imageUrls, parseImage, options);\n}\n\nexport async function getImageArrayUrls(count, getUrl, options = {}) {\n  const promises = [];\n  for (let index = 0; index < count; index++) {\n    const promise = getImageUrls(getUrl, options, {index});\n    promises.push(promise);\n  }\n  return await Promise.all(promises);\n}\n"]},"metadata":{},"sourceType":"module"}