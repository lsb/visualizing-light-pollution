{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport Viewport from './viewport';\nimport { pixelsToWorld, getViewMatrix, addMetersToLngLat as _addMetersToLngLat, getProjectionParameters, fitBounds as _fitBounds } from '@math.gl/web-mercator';\nimport * as vec2 from 'gl-matrix/vec2';\nimport { Matrix4 } from 'math.gl';\n\nvar WebMercatorViewport = function (_Viewport) {\n  _inherits(WebMercatorViewport, _Viewport);\n\n  function WebMercatorViewport() {\n    var _this;\n\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, WebMercatorViewport);\n\n    var _opts$latitude = opts.latitude,\n        latitude = _opts$latitude === void 0 ? 0 : _opts$latitude,\n        _opts$longitude = opts.longitude,\n        longitude = _opts$longitude === void 0 ? 0 : _opts$longitude,\n        _opts$zoom = opts.zoom,\n        zoom = _opts$zoom === void 0 ? 11 : _opts$zoom,\n        _opts$pitch = opts.pitch,\n        pitch = _opts$pitch === void 0 ? 0 : _opts$pitch,\n        _opts$bearing = opts.bearing,\n        bearing = _opts$bearing === void 0 ? 0 : _opts$bearing,\n        _opts$nearZMultiplier = opts.nearZMultiplier,\n        nearZMultiplier = _opts$nearZMultiplier === void 0 ? 0.1 : _opts$nearZMultiplier,\n        _opts$farZMultiplier = opts.farZMultiplier,\n        farZMultiplier = _opts$farZMultiplier === void 0 ? 1.01 : _opts$farZMultiplier,\n        _opts$orthographic = opts.orthographic,\n        orthographic = _opts$orthographic === void 0 ? false : _opts$orthographic,\n        _opts$repeat = opts.repeat,\n        repeat = _opts$repeat === void 0 ? false : _opts$repeat,\n        _opts$worldOffset = opts.worldOffset,\n        worldOffset = _opts$worldOffset === void 0 ? 0 : _opts$worldOffset;\n    var width = opts.width,\n        height = opts.height,\n        _opts$altitude = opts.altitude,\n        altitude = _opts$altitude === void 0 ? 1.5 : _opts$altitude;\n    var scale = Math.pow(2, zoom);\n    width = width || 1;\n    height = height || 1;\n    altitude = Math.max(0.75, altitude);\n\n    var _getProjectionParamet = getProjectionParameters({\n      width: width,\n      height: height,\n      pitch: pitch,\n      altitude: altitude,\n      nearZMultiplier: nearZMultiplier,\n      farZMultiplier: farZMultiplier\n    }),\n        fov = _getProjectionParamet.fov,\n        aspect = _getProjectionParamet.aspect,\n        focalDistance = _getProjectionParamet.focalDistance,\n        near = _getProjectionParamet.near,\n        far = _getProjectionParamet.far;\n\n    var viewMatrixUncentered = getViewMatrix({\n      height: height,\n      pitch: pitch,\n      bearing: bearing,\n      scale: scale,\n      altitude: altitude\n    });\n\n    if (worldOffset) {\n      var viewOffset = new Matrix4().translate([512 * worldOffset, 0, 0]);\n      viewMatrixUncentered = viewOffset.multiplyLeft(viewMatrixUncentered);\n    }\n\n    var viewportOpts = Object.assign({}, opts, {\n      width: width,\n      height: height,\n      viewMatrix: viewMatrixUncentered,\n      longitude: longitude,\n      latitude: latitude,\n      zoom: zoom,\n      orthographic: orthographic,\n      fovyRadians: fov,\n      aspect: aspect,\n      focalDistance: orthographic ? focalDistance : 1,\n      near: near,\n      far: far\n    });\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WebMercatorViewport).call(this, viewportOpts));\n    _this.latitude = latitude;\n    _this.longitude = longitude;\n    _this.zoom = zoom;\n    _this.pitch = pitch;\n    _this.bearing = bearing;\n    _this.altitude = altitude;\n    _this.orthographic = orthographic;\n    _this._subViewports = repeat ? [] : null;\n    Object.freeze(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(WebMercatorViewport, [{\n    key: \"addMetersToLngLat\",\n    value: function addMetersToLngLat(lngLatZ, xyz) {\n      return _addMetersToLngLat(lngLatZ, xyz);\n    }\n  }, {\n    key: \"getMapCenterByLngLatPosition\",\n    value: function getMapCenterByLngLatPosition(_ref) {\n      var lngLat = _ref.lngLat,\n          pos = _ref.pos;\n      var fromLocation = pixelsToWorld(pos, this.pixelUnprojectionMatrix);\n      var toLocation = this.projectFlat(lngLat);\n      var translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n      var newCenter = vec2.add([], this.center, translate);\n      return this.unprojectFlat(newCenter);\n    }\n  }, {\n    key: \"fitBounds\",\n    value: function fitBounds(bounds) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var width = this.width,\n          height = this.height;\n\n      var _fitBounds2 = _fitBounds(Object.assign({\n        width: width,\n        height: height,\n        bounds: bounds\n      }, options)),\n          longitude = _fitBounds2.longitude,\n          latitude = _fitBounds2.latitude,\n          zoom = _fitBounds2.zoom;\n\n      return new WebMercatorViewport({\n        width: width,\n        height: height,\n        longitude: longitude,\n        latitude: latitude,\n        zoom: zoom\n      });\n    }\n  }, {\n    key: \"subViewports\",\n    get: function get() {\n      if (this._subViewports && !this._subViewports.length) {\n        var topLeft = this.unproject([0, 0]);\n        var topRight = this.unproject([this.width, 0]);\n        var bottomLeft = this.unproject([0, this.height]);\n        var bottomRight = this.unproject([this.width, this.height]);\n        var minLon = Math.min(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]);\n        var maxLon = Math.max(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]);\n        var minOffset = Math.floor((minLon + 180) / 360);\n        var maxOffset = Math.ceil((maxLon - 180) / 360);\n\n        for (var x = minOffset; x <= maxOffset; x++) {\n          var offsetViewport = x ? new WebMercatorViewport(_objectSpread({}, this, {\n            worldOffset: x\n          })) : this;\n\n          this._subViewports.push(offsetViewport);\n        }\n      }\n\n      return this._subViewports;\n    }\n  }]);\n\n  return WebMercatorViewport;\n}(Viewport);\n\nexport { WebMercatorViewport as default };\nWebMercatorViewport.displayName = 'WebMercatorViewport';","map":{"version":3,"sources":["../../../src/viewports/web-mercator-viewport.js"],"names":["addMetersToLngLat","fitBounds","WebMercatorViewport","Viewport","opts","latitude","longitude","zoom","pitch","bearing","nearZMultiplier","farZMultiplier","orthographic","repeat","worldOffset","width","height","altitude","scale","Math","fov","aspect","focalDistance","near","far","getProjectionParameters","viewMatrixUncentered","getViewMatrix","viewOffset","viewportOpts","viewMatrix","fovyRadians","Object","topLeft","topRight","bottomLeft","bottomRight","minLon","maxLon","minOffset","maxOffset","x","offsetViewport","lngLatZ","xyz","lngLat","pos","fromLocation","pixelsToWorld","toLocation","translate","vec2","newCenter","bounds","options"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAA,QAAA,MAAA,YAAA;AAEA,SAAA,aAAA,EAAA,aAAA,EAGEA,iBAAiB,IAHnB,kBAAA,EAAA,uBAAA,EAKEC,SAAS,IALX,UAAA,QAAA,uBAAA;AASA,OAAO,KAAP,IAAA,MAAA,gBAAA;AACA,SAAA,OAAA,QAAA,SAAA;;IAEqBC,mB;;;AAQnB,WAAA,mBAAA,GAAuB;AAAA,QAAA,KAAA;;AAAA,QAAXE,IAAW,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,mBAAA,CAAA;;AAAA,QAAA,cAAA,GAajBA,IAbiB,CAAA,QAAA;AAAA,QAEnBC,QAFmB,GAAA,cAAA,KAAA,KAAA,CAAA,GAAA,CAAA,GAAA,cAAA;AAAA,QAAA,eAAA,GAajBD,IAbiB,CAAA,SAAA;AAAA,QAGnBE,SAHmB,GAAA,eAAA,KAAA,KAAA,CAAA,GAAA,CAAA,GAAA,eAAA;AAAA,QAAA,UAAA,GAajBF,IAbiB,CAAA,IAAA;AAAA,QAInBG,IAJmB,GAAA,UAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,UAAA;AAAA,QAAA,WAAA,GAajBH,IAbiB,CAAA,KAAA;AAAA,QAKnBI,KALmB,GAAA,WAAA,KAAA,KAAA,CAAA,GAAA,CAAA,GAAA,WAAA;AAAA,QAAA,aAAA,GAajBJ,IAbiB,CAAA,OAAA;AAAA,QAMnBK,OANmB,GAAA,aAAA,KAAA,KAAA,CAAA,GAAA,CAAA,GAAA,aAAA;AAAA,QAAA,qBAAA,GAajBL,IAbiB,CAAA,eAAA;AAAA,QAOnBM,eAPmB,GAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,GAAA,GAAA,qBAAA;AAAA,QAAA,oBAAA,GAajBN,IAbiB,CAAA,cAAA;AAAA,QAQnBO,cARmB,GAAA,oBAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,oBAAA;AAAA,QAAA,kBAAA,GAajBP,IAbiB,CAAA,YAAA;AAAA,QASnBQ,YATmB,GAAA,kBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,GAAA,kBAAA;AAAA,QAAA,YAAA,GAajBR,IAbiB,CAAA,MAAA;AAAA,QAWnBS,MAXmB,GAAA,YAAA,KAAA,KAAA,CAAA,GAAA,KAAA,GAAA,YAAA;AAAA,QAAA,iBAAA,GAajBT,IAbiB,CAAA,WAAA;AAAA,QAYnBU,WAZmB,GAAA,iBAAA,KAAA,KAAA,CAAA,GAAA,CAAA,GAAA,iBAAA;AAAA,QAehBC,KAfgB,GAeiBX,IAfjB,CAAA,KAAA;AAAA,QAeTY,MAfS,GAeiBZ,IAfjB,CAAA,MAAA;AAAA,QAAA,cAAA,GAeiBA,IAfjB,CAAA,QAAA;AAAA,QAeDa,QAfC,GAAA,cAAA,KAAA,KAAA,CAAA,GAAA,GAAA,GAAA,cAAA;AAgBrB,QAAMC,KAAK,GAAGC,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAd,IAAcA,CAAd;AAGAJ,IAAAA,KAAK,GAAGA,KAAK,IAAbA,CAAAA;AACAC,IAAAA,MAAM,GAAGA,MAAM,IAAfA,CAAAA;AAIAC,IAAAA,QAAQ,GAAGE,IAAI,CAAJA,GAAAA,CAAAA,IAAAA,EAAXF,QAAWE,CAAXF;;AAxBqB,QAAA,qBAAA,GA0B2BQ,uBAAuB,CAAC;AACtEV,MAAAA,KAAK,EADiE,KAAA;AAEtEC,MAAAA,MAAM,EAFgE,MAAA;AAGtER,MAAAA,KAAK,EAHiE,KAAA;AAItES,MAAAA,QAAQ,EAJ8D,QAAA;AAKtEP,MAAAA,eAAe,EALuD,eAAA;AAMtEC,MAAAA,cAAc,EAAdA;AANsE,KAAD,CA1BlD;AAAA,QA0BdS,GA1Bc,GAAA,qBAAA,CAAA,GAAA;AAAA,QA0BTC,MA1BS,GAAA,qBAAA,CAAA,MAAA;AAAA,QA0BDC,aA1BC,GAAA,qBAAA,CAAA,aAAA;AAAA,QA0BcC,IA1Bd,GAAA,qBAAA,CAAA,IAAA;AAAA,QA0BoBC,GA1BpB,GAAA,qBAAA,CAAA,GAAA;;AAuCrB,QAAIE,oBAAoB,GAAGC,aAAa,CAAC;AACvCX,MAAAA,MAAM,EADiC,MAAA;AAEvCR,MAAAA,KAAK,EAFkC,KAAA;AAGvCC,MAAAA,OAAO,EAHgC,OAAA;AAIvCS,MAAAA,KAAK,EAJkC,KAAA;AAKvCD,MAAAA,QAAQ,EAARA;AALuC,KAAD,CAAxC;;AAQA,QAAA,WAAA,EAAiB;AACf,UAAMW,UAAU,GAAG,IAAA,OAAA,GAAA,SAAA,CAAwB,CAAC,MAAD,WAAA,EAAA,CAAA,EAA3C,CAA2C,CAAxB,CAAnB;AACAF,MAAAA,oBAAoB,GAAGE,UAAU,CAAVA,YAAAA,CAAvBF,oBAAuBE,CAAvBF;AACD;;AAED,QAAMG,YAAY,GAAG,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,IAAA,EAAwB;AAE3Cd,MAAAA,KAAK,EAFsC,KAAA;AAG3CC,MAAAA,MAAM,EAHqC,MAAA;AAM3Cc,MAAAA,UAAU,EANiC,oBAAA;AAO3CxB,MAAAA,SAAS,EAPkC,SAAA;AAQ3CD,MAAAA,QAAQ,EARmC,QAAA;AAS3CE,MAAAA,IAAI,EATuC,IAAA;AAY3CK,MAAAA,YAAY,EAZ+B,YAAA;AAa3CmB,MAAAA,WAAW,EAbgC,GAAA;AAc3CV,MAAAA,MAAM,EAdqC,MAAA;AAgB3CC,MAAAA,aAAa,EAAEV,YAAY,GAAA,aAAA,GAhBgB,CAAA;AAiB3CW,MAAAA,IAAI,EAjBuC,IAAA;AAkB3CC,MAAAA,GAAG,EAAHA;AAlB2C,KAAxB,CAArB;AAqBA,IAAA,KAAA,GAAA,0BAAA,CAAA,IAAA,EAAA,eAAA,CAAA,mBAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAA,YAAA,CAAA,CAAA;AAGA,IAAA,KAAA,CAAA,QAAA,GAAA,QAAA;AACA,IAAA,KAAA,CAAA,SAAA,GAAA,SAAA;AACA,IAAA,KAAA,CAAA,IAAA,GAAA,IAAA;AACA,IAAA,KAAA,CAAA,KAAA,GAAA,KAAA;AACA,IAAA,KAAA,CAAA,OAAA,GAAA,OAAA;AACA,IAAA,KAAA,CAAA,QAAA,GAAA,QAAA;AAEA,IAAA,KAAA,CAAA,YAAA,GAAA,YAAA;AAEA,IAAA,KAAA,CAAA,aAAA,GAAqBX,MAAM,GAAA,EAAA,GAA3B,IAAA;AAEAmB,IAAAA,MAAM,CAANA,MAAAA,CAAAA,sBAAAA,CAAAA,KAAAA,CAAAA;AAvFqB,WAAA,KAAA;AAwFtB;;;;sCAwCiBW,O,EAASC,G,EAAK;AAC9B,aAAO5C,kBAAiB,CAAA,OAAA,EAAxB,GAAwB,CAAxB;AACD;;;uDAY2C;AAAA,UAAd6C,MAAc,GAAA,IAAA,CAAdA,MAAc;AAAA,UAANC,GAAM,GAAA,IAAA,CAANA,GAAM;AAC1C,UAAMC,YAAY,GAAGC,aAAa,CAAA,GAAA,EAAM,KAAxC,uBAAkC,CAAlC;AACA,UAAMC,UAAU,GAAG,KAAA,WAAA,CAAnB,MAAmB,CAAnB;AAEA,UAAMC,SAAS,GAAGC,IAAI,CAAJA,GAAAA,CAAAA,EAAAA,EAAAA,UAAAA,EAAyBA,IAAI,CAAJA,MAAAA,CAAAA,EAAAA,EAA3C,YAA2CA,CAAzBA,CAAlB;AACA,UAAMC,SAAS,GAAGD,IAAI,CAAJA,GAAAA,CAAAA,EAAAA,EAAa,KAAbA,MAAAA,EAAlB,SAAkBA,CAAlB;AAEA,aAAO,KAAA,aAAA,CAAP,SAAO,CAAP;AACD;;;8BAWSE,M,EAAsB;AAAA,UAAdC,OAAc,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;AAAA,UACvBvC,KADuB,GAAA,KAAA,KAAA;AAAA,UAChBC,MADgB,GAAA,KAAA,MAAA;;AAAA,UAAA,WAAA,GAEMf,UAAS,CAAC,MAAM,CAAN,MAAA,CAAc;AAACc,QAAAA,KAAK,EAAN,KAAA;AAAQC,QAAAA,MAAM,EAAd,MAAA;AAAgBqC,QAAAA,MAAM,EAANA;AAAhB,OAAd,EAFhB,OAEgB,CAAD,CAFf;AAAA,UAEvB/C,SAFuB,GAAA,WAAA,CAAA,SAAA;AAAA,UAEZD,QAFY,GAAA,WAAA,CAAA,QAAA;AAAA,UAEFE,IAFE,GAAA,WAAA,CAAA,IAAA;;AAG9B,aAAO,IAAA,mBAAA,CAAwB;AAACQ,QAAAA,KAAK,EAAN,KAAA;AAAQC,QAAAA,MAAM,EAAd,MAAA;AAAgBV,QAAAA,SAAS,EAAzB,SAAA;AAA2BD,QAAAA,QAAQ,EAAnC,QAAA;AAAqCE,QAAAA,IAAI,EAAJA;AAArC,OAAxB,CAAP;AACD;;;wBA1EkB;AACjB,UAAI,KAAA,aAAA,IAAsB,CAAC,KAAA,aAAA,CAA3B,MAAA,EAAsD;AAEpD,YAAM0B,OAAO,GAAG,KAAA,SAAA,CAAe,CAAA,CAAA,EAA/B,CAA+B,CAAf,CAAhB;AACA,YAAMC,QAAQ,GAAG,KAAA,SAAA,CAAe,CAAC,KAAD,KAAA,EAAhC,CAAgC,CAAf,CAAjB;AACA,YAAMC,UAAU,GAAG,KAAA,SAAA,CAAe,CAAA,CAAA,EAAI,KAAtC,MAAkC,CAAf,CAAnB;AACA,YAAMC,WAAW,GAAG,KAAA,SAAA,CAAe,CAAC,KAAD,KAAA,EAAa,KAAhD,MAAmC,CAAf,CAApB;AAEA,YAAMC,MAAM,GAAGlB,IAAI,CAAJA,GAAAA,CAASc,OAAO,CAAhBd,CAAgB,CAAhBA,EAAqBe,QAAQ,CAA7Bf,CAA6B,CAA7BA,EAAkCgB,UAAU,CAA5ChB,CAA4C,CAA5CA,EAAiDiB,WAAW,CAA3E,CAA2E,CAA5DjB,CAAf;AACA,YAAMmB,MAAM,GAAGnB,IAAI,CAAJA,GAAAA,CAASc,OAAO,CAAhBd,CAAgB,CAAhBA,EAAqBe,QAAQ,CAA7Bf,CAA6B,CAA7BA,EAAkCgB,UAAU,CAA5ChB,CAA4C,CAA5CA,EAAiDiB,WAAW,CAA3E,CAA2E,CAA5DjB,CAAf;AAEA,YAAMoB,SAAS,GAAGpB,IAAI,CAAJA,KAAAA,CAAW,CAACkB,MAAM,GAAP,GAAA,IAA7B,GAAkBlB,CAAlB;AACA,YAAMqB,SAAS,GAAGrB,IAAI,CAAJA,IAAAA,CAAU,CAACmB,MAAM,GAAP,GAAA,IAA5B,GAAkBnB,CAAlB;;AAEA,aAAK,IAAIsB,CAAC,GAAV,SAAA,EAAwBA,CAAC,IAAzB,SAAA,EAAwCA,CAAxC,EAAA,EAA6C;AAC3C,cAAMC,cAAc,GAAGD,CAAC,GACpB,IAAA,mBAAA,CAAA,aAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEE3B,YAAAA,WAAW,EAAE2B;AAFf,WAAA,CAAA,CADoB,GAAxB,IAAA;;AAMA,eAAA,aAAA,CAAA,IAAA,CAAA,cAAA;AACD;AACF;;AACD,aAAO,KAAP,aAAA;AACD;;;;EA5H8CtC,Q;;SAA5BD,mB;AAgLrBA,mBAAmB,CAAnBA,WAAAA,GAAAA,qBAAAA","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// View and Projection Matrix calculations for mapbox-js style\n// map view properties\nimport Viewport from './viewport';\n\nimport {\n  pixelsToWorld,\n  getViewMatrix,\n  addMetersToLngLat,\n  getProjectionParameters,\n  fitBounds\n} from '@math.gl/web-mercator';\n\n// TODO - import from math.gl\nimport * as vec2 from 'gl-matrix/vec2';\nimport {Matrix4} from 'math.gl';\n\nexport default class WebMercatorViewport extends Viewport {\n  /**\n   * @classdesc\n   * Creates view/projection matrices from mercator params\n   * Note: The Viewport is immutable in the sense that it only has accessors.\n   * A new viewport instance should be created if any parameters have changed.\n   */\n  /* eslint-disable complexity, max-statements */\n  constructor(opts = {}) {\n    const {\n      latitude = 0,\n      longitude = 0,\n      zoom = 11,\n      pitch = 0,\n      bearing = 0,\n      nearZMultiplier = 0.1,\n      farZMultiplier = 1.01,\n      orthographic = false,\n\n      repeat = false,\n      worldOffset = 0\n    } = opts;\n\n    let {width, height, altitude = 1.5} = opts;\n    const scale = Math.pow(2, zoom);\n\n    // Silently allow apps to send in 0,0 to facilitate isomorphic render etc\n    width = width || 1;\n    height = height || 1;\n\n    // Altitude - prevent division by 0\n    // TODO - just throw an Error instead?\n    altitude = Math.max(0.75, altitude);\n\n    const {fov, aspect, focalDistance, near, far} = getProjectionParameters({\n      width,\n      height,\n      pitch,\n      altitude,\n      nearZMultiplier,\n      farZMultiplier\n    });\n\n    // The uncentered matrix allows us two move the center addition to the\n    // shader (cheap) which gives a coordinate system that has its center in\n    // the layer's center position. This makes rotations and other modelMatrx\n    // transforms much more useful.\n    let viewMatrixUncentered = getViewMatrix({\n      height,\n      pitch,\n      bearing,\n      scale,\n      altitude\n    });\n\n    if (worldOffset) {\n      const viewOffset = new Matrix4().translate([512 * worldOffset, 0, 0]);\n      viewMatrixUncentered = viewOffset.multiplyLeft(viewMatrixUncentered);\n    }\n\n    const viewportOpts = Object.assign({}, opts, {\n      // x, y,\n      width,\n      height,\n\n      // view matrix\n      viewMatrix: viewMatrixUncentered,\n      longitude,\n      latitude,\n      zoom,\n\n      // projection matrix parameters\n      orthographic,\n      fovyRadians: fov,\n      aspect,\n      // TODO Viewport is already carefully set up to \"focus\" on ground, so can't use focal distance\n      focalDistance: orthographic ? focalDistance : 1,\n      near,\n      far\n    });\n\n    super(viewportOpts);\n\n    // Save parameters\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.zoom = zoom;\n    this.pitch = pitch;\n    this.bearing = bearing;\n    this.altitude = altitude;\n\n    this.orthographic = orthographic;\n\n    this._subViewports = repeat ? [] : null;\n\n    Object.freeze(this);\n  }\n  /* eslint-enable complexity, max-statements */\n\n  get subViewports() {\n    if (this._subViewports && !this._subViewports.length) {\n      // Cache sub viewports so that we only calculate them once\n      const topLeft = this.unproject([0, 0]);\n      const topRight = this.unproject([this.width, 0]);\n      const bottomLeft = this.unproject([0, this.height]);\n      const bottomRight = this.unproject([this.width, this.height]);\n\n      const minLon = Math.min(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]);\n      const maxLon = Math.max(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]);\n\n      const minOffset = Math.floor((minLon + 180) / 360);\n      const maxOffset = Math.ceil((maxLon - 180) / 360);\n\n      for (let x = minOffset; x <= maxOffset; x++) {\n        const offsetViewport = x\n          ? new WebMercatorViewport({\n              ...this,\n              worldOffset: x\n            })\n          : this;\n        this._subViewports.push(offsetViewport);\n      }\n    }\n    return this._subViewports;\n  }\n\n  /**\n   * Add a meter delta to a base lnglat coordinate, returning a new lnglat array\n   *\n   * Note: Uses simple linear approximation around the viewport center\n   * Error increases with size of offset (roughly 1% per 100km)\n   *\n   * @param {[Number,Number]|[Number,Number,Number]) lngLatZ - base coordinate\n   * @param {[Number,Number]|[Number,Number,Number]) xyz - array of meter deltas\n   * @return {[Number,Number]|[Number,Number,Number]) array of [lng,lat,z] deltas\n   */\n  addMetersToLngLat(lngLatZ, xyz) {\n    return addMetersToLngLat(lngLatZ, xyz);\n  }\n\n  /**\n   * Get the map center that place a given [lng, lat] coordinate at screen\n   * point [x, y]\n   *\n   * @param {Array} lngLat - [lng,lat] coordinates\n   *   Specifies a point on the sphere.\n   * @param {Array} pos - [x,y] coordinates\n   *   Specifies a point on the screen.\n   * @return {Array} [lng,lat] new map center.\n   */\n  getMapCenterByLngLatPosition({lngLat, pos}) {\n    const fromLocation = pixelsToWorld(pos, this.pixelUnprojectionMatrix);\n    const toLocation = this.projectFlat(lngLat);\n\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n\n    return this.unprojectFlat(newCenter);\n  }\n\n  /**\n   * Returns a new viewport that fit around the given rectangle.\n   * Only supports non-perspective mode.\n   * @param {Array} bounds - [[lon, lat], [lon, lat]]\n   * @param {Number} [options.padding] - The amount of padding in pixels to add to the given bounds.\n   * @param {Array} [options.offset] - The center of the given bounds relative to the map's center,\n   *    [x, y] measured in pixels.\n   * @returns {WebMercatorViewport}\n   */\n  fitBounds(bounds, options = {}) {\n    const {width, height} = this;\n    const {longitude, latitude, zoom} = fitBounds(Object.assign({width, height, bounds}, options));\n    return new WebMercatorViewport({width, height, longitude, latitude, zoom});\n  }\n}\n\nWebMercatorViewport.displayName = 'WebMercatorViewport';\n"]},"metadata":{},"sourceType":"module"}