{"ast":null,"code":"import { ProgramManager } from '@luma.gl/core';\nimport { gouraudLighting, phongLighting } from '@luma.gl/core';\nimport geometry from './misc/geometry';\nimport project from './project/project';\nimport project32 from './project32/project32';\nimport shadow from './shadow/shadow';\nimport picking from './picking/picking';\nvar DEFAULT_MODULES = [geometry, project];\nvar SHADER_HOOKS = ['vs:DECKGL_FILTER_SIZE(inout vec3 size, VertexGeometry geometry)', 'vs:DECKGL_FILTER_GL_POSITION(inout vec4 position, VertexGeometry geometry)', 'vs:DECKGL_FILTER_COLOR(inout vec4 color, VertexGeometry geometry)', 'fs:DECKGL_FILTER_COLOR(inout vec4 color, FragmentGeometry geometry)'];\nexport function createProgramManager(gl) {\n  var programManager = ProgramManager.getDefaultProgramManager(gl);\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = DEFAULT_MODULES[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var shaderModule = _step.value;\n      programManager.addDefaultModule(shaderModule);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n        _iterator[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = SHADER_HOOKS[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var shaderHook = _step2.value;\n      programManager.addShaderHook(shaderHook);\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n        _iterator2[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  return programManager;\n}\nexport { picking, project, project32, gouraudLighting, phongLighting, shadow };","map":{"version":3,"sources":["../../../src/shaderlib/index.js"],"names":["DEFAULT_MODULES","SHADER_HOOKS","programManager","ProgramManager","shaderModule","shaderHook"],"mappings":"AAoBA,SAAA,cAAA,QAAA,eAAA;AACA,SAAA,eAAA,EAAA,aAAA,QAAA,eAAA;AACA,OAAA,QAAA,MAAA,iBAAA;AACA,OAAA,OAAA,MAAA,mBAAA;AACA,OAAA,SAAA,MAAA,uBAAA;AACA,OAAA,MAAA,MAAA,iBAAA;AACA,OAAA,OAAA,MAAA,mBAAA;AAEA,IAAMA,eAAe,GAAG,CAAA,QAAA,EAAxB,OAAwB,CAAxB;AAEA,IAAMC,YAAY,GAAG,CAAA,iEAAA,EAAA,4EAAA,EAAA,mEAAA,EAArB,qEAAqB,CAArB;AAOA,OAAO,SAAA,oBAAA,CAAA,EAAA,EAAkC;AACvC,MAAMC,cAAc,GAAGC,cAAc,CAAdA,wBAAAA,CAAvB,EAAuBA,CAAvB;AADuC,MAAA,yBAAA,GAAA,IAAA;AAAA,MAAA,iBAAA,GAAA,KAAA;AAAA,MAAA,cAAA,GAAA,SAAA;;AAAA,MAAA;AAGvC,SAAA,IAAA,SAAA,GAA2BH,eAA3B,CAAA,MAAA,CAAA,QAAA,CAA2BA,EAA3B,EAAA,KAAA,EAAA,EAAA,yBAAA,GAAA,CAAA,KAAA,GAAA,SAAA,CAAA,IAAA,EAAA,EAAA,IAAA,CAAA,EAAA,yBAAA,GAAA,IAAA,EAA4C;AAAA,UAAjCI,YAAiC,GAAA,KAAA,CAAA,KAAA;AAC1CF,MAAAA,cAAc,CAAdA,gBAAAA,CAAAA,YAAAA;AACD;AALsC,GAAA,CAAA,OAAA,GAAA,EAAA;AAAA,IAAA,iBAAA,GAAA,IAAA;AAAA,IAAA,cAAA,GAAA,GAAA;AAAA,GAAA,SAAA;AAAA,QAAA;AAAA,UAAA,CAAA,yBAAA,IAAA,SAAA,CAAA,QAAA,CAAA,IAAA,IAAA,EAAA;AAAA,QAAA,SAAA,CAAA,QAAA,CAAA;AAAA;AAAA,KAAA,SAAA;AAAA,UAAA,iBAAA,EAAA;AAAA,cAAA,cAAA;AAAA;AAAA;AAAA;;AAAA,MAAA,0BAAA,GAAA,IAAA;AAAA,MAAA,kBAAA,GAAA,KAAA;AAAA,MAAA,eAAA,GAAA,SAAA;;AAAA,MAAA;AAMvC,SAAA,IAAA,UAAA,GAAyBD,YAAzB,CAAA,MAAA,CAAA,QAAA,CAAyBA,EAAzB,EAAA,MAAA,EAAA,EAAA,0BAAA,GAAA,CAAA,MAAA,GAAA,UAAA,CAAA,IAAA,EAAA,EAAA,IAAA,CAAA,EAAA,0BAAA,GAAA,IAAA,EAAuC;AAAA,UAA5BI,UAA4B,GAAA,MAAA,CAAA,KAAA;AACrCH,MAAAA,cAAc,CAAdA,aAAAA,CAAAA,UAAAA;AACD;AARsC,GAAA,CAAA,OAAA,GAAA,EAAA;AAAA,IAAA,kBAAA,GAAA,IAAA;AAAA,IAAA,eAAA,GAAA,GAAA;AAAA,GAAA,SAAA;AAAA,QAAA;AAAA,UAAA,CAAA,0BAAA,IAAA,UAAA,CAAA,QAAA,CAAA,IAAA,IAAA,EAAA;AAAA,QAAA,UAAA,CAAA,QAAA,CAAA;AAAA;AAAA,KAAA,SAAA;AAAA,UAAA,kBAAA,EAAA;AAAA,cAAA,eAAA;AAAA;AAAA;AAAA;;AAUvC,SAAA,cAAA;AACD;AAED,SAAA,OAAA,EAAA,OAAA,EAAA,SAAA,EAAA,eAAA,EAAA,aAAA,EAAA,MAAA","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {ProgramManager} from '@luma.gl/core';\nimport {gouraudLighting, phongLighting} from '@luma.gl/core';\nimport geometry from './misc/geometry';\nimport project from './project/project';\nimport project32 from './project32/project32';\nimport shadow from './shadow/shadow';\nimport picking from './picking/picking';\n\nconst DEFAULT_MODULES = [geometry, project];\n\nconst SHADER_HOOKS = [\n  'vs:DECKGL_FILTER_SIZE(inout vec3 size, VertexGeometry geometry)',\n  'vs:DECKGL_FILTER_GL_POSITION(inout vec4 position, VertexGeometry geometry)',\n  'vs:DECKGL_FILTER_COLOR(inout vec4 color, VertexGeometry geometry)',\n  'fs:DECKGL_FILTER_COLOR(inout vec4 color, FragmentGeometry geometry)'\n];\n\nexport function createProgramManager(gl) {\n  const programManager = ProgramManager.getDefaultProgramManager(gl);\n\n  for (const shaderModule of DEFAULT_MODULES) {\n    programManager.addDefaultModule(shaderModule);\n  }\n  for (const shaderHook of SHADER_HOOKS) {\n    programManager.addShaderHook(shaderHook);\n  }\n\n  return programManager;\n}\n\nexport {picking, project, project32, gouraudLighting, phongLighting, shadow};\n"]},"metadata":{},"sourceType":"module"}