{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport TransitionInterpolator from './transition-interpolator';\nimport { lerp } from 'math.gl';\nimport { flyToViewport, getFlyToDuration } from '@math.gl/web-mercator';\nvar LINEARLY_INTERPOLATED_PROPS = ['bearing', 'pitch'];\nvar DEFAULT_OPTS = {\n  speed: 1.2,\n  curve: 1.414\n};\n\nvar FlyToInterpolator = function (_TransitionInterpolat) {\n  _inherits(FlyToInterpolator, _TransitionInterpolat);\n\n  function FlyToInterpolator() {\n    var _this;\n\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, FlyToInterpolator);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FlyToInterpolator).call(this, {\n      compare: ['longitude', 'latitude', 'zoom', 'bearing', 'pitch'],\n      extract: ['width', 'height', 'longitude', 'latitude', 'zoom', 'bearing', 'pitch'],\n      required: ['width', 'height', 'latitude', 'longitude', 'zoom']\n    }));\n    _this.props = Object.assign({}, DEFAULT_OPTS, props);\n    return _this;\n  }\n\n  _createClass(FlyToInterpolator, [{\n    key: \"interpolateProps\",\n    value: function interpolateProps(startProps, endProps, t) {\n      var viewport = flyToViewport(startProps, endProps, t, this.props);\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = LINEARLY_INTERPOLATED_PROPS[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var key = _step.value;\n          viewport[key] = lerp(startProps[key] || 0, endProps[key] || 0, t);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return viewport;\n    }\n  }, {\n    key: \"getDuration\",\n    value: function getDuration(startProps, endProps) {\n      var transitionDuration = endProps.transitionDuration;\n\n      if (transitionDuration === 'auto') {\n        transitionDuration = getFlyToDuration(startProps, endProps, this.props);\n      }\n\n      return transitionDuration;\n    }\n  }]);\n\n  return FlyToInterpolator;\n}(TransitionInterpolator);\n\nexport { FlyToInterpolator as default };","map":{"version":3,"sources":["../../../src/transitions/viewport-fly-to-interpolator.js"],"names":["LINEARLY_INTERPOLATED_PROPS","DEFAULT_OPTS","speed","curve","FlyToInterpolator","TransitionInterpolator","props","compare","extract","required","Object","startProps","endProps","t","viewport","flyToViewport","key","lerp","transitionDuration","getFlyToDuration"],"mappings":";;;;;AAAA,OAAA,sBAAA,MAAA,2BAAA;AACA,SAAA,IAAA,QAAA,SAAA;AAEA,SAAA,aAAA,EAAA,gBAAA,QAAA,uBAAA;AAEA,IAAMA,2BAA2B,GAAG,CAAA,SAAA,EAApC,OAAoC,CAApC;AACA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EADc,GAAA;AAEnBC,EAAAA,KAAK,EAAE;AAFY,CAArB;;IAaqBC,iB;;;AAQnB,WAAA,iBAAA,GAAwB;AAAA,QAAA,KAAA;;AAAA,QAAZE,KAAY,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,iBAAA,CAAA;;AACtB,IAAA,KAAA,GAAA,0BAAA,CAAA,IAAA,EAAA,eAAA,CAAA,iBAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAM;AACJC,MAAAA,OAAO,EAAE,CAAA,WAAA,EAAA,UAAA,EAAA,MAAA,EAAA,SAAA,EADL,OACK,CADL;AAEJC,MAAAA,OAAO,EAAE,CAAA,OAAA,EAAA,QAAA,EAAA,WAAA,EAAA,UAAA,EAAA,MAAA,EAAA,SAAA,EAFL,OAEK,CAFL;AAGJC,MAAAA,QAAQ,EAAE,CAAA,OAAA,EAAA,QAAA,EAAA,UAAA,EAAA,WAAA,EAAA,MAAA;AAHN,KAAN,CAAA,CAAA;AAKA,IAAA,KAAA,CAAA,KAAA,GAAaC,MAAM,CAANA,MAAAA,CAAAA,EAAAA,EAAAA,YAAAA,EAAb,KAAaA,CAAb;AANsB,WAAA,KAAA;AAOvB;;;;qCAEgBC,U,EAAYC,Q,EAAUC,C,EAAG;AACxC,UAAMC,QAAQ,GAAGC,aAAa,CAAA,UAAA,EAAA,QAAA,EAAA,CAAA,EAA0B,KAAxD,KAA8B,CAA9B;AADwC,UAAA,yBAAA,GAAA,IAAA;AAAA,UAAA,iBAAA,GAAA,KAAA;AAAA,UAAA,cAAA,GAAA,SAAA;;AAAA,UAAA;AAQxC,aAAA,IAAA,SAAA,GAAkBf,2BAAlB,CAAA,MAAA,CAAA,QAAA,CAAkBA,EAAlB,EAAA,KAAA,EAAA,EAAA,yBAAA,GAAA,CAAA,KAAA,GAAA,SAAA,CAAA,IAAA,EAAA,EAAA,IAAA,CAAA,EAAA,yBAAA,GAAA,IAAA,EAA+C;AAAA,cAApCgB,GAAoC,GAAA,KAAA,CAAA,KAAA;AAC7CF,UAAAA,QAAQ,CAARA,GAAQ,CAARA,GAAgBG,IAAI,CAACN,UAAU,CAAVA,GAAU,CAAVA,IAAD,CAAA,EAAuBC,QAAQ,CAARA,GAAQ,CAARA,IAAvB,CAAA,EAApBE,CAAoB,CAApBA;AACD;AAVuC,OAAA,CAAA,OAAA,GAAA,EAAA;AAAA,QAAA,iBAAA,GAAA,IAAA;AAAA,QAAA,cAAA,GAAA,GAAA;AAAA,OAAA,SAAA;AAAA,YAAA;AAAA,cAAA,CAAA,yBAAA,IAAA,SAAA,CAAA,QAAA,CAAA,IAAA,IAAA,EAAA;AAAA,YAAA,SAAA,CAAA,QAAA,CAAA;AAAA;AAAA,SAAA,SAAA;AAAA,cAAA,iBAAA,EAAA;AAAA,kBAAA,cAAA;AAAA;AAAA;AAAA;;AAYxC,aAAA,QAAA;AACD;;;gCAGWH,U,EAAYC,Q,EAAU;AAAA,UAC3BM,kBAD2B,GACLN,QADK,CAAA,kBAAA;;AAEhC,UAAIM,kBAAkB,KAAtB,MAAA,EAAmC;AAEjCA,QAAAA,kBAAkB,GAAGC,gBAAgB,CAAA,UAAA,EAAA,QAAA,EAAuB,KAA5DD,KAAqC,CAArCA;AACD;;AACD,aAAA,kBAAA;AACD;;;;EAxC4Cb,sB;;SAA1BD,iB","sourcesContent":["import TransitionInterpolator from './transition-interpolator';\nimport {lerp} from 'math.gl';\n\nimport {flyToViewport, getFlyToDuration} from '@math.gl/web-mercator';\n\nconst LINEARLY_INTERPOLATED_PROPS = ['bearing', 'pitch'];\nconst DEFAULT_OPTS = {\n  speed: 1.2,\n  curve: 1.414\n  // screenSpeed and maxDuration are used only if specified\n};\n\n/**\n * This class adapts mapbox-gl-js Map#flyTo animation so it can be used in\n * react/redux architecture.\n * mapbox-gl-js flyTo : https://www.mapbox.com/mapbox-gl-js/api/#map#flyto.\n * It implements “Smooth and efficient zooming and panning.” algorithm by\n * \"Jarke J. van Wijk and Wim A.A. Nuij\"\n */\nexport default class FlyToInterpolator extends TransitionInterpolator {\n  /**\n   * @param props {Object}\n    - `props.curve` (Number, optional, default: 1.414) - The zooming \"curve\" that will occur along the flight path.\n    - `props.speed` (Number, optional, default: 1.2) - The average speed of the animation defined in relation to `options.curve`, it linearly affects the duration, higher speed returns smaller durations and vice versa.\n    - `props.screenSpeed` (Number, optional) - The average speed of the animation measured in screenfuls per second. Similar to `opts.speed` it linearly affects the duration,  when specified `opts.speed` is ignored.\n    - `props.maxDuration` (Number, optional) - Maximum duration in milliseconds, if calculated duration exceeds this value, `0` is returned.\n   */\n  constructor(props = {}) {\n    super({\n      compare: ['longitude', 'latitude', 'zoom', 'bearing', 'pitch'],\n      extract: ['width', 'height', 'longitude', 'latitude', 'zoom', 'bearing', 'pitch'],\n      required: ['width', 'height', 'latitude', 'longitude', 'zoom']\n    });\n    this.props = Object.assign({}, DEFAULT_OPTS, props);\n  }\n\n  interpolateProps(startProps, endProps, t) {\n    const viewport = flyToViewport(startProps, endProps, t, this.props);\n\n    // Linearly interpolate 'bearing' and 'pitch'.\n    // If pitch/bearing are not supplied, they are interpreted as zeros in viewport calculation\n    // (fallback defined in WebMercatorViewport)\n    // Because there is no guarantee that the current controller's ViewState normalizes\n    // these props, safe guard is needed to avoid generating NaNs\n    for (const key of LINEARLY_INTERPOLATED_PROPS) {\n      viewport[key] = lerp(startProps[key] || 0, endProps[key] || 0, t);\n    }\n\n    return viewport;\n  }\n\n  // computes the transition duration\n  getDuration(startProps, endProps) {\n    let {transitionDuration} = endProps;\n    if (transitionDuration === 'auto') {\n      // auto calculate duration based on start and end props\n      transitionDuration = getFlyToDuration(startProps, endProps, this.props);\n    }\n    return transitionDuration;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}