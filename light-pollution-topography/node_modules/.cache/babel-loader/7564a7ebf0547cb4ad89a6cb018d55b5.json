{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { COORDINATE_SYSTEM } from './constants';\nimport AttributeManager from './attribute/attribute-manager';\nimport UniformTransitionManager from './uniform-transition-manager';\nimport { diffProps as _diffProps, validateProps as _validateProps } from '../lifecycle/props';\nimport { count } from '../utils/count';\nimport log from '../utils/log';\nimport debug from '../debug';\nimport { withParameters, setParameters } from '@luma.gl/core';\nimport assert from '../utils/assert';\nimport { mergeShaders } from '../utils/shader';\nimport { projectPosition as _projectPosition, getWorldPosition } from '../shaderlib/project/project-functions';\nimport typedArrayManager from '../utils/typed-array-manager';\nimport Component from '../lifecycle/component';\nimport LayerState from './layer-state';\nimport { worldToPixels } from '@math.gl/web-mercator';\nimport { load } from '@loaders.gl/core';\nvar TRACE_CHANGE_FLAG = 'layer.changeFlag';\nvar TRACE_INITIALIZE = 'layer.initialize';\nvar TRACE_UPDATE = 'layer.update';\nvar TRACE_FINALIZE = 'layer.finalize';\nvar TRACE_MATCHED = 'layer.matched';\nvar EMPTY_ARRAY = Object.freeze([]);\nvar pickingColorCache = new Uint8ClampedArray(0);\nvar defaultProps = {\n  data: {\n    type: 'data',\n    value: EMPTY_ARRAY,\n    async: true\n  },\n  dataComparator: null,\n  _dataDiff: {\n    type: 'function',\n    value: function value(data) {\n      return data && data.__diff;\n    },\n    compare: false,\n    optional: true\n  },\n  dataTransform: {\n    type: 'function',\n    value: null,\n    compare: false,\n    optional: true\n  },\n  onDataLoad: {\n    type: 'function',\n    value: null,\n    compare: false,\n    optional: true\n  },\n  fetch: {\n    type: 'function',\n    value: function value(url, _ref) {\n      var layer = _ref.layer;\n      return load(url, layer.getLoadOptions());\n    },\n    compare: false\n  },\n  updateTriggers: {},\n  visible: true,\n  pickable: false,\n  opacity: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1\n  },\n  onHover: {\n    type: 'function',\n    value: null,\n    compare: false,\n    optional: true\n  },\n  onClick: {\n    type: 'function',\n    value: null,\n    compare: false,\n    optional: true\n  },\n  onDragStart: {\n    type: 'function',\n    value: null,\n    compare: false,\n    optional: true\n  },\n  onDrag: {\n    type: 'function',\n    value: null,\n    compare: false,\n    optional: true\n  },\n  onDragEnd: {\n    type: 'function',\n    value: null,\n    compare: false,\n    optional: true\n  },\n  coordinateSystem: COORDINATE_SYSTEM.DEFAULT,\n  coordinateOrigin: {\n    type: 'array',\n    value: [0, 0, 0],\n    compare: true\n  },\n  modelMatrix: {\n    type: 'array',\n    value: null,\n    compare: true,\n    optional: true\n  },\n  wrapLongitude: false,\n  positionFormat: 'XYZ',\n  colorFormat: 'RGBA',\n  parameters: {},\n  uniforms: {},\n  extensions: [],\n  getPolygonOffset: {\n    type: 'function',\n    value: function value(_ref2) {\n      var layerIndex = _ref2.layerIndex;\n      return [0, -layerIndex * 100];\n    },\n    compare: false\n  },\n  highlightedObjectIndex: null,\n  autoHighlight: false,\n  highlightColor: {\n    type: 'color',\n    value: [0, 0, 128, 128]\n  }\n};\n\nvar Layer = function (_Component) {\n  _inherits(Layer, _Component);\n\n  function Layer() {\n    _classCallCheck(this, Layer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Layer).apply(this, arguments));\n  }\n\n  _createClass(Layer, [{\n    key: \"toString\",\n    value: function toString() {\n      var className = this.constructor.layerName || this.constructor.name;\n      return \"\".concat(className, \"({id: '\").concat(this.props.id, \"'})\");\n    }\n  }, {\n    key: \"setState\",\n    value: function setState(updateObject) {\n      this.setChangeFlags({\n        stateChanged: true\n      });\n      Object.assign(this.state, updateObject);\n      this.setNeedsRedraw();\n    }\n  }, {\n    key: \"setNeedsRedraw\",\n    value: function setNeedsRedraw() {\n      var redraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (this.internalState) {\n        this.internalState.needsRedraw = redraw;\n      }\n    }\n  }, {\n    key: \"setNeedsUpdate\",\n    value: function setNeedsUpdate() {\n      this.context.layerManager.setNeedsUpdate(String(this));\n      this.internalState.needsUpdate = true;\n    }\n  }, {\n    key: \"getNeedsRedraw\",\n    value: function getNeedsRedraw() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        clearRedrawFlags: false\n      };\n      return this._getNeedsRedraw(opts);\n    }\n  }, {\n    key: \"needsUpdate\",\n    value: function needsUpdate() {\n      return this.internalState.needsUpdate || this.hasUniformTransition() || this.shouldUpdateState(this._getUpdateParams());\n    }\n  }, {\n    key: \"hasUniformTransition\",\n    value: function hasUniformTransition() {\n      return this.internalState.uniformTransitions.active;\n    }\n  }, {\n    key: \"isPickable\",\n    value: function isPickable() {\n      return this.props.pickable && this.props.visible;\n    }\n  }, {\n    key: \"getModels\",\n    value: function getModels() {\n      return this.state && (this.state.models || (this.state.model ? [this.state.model] : []));\n    }\n  }, {\n    key: \"getAttributeManager\",\n    value: function getAttributeManager() {\n      return this.internalState && this.internalState.attributeManager;\n    }\n  }, {\n    key: \"getCurrentLayer\",\n    value: function getCurrentLayer() {\n      return this.internalState && this.internalState.layer;\n    }\n  }, {\n    key: \"getLoadOptions\",\n    value: function getLoadOptions() {\n      return this.props.loadOptions;\n    }\n  }, {\n    key: \"project\",\n    value: function project(xyz) {\n      var viewport = this.context.viewport;\n      var worldPosition = getWorldPosition(xyz, {\n        viewport: viewport,\n        modelMatrix: this.props.modelMatrix,\n        coordinateOrigin: this.props.coordinateOrigin,\n        coordinateSystem: this.props.coordinateSystem\n      });\n\n      var _worldToPixels = worldToPixels(worldPosition, viewport.pixelProjectionMatrix),\n          _worldToPixels2 = _slicedToArray(_worldToPixels, 3),\n          x = _worldToPixels2[0],\n          y = _worldToPixels2[1],\n          z = _worldToPixels2[2];\n\n      return xyz.length === 2 ? [x, y] : [x, y, z];\n    }\n  }, {\n    key: \"unproject\",\n    value: function unproject(xy) {\n      var viewport = this.context.viewport;\n      return viewport.unproject(xy);\n    }\n  }, {\n    key: \"projectPosition\",\n    value: function projectPosition(xyz) {\n      return _projectPosition(xyz, {\n        viewport: this.context.viewport,\n        modelMatrix: this.props.modelMatrix,\n        coordinateOrigin: this.props.coordinateOrigin,\n        coordinateSystem: this.props.coordinateSystem\n      });\n    }\n  }, {\n    key: \"use64bitPositions\",\n    value: function use64bitPositions() {\n      var coordinateSystem = this.props.coordinateSystem;\n      return coordinateSystem === COORDINATE_SYSTEM.DEFAULT || coordinateSystem === COORDINATE_SYSTEM.LNGLAT || coordinateSystem === COORDINATE_SYSTEM.CARTESIAN;\n    }\n  }, {\n    key: \"onHover\",\n    value: function onHover(info, pickingEvent) {\n      if (this.props.onHover) {\n        return this.props.onHover(info, pickingEvent);\n      }\n\n      return false;\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(info, pickingEvent) {\n      if (this.props.onClick) {\n        return this.props.onClick(info, pickingEvent);\n      }\n\n      return false;\n    }\n  }, {\n    key: \"nullPickingColor\",\n    value: function nullPickingColor() {\n      return [0, 0, 0];\n    }\n  }, {\n    key: \"encodePickingColor\",\n    value: function encodePickingColor(i) {\n      var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      target[0] = i + 1 & 255;\n      target[1] = i + 1 >> 8 & 255;\n      target[2] = i + 1 >> 8 >> 8 & 255;\n      return target;\n    }\n  }, {\n    key: \"decodePickingColor\",\n    value: function decodePickingColor(color) {\n      assert(color instanceof Uint8Array);\n\n      var _color = _slicedToArray(color, 3),\n          i1 = _color[0],\n          i2 = _color[1],\n          i3 = _color[2];\n\n      var index = i1 + i2 * 256 + i3 * 65536 - 1;\n      return index;\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      throw new Error(\"Layer \".concat(this, \" has not defined initializeState\"));\n    }\n  }, {\n    key: \"getShaders\",\n    value: function getShaders(shaders) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.props.extensions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var extension = _step.value;\n          shaders = mergeShaders(shaders, extension.getShaders.call(this, extension));\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return shaders;\n    }\n  }, {\n    key: \"shouldUpdateState\",\n    value: function shouldUpdateState(_ref3) {\n      var oldProps = _ref3.oldProps,\n          props = _ref3.props,\n          context = _ref3.context,\n          changeFlags = _ref3.changeFlags;\n      return changeFlags.propsOrDataChanged;\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref4) {\n      var oldProps = _ref4.oldProps,\n          props = _ref4.props,\n          context = _ref4.context,\n          changeFlags = _ref4.changeFlags;\n      var attributeManager = this.getAttributeManager();\n\n      if (changeFlags.dataChanged && attributeManager) {\n        var dataChanged = changeFlags.dataChanged;\n\n        if (Array.isArray(dataChanged)) {\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = dataChanged[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var dataRange = _step2.value;\n              attributeManager.invalidateAll(dataRange);\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n                _iterator2[\"return\"]();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n        } else {\n          attributeManager.invalidateAll();\n        }\n      }\n    }\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState() {\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = this.getModels()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var model = _step3.value;\n          model[\"delete\"]();\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3[\"return\"] != null) {\n            _iterator3[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      var attributeManager = this.getAttributeManager();\n\n      if (attributeManager) {\n        attributeManager.finalize();\n      }\n\n      this.internalState.uniformTransitions.clear();\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(opts) {\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = this.getModels()[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var model = _step4.value;\n          model.draw(opts);\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4[\"return\"] != null) {\n            _iterator4[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(_ref5) {\n      var info = _ref5.info,\n          mode = _ref5.mode;\n      var index = info.index;\n\n      if (index >= 0) {\n        if (Array.isArray(this.props.data)) {\n          info.object = this.props.data[index];\n        }\n      }\n\n      return info;\n    }\n  }, {\n    key: \"invalidateAttribute\",\n    value: function invalidateAttribute() {\n      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'all';\n      var diffReason = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var attributeManager = this.getAttributeManager();\n\n      if (!attributeManager) {\n        return;\n      }\n\n      if (name === 'all') {\n        attributeManager.invalidateAll();\n      } else {\n        attributeManager.invalidate(name);\n      }\n    }\n  }, {\n    key: \"updateAttributes\",\n    value: function updateAttributes(changedAttributes) {\n      var _iteratorNormalCompletion5 = true;\n      var _didIteratorError5 = false;\n      var _iteratorError5 = undefined;\n\n      try {\n        for (var _iterator5 = this.getModels()[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n          var model = _step5.value;\n\n          this._setModelAttributes(model, changedAttributes);\n        }\n      } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion5 && _iterator5[\"return\"] != null) {\n            _iterator5[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError5) {\n            throw _iteratorError5;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_updateAttributes\",\n    value: function _updateAttributes(props) {\n      var attributeManager = this.getAttributeManager();\n\n      if (!attributeManager) {\n        return;\n      }\n\n      var numInstances = this.getNumInstances(props);\n      var startIndices = this.getStartIndices(props);\n      attributeManager.update({\n        data: props.data,\n        numInstances: numInstances,\n        startIndices: startIndices,\n        props: props,\n        transitions: props.transitions,\n        buffers: props.data.attributes,\n        context: this,\n        ignoreUnknownAttributes: true\n      });\n      var changedAttributes = attributeManager.getChangedAttributes({\n        clearChangedFlags: true\n      });\n      this.updateAttributes(changedAttributes);\n    }\n  }, {\n    key: \"_updateAttributeTransition\",\n    value: function _updateAttributeTransition() {\n      var attributeManager = this.getAttributeManager();\n\n      if (attributeManager) {\n        attributeManager.updateTransition();\n      }\n    }\n  }, {\n    key: \"_updateUniformTransition\",\n    value: function _updateUniformTransition() {\n      var uniformTransitions = this.internalState.uniformTransitions;\n\n      if (uniformTransitions.active) {\n        var propsInTransition = uniformTransitions.update();\n        var props = Object.create(this.props);\n\n        for (var key in propsInTransition) {\n          Object.defineProperty(props, key, {\n            value: propsInTransition[key]\n          });\n        }\n\n        return props;\n      }\n\n      return this.props;\n    }\n  }, {\n    key: \"calculateInstancePickingColors\",\n    value: function calculateInstancePickingColors(attribute, _ref6) {\n      var numInstances = _ref6.numInstances;\n      var cacheSize = pickingColorCache.length / 3;\n\n      if (cacheSize < numInstances) {\n        pickingColorCache = typedArrayManager.allocate(pickingColorCache, numInstances, {\n          size: 3,\n          copy: true\n        });\n        var newCacheSize = pickingColorCache.length / 3;\n        var pickingColor = [];\n        assert(newCacheSize < 16777215, 'index out of picking color range');\n\n        for (var i = cacheSize; i < newCacheSize; i++) {\n          this.encodePickingColor(i, pickingColor);\n          pickingColorCache[i * 3 + 0] = pickingColor[0];\n          pickingColorCache[i * 3 + 1] = pickingColor[1];\n          pickingColorCache[i * 3 + 2] = pickingColor[2];\n        }\n      }\n\n      attribute.value = pickingColorCache.subarray(0, numInstances * 3);\n    }\n  }, {\n    key: \"_setModelAttributes\",\n    value: function _setModelAttributes(model, changedAttributes) {\n      var attributeManager = this.getAttributeManager();\n      var excludeAttributes = model.userData.excludeAttributes || {};\n      var shaderAttributes = attributeManager.getShaderAttributes(changedAttributes, excludeAttributes);\n      model.setAttributes(shaderAttributes);\n    }\n  }, {\n    key: \"clearPickingColor\",\n    value: function clearPickingColor(color) {\n      var _this$getAttributeMan = this.getAttributeManager().attributes,\n          pickingColors = _this$getAttributeMan.pickingColors,\n          instancePickingColors = _this$getAttributeMan.instancePickingColors;\n      var colors = pickingColors || instancePickingColors;\n      var i = this.decodePickingColor(color);\n      var start = colors.getVertexOffset(i);\n      var end = colors.getVertexOffset(i + 1);\n      colors.buffer.subData({\n        data: new Uint8Array(end - start),\n        offset: start\n      });\n    }\n  }, {\n    key: \"restorePickingColors\",\n    value: function restorePickingColors() {\n      var _this$getAttributeMan2 = this.getAttributeManager().attributes,\n          pickingColors = _this$getAttributeMan2.pickingColors,\n          instancePickingColors = _this$getAttributeMan2.instancePickingColors;\n      var colors = pickingColors || instancePickingColors;\n      colors.updateSubBuffer({\n        startOffset: 0\n      });\n    }\n  }, {\n    key: \"getNumInstances\",\n    value: function getNumInstances(props) {\n      props = props || this.props;\n\n      if (props.numInstances !== undefined) {\n        return props.numInstances;\n      }\n\n      if (this.state && this.state.numInstances !== undefined) {\n        return this.state.numInstances;\n      }\n\n      return count(props.data);\n    }\n  }, {\n    key: \"getStartIndices\",\n    value: function getStartIndices(props) {\n      props = props || this.props;\n\n      if (props.startIndices !== undefined) {\n        return props.startIndices;\n      }\n\n      if (this.state && this.state.startIndices) {\n        return this.state.startIndices;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_initialize\",\n    value: function _initialize() {\n      debug(TRACE_INITIALIZE, this);\n\n      this._initState();\n\n      this.initializeState(this.context);\n      var _iteratorNormalCompletion6 = true;\n      var _didIteratorError6 = false;\n      var _iteratorError6 = undefined;\n\n      try {\n        for (var _iterator6 = this.props.extensions[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n          var extension = _step6.value;\n          extension.initializeState.call(this, this.context, extension);\n        }\n      } catch (err) {\n        _didIteratorError6 = true;\n        _iteratorError6 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion6 && _iterator6[\"return\"] != null) {\n            _iterator6[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError6) {\n            throw _iteratorError6;\n          }\n        }\n      }\n\n      this.setChangeFlags({\n        dataChanged: true,\n        propsChanged: true,\n        viewportChanged: true,\n        extensionsChanged: true\n      });\n\n      this._updateState();\n    }\n  }, {\n    key: \"_update\",\n    value: function _update() {\n      var stateNeedsUpdate = this.needsUpdate();\n      debug(TRACE_UPDATE, this, stateNeedsUpdate);\n\n      if (stateNeedsUpdate) {\n        this._updateState();\n      }\n    }\n  }, {\n    key: \"_updateState\",\n    value: function _updateState() {\n      var currentProps = this.props;\n\n      var propsInTransition = this._updateUniformTransition();\n\n      this.internalState.propsInTransition = propsInTransition;\n      this.props = propsInTransition;\n\n      var updateParams = this._getUpdateParams();\n\n      if (this.context.gl) {\n        this.updateState(updateParams);\n      } else {\n        try {\n          this.updateState(updateParams);\n        } catch (error) {}\n      }\n\n      var _iteratorNormalCompletion7 = true;\n      var _didIteratorError7 = false;\n      var _iteratorError7 = undefined;\n\n      try {\n        for (var _iterator7 = this.props.extensions[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n          var extension = _step7.value;\n          extension.updateState.call(this, updateParams, extension);\n        }\n      } catch (err) {\n        _didIteratorError7 = true;\n        _iteratorError7 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion7 && _iterator7[\"return\"] != null) {\n            _iterator7[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError7) {\n            throw _iteratorError7;\n          }\n        }\n      }\n\n      this._updateModules(updateParams);\n\n      if (this.isComposite) {\n        this._renderLayers(updateParams);\n      } else {\n        this.setNeedsRedraw();\n\n        this._updateAttributes(this.props);\n\n        if (this.state.model) {\n          this.state.model.setInstanceCount(this.getNumInstances());\n        }\n      }\n\n      this.props = currentProps;\n      this.clearChangeFlags();\n      this.internalState.needsUpdate = false;\n      this.internalState.resetOldProps();\n    }\n  }, {\n    key: \"_finalize\",\n    value: function _finalize() {\n      debug(TRACE_FINALIZE, this);\n      assert(this.internalState && this.state);\n      this.finalizeState(this.context);\n      var _iteratorNormalCompletion8 = true;\n      var _didIteratorError8 = false;\n      var _iteratorError8 = undefined;\n\n      try {\n        for (var _iterator8 = this.props.extensions[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n          var extension = _step8.value;\n          extension.finalizeState.call(this, extension);\n        }\n      } catch (err) {\n        _didIteratorError8 = true;\n        _iteratorError8 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion8 && _iterator8[\"return\"] != null) {\n            _iterator8[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError8) {\n            throw _iteratorError8;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"drawLayer\",\n    value: function drawLayer(_ref7) {\n      var _this = this;\n\n      var _ref7$moduleParameter = _ref7.moduleParameters,\n          moduleParameters = _ref7$moduleParameter === void 0 ? null : _ref7$moduleParameter,\n          _ref7$uniforms = _ref7.uniforms,\n          uniforms = _ref7$uniforms === void 0 ? {} : _ref7$uniforms,\n          _ref7$parameters = _ref7.parameters,\n          parameters = _ref7$parameters === void 0 ? {} : _ref7$parameters;\n\n      this._updateAttributeTransition();\n\n      var currentProps = this.props;\n      this.props = this.internalState.propsInTransition || currentProps;\n      var opacity = this.props.opacity;\n      uniforms.opacity = Math.pow(opacity, 1 / 2.2);\n\n      if (moduleParameters) {\n        this.setModuleParameters(moduleParameters);\n      }\n\n      var getPolygonOffset = this.props.getPolygonOffset;\n      var offsets = getPolygonOffset && getPolygonOffset(uniforms) || [0, 0];\n      setParameters(this.context.gl, {\n        polygonOffset: offsets\n      });\n      withParameters(this.context.gl, parameters, function () {\n        var opts = {\n          moduleParameters: moduleParameters,\n          uniforms: uniforms,\n          parameters: parameters,\n          context: _this.context\n        };\n        var _iteratorNormalCompletion9 = true;\n        var _didIteratorError9 = false;\n        var _iteratorError9 = undefined;\n\n        try {\n          for (var _iterator9 = _this.props.extensions[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n            var extension = _step9.value;\n            extension.draw.call(_this, opts, extension);\n          }\n        } catch (err) {\n          _didIteratorError9 = true;\n          _iteratorError9 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion9 && _iterator9[\"return\"] != null) {\n              _iterator9[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError9) {\n              throw _iteratorError9;\n            }\n          }\n        }\n\n        _this.draw(opts);\n      });\n      this.props = currentProps;\n    }\n  }, {\n    key: \"getChangeFlags\",\n    value: function getChangeFlags() {\n      return this.internalState.changeFlags;\n    }\n  }, {\n    key: \"setChangeFlags\",\n    value: function setChangeFlags(flags) {\n      var changeFlags = this.internalState.changeFlags;\n\n      for (var key in changeFlags) {\n        if (flags[key] && !changeFlags[key]) {\n          changeFlags[key] = flags[key];\n          debug(TRACE_CHANGE_FLAG, this, key, flags);\n        }\n      }\n\n      var propsOrDataChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged || changeFlags.propsChanged || changeFlags.extensionsChanged;\n      changeFlags.propsOrDataChanged = propsOrDataChanged;\n      changeFlags.somethingChanged = propsOrDataChanged || flags.viewportChanged || flags.stateChanged;\n    }\n  }, {\n    key: \"clearChangeFlags\",\n    value: function clearChangeFlags() {\n      this.internalState.changeFlags = {\n        dataChanged: false,\n        propsChanged: false,\n        updateTriggersChanged: false,\n        viewportChanged: false,\n        stateChanged: false,\n        extensionsChanged: false,\n        propsOrDataChanged: false,\n        somethingChanged: false\n      };\n    }\n  }, {\n    key: \"diffProps\",\n    value: function diffProps(newProps, oldProps) {\n      var changeFlags = _diffProps(newProps, oldProps);\n\n      if (changeFlags.updateTriggersChanged) {\n        for (var key in changeFlags.updateTriggersChanged) {\n          if (changeFlags.updateTriggersChanged[key]) {\n            this.invalidateAttribute(key);\n          }\n        }\n      }\n\n      if (changeFlags.transitionsChanged) {\n        for (var _key in changeFlags.transitionsChanged) {\n          this.internalState.uniformTransitions.add(_key, oldProps[_key], newProps[_key], newProps.transitions[_key]);\n        }\n      }\n\n      return this.setChangeFlags(changeFlags);\n    }\n  }, {\n    key: \"validateProps\",\n    value: function validateProps() {\n      _validateProps(this.props);\n    }\n  }, {\n    key: \"setModuleParameters\",\n    value: function setModuleParameters(moduleParameters) {\n      var _iteratorNormalCompletion10 = true;\n      var _didIteratorError10 = false;\n      var _iteratorError10 = undefined;\n\n      try {\n        for (var _iterator10 = this.getModels()[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n          var model = _step10.value;\n          model.updateModuleSettings(moduleParameters);\n        }\n      } catch (err) {\n        _didIteratorError10 = true;\n        _iteratorError10 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion10 && _iterator10[\"return\"] != null) {\n            _iterator10[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError10) {\n            throw _iteratorError10;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_updateModules\",\n    value: function _updateModules(_ref8) {\n      var props = _ref8.props,\n          oldProps = _ref8.oldProps;\n      var autoHighlight = props.autoHighlight,\n          highlightedObjectIndex = props.highlightedObjectIndex,\n          highlightColor = props.highlightColor;\n\n      if (oldProps.autoHighlight !== autoHighlight || oldProps.highlightedObjectIndex !== highlightedObjectIndex || oldProps.highlightColor !== highlightColor) {\n        var parameters = {};\n\n        if (!autoHighlight) {\n          parameters.pickingSelectedColor = null;\n        }\n\n        highlightColor[3] = highlightColor[3] || 255;\n        parameters.pickingHighlightColor = highlightColor;\n\n        if (Number.isInteger(highlightedObjectIndex)) {\n          parameters.pickingSelectedColor = highlightedObjectIndex >= 0 ? this.encodePickingColor(highlightedObjectIndex) : null;\n        }\n\n        this.setModuleParameters(parameters);\n      }\n    }\n  }, {\n    key: \"_getUpdateParams\",\n    value: function _getUpdateParams() {\n      return {\n        props: this.props,\n        oldProps: this.internalState.getOldProps(),\n        context: this.context,\n        changeFlags: this.internalState.changeFlags\n      };\n    }\n  }, {\n    key: \"_getNeedsRedraw\",\n    value: function _getNeedsRedraw(opts) {\n      if (!this.internalState) {\n        return false;\n      }\n\n      var redraw = false;\n      redraw = redraw || this.internalState.needsRedraw && this.id;\n      this.internalState.needsRedraw = this.internalState.needsRedraw && !opts.clearRedrawFlags;\n      var attributeManager = this.getAttributeManager();\n      var attributeManagerNeedsRedraw = attributeManager && attributeManager.getNeedsRedraw(opts);\n      redraw = redraw || attributeManagerNeedsRedraw;\n      return redraw;\n    }\n  }, {\n    key: \"_getAttributeManager\",\n    value: function _getAttributeManager() {\n      return new AttributeManager(this.context.gl, {\n        id: this.props.id,\n        stats: this.context.stats,\n        timeline: this.context.timeline\n      });\n    }\n  }, {\n    key: \"_initState\",\n    value: function _initState() {\n      assert(!this.internalState && !this.state);\n      assert(isFinite(this.props.coordinateSystem), \"\".concat(this.id, \": invalid coordinateSystem\"));\n\n      var attributeManager = this._getAttributeManager();\n\n      if (attributeManager) {\n        attributeManager.addInstanced({\n          instancePickingColors: {\n            type: 5121,\n            size: 3,\n            noAlloc: true,\n            update: this.calculateInstancePickingColors\n          }\n        });\n      }\n\n      this.internalState = new LayerState({\n        attributeManager: attributeManager,\n        layer: this\n      });\n      this.clearChangeFlags();\n      this.state = {};\n      Object.defineProperty(this.state, 'attributeManager', {\n        get: function get() {\n          log.deprecated('layer.state.attributeManager', 'layer.getAttributeManager()');\n          return attributeManager;\n        }\n      });\n      this.internalState.layer = this;\n      this.internalState.uniformTransitions = new UniformTransitionManager(this.context.timeline);\n      this.internalState.onAsyncPropUpdated = this._onAsyncPropUpdated.bind(this);\n      this.internalState.setAsyncProps(this.props);\n    }\n  }, {\n    key: \"_transferState\",\n    value: function _transferState(oldLayer) {\n      debug(TRACE_MATCHED, this, this === oldLayer);\n      var state = oldLayer.state,\n          internalState = oldLayer.internalState;\n      assert(state && internalState);\n\n      if (this === oldLayer) {\n        return;\n      }\n\n      this.internalState = internalState;\n      this.internalState.layer = this;\n      this.state = state;\n      this.internalState.setAsyncProps(this.props);\n      this.diffProps(this.props, this.internalState.getOldProps());\n    }\n  }, {\n    key: \"_onAsyncPropUpdated\",\n    value: function _onAsyncPropUpdated() {\n      this.diffProps(this.props, this.internalState.getOldProps());\n      this.setNeedsUpdate();\n    }\n  }, {\n    key: \"isLoaded\",\n    get: function get() {\n      return this.internalState && !this.internalState.isAsyncPropLoading();\n    }\n  }]);\n\n  return Layer;\n}(Component);\n\nexport { Layer as default };\nLayer.layerName = 'Layer';\nLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/lib/layer.js"],"names":["diffProps","validateProps","projectPosition","TRACE_CHANGE_FLAG","TRACE_INITIALIZE","TRACE_UPDATE","TRACE_FINALIZE","TRACE_MATCHED","EMPTY_ARRAY","Object","pickingColorCache","defaultProps","data","type","value","async","dataComparator","_dataDiff","compare","optional","dataTransform","onDataLoad","fetch","layer","load","updateTriggers","visible","pickable","opacity","min","max","onHover","onClick","onDragStart","onDrag","onDragEnd","coordinateSystem","COORDINATE_SYSTEM","coordinateOrigin","modelMatrix","wrapLongitude","positionFormat","colorFormat","parameters","uniforms","extensions","getPolygonOffset","layerIndex","highlightedObjectIndex","autoHighlight","highlightColor","Layer","Component","className","updateObject","stateChanged","redraw","String","opts","clearRedrawFlags","xyz","viewport","worldPosition","getWorldPosition","x","y","z","worldToPixels","xy","info","pickingEvent","i","target","color","assert","i1","i2","i3","index","shaders","extension","mergeShaders","oldProps","props","context","changeFlags","attributeManager","dataChanged","Array","dataRange","model","mode","name","diffReason","changedAttributes","numInstances","startIndices","transitions","buffers","ignoreUnknownAttributes","clearChangedFlags","uniformTransitions","propsInTransition","attribute","cacheSize","size","copy","newCacheSize","pickingColor","excludeAttributes","shaderAttributes","pickingColors","instancePickingColors","colors","start","end","offset","startOffset","count","debug","propsChanged","viewportChanged","extensionsChanged","stateNeedsUpdate","currentProps","updateParams","moduleParameters","Math","offsets","setParameters","polygonOffset","withParameters","flags","propsOrDataChanged","updateTriggersChanged","somethingChanged","newProps","Number","attributeManagerNeedsRedraw","id","stats","timeline","isFinite","noAlloc","update","calculateInstancePickingColors","get","log","oldLayer","state","internalState"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable react/no-direct-mutation-state */\nimport {COORDINATE_SYSTEM} from './constants';\nimport AttributeManager from './attribute/attribute-manager';\nimport UniformTransitionManager from './uniform-transition-manager';\nimport {diffProps, validateProps} from '../lifecycle/props';\nimport {count} from '../utils/count';\nimport log from '../utils/log';\nimport debug from '../debug';\nimport GL from '@luma.gl/constants';\nimport {withParameters, setParameters} from '@luma.gl/core';\nimport assert from '../utils/assert';\nimport {mergeShaders} from '../utils/shader';\nimport {projectPosition, getWorldPosition} from '../shaderlib/project/project-functions';\nimport typedArrayManager from '../utils/typed-array-manager';\n\nimport Component from '../lifecycle/component';\nimport LayerState from './layer-state';\n\nimport {worldToPixels} from '@math.gl/web-mercator';\n\nimport {load} from '@loaders.gl/core';\n\nconst TRACE_CHANGE_FLAG = 'layer.changeFlag';\nconst TRACE_INITIALIZE = 'layer.initialize';\nconst TRACE_UPDATE = 'layer.update';\nconst TRACE_FINALIZE = 'layer.finalize';\nconst TRACE_MATCHED = 'layer.matched';\n\nconst EMPTY_ARRAY = Object.freeze([]);\n\nlet pickingColorCache = new Uint8ClampedArray(0);\n\nconst defaultProps = {\n  // data: Special handling for null, see below\n  data: {type: 'data', value: EMPTY_ARRAY, async: true},\n  dataComparator: null,\n  _dataDiff: {type: 'function', value: data => data && data.__diff, compare: false, optional: true},\n  dataTransform: {type: 'function', value: null, compare: false, optional: true},\n  onDataLoad: {type: 'function', value: null, compare: false, optional: true},\n  fetch: {\n    type: 'function',\n    value: (url, {layer}) => load(url, layer.getLoadOptions()),\n    compare: false\n  },\n  updateTriggers: {}, // Update triggers: a core change detection mechanism in deck.gl\n\n  visible: true,\n  pickable: false,\n  opacity: {type: 'number', min: 0, max: 1, value: 1},\n\n  onHover: {type: 'function', value: null, compare: false, optional: true},\n  onClick: {type: 'function', value: null, compare: false, optional: true},\n  onDragStart: {type: 'function', value: null, compare: false, optional: true},\n  onDrag: {type: 'function', value: null, compare: false, optional: true},\n  onDragEnd: {type: 'function', value: null, compare: false, optional: true},\n\n  coordinateSystem: COORDINATE_SYSTEM.DEFAULT,\n  coordinateOrigin: {type: 'array', value: [0, 0, 0], compare: true},\n  modelMatrix: {type: 'array', value: null, compare: true, optional: true},\n  wrapLongitude: false,\n  positionFormat: 'XYZ',\n  colorFormat: 'RGBA',\n\n  parameters: {},\n  uniforms: {},\n  extensions: [],\n\n  // Offset depth based on layer index to avoid z-fighting.\n  // Negative values pull layer towards the camera\n  // https://www.opengl.org/archives/resources/faq/technical/polygonoffset.htm\n  getPolygonOffset: {\n    type: 'function',\n    value: ({layerIndex}) => [0, -layerIndex * 100],\n    compare: false\n  },\n\n  // Selection/Highlighting\n  highlightedObjectIndex: null,\n  autoHighlight: false,\n  highlightColor: {type: 'color', value: [0, 0, 128, 128]}\n};\n\nexport default class Layer extends Component {\n  toString() {\n    const className = this.constructor.layerName || this.constructor.name;\n    return `${className}({id: '${this.props.id}'})`;\n  }\n\n  // Public API\n\n  // Updates selected state members and marks the object for redraw\n  setState(updateObject) {\n    this.setChangeFlags({stateChanged: true});\n    Object.assign(this.state, updateObject);\n    this.setNeedsRedraw();\n  }\n\n  // Sets the redraw flag for this layer, will trigger a redraw next animation frame\n  setNeedsRedraw(redraw = true) {\n    if (this.internalState) {\n      this.internalState.needsRedraw = redraw;\n    }\n  }\n\n  // This layer needs a deep update\n  setNeedsUpdate() {\n    this.context.layerManager.setNeedsUpdate(String(this));\n    this.internalState.needsUpdate = true;\n  }\n\n  // Checks state of attributes and model\n  getNeedsRedraw(opts = {clearRedrawFlags: false}) {\n    return this._getNeedsRedraw(opts);\n  }\n\n  // Checks if layer attributes needs updating\n  needsUpdate() {\n    // Call subclass lifecycle method\n    return (\n      this.internalState.needsUpdate ||\n      this.hasUniformTransition() ||\n      this.shouldUpdateState(this._getUpdateParams())\n    );\n    // End lifecycle method\n  }\n\n  hasUniformTransition() {\n    return this.internalState.uniformTransitions.active;\n  }\n\n  get isLoaded() {\n    return this.internalState && !this.internalState.isAsyncPropLoading();\n  }\n\n  // Returns true if the layer is pickable and visible.\n  isPickable() {\n    return this.props.pickable && this.props.visible;\n  }\n\n  // Return an array of models used by this layer, can be overriden by layer subclass\n  getModels() {\n    return this.state && (this.state.models || (this.state.model ? [this.state.model] : []));\n  }\n\n  getAttributeManager() {\n    return this.internalState && this.internalState.attributeManager;\n  }\n\n  // Returns the most recent layer that matched to this state\n  // (When reacting to an async event, this layer may no longer be the latest)\n  getCurrentLayer() {\n    return this.internalState && this.internalState.layer;\n  }\n\n  // Returns the default parse options for async props\n  getLoadOptions() {\n    return this.props.loadOptions;\n  }\n\n  // PROJECTION METHODS\n\n  // Projects a point with current map state (lat, lon, zoom, pitch, bearing)\n  // From the current layer's coordinate system to screen\n  project(xyz) {\n    const {viewport} = this.context;\n    const worldPosition = getWorldPosition(xyz, {\n      viewport,\n      modelMatrix: this.props.modelMatrix,\n      coordinateOrigin: this.props.coordinateOrigin,\n      coordinateSystem: this.props.coordinateSystem\n    });\n    const [x, y, z] = worldToPixels(worldPosition, viewport.pixelProjectionMatrix);\n    return xyz.length === 2 ? [x, y] : [x, y, z];\n  }\n\n  // Note: this does not reverse `project`.\n  // Always unprojects to the viewport's coordinate system\n  unproject(xy) {\n    const {viewport} = this.context;\n    return viewport.unproject(xy);\n  }\n\n  projectPosition(xyz) {\n    return projectPosition(xyz, {\n      viewport: this.context.viewport,\n      modelMatrix: this.props.modelMatrix,\n      coordinateOrigin: this.props.coordinateOrigin,\n      coordinateSystem: this.props.coordinateSystem\n    });\n  }\n\n  use64bitPositions() {\n    const {coordinateSystem} = this.props;\n    return (\n      coordinateSystem === COORDINATE_SYSTEM.DEFAULT ||\n      coordinateSystem === COORDINATE_SYSTEM.LNGLAT ||\n      coordinateSystem === COORDINATE_SYSTEM.CARTESIAN\n    );\n  }\n\n  // Event handling\n  onHover(info, pickingEvent) {\n    if (this.props.onHover) {\n      return this.props.onHover(info, pickingEvent);\n    }\n    return false;\n  }\n\n  onClick(info, pickingEvent) {\n    if (this.props.onClick) {\n      return this.props.onClick(info, pickingEvent);\n    }\n    return false;\n  }\n\n  // Returns the picking color that doesn't match any subfeature\n  // Use if some graphics do not belong to any pickable subfeature\n  // @return {Array} - a black color\n  nullPickingColor() {\n    return [0, 0, 0];\n  }\n\n  // Returns the picking color that doesn't match any subfeature\n  // Use if some graphics do not belong to any pickable subfeature\n  encodePickingColor(i, target = []) {\n    target[0] = (i + 1) & 255;\n    target[1] = ((i + 1) >> 8) & 255;\n    target[2] = (((i + 1) >> 8) >> 8) & 255;\n    return target;\n  }\n\n  // Returns the index corresponding to a picking color that doesn't match any subfeature\n  // @param {Uint8Array} color - color array to be decoded\n  // @return {Array} - the decoded picking color\n  decodePickingColor(color) {\n    assert(color instanceof Uint8Array);\n    const [i1, i2, i3] = color;\n    // 1 was added to seperate from no selection\n    const index = i1 + i2 * 256 + i3 * 65536 - 1;\n    return index;\n  }\n\n  // //////////////////////////////////////////////////\n  // LIFECYCLE METHODS, overridden by the layer subclasses\n\n  // Called once to set up the initial state\n  // App can create WebGL resources\n  initializeState() {\n    throw new Error(`Layer ${this} has not defined initializeState`);\n  }\n\n  getShaders(shaders) {\n    for (const extension of this.props.extensions) {\n      shaders = mergeShaders(shaders, extension.getShaders.call(this, extension));\n    }\n    return shaders;\n  }\n\n  // Let's layer control if updateState should be called\n  shouldUpdateState({oldProps, props, context, changeFlags}) {\n    return changeFlags.propsOrDataChanged;\n  }\n\n  // Default implementation, all attributes will be invalidated and updated\n  // when data changes\n  /* eslint-disable-next-line complexity */\n  updateState({oldProps, props, context, changeFlags}) {\n    const attributeManager = this.getAttributeManager();\n    if (changeFlags.dataChanged && attributeManager) {\n      const {dataChanged} = changeFlags;\n      if (Array.isArray(dataChanged)) {\n        // is partial update\n        for (const dataRange of dataChanged) {\n          attributeManager.invalidateAll(dataRange);\n        }\n      } else {\n        attributeManager.invalidateAll();\n      }\n    }\n  }\n\n  // Called once when layer is no longer matched and state will be discarded\n  // App can destroy WebGL resources here\n  finalizeState() {\n    for (const model of this.getModels()) {\n      model.delete();\n    }\n    const attributeManager = this.getAttributeManager();\n    if (attributeManager) {\n      attributeManager.finalize();\n    }\n    this.internalState.uniformTransitions.clear();\n  }\n\n  // If state has a model, draw it with supplied uniforms\n  draw(opts) {\n    for (const model of this.getModels()) {\n      model.draw(opts);\n    }\n  }\n\n  // called to populate the info object that is passed to the event handler\n  // @return null to cancel event\n  getPickingInfo({info, mode}) {\n    const {index} = info;\n\n    if (index >= 0) {\n      // If props.data is an indexable array, get the object\n      if (Array.isArray(this.props.data)) {\n        info.object = this.props.data[index];\n      }\n    }\n\n    return info;\n  }\n\n  // END LIFECYCLE METHODS\n  // //////////////////////////////////////////////////\n\n  // INTERNAL METHODS\n\n  // Default implementation of attribute invalidation, can be redefined\n  invalidateAttribute(name = 'all', diffReason = '') {\n    const attributeManager = this.getAttributeManager();\n    if (!attributeManager) {\n      return;\n    }\n\n    if (name === 'all') {\n      attributeManager.invalidateAll();\n    } else {\n      attributeManager.invalidate(name);\n    }\n  }\n\n  updateAttributes(changedAttributes) {\n    for (const model of this.getModels()) {\n      this._setModelAttributes(model, changedAttributes);\n    }\n  }\n\n  // Calls attribute manager to update any WebGL attributes\n  _updateAttributes(props) {\n    const attributeManager = this.getAttributeManager();\n    if (!attributeManager) {\n      return;\n    }\n\n    // Figure out data length\n    const numInstances = this.getNumInstances(props);\n    const startIndices = this.getStartIndices(props);\n\n    attributeManager.update({\n      data: props.data,\n      numInstances,\n      startIndices,\n      props,\n      transitions: props.transitions,\n      buffers: props.data.attributes,\n      context: this,\n      // Don't worry about non-attribute props\n      ignoreUnknownAttributes: true\n    });\n\n    const changedAttributes = attributeManager.getChangedAttributes({clearChangedFlags: true});\n    this.updateAttributes(changedAttributes);\n  }\n\n  // Update attribute transitions. This is called in drawLayer, no model updates required.\n  _updateAttributeTransition() {\n    const attributeManager = this.getAttributeManager();\n    if (attributeManager) {\n      attributeManager.updateTransition();\n    }\n  }\n\n  // Update uniform (prop) transitions. This is called in updateState, may result in model updates.\n  _updateUniformTransition() {\n    const {uniformTransitions} = this.internalState;\n    if (uniformTransitions.active) {\n      // clone props\n      const propsInTransition = uniformTransitions.update();\n      const props = Object.create(this.props);\n      for (const key in propsInTransition) {\n        Object.defineProperty(props, key, {value: propsInTransition[key]});\n      }\n      return props;\n    }\n    return this.props;\n  }\n\n  calculateInstancePickingColors(attribute, {numInstances}) {\n    // calculateInstancePickingColors always generates the same sequence.\n    // pickingColorCache saves the largest generated sequence for reuse\n    const cacheSize = pickingColorCache.length / 3;\n\n    if (cacheSize < numInstances) {\n      pickingColorCache = typedArrayManager.allocate(pickingColorCache, numInstances, {\n        size: 3,\n        copy: true\n      });\n      // If the attribute is larger than the cache, resize the cache and populate the missing chunk\n      const newCacheSize = pickingColorCache.length / 3;\n      const pickingColor = [];\n      assert(newCacheSize < 16777215, 'index out of picking color range');\n\n      for (let i = cacheSize; i < newCacheSize; i++) {\n        this.encodePickingColor(i, pickingColor);\n        pickingColorCache[i * 3 + 0] = pickingColor[0];\n        pickingColorCache[i * 3 + 1] = pickingColor[1];\n        pickingColorCache[i * 3 + 2] = pickingColor[2];\n      }\n    }\n\n    attribute.value = pickingColorCache.subarray(0, numInstances * 3);\n  }\n\n  _setModelAttributes(model, changedAttributes) {\n    const attributeManager = this.getAttributeManager();\n    const excludeAttributes = model.userData.excludeAttributes || {};\n    const shaderAttributes = attributeManager.getShaderAttributes(\n      changedAttributes,\n      excludeAttributes\n    );\n\n    model.setAttributes(shaderAttributes);\n  }\n\n  // Sets the specified instanced picking color to null picking color. Used for multi picking.\n  clearPickingColor(color) {\n    const {pickingColors, instancePickingColors} = this.getAttributeManager().attributes;\n    const colors = pickingColors || instancePickingColors;\n\n    const i = this.decodePickingColor(color);\n    const start = colors.getVertexOffset(i);\n    const end = colors.getVertexOffset(i + 1);\n\n    // Fill the sub buffer with 0s\n    colors.buffer.subData({\n      data: new Uint8Array(end - start),\n      offset: start // 1 byte per element\n    });\n  }\n\n  restorePickingColors() {\n    const {pickingColors, instancePickingColors} = this.getAttributeManager().attributes;\n    const colors = pickingColors || instancePickingColors;\n    colors.updateSubBuffer({startOffset: 0});\n  }\n\n  // Deduces numer of instances. Intention is to support:\n  // - Explicit setting of numInstances\n  // - Auto-deduction for ES6 containers that define a size member\n  // - Auto-deduction for Classic Arrays via the built-in length attribute\n  // - Auto-deduction via arrays\n  getNumInstances(props) {\n    props = props || this.props;\n\n    // First Check if app has provided an explicit value\n    if (props.numInstances !== undefined) {\n      return props.numInstances;\n    }\n\n    // Second check if the layer has set its own value\n    if (this.state && this.state.numInstances !== undefined) {\n      return this.state.numInstances;\n    }\n\n    // Use container library to get a count for any ES6 container or object\n    return count(props.data);\n  }\n\n  // Buffer layout describes how many attribute values are packed for each data object\n  // The default (null) is one value each object.\n  // Some data formats (e.g. paths, polygons) have various length. Their buffer layout\n  //  is in the form of [L0, L1, L2, ...]\n  getStartIndices(props) {\n    props = props || this.props;\n\n    // First Check if startIndices is provided as an explicit value\n    if (props.startIndices !== undefined) {\n      return props.startIndices;\n    }\n\n    // Second check if the layer has set its own value\n    if (this.state && this.state.startIndices) {\n      return this.state.startIndices;\n    }\n\n    return null;\n  }\n\n  // LAYER MANAGER API\n  // Should only be called by the deck.gl LayerManager class\n\n  // Called by layer manager when a new layer is found\n  /* eslint-disable max-statements */\n  _initialize() {\n    debug(TRACE_INITIALIZE, this);\n\n    this._initState();\n\n    // Call subclass lifecycle methods\n    this.initializeState(this.context);\n    // Initialize extensions\n    for (const extension of this.props.extensions) {\n      extension.initializeState.call(this, this.context, extension);\n    }\n    // End subclass lifecycle methods\n\n    // initializeState callback tends to clear state\n    this.setChangeFlags({\n      dataChanged: true,\n      propsChanged: true,\n      viewportChanged: true,\n      extensionsChanged: true\n    });\n\n    this._updateState();\n  }\n\n  // Called by layer manager\n  // if this layer is new (not matched with an existing layer) oldProps will be empty object\n  _update() {\n    // Call subclass lifecycle method\n    const stateNeedsUpdate = this.needsUpdate();\n    // End lifecycle method\n    debug(TRACE_UPDATE, this, stateNeedsUpdate);\n\n    if (stateNeedsUpdate) {\n      this._updateState();\n    }\n  }\n  /* eslint-enable max-statements */\n\n  // Common code for _initialize and _update\n  _updateState() {\n    const currentProps = this.props;\n    const propsInTransition = this._updateUniformTransition();\n    this.internalState.propsInTransition = propsInTransition;\n    // Overwrite this.props during update to use in-transition prop values\n    this.props = propsInTransition;\n\n    const updateParams = this._getUpdateParams();\n\n    // Safely call subclass lifecycle methods\n    if (this.context.gl) {\n      this.updateState(updateParams);\n    } else {\n      try {\n        this.updateState(updateParams);\n      } catch (error) {\n        // ignore error if gl context is missing\n      }\n    }\n    // Execute extension updates\n    for (const extension of this.props.extensions) {\n      extension.updateState.call(this, updateParams, extension);\n    }\n    this._updateModules(updateParams);\n    // End subclass lifecycle methods\n\n    if (this.isComposite) {\n      // Render or update previously rendered sublayers\n      this._renderLayers(updateParams);\n    } else {\n      this.setNeedsRedraw();\n      // Add any subclass attributes\n      this._updateAttributes(this.props);\n\n      // Note: Automatic instance count update only works for single layers\n      if (this.state.model) {\n        this.state.model.setInstanceCount(this.getNumInstances());\n      }\n    }\n\n    this.props = currentProps;\n    this.clearChangeFlags();\n    this.internalState.needsUpdate = false;\n    this.internalState.resetOldProps();\n  }\n\n  // Called by manager when layer is about to be disposed\n  // Note: not guaranteed to be called on application shutdown\n  _finalize() {\n    debug(TRACE_FINALIZE, this);\n    assert(this.internalState && this.state);\n\n    // Call subclass lifecycle method\n    this.finalizeState(this.context);\n    // Finalize extensions\n    for (const extension of this.props.extensions) {\n      extension.finalizeState.call(this, extension);\n    }\n  }\n\n  // Calculates uniforms\n  drawLayer({moduleParameters = null, uniforms = {}, parameters = {}}) {\n    this._updateAttributeTransition();\n\n    const currentProps = this.props;\n    // Overwrite this.props during redraw to use in-transition prop values\n    // `internalState.propsInTransition` could be missing if `updateState` failed\n    this.props = this.internalState.propsInTransition || currentProps;\n\n    const {opacity} = this.props;\n    // apply gamma to opacity to make it visually \"linear\"\n    uniforms.opacity = Math.pow(opacity, 1 / 2.2);\n\n    // TODO/ib - hack move to luma Model.draw\n    if (moduleParameters) {\n      this.setModuleParameters(moduleParameters);\n    }\n\n    // Apply polygon offset to avoid z-fighting\n    // TODO - move to draw-layers\n    const {getPolygonOffset} = this.props;\n    const offsets = (getPolygonOffset && getPolygonOffset(uniforms)) || [0, 0];\n\n    setParameters(this.context.gl, {polygonOffset: offsets});\n\n    // Call subclass lifecycle method\n    withParameters(this.context.gl, parameters, () => {\n      const opts = {moduleParameters, uniforms, parameters, context: this.context};\n\n      // extensions\n      for (const extension of this.props.extensions) {\n        extension.draw.call(this, opts, extension);\n      }\n\n      this.draw(opts);\n    });\n\n    // End lifecycle method\n\n    this.props = currentProps;\n  }\n\n  // Helper methods\n  getChangeFlags() {\n    return this.internalState.changeFlags;\n  }\n\n  // Dirty some change flags, will be handled by updateLayer\n  /* eslint-disable complexity */\n  setChangeFlags(flags) {\n    const {changeFlags} = this.internalState;\n\n    for (const key in changeFlags) {\n      if (flags[key] && !changeFlags[key]) {\n        changeFlags[key] = flags[key];\n        debug(TRACE_CHANGE_FLAG, this, key, flags);\n      }\n    }\n\n    // Update composite flags\n    const propsOrDataChanged =\n      changeFlags.dataChanged ||\n      changeFlags.updateTriggersChanged ||\n      changeFlags.propsChanged ||\n      changeFlags.extensionsChanged;\n    changeFlags.propsOrDataChanged = propsOrDataChanged;\n    changeFlags.somethingChanged =\n      propsOrDataChanged || flags.viewportChanged || flags.stateChanged;\n  }\n  /* eslint-enable complexity */\n\n  // Clear all changeFlags, typically after an update\n  clearChangeFlags() {\n    this.internalState.changeFlags = {\n      // Primary changeFlags, can be strings stating reason for change\n      dataChanged: false,\n      propsChanged: false,\n      updateTriggersChanged: false,\n      viewportChanged: false,\n      stateChanged: false,\n      extensionsChanged: false,\n\n      // Derived changeFlags\n      propsOrDataChanged: false,\n      somethingChanged: false\n    };\n  }\n\n  // Compares the layers props with old props from a matched older layer\n  // and extracts change flags that describe what has change so that state\n  // can be update correctly with minimal effort\n  diffProps(newProps, oldProps) {\n    const changeFlags = diffProps(newProps, oldProps);\n\n    // iterate over changedTriggers\n    if (changeFlags.updateTriggersChanged) {\n      for (const key in changeFlags.updateTriggersChanged) {\n        if (changeFlags.updateTriggersChanged[key]) {\n          this.invalidateAttribute(key);\n        }\n      }\n    }\n\n    // trigger uniform transitions\n    if (changeFlags.transitionsChanged) {\n      for (const key in changeFlags.transitionsChanged) {\n        // prop changed and transition is enabled\n        this.internalState.uniformTransitions.add(\n          key,\n          oldProps[key],\n          newProps[key],\n          newProps.transitions[key]\n        );\n      }\n    }\n\n    return this.setChangeFlags(changeFlags);\n  }\n\n  // Called by layer manager to validate props (in development)\n  validateProps() {\n    validateProps(this.props);\n  }\n\n  setModuleParameters(moduleParameters) {\n    for (const model of this.getModels()) {\n      model.updateModuleSettings(moduleParameters);\n    }\n  }\n\n  // PRIVATE METHODS\n  _updateModules({props, oldProps}) {\n    // Picking module parameters\n    const {autoHighlight, highlightedObjectIndex, highlightColor} = props;\n    if (\n      oldProps.autoHighlight !== autoHighlight ||\n      oldProps.highlightedObjectIndex !== highlightedObjectIndex ||\n      oldProps.highlightColor !== highlightColor\n    ) {\n      const parameters = {};\n      if (!autoHighlight) {\n        parameters.pickingSelectedColor = null;\n      }\n      // TODO - fix in luma?\n      highlightColor[3] = highlightColor[3] || 255;\n      parameters.pickingHighlightColor = highlightColor;\n\n      // highlightedObjectIndex will overwrite any settings from auto highlighting.\n      if (Number.isInteger(highlightedObjectIndex)) {\n        parameters.pickingSelectedColor =\n          highlightedObjectIndex >= 0 ? this.encodePickingColor(highlightedObjectIndex) : null;\n      }\n\n      this.setModuleParameters(parameters);\n    }\n  }\n\n  _getUpdateParams() {\n    return {\n      props: this.props,\n      oldProps: this.internalState.getOldProps(),\n      context: this.context,\n      changeFlags: this.internalState.changeFlags\n    };\n  }\n\n  // Checks state of attributes and model\n  _getNeedsRedraw(opts) {\n    // this method may be called by the render loop as soon a the layer\n    // has been created, so guard against uninitialized state\n    if (!this.internalState) {\n      return false;\n    }\n\n    let redraw = false;\n    redraw = redraw || (this.internalState.needsRedraw && this.id);\n    this.internalState.needsRedraw = this.internalState.needsRedraw && !opts.clearRedrawFlags;\n\n    // TODO - is attribute manager needed? - Model should be enough.\n    const attributeManager = this.getAttributeManager();\n    const attributeManagerNeedsRedraw = attributeManager && attributeManager.getNeedsRedraw(opts);\n    redraw = redraw || attributeManagerNeedsRedraw;\n\n    return redraw;\n  }\n\n  // Create new attribute manager\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats,\n      timeline: this.context.timeline\n    });\n  }\n\n  _initState() {\n    assert(!this.internalState && !this.state);\n    assert(isFinite(this.props.coordinateSystem), `${this.id}: invalid coordinateSystem`);\n\n    const attributeManager = this._getAttributeManager();\n\n    if (attributeManager) {\n      // All instanced layers get instancePickingColors attribute by default\n      // Their shaders can use it to render a picking scene\n      // TODO - this slightly slows down non instanced layers\n      attributeManager.addInstanced({\n        instancePickingColors: {\n          type: GL.UNSIGNED_BYTE,\n          size: 3,\n          noAlloc: true,\n          update: this.calculateInstancePickingColors\n        }\n      });\n    }\n\n    this.internalState = new LayerState({\n      attributeManager,\n      layer: this\n    });\n    this.clearChangeFlags(); // populate this.internalState.changeFlags\n\n    this.state = {};\n    // for backwards compatibility with older layers\n    // TODO - remove in next release\n    /* eslint-disable accessor-pairs */\n    Object.defineProperty(this.state, 'attributeManager', {\n      get: () => {\n        log.deprecated('layer.state.attributeManager', 'layer.getAttributeManager()');\n        return attributeManager;\n      }\n    });\n    /* eslint-enable accessor-pairs */\n\n    this.internalState.layer = this;\n    this.internalState.uniformTransitions = new UniformTransitionManager(this.context.timeline);\n    this.internalState.onAsyncPropUpdated = this._onAsyncPropUpdated.bind(this);\n\n    // Ensure any async props are updated\n    this.internalState.setAsyncProps(this.props);\n  }\n\n  // Called by layer manager to transfer state from an old layer\n  _transferState(oldLayer) {\n    debug(TRACE_MATCHED, this, this === oldLayer);\n\n    const {state, internalState} = oldLayer;\n    assert(state && internalState);\n\n    if (this === oldLayer) {\n      return;\n    }\n\n    // Move internalState\n    this.internalState = internalState;\n    this.internalState.layer = this;\n\n    // Move state\n    this.state = state;\n    // We keep the state ref on old layers to support async actions\n    // oldLayer.state = null;\n\n    // Ensure any async props are updated\n    this.internalState.setAsyncProps(this.props);\n\n    this.diffProps(this.props, this.internalState.getOldProps());\n  }\n\n  _onAsyncPropUpdated() {\n    this.diffProps(this.props, this.internalState.getOldProps());\n    this.setNeedsUpdate();\n  }\n}\n\nLayer.layerName = 'Layer';\nLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}