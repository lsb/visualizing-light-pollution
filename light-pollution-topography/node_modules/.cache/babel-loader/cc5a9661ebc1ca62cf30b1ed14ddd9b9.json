{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { isWebGL2 } from '@luma.gl/gltools';\nimport { log } from '@luma.gl/webgl';\nimport { pbr } from '@luma.gl/shadertools';\nimport { ModelNode } from '../scenegraph';\nimport GLTFMaterialParser from './gltf-material-parser';\nvar vs = \"\\n#if (__VERSION__ < 300)\\n  #define _attr attribute\\n#else\\n  #define _attr in\\n#endif\\n\\n  _attr vec4 POSITION;\\n\\n  #ifdef HAS_NORMALS\\n    _attr vec4 NORMAL;\\n  #endif\\n\\n  #ifdef HAS_TANGENTS\\n    _attr vec4 TANGENT;\\n  #endif\\n\\n  #ifdef HAS_UV\\n    _attr vec2 TEXCOORD_0;\\n  #endif\\n\\n  void main(void) {\\n    vec4 _NORMAL = vec4(0.);\\n    vec4 _TANGENT = vec4(0.);\\n    vec2 _TEXCOORD_0 = vec2(0.);\\n\\n    #ifdef HAS_NORMALS\\n      _NORMAL = NORMAL;\\n    #endif\\n\\n    #ifdef HAS_TANGENTS\\n      _TANGENT = TANGENT;\\n    #endif\\n\\n    #ifdef HAS_UV\\n      _TEXCOORD_0 = TEXCOORD_0;\\n    #endif\\n\\n    pbr_setPositionNormalTangentUV(POSITION, _NORMAL, _TANGENT, _TEXCOORD_0);\\n    gl_Position = u_MVPMatrix * POSITION;\\n  }\\n\";\nvar fs = \"\\n#if (__VERSION__ < 300)\\n  #define fragmentColor gl_FragColor\\n#else\\n  out vec4 fragmentColor;\\n#endif\\n\\n  void main(void) {\\n    fragmentColor = pbr_filterColor(vec4(0));\\n  }\\n\";\n\nfunction addVersionToShader(gl, source) {\n  if (isWebGL2(gl)) {\n    return \"#version 300 es\\n\".concat(source);\n  }\n\n  return source;\n}\n\nexport default function createGLTFModel(gl, options) {\n  var id = options.id,\n      drawMode = options.drawMode,\n      vertexCount = options.vertexCount,\n      attributes = options.attributes,\n      modelOptions = options.modelOptions;\n  var materialParser = new GLTFMaterialParser(gl, options);\n  log.info(4, 'createGLTFModel defines: ', materialParser.defines)();\n  var managedResources = [];\n  managedResources.push.apply(managedResources, _toConsumableArray(materialParser.generatedTextures));\n  managedResources.push.apply(managedResources, _toConsumableArray(Object.values(attributes).map(function (attribute) {\n    return attribute.buffer;\n  })));\n  var model = new ModelNode(gl, Object.assign({\n    id: id,\n    drawMode: drawMode,\n    vertexCount: vertexCount,\n    modules: [pbr],\n    defines: materialParser.defines,\n    parameters: materialParser.parameters,\n    vs: addVersionToShader(gl, vs),\n    fs: addVersionToShader(gl, fs),\n    managedResources: managedResources\n  }, modelOptions));\n  model.setProps({\n    attributes: attributes\n  });\n  model.setUniforms(materialParser.uniforms);\n  return model;\n}","map":{"version":3,"sources":["../../../src/gltf/create-gltf-model.js"],"names":["vs","fs","isWebGL2","id","drawMode","vertexCount","attributes","modelOptions","options","materialParser","log","managedResources","attribute","model","modules","defines","parameters","addVersionToShader"],"mappings":";AAAA,SAAA,QAAA,QAAA,kBAAA;AACA,SAAA,GAAA,QAAA,gBAAA;AACA,SAAA,GAAA,QAAA,sBAAA;AACA,SAAA,SAAA,QAAA,eAAA;AACA,OAAA,kBAAA,MAAA,wBAAA;AAEA,IAAMA,EAAE,GAAR,8tBAAA;AA2CA,IAAMC,EAAE,GAAR,wLAAA;;AAYA,SAAA,kBAAA,CAAA,EAAA,EAAA,MAAA,EAAwC;AACtC,MAAIC,QAAQ,CAAZ,EAAY,CAAZ,EAAkB;AAChB,WAAA,oBAAA,MAAA,CAAA,MAAA,CAAA;AACD;;AAED,SAAA,MAAA;AACD;;AAED,eAAe,SAAA,eAAA,CAAA,EAAA,EAAA,OAAA,EAAsC;AAAA,MAC5CC,EAD4C,GACWK,OADX,CAAA,EAAA;AAAA,MACxCJ,QADwC,GACWI,OADX,CAAA,QAAA;AAAA,MAC9BH,WAD8B,GACWG,OADX,CAAA,WAAA;AAAA,MACjBF,UADiB,GACWE,OADX,CAAA,UAAA;AAAA,MACLD,YADK,GACWC,OADX,CAAA,YAAA;AAEnD,MAAMC,cAAc,GAAG,IAAA,kBAAA,CAAA,EAAA,EAAvB,OAAuB,CAAvB;AAEAC,EAAAA,GAAG,CAAHA,IAAAA,CAAAA,CAAAA,EAAAA,2BAAAA,EAAyCD,cAAc,CAAvDC,OAAAA;AAKA,MAAMC,gBAAgB,GAAtB,EAAA;AACAA,EAAAA,gBAAgB,CAAhBA,IAAAA,CAAAA,KAAAA,CAAAA,gBAAAA,EAAgB,kBAAA,CAASF,cAAc,CAAvCE,iBAAgB,CAAhBA;AACAA,EAAAA,gBAAgB,CAAhBA,IAAAA,CAAAA,KAAAA,CAAAA,gBAAAA,EAAgB,kBAAA,CAAS,MAAM,CAAN,MAAA,CAAA,UAAA,EAAA,GAAA,CAA8B,UAAA,SAAA,EAAS;AAAA,WAAIC,SAAS,CAAb,MAAA;AAAhED,GAAyB,CAAT,CAAhBA;AAEA,MAAME,KAAK,GAAG,IAAA,SAAA,CAAA,EAAA,EAEZ,MAAM,CAAN,MAAA,CACE;AACEV,IAAAA,EAAE,EADJ,EAAA;AAEEC,IAAAA,QAAQ,EAFV,QAAA;AAGEC,IAAAA,WAAW,EAHb,WAAA;AAIES,IAAAA,OAAO,EAAE,CAJX,GAIW,CAJX;AAKEC,IAAAA,OAAO,EAAEN,cAAc,CALzB,OAAA;AAMEO,IAAAA,UAAU,EAAEP,cAAc,CAN5B,UAAA;AAOET,IAAAA,EAAE,EAAEiB,kBAAkB,CAAA,EAAA,EAPxB,EAOwB,CAPxB;AAQEhB,IAAAA,EAAE,EAAEgB,kBAAkB,CAAA,EAAA,EARxB,EAQwB,CARxB;AASEN,IAAAA,gBAAgB,EAAhBA;AATF,GADF,EAFF,YAEE,CAFY,CAAd;AAkBAE,EAAAA,KAAK,CAALA,QAAAA,CAAe;AAACP,IAAAA,UAAU,EAAVA;AAAD,GAAfO;AACAA,EAAAA,KAAK,CAALA,WAAAA,CAAkBJ,cAAc,CAAhCI,QAAAA;AAEA,SAAA,KAAA;AACD","sourcesContent":["import {isWebGL2} from '@luma.gl/gltools';\nimport {log} from '@luma.gl/webgl';\nimport {pbr} from '@luma.gl/shadertools';\nimport {ModelNode} from '../scenegraph';\nimport GLTFMaterialParser from './gltf-material-parser';\n\nconst vs = `\n#if (__VERSION__ < 300)\n  #define _attr attribute\n#else\n  #define _attr in\n#endif\n\n  _attr vec4 POSITION;\n\n  #ifdef HAS_NORMALS\n    _attr vec4 NORMAL;\n  #endif\n\n  #ifdef HAS_TANGENTS\n    _attr vec4 TANGENT;\n  #endif\n\n  #ifdef HAS_UV\n    _attr vec2 TEXCOORD_0;\n  #endif\n\n  void main(void) {\n    vec4 _NORMAL = vec4(0.);\n    vec4 _TANGENT = vec4(0.);\n    vec2 _TEXCOORD_0 = vec2(0.);\n\n    #ifdef HAS_NORMALS\n      _NORMAL = NORMAL;\n    #endif\n\n    #ifdef HAS_TANGENTS\n      _TANGENT = TANGENT;\n    #endif\n\n    #ifdef HAS_UV\n      _TEXCOORD_0 = TEXCOORD_0;\n    #endif\n\n    pbr_setPositionNormalTangentUV(POSITION, _NORMAL, _TANGENT, _TEXCOORD_0);\n    gl_Position = u_MVPMatrix * POSITION;\n  }\n`;\n\nconst fs = `\n#if (__VERSION__ < 300)\n  #define fragmentColor gl_FragColor\n#else\n  out vec4 fragmentColor;\n#endif\n\n  void main(void) {\n    fragmentColor = pbr_filterColor(vec4(0));\n  }\n`;\n\nfunction addVersionToShader(gl, source) {\n  if (isWebGL2(gl)) {\n    return `#version 300 es\\n${source}`;\n  }\n\n  return source;\n}\n\nexport default function createGLTFModel(gl, options) {\n  const {id, drawMode, vertexCount, attributes, modelOptions} = options;\n  const materialParser = new GLTFMaterialParser(gl, options);\n\n  log.info(4, 'createGLTFModel defines: ', materialParser.defines)();\n\n  // Calculate managedResources\n  // TODO: Implement resource management logic that will\n  // not deallocate resources/textures/buffers that are shared\n  const managedResources = [];\n  managedResources.push(...materialParser.generatedTextures);\n  managedResources.push(...Object.values(attributes).map(attribute => attribute.buffer));\n\n  const model = new ModelNode(\n    gl,\n    Object.assign(\n      {\n        id,\n        drawMode,\n        vertexCount,\n        modules: [pbr],\n        defines: materialParser.defines,\n        parameters: materialParser.parameters,\n        vs: addVersionToShader(gl, vs),\n        fs: addVersionToShader(gl, fs),\n        managedResources\n      },\n      modelOptions\n    )\n  );\n\n  model.setProps({attributes});\n  model.setUniforms(materialParser.uniforms);\n\n  return model;\n}\n"]},"metadata":{},"sourceType":"module"}