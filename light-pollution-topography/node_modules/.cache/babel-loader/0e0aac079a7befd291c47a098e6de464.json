{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport Geometry from '../geometry/geometry';\nimport { uid } from '@luma.gl/webgl';\nvar INDEX_OFFSETS = {\n  x: [2, 0, 1],\n  y: [0, 1, 2],\n  z: [1, 2, 0]\n};\n\nvar TruncatedConeGeometry = function (_Geometry) {\n  _inherits(TruncatedConeGeometry, _Geometry);\n\n  function TruncatedConeGeometry() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, TruncatedConeGeometry);\n\n    var _props$id = props.id,\n        id = _props$id === void 0 ? uid('truncated-code-geometry') : _props$id;\n\n    var _tesselateTruncatedCo = tesselateTruncatedCone(props),\n        indices = _tesselateTruncatedCo.indices,\n        attributes = _tesselateTruncatedCo.attributes;\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TruncatedConeGeometry).call(this, _objectSpread({}, props, {\n      id: id,\n      indices: indices,\n      attributes: _objectSpread({}, attributes, props.attributes)\n    })));\n  }\n\n  return TruncatedConeGeometry;\n}(Geometry);\n\nexport { TruncatedConeGeometry as default };\n\nfunction tesselateTruncatedCone(props) {\n  var _props$bottomRadius = props.bottomRadius,\n      bottomRadius = _props$bottomRadius === void 0 ? 0 : _props$bottomRadius,\n      _props$topRadius = props.topRadius,\n      topRadius = _props$topRadius === void 0 ? 0 : _props$topRadius,\n      _props$height = props.height,\n      height = _props$height === void 0 ? 1 : _props$height,\n      _props$nradial = props.nradial,\n      nradial = _props$nradial === void 0 ? 10 : _props$nradial,\n      _props$nvertical = props.nvertical,\n      nvertical = _props$nvertical === void 0 ? 10 : _props$nvertical,\n      _props$verticalAxis = props.verticalAxis,\n      verticalAxis = _props$verticalAxis === void 0 ? 'y' : _props$verticalAxis,\n      _props$topCap = props.topCap,\n      topCap = _props$topCap === void 0 ? false : _props$topCap,\n      _props$bottomCap = props.bottomCap,\n      bottomCap = _props$bottomCap === void 0 ? false : _props$bottomCap;\n  var extra = (topCap ? 2 : 0) + (bottomCap ? 2 : 0);\n  var numVertices = (nradial + 1) * (nvertical + 1 + extra);\n  var slant = Math.atan2(bottomRadius - topRadius, height);\n  var msin = Math.sin;\n  var mcos = Math.cos;\n  var mpi = Math.PI;\n  var cosSlant = mcos(slant);\n  var sinSlant = msin(slant);\n  var start = topCap ? -2 : 0;\n  var end = nvertical + (bottomCap ? 2 : 0);\n  var vertsAroundEdge = nradial + 1;\n  var indices = new Uint16Array(nradial * (nvertical + extra) * 6);\n  var indexOffset = INDEX_OFFSETS[verticalAxis];\n  var positions = new Float32Array(numVertices * 3);\n  var normals = new Float32Array(numVertices * 3);\n  var texCoords = new Float32Array(numVertices * 2);\n  var i3 = 0;\n  var i2 = 0;\n\n  for (var i = start; i <= end; i++) {\n    var v = i / nvertical;\n    var y = height * v;\n    var ringRadius = void 0;\n\n    if (i < 0) {\n      y = 0;\n      v = 1;\n      ringRadius = bottomRadius;\n    } else if (i > nvertical) {\n      y = height;\n      v = 1;\n      ringRadius = topRadius;\n    } else {\n      ringRadius = bottomRadius + (topRadius - bottomRadius) * (i / nvertical);\n    }\n\n    if (i === -2 || i === nvertical + 2) {\n      ringRadius = 0;\n      v = 0;\n    }\n\n    y -= height / 2;\n\n    for (var j = 0; j < vertsAroundEdge; j++) {\n      var sin = msin(j * mpi * 2 / nradial);\n      var cos = mcos(j * mpi * 2 / nradial);\n      positions[i3 + indexOffset[0]] = sin * ringRadius;\n      positions[i3 + indexOffset[1]] = y;\n      positions[i3 + indexOffset[2]] = cos * ringRadius;\n      normals[i3 + indexOffset[0]] = i < 0 || i > nvertical ? 0 : sin * cosSlant;\n      normals[i3 + indexOffset[1]] = i < 0 ? -1 : i > nvertical ? 1 : sinSlant;\n      normals[i3 + indexOffset[2]] = i < 0 || i > nvertical ? 0 : cos * cosSlant;\n      texCoords[i2 + 0] = j / nradial;\n      texCoords[i2 + 1] = v;\n      i2 += 2;\n      i3 += 3;\n    }\n  }\n\n  for (var _i = 0; _i < nvertical + extra; _i++) {\n    for (var _j = 0; _j < nradial; _j++) {\n      var index = (_i * nradial + _j) * 6;\n      indices[index + 0] = vertsAroundEdge * (_i + 0) + 0 + _j;\n      indices[index + 1] = vertsAroundEdge * (_i + 0) + 1 + _j;\n      indices[index + 2] = vertsAroundEdge * (_i + 1) + 1 + _j;\n      indices[index + 3] = vertsAroundEdge * (_i + 0) + 0 + _j;\n      indices[index + 4] = vertsAroundEdge * (_i + 1) + 1 + _j;\n      indices[index + 5] = vertsAroundEdge * (_i + 1) + 0 + _j;\n    }\n  }\n\n  return {\n    indices: indices,\n    attributes: {\n      POSITION: {\n        size: 3,\n        value: positions\n      },\n      NORMAL: {\n        size: 3,\n        value: normals\n      },\n      TEXCOORD_0: {\n        size: 2,\n        value: texCoords\n      }\n    }\n  };\n}","map":{"version":3,"sources":["../../../src/geometries/truncated-cone-geometry.js"],"names":["INDEX_OFFSETS","x","y","z","TruncatedConeGeometry","Geometry","props","id","uid","indices","attributes","tesselateTruncatedCone","bottomRadius","topRadius","height","nradial","nvertical","verticalAxis","topCap","bottomCap","extra","numVertices","slant","Math","msin","mcos","mpi","cosSlant","sinSlant","start","end","vertsAroundEdge","indexOffset","positions","normals","texCoords","i3","i2","i","v","ringRadius","j","sin","cos","index","POSITION","size","value","NORMAL","TEXCOORD_0"],"mappings":";;;;;AAAA,OAAA,QAAA,MAAA,sBAAA;AACA,SAAA,GAAA,QAAA,gBAAA;AAEA,IAAMA,aAAa,GAAG;AACpBC,EAAAA,CAAC,EAAE,CAAA,CAAA,EAAA,CAAA,EADiB,CACjB,CADiB;AAEpBC,EAAAA,CAAC,EAAE,CAAA,CAAA,EAAA,CAAA,EAFiB,CAEjB,CAFiB;AAGpBC,EAAAA,CAAC,EAAE,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA;AAHiB,CAAtB;;IAMqBC,qB;;;AACnB,WAAA,qBAAA,GAAwB;AAAA,QAAZE,KAAY,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,qBAAA,CAAA;;AAAA,QAAA,SAAA,GACwBA,KADxB,CAAA,EAAA;AAAA,QACfC,EADe,GAAA,SAAA,KAAA,KAAA,CAAA,GACVC,GAAG,CADO,yBACP,CADO,GAAA,SAAA;;AAAA,QAAA,qBAAA,GAEQG,sBAAsB,CAF9B,KAE8B,CAF9B;AAAA,QAEfF,OAFe,GAAA,qBAAA,CAAA,OAAA;AAAA,QAENC,UAFM,GAAA,qBAAA,CAAA,UAAA;;AAAA,WAAA,0BAAA,CAAA,IAAA,EAAA,eAAA,CAAA,qBAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAA,aAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAKpBH,MAAAA,EAAE,EALkB,EAAA;AAMpBE,MAAAA,OAAO,EANa,OAAA;AAOpBC,MAAAA,UAAU,EAAA,aAAA,CAAA,EAAA,EAAA,UAAA,EAAqBJ,KAAK,CAA1B,UAAA;AAPU,KAAA,CAAA,CAAA,CAAA;AASvB;;;EAVgDD,Q;;SAA9BD,qB;;AAiBrB,SAAA,sBAAA,CAAA,KAAA,EAAuC;AAAA,MAAA,mBAAA,GAUjCE,KAViC,CAAA,YAAA;AAAA,MAEnCM,YAFmC,GAAA,mBAAA,KAAA,KAAA,CAAA,GAAA,CAAA,GAAA,mBAAA;AAAA,MAAA,gBAAA,GAUjCN,KAViC,CAAA,SAAA;AAAA,MAGnCO,SAHmC,GAAA,gBAAA,KAAA,KAAA,CAAA,GAAA,CAAA,GAAA,gBAAA;AAAA,MAAA,aAAA,GAUjCP,KAViC,CAAA,MAAA;AAAA,MAInCQ,MAJmC,GAAA,aAAA,KAAA,KAAA,CAAA,GAAA,CAAA,GAAA,aAAA;AAAA,MAAA,cAAA,GAUjCR,KAViC,CAAA,OAAA;AAAA,MAKnCS,OALmC,GAAA,cAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,cAAA;AAAA,MAAA,gBAAA,GAUjCT,KAViC,CAAA,SAAA;AAAA,MAMnCU,SANmC,GAAA,gBAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,gBAAA;AAAA,MAAA,mBAAA,GAUjCV,KAViC,CAAA,YAAA;AAAA,MAOnCW,YAPmC,GAAA,mBAAA,KAAA,KAAA,CAAA,GAAA,GAAA,GAAA,mBAAA;AAAA,MAAA,aAAA,GAUjCX,KAViC,CAAA,MAAA;AAAA,MAQnCY,MARmC,GAAA,aAAA,KAAA,KAAA,CAAA,GAAA,KAAA,GAAA,aAAA;AAAA,MAAA,gBAAA,GAUjCZ,KAViC,CAAA,SAAA;AAAA,MASnCa,SATmC,GAAA,gBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,GAAA,gBAAA;AAYrC,MAAMC,KAAK,GAAG,CAACF,MAAM,GAAA,CAAA,GAAP,CAAA,KAAoBC,SAAS,GAAA,CAAA,GAA3C,CAAc,CAAd;AACA,MAAME,WAAW,GAAG,CAACN,OAAO,GAAR,CAAA,KAAiBC,SAAS,GAATA,CAAAA,GAArC,KAAoB,CAApB;AAEA,MAAMM,KAAK,GAAGC,IAAI,CAAJA,KAAAA,CAAWX,YAAY,GAAvBW,SAAAA,EAAd,MAAcA,CAAd;AACA,MAAMC,IAAI,GAAGD,IAAI,CAAjB,GAAA;AACA,MAAME,IAAI,GAAGF,IAAI,CAAjB,GAAA;AACA,MAAMG,GAAG,GAAGH,IAAI,CAAhB,EAAA;AACA,MAAMI,QAAQ,GAAGF,IAAI,CAArB,KAAqB,CAArB;AACA,MAAMG,QAAQ,GAAGJ,IAAI,CAArB,KAAqB,CAArB;AACA,MAAMK,KAAK,GAAGX,MAAM,GAAG,CAAH,CAAA,GAApB,CAAA;AACA,MAAMY,GAAG,GAAGd,SAAS,IAAIG,SAAS,GAAA,CAAA,GAAlC,CAAqB,CAArB;AACA,MAAMY,eAAe,GAAGhB,OAAO,GAA/B,CAAA;AAEA,MAAMN,OAAO,GAAG,IAAA,WAAA,CAAgBM,OAAO,IAAIC,SAAS,GAApBD,KAAO,CAAPA,GAAhC,CAAgB,CAAhB;AACA,MAAMiB,WAAW,GAAGhC,aAAa,CAAjC,YAAiC,CAAjC;AAEA,MAAMiC,SAAS,GAAG,IAAA,YAAA,CAAiBZ,WAAW,GAA9C,CAAkB,CAAlB;AACA,MAAMa,OAAO,GAAG,IAAA,YAAA,CAAiBb,WAAW,GAA5C,CAAgB,CAAhB;AACA,MAAMc,SAAS,GAAG,IAAA,YAAA,CAAiBd,WAAW,GAA9C,CAAkB,CAAlB;AAEA,MAAIe,EAAE,GAAN,CAAA;AACA,MAAIC,EAAE,GAAN,CAAA;;AACA,OAAK,IAAIC,CAAC,GAAV,KAAA,EAAoBA,CAAC,IAArB,GAAA,EAA8BA,CAA9B,EAAA,EAAmC;AACjC,QAAIC,CAAC,GAAGD,CAAC,GAAT,SAAA;AACA,QAAIpC,CAAC,GAAGY,MAAM,GAAd,CAAA;AACA,QAAI0B,UAAU,GAAA,KAAd,CAAA;;AAEA,QAAIF,CAAC,GAAL,CAAA,EAAW;AACTpC,MAAAA,CAAC,GAADA,CAAAA;AACAqC,MAAAA,CAAC,GAADA,CAAAA;AACAC,MAAAA,UAAU,GAAVA,YAAAA;AAHF,KAAA,MAIO,IAAIF,CAAC,GAAL,SAAA,EAAmB;AACxBpC,MAAAA,CAAC,GAADA,MAAAA;AACAqC,MAAAA,CAAC,GAADA,CAAAA;AACAC,MAAAA,UAAU,GAAVA,SAAAA;AAHK,KAAA,MAIA;AACLA,MAAAA,UAAU,GAAG5B,YAAY,GAAG,CAACC,SAAS,GAAV,YAAA,KAA8ByB,CAAC,GAA3DE,SAA4B,CAA5BA;AACD;;AACD,QAAIF,CAAC,KAAK,CAANA,CAAAA,IAAYA,CAAC,KAAKtB,SAAS,GAA/B,CAAA,EAAqC;AACnCwB,MAAAA,UAAU,GAAVA,CAAAA;AACAD,MAAAA,CAAC,GAADA,CAAAA;AACD;;AACDrC,IAAAA,CAAC,IAAIY,MAAM,GAAXZ,CAAAA;;AACA,SAAK,IAAIuC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAjB,eAAA,EAAqCA,CAArC,EAAA,EAA0C;AACxC,UAAMC,GAAG,GAAGlB,IAAI,CAAEiB,CAAC,GAADA,GAAAA,GAAD,CAACA,GAAlB,OAAgB,CAAhB;AACA,UAAME,GAAG,GAAGlB,IAAI,CAAEgB,CAAC,GAADA,GAAAA,GAAD,CAACA,GAAlB,OAAgB,CAAhB;AAEAR,MAAAA,SAAS,CAACG,EAAE,GAAGJ,WAAW,CAA1BC,CAA0B,CAAjB,CAATA,GAAiCS,GAAG,GAApCT,UAAAA;AACAA,MAAAA,SAAS,CAACG,EAAE,GAAGJ,WAAW,CAA1BC,CAA0B,CAAjB,CAATA,GAAAA,CAAAA;AACAA,MAAAA,SAAS,CAACG,EAAE,GAAGJ,WAAW,CAA1BC,CAA0B,CAAjB,CAATA,GAAiCU,GAAG,GAApCV,UAAAA;AAEAC,MAAAA,OAAO,CAACE,EAAE,GAAGJ,WAAW,CAAxBE,CAAwB,CAAjB,CAAPA,GAA+BI,CAAC,GAADA,CAAAA,IAASA,CAAC,GAAVA,SAAAA,GAAAA,CAAAA,GAA6BI,GAAG,GAA/DR,QAAAA;AACAA,MAAAA,OAAO,CAACE,EAAE,GAAGJ,WAAW,CAAxBE,CAAwB,CAAjB,CAAPA,GAA+BI,CAAC,GAADA,CAAAA,GAAQ,CAARA,CAAAA,GAAaA,CAAC,GAADA,SAAAA,GAAAA,CAAAA,GAA5CJ,QAAAA;AACAA,MAAAA,OAAO,CAACE,EAAE,GAAGJ,WAAW,CAAxBE,CAAwB,CAAjB,CAAPA,GAA+BI,CAAC,GAADA,CAAAA,IAASA,CAAC,GAAVA,SAAAA,GAAAA,CAAAA,GAA6BK,GAAG,GAA/DT,QAAAA;AAEAC,MAAAA,SAAS,CAACE,EAAE,GAAZF,CAAS,CAATA,GAAoBM,CAAC,GAArBN,OAAAA;AACAA,MAAAA,SAAS,CAACE,EAAE,GAAZF,CAAS,CAATA,GAAAA,CAAAA;AAEAE,MAAAA,EAAE,IAAFA,CAAAA;AACAD,MAAAA,EAAE,IAAFA,CAAAA;AACD;AACF;;AAED,OAAK,IAAIE,EAAC,GAAV,CAAA,EAAgBA,EAAC,GAAGtB,SAAS,GAA7B,KAAA,EAAuCsB,EAAvC,EAAA,EAA4C;AAC1C,SAAK,IAAIG,EAAC,GAAV,CAAA,EAAgBA,EAAC,GAAjB,OAAA,EAA6BA,EAA7B,EAAA,EAAkC;AAChC,UAAMG,KAAK,GAAG,CAACN,EAAC,GAADA,OAAAA,GAAD,EAAA,IAAd,CAAA;AACA7B,MAAAA,OAAO,CAACmC,KAAK,GAAbnC,CAAO,CAAPA,GAAqBsB,eAAe,IAAIO,EAAC,GAApBP,CAAe,CAAfA,GAAAA,CAAAA,GAArBtB,EAAAA;AACAA,MAAAA,OAAO,CAACmC,KAAK,GAAbnC,CAAO,CAAPA,GAAqBsB,eAAe,IAAIO,EAAC,GAApBP,CAAe,CAAfA,GAAAA,CAAAA,GAArBtB,EAAAA;AACAA,MAAAA,OAAO,CAACmC,KAAK,GAAbnC,CAAO,CAAPA,GAAqBsB,eAAe,IAAIO,EAAC,GAApBP,CAAe,CAAfA,GAAAA,CAAAA,GAArBtB,EAAAA;AACAA,MAAAA,OAAO,CAACmC,KAAK,GAAbnC,CAAO,CAAPA,GAAqBsB,eAAe,IAAIO,EAAC,GAApBP,CAAe,CAAfA,GAAAA,CAAAA,GAArBtB,EAAAA;AACAA,MAAAA,OAAO,CAACmC,KAAK,GAAbnC,CAAO,CAAPA,GAAqBsB,eAAe,IAAIO,EAAC,GAApBP,CAAe,CAAfA,GAAAA,CAAAA,GAArBtB,EAAAA;AACAA,MAAAA,OAAO,CAACmC,KAAK,GAAbnC,CAAO,CAAPA,GAAqBsB,eAAe,IAAIO,EAAC,GAApBP,CAAe,CAAfA,GAAAA,CAAAA,GAArBtB,EAAAA;AACD;AACF;;AAED,SAAO;AACLA,IAAAA,OAAO,EADF,OAAA;AAELC,IAAAA,UAAU,EAAE;AACVmC,MAAAA,QAAQ,EAAE;AAACC,QAAAA,IAAI,EAAL,CAAA;AAAUC,QAAAA,KAAK,EAAEd;AAAjB,OADA;AAEVe,MAAAA,MAAM,EAAE;AAACF,QAAAA,IAAI,EAAL,CAAA;AAAUC,QAAAA,KAAK,EAAEb;AAAjB,OAFE;AAGVe,MAAAA,UAAU,EAAE;AAACH,QAAAA,IAAI,EAAL,CAAA;AAAUC,QAAAA,KAAK,EAAEZ;AAAjB;AAHF;AAFP,GAAP;AAQD","sourcesContent":["import Geometry from '../geometry/geometry';\nimport {uid} from '@luma.gl/webgl';\n\nconst INDEX_OFFSETS = {\n  x: [2, 0, 1],\n  y: [0, 1, 2],\n  z: [1, 2, 0]\n};\n\nexport default class TruncatedConeGeometry extends Geometry {\n  constructor(props = {}) {\n    const {id = uid('truncated-code-geometry')} = props;\n    const {indices, attributes} = tesselateTruncatedCone(props);\n    super({\n      ...props,\n      id,\n      indices,\n      attributes: {...attributes, ...props.attributes}\n    });\n  }\n}\n\n// Primitives inspired by TDL http://code.google.com/p/webglsamples/,\n// copyright 2011 Google Inc. new BSD License\n// (http://www.opensource.org/licenses/bsd-license.php).\n/* eslint-disable max-statements, complexity */\nfunction tesselateTruncatedCone(props) {\n  const {\n    bottomRadius = 0,\n    topRadius = 0,\n    height = 1,\n    nradial = 10,\n    nvertical = 10,\n    verticalAxis = 'y',\n    topCap = false,\n    bottomCap = false\n  } = props;\n\n  const extra = (topCap ? 2 : 0) + (bottomCap ? 2 : 0);\n  const numVertices = (nradial + 1) * (nvertical + 1 + extra);\n\n  const slant = Math.atan2(bottomRadius - topRadius, height);\n  const msin = Math.sin;\n  const mcos = Math.cos;\n  const mpi = Math.PI;\n  const cosSlant = mcos(slant);\n  const sinSlant = msin(slant);\n  const start = topCap ? -2 : 0;\n  const end = nvertical + (bottomCap ? 2 : 0);\n  const vertsAroundEdge = nradial + 1;\n\n  const indices = new Uint16Array(nradial * (nvertical + extra) * 6);\n  const indexOffset = INDEX_OFFSETS[verticalAxis];\n\n  const positions = new Float32Array(numVertices * 3);\n  const normals = new Float32Array(numVertices * 3);\n  const texCoords = new Float32Array(numVertices * 2);\n\n  let i3 = 0;\n  let i2 = 0;\n  for (let i = start; i <= end; i++) {\n    let v = i / nvertical;\n    let y = height * v;\n    let ringRadius;\n\n    if (i < 0) {\n      y = 0;\n      v = 1;\n      ringRadius = bottomRadius;\n    } else if (i > nvertical) {\n      y = height;\n      v = 1;\n      ringRadius = topRadius;\n    } else {\n      ringRadius = bottomRadius + (topRadius - bottomRadius) * (i / nvertical);\n    }\n    if (i === -2 || i === nvertical + 2) {\n      ringRadius = 0;\n      v = 0;\n    }\n    y -= height / 2;\n    for (let j = 0; j < vertsAroundEdge; j++) {\n      const sin = msin((j * mpi * 2) / nradial);\n      const cos = mcos((j * mpi * 2) / nradial);\n\n      positions[i3 + indexOffset[0]] = sin * ringRadius;\n      positions[i3 + indexOffset[1]] = y;\n      positions[i3 + indexOffset[2]] = cos * ringRadius;\n\n      normals[i3 + indexOffset[0]] = i < 0 || i > nvertical ? 0 : sin * cosSlant;\n      normals[i3 + indexOffset[1]] = i < 0 ? -1 : i > nvertical ? 1 : sinSlant;\n      normals[i3 + indexOffset[2]] = i < 0 || i > nvertical ? 0 : cos * cosSlant;\n\n      texCoords[i2 + 0] = j / nradial;\n      texCoords[i2 + 1] = v;\n\n      i2 += 2;\n      i3 += 3;\n    }\n  }\n\n  for (let i = 0; i < nvertical + extra; i++) {\n    for (let j = 0; j < nradial; j++) {\n      const index = (i * nradial + j) * 6;\n      indices[index + 0] = vertsAroundEdge * (i + 0) + 0 + j;\n      indices[index + 1] = vertsAroundEdge * (i + 0) + 1 + j;\n      indices[index + 2] = vertsAroundEdge * (i + 1) + 1 + j;\n      indices[index + 3] = vertsAroundEdge * (i + 0) + 0 + j;\n      indices[index + 4] = vertsAroundEdge * (i + 1) + 1 + j;\n      indices[index + 5] = vertsAroundEdge * (i + 1) + 0 + j;\n    }\n  }\n\n  return {\n    indices,\n    attributes: {\n      POSITION: {size: 3, value: positions},\n      NORMAL: {size: 3, value: normals},\n      TEXCOORD_0: {size: 2, value: texCoords}\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}