{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { isWebGL2, log as _log } from '@luma.gl/gltools';\nimport Resource from './resource';\nimport Texture2D from './texture-2d';\nimport Renderbuffer from './renderbuffer';\nimport { clear as _clear, clearBuffer } from './clear';\nimport { copyToDataUrl } from './copy-and-blit.js';\nimport { getFeatures } from '../features';\nimport { assertWebGL2Context, getKey } from '../webgl-utils';\nimport { assert } from '../utils';\nvar ERR_MULTIPLE_RENDERTARGETS = 'Multiple render targets not supported';\n\nvar Framebuffer = function (_Resource) {\n  _inherits(Framebuffer, _Resource);\n\n  _createClass(Framebuffer, [{\n    key: \"MAX_COLOR_ATTACHMENTS\",\n    get: function get() {\n      return this.gl.getParameter(this.gl.MAX_COLOR_ATTACHMENTS);\n    }\n  }, {\n    key: \"MAX_DRAW_BUFFERS\",\n    get: function get() {\n      return this.gl.getParameter(this.gl.MAX_DRAW_BUFFERS);\n    }\n  }], [{\n    key: \"isSupported\",\n    value: function isSupported(gl) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          colorBufferFloat = _ref.colorBufferFloat,\n          colorBufferHalfFloat = _ref.colorBufferHalfFloat;\n\n      var supported = true;\n\n      if (colorBufferFloat) {\n        supported = Boolean(gl.getExtension('EXT_color_buffer_float') || gl.getExtension('WEBGL_color_buffer_float') || gl.getExtension('OES_texture_float'));\n      }\n\n      if (colorBufferHalfFloat) {\n        supported = supported && Boolean(gl.getExtension('EXT_color_buffer_float') || gl.getExtension('EXT_color_buffer_half_float'));\n      }\n\n      return supported;\n    }\n  }, {\n    key: \"getDefaultFramebuffer\",\n    value: function getDefaultFramebuffer(gl) {\n      gl.luma = gl.luma || {};\n      gl.luma.defaultFramebuffer = gl.luma.defaultFramebuffer || new Framebuffer(gl, {\n        id: 'default-framebuffer',\n        handle: null,\n        attachments: {}\n      });\n      return gl.luma.defaultFramebuffer;\n    }\n  }]);\n\n  function Framebuffer(gl) {\n    var _this;\n\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Framebuffer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Framebuffer).call(this, gl, opts));\n    _this.width = null;\n    _this.height = null;\n    _this.attachments = {};\n    _this.readBuffer = 36064;\n    _this.drawBuffers = [36064];\n    _this.ownResources = [];\n\n    _this.initialize(opts);\n\n    Object.seal(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Framebuffer, [{\n    key: \"initialize\",\n    value: function initialize(_ref2) {\n      var _ref2$width = _ref2.width,\n          width = _ref2$width === void 0 ? 1 : _ref2$width,\n          _ref2$height = _ref2.height,\n          height = _ref2$height === void 0 ? 1 : _ref2$height,\n          _ref2$attachments = _ref2.attachments,\n          attachments = _ref2$attachments === void 0 ? null : _ref2$attachments,\n          _ref2$color = _ref2.color,\n          color = _ref2$color === void 0 ? true : _ref2$color,\n          _ref2$depth = _ref2.depth,\n          depth = _ref2$depth === void 0 ? true : _ref2$depth,\n          _ref2$stencil = _ref2.stencil,\n          stencil = _ref2$stencil === void 0 ? false : _ref2$stencil,\n          _ref2$check = _ref2.check,\n          check = _ref2$check === void 0 ? true : _ref2$check,\n          readBuffer = _ref2.readBuffer,\n          drawBuffers = _ref2.drawBuffers;\n      assert(width >= 0 && height >= 0, 'Width and height need to be integers');\n      this.width = width;\n      this.height = height;\n\n      if (attachments) {\n        for (var attachment in attachments) {\n          var target = attachments[attachment];\n          var object = Array.isArray(target) ? target[0] : target;\n          object.resize({\n            width: width,\n            height: height\n          });\n        }\n      } else {\n        attachments = this._createDefaultAttachments(color, depth, stencil, width, height);\n      }\n\n      this.update({\n        clearAttachments: true,\n        attachments: attachments,\n        readBuffer: readBuffer,\n        drawBuffers: drawBuffers\n      });\n\n      if (attachments && check) {\n        this.checkStatus();\n      }\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.ownResources[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var resource = _step.value;\n          resource[\"delete\"]();\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      _get(_getPrototypeOf(Framebuffer.prototype), \"delete\", this).call(this);\n    }\n  }, {\n    key: \"update\",\n    value: function update(_ref3) {\n      var _ref3$attachments = _ref3.attachments,\n          attachments = _ref3$attachments === void 0 ? {} : _ref3$attachments,\n          readBuffer = _ref3.readBuffer,\n          drawBuffers = _ref3.drawBuffers,\n          _ref3$clearAttachment = _ref3.clearAttachments,\n          clearAttachments = _ref3$clearAttachment === void 0 ? false : _ref3$clearAttachment,\n          _ref3$resizeAttachmen = _ref3.resizeAttachments,\n          resizeAttachments = _ref3$resizeAttachmen === void 0 ? true : _ref3$resizeAttachmen;\n      this.attach(attachments, {\n        clearAttachments: clearAttachments,\n        resizeAttachments: resizeAttachments\n      });\n      var gl = this.gl;\n      var prevHandle = gl.bindFramebuffer(36160, this.handle);\n\n      if (readBuffer) {\n        this._setReadBuffer(readBuffer);\n      }\n\n      if (drawBuffers) {\n        this._setDrawBuffers(drawBuffers);\n      }\n\n      gl.bindFramebuffer(36160, prevHandle || null);\n      return this;\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          width = _ref4.width,\n          height = _ref4.height;\n\n      if (this.handle === null) {\n        assert(width === undefined && height === undefined);\n        this.width = this.gl.drawingBufferWidth;\n        this.height = this.gl.drawingBufferHeight;\n        return this;\n      }\n\n      if (width === undefined) {\n        width = this.gl.drawingBufferWidth;\n      }\n\n      if (height === undefined) {\n        height = this.gl.drawingBufferHeight;\n      }\n\n      if (width !== this.width && height !== this.height) {\n        _log.log(2, \"Resizing framebuffer \".concat(this.id, \" to \").concat(width, \"x\").concat(height))();\n      }\n\n      for (var attachmentPoint in this.attachments) {\n        this.attachments[attachmentPoint].resize({\n          width: width,\n          height: height\n        });\n      }\n\n      this.width = width;\n      this.height = height;\n      return this;\n    }\n  }, {\n    key: \"attach\",\n    value: function attach(attachments) {\n      var _this2 = this;\n\n      var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref5$clearAttachment = _ref5.clearAttachments,\n          clearAttachments = _ref5$clearAttachment === void 0 ? false : _ref5$clearAttachment,\n          _ref5$resizeAttachmen = _ref5.resizeAttachments,\n          resizeAttachments = _ref5$resizeAttachmen === void 0 ? true : _ref5$resizeAttachmen;\n\n      var newAttachments = {};\n\n      if (clearAttachments) {\n        Object.keys(this.attachments).forEach(function (key) {\n          newAttachments[key] = null;\n        });\n      }\n\n      Object.assign(newAttachments, attachments);\n      var prevHandle = this.gl.bindFramebuffer(36160, this.handle);\n\n      for (var key in newAttachments) {\n        assert(key !== undefined, 'Misspelled framebuffer binding point?');\n        var attachment = Number(key);\n        var descriptor = newAttachments[attachment];\n        var object = descriptor;\n\n        if (!object) {\n          this._unattach(attachment);\n        } else if (object instanceof Renderbuffer) {\n          this._attachRenderbuffer({\n            attachment: attachment,\n            renderbuffer: object\n          });\n        } else if (Array.isArray(descriptor)) {\n          var _descriptor = _slicedToArray(descriptor, 3),\n              texture = _descriptor[0],\n              _descriptor$ = _descriptor[1],\n              layer = _descriptor$ === void 0 ? 0 : _descriptor$,\n              _descriptor$2 = _descriptor[2],\n              level = _descriptor$2 === void 0 ? 0 : _descriptor$2;\n\n          object = texture;\n\n          this._attachTexture({\n            attachment: attachment,\n            texture: texture,\n            layer: layer,\n            level: level\n          });\n        } else {\n          this._attachTexture({\n            attachment: attachment,\n            texture: object,\n            layer: 0,\n            level: 0\n          });\n        }\n\n        if (resizeAttachments && object) {\n          object.resize({\n            width: this.width,\n            height: this.height\n          });\n        }\n      }\n\n      this.gl.bindFramebuffer(36160, prevHandle || null);\n      Object.assign(this.attachments, attachments);\n      Object.keys(this.attachments).filter(function (key) {\n        return !_this2.attachments[key];\n      }).forEach(function (key) {\n        delete _this2.attachments[key];\n      });\n    }\n  }, {\n    key: \"checkStatus\",\n    value: function checkStatus() {\n      var gl = this.gl;\n      var status = this.getStatus();\n\n      if (status !== 36053) {\n        throw new Error(_getFrameBufferStatus(status));\n      }\n\n      return this;\n    }\n  }, {\n    key: \"getStatus\",\n    value: function getStatus() {\n      var gl = this.gl;\n      var prevHandle = gl.bindFramebuffer(36160, this.handle);\n      var status = gl.checkFramebufferStatus(36160);\n      gl.bindFramebuffer(36160, prevHandle || null);\n      return status;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          color = _ref6.color,\n          depth = _ref6.depth,\n          stencil = _ref6.stencil,\n          _ref6$drawBuffers = _ref6.drawBuffers,\n          drawBuffers = _ref6$drawBuffers === void 0 ? [] : _ref6$drawBuffers;\n\n      var prevHandle = this.gl.bindFramebuffer(36160, this.handle);\n\n      if (color || depth || stencil) {\n        _clear(this.gl, {\n          color: color,\n          depth: depth,\n          stencil: stencil\n        });\n      }\n\n      drawBuffers.forEach(function (value, drawBuffer) {\n        clearBuffer({\n          drawBuffer: drawBuffer,\n          value: value\n        });\n      });\n      this.gl.bindFramebuffer(36160, prevHandle || null);\n      return this;\n    }\n  }, {\n    key: \"readPixels\",\n    value: function readPixels() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _log.error('Framebuffer.readPixels() is no logner supported, use readPixelsToArray(framebuffer)')();\n\n      return null;\n    }\n  }, {\n    key: \"readPixelsToBuffer\",\n    value: function readPixelsToBuffer() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _log.error('Framebuffer.readPixelsToBuffer()is no logner supported, use readPixelsToBuffer(framebuffer)')();\n\n      return null;\n    }\n  }, {\n    key: \"copyToDataUrl\",\n    value: function copyToDataUrl() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _log.error('Framebuffer.copyToDataUrl() is no logner supported, use copyToDataUrl(framebuffer)')();\n\n      return null;\n    }\n  }, {\n    key: \"copyToImage\",\n    value: function copyToImage() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _log.error('Framebuffer.copyToImage() is no logner supported, use copyToImage(framebuffer)')();\n\n      return null;\n    }\n  }, {\n    key: \"copyToTexture\",\n    value: function copyToTexture() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _log.error('Framebuffer.copyToTexture({...}) is no logner supported, use copyToTexture(source, target, opts})')();\n\n      return null;\n    }\n  }, {\n    key: \"blit\",\n    value: function blit() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _log.error('Framebuffer.blit({...}) is no logner supported, use blit(source, target, opts)')();\n\n      return null;\n    }\n  }, {\n    key: \"invalidate\",\n    value: function invalidate(_ref7) {\n      var _ref7$attachments = _ref7.attachments,\n          attachments = _ref7$attachments === void 0 ? [] : _ref7$attachments,\n          _ref7$x = _ref7.x,\n          x = _ref7$x === void 0 ? 0 : _ref7$x,\n          _ref7$y = _ref7.y,\n          y = _ref7$y === void 0 ? 0 : _ref7$y,\n          width = _ref7.width,\n          height = _ref7.height;\n      var gl = this.gl;\n      assertWebGL2Context(gl);\n      var prevHandle = gl.bindFramebuffer(36008, this.handle);\n      var invalidateAll = x === 0 && y === 0 && width === undefined && height === undefined;\n\n      if (invalidateAll) {\n        gl.invalidateFramebuffer(36008, attachments);\n      } else {\n        gl.invalidateFramebuffer(36008, attachments, x, y, width, height);\n      }\n\n      gl.bindFramebuffer(36008, prevHandle);\n      return this;\n    }\n  }, {\n    key: \"getAttachmentParameter\",\n    value: function getAttachmentParameter(attachment, pname, keys) {\n      var value = this._getAttachmentParameterFallback(pname);\n\n      if (value === null) {\n        this.gl.bindFramebuffer(36160, this.handle);\n        value = this.gl.getFramebufferAttachmentParameter(36160, attachment, pname);\n        this.gl.bindFramebuffer(36160, null);\n      }\n\n      if (keys && value > 1000) {\n        value = getKey(this.gl, value);\n      }\n\n      return value;\n    }\n  }, {\n    key: \"getAttachmentParameters\",\n    value: function getAttachmentParameters() {\n      var attachment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 36064;\n      var keys = arguments.length > 1 ? arguments[1] : undefined;\n      var parameters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.constructor.ATTACHMENT_PARAMETERS || [];\n      var values = {};\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = parameters[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var pname = _step2.value;\n          var key = keys ? getKey(this.gl, pname) : pname;\n          values[key] = this.getAttachmentParameter(attachment, pname, keys);\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n            _iterator2[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return values;\n    }\n  }, {\n    key: \"getParameters\",\n    value: function getParameters() {\n      var keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var attachments = Object.keys(this.attachments);\n      var parameters = {};\n\n      for (var _i = 0, _attachments = attachments; _i < _attachments.length; _i++) {\n        var attachmentName = _attachments[_i];\n        var attachment = Number(attachmentName);\n        var key = keys ? getKey(this.gl, attachment) : attachment;\n        parameters[key] = this.getAttachmentParameters(attachment, keys);\n      }\n\n      return parameters;\n    }\n  }, {\n    key: \"show\",\n    value: function show() {\n      if (typeof window !== 'undefined') {\n        window.open(copyToDataUrl(this), 'luma-debug-texture');\n      }\n\n      return this;\n    }\n  }, {\n    key: \"log\",\n    value: function log() {\n      var logLevel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n      if (logLevel > _log.level || typeof window === 'undefined') {\n        return this;\n      }\n\n      message = message || \"Framebuffer \".concat(this.id);\n      var image = copyToDataUrl(this, {\n        maxHeight: 100\n      });\n\n      _log.image({\n        logLevel: logLevel,\n        message: message,\n        image: image\n      }, message)();\n\n      return this;\n    }\n  }, {\n    key: \"bind\",\n    value: function bind() {\n      var _ref8 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref8$target = _ref8.target,\n          target = _ref8$target === void 0 ? 36160 : _ref8$target;\n\n      this.gl.bindFramebuffer(target, this.handle);\n      return this;\n    }\n  }, {\n    key: \"unbind\",\n    value: function unbind() {\n      var _ref9 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref9$target = _ref9.target,\n          target = _ref9$target === void 0 ? 36160 : _ref9$target;\n\n      this.gl.bindFramebuffer(target, null);\n      return this;\n    }\n  }, {\n    key: \"_createDefaultAttachments\",\n    value: function _createDefaultAttachments(color, depth, stencil, width, height) {\n      var defaultAttachments = null;\n\n      if (color) {\n        var _parameters;\n\n        defaultAttachments = defaultAttachments || {};\n        defaultAttachments[36064] = new Texture2D(this.gl, {\n          id: \"\".concat(this.id, \"-color0\"),\n          pixels: null,\n          format: 6408,\n          type: 5121,\n          width: width,\n          height: height,\n          mipmaps: false,\n          parameters: (_parameters = {}, _defineProperty(_parameters, 10241, 9729), _defineProperty(_parameters, 10240, 9729), _defineProperty(_parameters, 10242, 33071), _defineProperty(_parameters, 10243, 33071), _parameters)\n        });\n        this.ownResources.push(defaultAttachments[36064]);\n      }\n\n      if (depth && stencil) {\n        defaultAttachments = defaultAttachments || {};\n        defaultAttachments[33306] = new Renderbuffer(this.gl, {\n          id: \"\".concat(this.id, \"-depth-stencil\"),\n          format: 35056,\n          width: width,\n          height: 111\n        });\n        this.ownResources.push(defaultAttachments[33306]);\n      } else if (depth) {\n        defaultAttachments = defaultAttachments || {};\n        defaultAttachments[36096] = new Renderbuffer(this.gl, {\n          id: \"\".concat(this.id, \"-depth\"),\n          format: 33189,\n          width: width,\n          height: height\n        });\n        this.ownResources.push(defaultAttachments[36096]);\n      } else if (stencil) {\n        assert(false);\n      }\n\n      return defaultAttachments;\n    }\n  }, {\n    key: \"_unattach\",\n    value: function _unattach(attachment) {\n      var oldAttachment = this.attachments[attachment];\n\n      if (!oldAttachment) {\n        return;\n      }\n\n      if (oldAttachment instanceof Renderbuffer) {\n        this.gl.framebufferRenderbuffer(36160, attachment, 36161, null);\n      } else {\n        this.gl.framebufferTexture2D(36160, attachment, 3553, null, 0);\n      }\n\n      delete this.attachments[attachment];\n    }\n  }, {\n    key: \"_attachRenderbuffer\",\n    value: function _attachRenderbuffer(_ref10) {\n      var _ref10$attachment = _ref10.attachment,\n          attachment = _ref10$attachment === void 0 ? 36064 : _ref10$attachment,\n          renderbuffer = _ref10.renderbuffer;\n      var gl = this.gl;\n      gl.framebufferRenderbuffer(36160, attachment, 36161, renderbuffer.handle);\n      this.attachments[attachment] = renderbuffer;\n    }\n  }, {\n    key: \"_attachTexture\",\n    value: function _attachTexture(_ref11) {\n      var _ref11$attachment = _ref11.attachment,\n          attachment = _ref11$attachment === void 0 ? 36064 : _ref11$attachment,\n          texture = _ref11.texture,\n          layer = _ref11.layer,\n          level = _ref11.level;\n      var gl = this.gl;\n      gl.bindTexture(texture.target, texture.handle);\n\n      switch (texture.target) {\n        case 35866:\n        case 32879:\n          gl.framebufferTextureLayer(36160, attachment, texture.target, level, layer);\n          break;\n\n        case 34067:\n          var face = mapIndexToCubeMapFace(layer);\n          gl.framebufferTexture2D(36160, attachment, face, texture.handle, level);\n          break;\n\n        case 3553:\n          gl.framebufferTexture2D(36160, attachment, 3553, texture.handle, level);\n          break;\n\n        default:\n          assert(false, 'Illegal texture type');\n      }\n\n      gl.bindTexture(texture.target, null);\n      this.attachments[attachment] = texture;\n    }\n  }, {\n    key: \"_setReadBuffer\",\n    value: function _setReadBuffer(readBuffer) {\n      var gl = this.gl;\n\n      if (isWebGL2(gl)) {\n        gl.readBuffer(readBuffer);\n      } else {\n        assert(readBuffer === 36064 || readBuffer === 1029, ERR_MULTIPLE_RENDERTARGETS);\n      }\n\n      this.readBuffer = readBuffer;\n    }\n  }, {\n    key: \"_setDrawBuffers\",\n    value: function _setDrawBuffers(drawBuffers) {\n      var gl = this.gl;\n\n      if (isWebGL2(gl)) {\n        gl.drawBuffers(drawBuffers);\n      } else {\n        var ext = gl.getExtension('WEBGL.draw_buffers');\n\n        if (ext) {\n          ext.drawBuffersWEBGL(drawBuffers);\n        } else {\n          assert(drawBuffers.length === 1 && (drawBuffers[0] === 36064 || drawBuffers[0] === 1029), ERR_MULTIPLE_RENDERTARGETS);\n        }\n      }\n\n      this.drawBuffers = drawBuffers;\n    }\n  }, {\n    key: \"_getAttachmentParameterFallback\",\n    value: function _getAttachmentParameterFallback(pname) {\n      var caps = getFeatures(this.gl);\n\n      switch (pname) {\n        case 36052:\n          return !caps.WEBGL2 ? 0 : null;\n\n        case 33298:\n        case 33299:\n        case 33300:\n        case 33301:\n        case 33302:\n        case 33303:\n          return !caps.WEBGL2 ? 8 : null;\n\n        case 33297:\n          return !caps.WEBGL2 ? 5125 : null;\n\n        case 33296:\n          return !caps.WEBGL2 && !caps.EXT_sRGB ? 9729 : null;\n\n        default:\n          return null;\n      }\n    }\n  }, {\n    key: \"_createHandle\",\n    value: function _createHandle() {\n      return this.gl.createFramebuffer();\n    }\n  }, {\n    key: \"_deleteHandle\",\n    value: function _deleteHandle() {\n      this.gl.deleteFramebuffer(this.handle);\n    }\n  }, {\n    key: \"_bindHandle\",\n    value: function _bindHandle(handle) {\n      return this.gl.bindFramebuffer(36160, handle);\n    }\n  }, {\n    key: \"color\",\n    get: function get() {\n      return this.attachments[36064] || null;\n    }\n  }, {\n    key: \"texture\",\n    get: function get() {\n      return this.attachments[36064] || null;\n    }\n  }, {\n    key: \"depth\",\n    get: function get() {\n      return this.attachments[36096] || this.attachments[33306] || null;\n    }\n  }, {\n    key: \"stencil\",\n    get: function get() {\n      return this.attachments[36128] || this.attachments[33306] || null;\n    }\n  }]);\n\n  return Framebuffer;\n}(Resource);\n\nexport { Framebuffer as default };\n\nfunction mapIndexToCubeMapFace(layer) {\n  return layer < 34069 ? layer + 34069 : layer;\n}\n\nfunction _getFrameBufferStatus(status) {\n  var STATUS = Framebuffer.STATUS || {};\n  return STATUS[status] || \"Framebuffer error \".concat(status);\n}\n\nexport var FRAMEBUFFER_ATTACHMENT_PARAMETERS = [36049, 36048, 33296, 33298, 33299, 33300, 33301, 33302, 33303];\nFramebuffer.ATTACHMENT_PARAMETERS = FRAMEBUFFER_ATTACHMENT_PARAMETERS;","map":{"version":3,"sources":["../../../src/classes/framebuffer.js"],"names":["log","clear","ERR_MULTIPLE_RENDERTARGETS","Framebuffer","Resource","gl","colorBufferFloat","colorBufferHalfFloat","supported","Boolean","id","handle","attachments","opts","Object","width","height","color","depth","stencil","check","readBuffer","drawBuffers","assert","target","object","Array","clearAttachments","resource","resizeAttachments","prevHandle","newAttachments","key","attachment","Number","descriptor","renderbuffer","texture","layer","level","status","_getFrameBufferStatus","clearBuffer","drawBuffer","value","x","y","assertWebGL2Context","invalidateAll","pname","keys","getKey","parameters","values","attachmentName","window","copyToDataUrl","logLevel","message","image","maxHeight","defaultAttachments","pixels","format","type","mipmaps","oldAttachment","face","mapIndexToCubeMapFace","isWebGL2","ext","caps","getFeatures","STATUS","FRAMEBUFFER_ATTACHMENT_PARAMETERS"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {isWebGL2, log} from '@luma.gl/gltools';\n\nimport Resource from './resource';\nimport Texture2D from './texture-2d';\nimport Renderbuffer from './renderbuffer';\nimport {clear, clearBuffer} from './clear';\nimport {copyToDataUrl} from './copy-and-blit.js';\n\nimport {getFeatures} from '../features';\n\nimport {assertWebGL2Context, getKey} from '../webgl-utils';\n\nimport {assert} from '../utils';\n\nconst ERR_MULTIPLE_RENDERTARGETS = 'Multiple render targets not supported';\n\nexport default class Framebuffer extends Resource {\n  static isSupported(\n    gl,\n    {\n      colorBufferFloat, // Whether floating point textures can be rendered and read\n      colorBufferHalfFloat // Whether half float textures can be rendered and read\n    } = {}\n  ) {\n    let supported = true;\n\n    if (colorBufferFloat) {\n      supported = Boolean(\n        // WebGL 2\n        gl.getExtension('EXT_color_buffer_float') ||\n          // WebGL 1, not exposed on all platforms\n          gl.getExtension('WEBGL_color_buffer_float') ||\n          // WebGL 1, implicitly enables float render targets https://www.khronos.org/registry/webgl/extensions/OES_texture_float/\n          gl.getExtension('OES_texture_float')\n      );\n    }\n\n    if (colorBufferHalfFloat) {\n      supported =\n        supported &&\n        Boolean(\n          // WebGL 2\n          gl.getExtension('EXT_color_buffer_float') ||\n            // WebGL 1\n            gl.getExtension('EXT_color_buffer_half_float')\n        );\n    }\n\n    return supported;\n  }\n\n  // Create a Framebuffer wrapper for the default framebuffer (target === null)\n  static getDefaultFramebuffer(gl) {\n    gl.luma = gl.luma || {};\n    gl.luma.defaultFramebuffer =\n      gl.luma.defaultFramebuffer ||\n      new Framebuffer(gl, {\n        id: 'default-framebuffer',\n        handle: null,\n        attachments: {}\n      });\n    // TODO - can we query for and get a handle to the GL.FRONT renderbuffer?\n    return gl.luma.defaultFramebuffer;\n  }\n\n  get MAX_COLOR_ATTACHMENTS() {\n    return this.gl.getParameter(this.gl.MAX_COLOR_ATTACHMENTS);\n  }\n\n  get MAX_DRAW_BUFFERS() {\n    return this.gl.getParameter(this.gl.MAX_DRAW_BUFFERS);\n  }\n\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    // Public members\n    this.width = null;\n    this.height = null;\n    this.attachments = {};\n    this.readBuffer = GL.COLOR_ATTACHMENT0;\n    this.drawBuffers = [GL.COLOR_ATTACHMENT0];\n    this.ownResources = [];\n    this.initialize(opts);\n\n    Object.seal(this);\n  }\n\n  get color() {\n    return this.attachments[GL.COLOR_ATTACHMENT0] || null;\n  }\n\n  get texture() {\n    return this.attachments[GL.COLOR_ATTACHMENT0] || null;\n  }\n\n  get depth() {\n    return (\n      this.attachments[GL.DEPTH_ATTACHMENT] || this.attachments[GL.DEPTH_STENCIL_ATTACHMENT] || null\n    );\n  }\n\n  get stencil() {\n    return (\n      this.attachments[GL.STENCIL_ATTACHMENT] ||\n      this.attachments[GL.DEPTH_STENCIL_ATTACHMENT] ||\n      null\n    );\n  }\n\n  initialize({\n    width = 1,\n    height = 1,\n    attachments = null,\n    color = true,\n    depth = true,\n    stencil = false,\n    check = true,\n    readBuffer,\n    drawBuffers\n  }) {\n    assert(width >= 0 && height >= 0, 'Width and height need to be integers');\n\n    // Store actual width and height for diffing\n    this.width = width;\n    this.height = height;\n\n    // Resize any provided attachments - note that resize only resizes if needed\n    // Note: A framebuffer has no separate size, it is defined by its attachments (which must agree)\n    if (attachments) {\n      for (const attachment in attachments) {\n        const target = attachments[attachment];\n        const object = Array.isArray(target) ? target[0] : target;\n        object.resize({width, height});\n      }\n    } else {\n      // Create any requested default attachments\n      attachments = this._createDefaultAttachments(color, depth, stencil, width, height);\n    }\n\n    this.update({clearAttachments: true, attachments, readBuffer, drawBuffers});\n\n    // Checks that framebuffer was properly set up, if not, throws an explanatory error\n    if (attachments && check) {\n      this.checkStatus();\n    }\n  }\n\n  delete() {\n    for (const resource of this.ownResources) {\n      resource.delete();\n    }\n    super.delete();\n  }\n  update({\n    attachments = {},\n    readBuffer,\n    drawBuffers,\n    clearAttachments = false,\n    resizeAttachments = true\n  }) {\n    this.attach(attachments, {clearAttachments, resizeAttachments});\n\n    const {gl} = this;\n    // Multiple render target support, set read buffer and draw buffers\n    const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n    if (readBuffer) {\n      this._setReadBuffer(readBuffer);\n    }\n    if (drawBuffers) {\n      this._setDrawBuffers(drawBuffers);\n    }\n    gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    return this;\n  }\n\n  // Attachment resize is expected to be a noop if size is same\n  resize({width, height} = {}) {\n    // for default framebuffer, just update the stored size\n    if (this.handle === null) {\n      assert(width === undefined && height === undefined);\n      this.width = this.gl.drawingBufferWidth;\n      this.height = this.gl.drawingBufferHeight;\n      return this;\n    }\n\n    if (width === undefined) {\n      width = this.gl.drawingBufferWidth;\n    }\n    if (height === undefined) {\n      height = this.gl.drawingBufferHeight;\n    }\n\n    if (width !== this.width && height !== this.height) {\n      log.log(2, `Resizing framebuffer ${this.id} to ${width}x${height}`)();\n    }\n    for (const attachmentPoint in this.attachments) {\n      this.attachments[attachmentPoint].resize({width, height});\n    }\n    this.width = width;\n    this.height = height;\n    return this;\n  }\n\n  // Attach from a map of attachments\n  attach(attachments, {clearAttachments = false, resizeAttachments = true} = {}) {\n    const newAttachments = {};\n\n    // Any current attachments need to be removed, add null values to map\n    if (clearAttachments) {\n      Object.keys(this.attachments).forEach(key => {\n        newAttachments[key] = null;\n      });\n    }\n\n    // Overlay the new attachments\n    Object.assign(newAttachments, attachments);\n\n    const prevHandle = this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n\n    // Walk the attachments\n    for (const key in newAttachments) {\n      // Ensure key is not undefined\n      assert(key !== undefined, 'Misspelled framebuffer binding point?');\n\n      const attachment = Number(key);\n\n      const descriptor = newAttachments[attachment];\n      let object = descriptor;\n      if (!object) {\n        this._unattach(attachment);\n      } else if (object instanceof Renderbuffer) {\n        this._attachRenderbuffer({attachment, renderbuffer: object});\n      } else if (Array.isArray(descriptor)) {\n        const [texture, layer = 0, level = 0] = descriptor;\n        object = texture;\n        this._attachTexture({attachment, texture, layer, level});\n      } else {\n        this._attachTexture({attachment, texture: object, layer: 0, level: 0});\n      }\n\n      // Resize objects\n      if (resizeAttachments && object) {\n        object.resize({width: this.width, height: this.height});\n      }\n    }\n\n    this.gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    // Assign to attachments and remove any nulls to get a clean attachment map\n    Object.assign(this.attachments, attachments);\n    Object.keys(this.attachments)\n      .filter(key => !this.attachments[key])\n      .forEach(key => {\n        delete this.attachments[key];\n      });\n  }\n\n  checkStatus() {\n    const {gl} = this;\n    const status = this.getStatus();\n    if (status !== gl.FRAMEBUFFER_COMPLETE) {\n      throw new Error(_getFrameBufferStatus(status));\n    }\n    return this;\n  }\n\n  getStatus() {\n    const {gl} = this;\n    const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n    const status = gl.checkFramebufferStatus(GL.FRAMEBUFFER);\n    gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n    return status;\n  }\n\n  clear({color, depth, stencil, drawBuffers = []} = {}) {\n    // Bind framebuffer and delegate to global clear functions\n    const prevHandle = this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n\n    if (color || depth || stencil) {\n      clear(this.gl, {color, depth, stencil});\n    }\n\n    drawBuffers.forEach((value, drawBuffer) => {\n      clearBuffer({drawBuffer, value});\n    });\n\n    this.gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    return this;\n  }\n\n  // NOTE: Slow requires roundtrip to GPU\n  // App can provide pixelArray or have it auto allocated by this method\n  // @returns {Uint8Array|Uint16Array|FloatArray} - pixel array,\n  //  newly allocated by this method unless provided by app.\n  readPixels(opts = {}) {\n    log.error(\n      'Framebuffer.readPixels() is no logner supported, use readPixelsToArray(framebuffer)'\n    )();\n    return null;\n  }\n\n  // Reads data into provided buffer object asynchronously\n  // This function doesn't wait for copy to be complete, it programs GPU to perform a DMA transffer.\n  readPixelsToBuffer(opts = {}) {\n    log.error(\n      'Framebuffer.readPixelsToBuffer()is no logner supported, use readPixelsToBuffer(framebuffer)'\n    )();\n    return null;\n  }\n\n  // Reads pixels as a dataUrl\n  copyToDataUrl(opts = {}) {\n    log.error(\n      'Framebuffer.copyToDataUrl() is no logner supported, use copyToDataUrl(framebuffer)'\n    )();\n    return null;\n  }\n\n  // Reads pixels into an HTML Image\n  copyToImage(opts = {}) {\n    log.error('Framebuffer.copyToImage() is no logner supported, use copyToImage(framebuffer)')();\n    return null;\n  }\n\n  // copyToFramebuffer({width, height}) {\n  //   const scaleX = width / this.width;\n  //   const scaleY = height / this.height;\n  //   const scale = Math.min(scaleX, scaleY);\n  //   width = width * scale;\n  //   height = height * scale;\n  //   const scaledFramebuffer = new Framebuffer(this.gl, {width, height});\n  //   this.blit();\n  // }\n\n  // Copy a rectangle from a framebuffer attachment into a texture (at an offset)\n  // NOTE: assumes texture has enough storage allocated\n  // eslint-disable-next-line complexity\n  copyToTexture(opts = {}) {\n    log.error(\n      'Framebuffer.copyToTexture({...}) is no logner supported, use copyToTexture(source, target, opts})'\n    )();\n    return null;\n  }\n\n  // WEBGL2 INTERFACE\n\n  // Copies a rectangle of pixels between framebuffers\n  // eslint-disable-next-line complexity\n  blit(opts = {}) {\n    log.error('Framebuffer.blit({...}) is no logner supported, use blit(source, target, opts)')();\n    return null;\n  }\n\n  // signals to the GL that it need not preserve all pixels of a specified region of the framebuffer\n  invalidate({attachments = [], x = 0, y = 0, width, height}) {\n    const {gl} = this;\n    assertWebGL2Context(gl);\n    const prevHandle = gl.bindFramebuffer(GL.READ_FRAMEBUFFER, this.handle);\n    const invalidateAll = x === 0 && y === 0 && width === undefined && height === undefined;\n    if (invalidateAll) {\n      gl.invalidateFramebuffer(GL.READ_FRAMEBUFFER, attachments);\n    } else {\n      gl.invalidateFramebuffer(GL.READ_FRAMEBUFFER, attachments, x, y, width, height);\n    }\n    gl.bindFramebuffer(GL.READ_FRAMEBUFFER, prevHandle);\n    return this;\n  }\n\n  // Return the value for `pname` of the specified attachment.\n  // The type returned is the type of the requested pname\n  getAttachmentParameter(attachment, pname, keys) {\n    let value = this._getAttachmentParameterFallback(pname);\n    if (value === null) {\n      this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n      value = this.gl.getFramebufferAttachmentParameter(GL.FRAMEBUFFER, attachment, pname);\n      this.gl.bindFramebuffer(GL.FRAMEBUFFER, null);\n    }\n    if (keys && value > 1000) {\n      value = getKey(this.gl, value);\n    }\n    return value;\n  }\n\n  getAttachmentParameters(\n    attachment = GL.COLOR_ATTACHMENT0,\n    keys,\n    parameters = this.constructor.ATTACHMENT_PARAMETERS || []\n  ) {\n    const values = {};\n    for (const pname of parameters) {\n      const key = keys ? getKey(this.gl, pname) : pname;\n      values[key] = this.getAttachmentParameter(attachment, pname, keys);\n    }\n    return values;\n  }\n\n  getParameters(keys = true) {\n    const attachments = Object.keys(this.attachments);\n    // if (this === this.gl.luma.defaultFramebuffer) {\n    //   attachments = [GL.COLOR_ATTACHMENT0, GL.DEPTH_STENCIL_ATTACHMENT];\n    // }\n    const parameters = {};\n    for (const attachmentName of attachments) {\n      const attachment = Number(attachmentName);\n      const key = keys ? getKey(this.gl, attachment) : attachment;\n      parameters[key] = this.getAttachmentParameters(attachment, keys);\n    }\n    return parameters;\n  }\n\n  // DEBUG\n\n  // Note: Will only work when called in an event handler\n  show() {\n    /* global window */\n    if (typeof window !== 'undefined') {\n      window.open(copyToDataUrl(this), 'luma-debug-texture');\n    }\n    return this;\n  }\n\n  log(logLevel = 0, message = '') {\n    if (logLevel > log.level || typeof window === 'undefined') {\n      return this;\n    }\n    message = message || `Framebuffer ${this.id}`;\n    const image = copyToDataUrl(this, {maxHeight: 100});\n    log.image({logLevel, message, image}, message)();\n    return this;\n  }\n\n  // WEBGL INTERFACE\n  bind({target = GL.FRAMEBUFFER} = {}) {\n    this.gl.bindFramebuffer(target, this.handle);\n    return this;\n  }\n\n  unbind({target = GL.FRAMEBUFFER} = {}) {\n    this.gl.bindFramebuffer(target, null);\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  _createDefaultAttachments(color, depth, stencil, width, height) {\n    let defaultAttachments = null;\n\n    // Add a color buffer if requested and not supplied\n    if (color) {\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL.COLOR_ATTACHMENT0] = new Texture2D(this.gl, {\n        id: `${this.id}-color0`,\n        pixels: null, // reserves texture memory, but texels are undefined\n        format: GL.RGBA,\n        type: GL.UNSIGNED_BYTE,\n        width,\n        height,\n        // Note: Mipmapping can be disabled by texture resource when we resize the texture\n        // to a non-power-of-two dimenstion (NPOT texture) under WebGL1. To have consistant\n        // behavior we always disable mipmaps.\n        mipmaps: false,\n        // Set MIN and MAG filtering parameters so mipmaps are not used in sampling.\n        // Use LINEAR so subpixel algos like fxaa work.\n        // Set WRAP modes that support NPOT textures too.\n        parameters: {\n          [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n          [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n          [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n        }\n      });\n      // track to delete later\n      this.ownResources.push(defaultAttachments[GL.COLOR_ATTACHMENT0]);\n    }\n\n    if (depth && stencil) {\n      // TODO - handle separate stencil\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL.DEPTH_STENCIL_ATTACHMENT] = new Renderbuffer(this.gl, {\n        id: `${this.id}-depth-stencil`,\n        format: GL.DEPTH24_STENCIL8,\n        width,\n        height: 111\n      });\n      // track to delete later\n      this.ownResources.push(defaultAttachments[GL.DEPTH_STENCIL_ATTACHMENT]);\n      // TODO - optional texture\n      // new Texture2D(this.gl, {\n      //   id: `${this.id}-depth-stencil`,\n      //   format: GL.DEPTH24_STENCIL8,\n      //   dataFormat: GL.DEPTH_STENCIL,\n      //   type: GL.UNSIGNED_INT_24_8,\n      //   width,\n      //   height,\n      //   mipmaps: false\n      // });\n    } else if (depth) {\n      // Add a depth buffer if requested and not supplied\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL.DEPTH_ATTACHMENT] = new Renderbuffer(this.gl, {\n        id: `${this.id}-depth`,\n        format: GL.DEPTH_COMPONENT16,\n        width,\n        height\n      });\n      // track to delete later\n      this.ownResources.push(defaultAttachments[GL.DEPTH_ATTACHMENT]);\n    } else if (stencil) {\n      // TODO - handle separate stencil\n      assert(false);\n    }\n\n    return defaultAttachments;\n  }\n\n  _unattach(attachment) {\n    const oldAttachment = this.attachments[attachment];\n    if (!oldAttachment) {\n      return;\n    }\n    if (oldAttachment instanceof Renderbuffer) {\n      // render buffer\n      this.gl.framebufferRenderbuffer(GL.FRAMEBUFFER, attachment, GL.RENDERBUFFER, null);\n    } else {\n      // Must be a texture attachment\n      this.gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, GL.TEXTURE_2D, null, 0);\n    }\n    delete this.attachments[attachment];\n  }\n\n  _attachRenderbuffer({attachment = GL.COLOR_ATTACHMENT0, renderbuffer}) {\n    const {gl} = this;\n    // TODO - is the bind needed?\n    // gl.bindRenderbuffer(GL.RENDERBUFFER, renderbuffer.handle);\n    gl.framebufferRenderbuffer(GL.FRAMEBUFFER, attachment, GL.RENDERBUFFER, renderbuffer.handle);\n    // TODO - is the unbind needed?\n    // gl.bindRenderbuffer(GL.RENDERBUFFER, null);\n\n    this.attachments[attachment] = renderbuffer;\n  }\n\n  // layer = 0 - index into Texture2DArray and Texture3D or face for `TextureCubeMap`\n  // level = 0 - mipmapLevel (must be 0 in WebGL1)\n  _attachTexture({attachment = GL.COLOR_ATTACHMENT0, texture, layer, level}) {\n    const {gl} = this;\n    gl.bindTexture(texture.target, texture.handle);\n\n    switch (texture.target) {\n      case GL.TEXTURE_2D_ARRAY:\n      case GL.TEXTURE_3D:\n        gl.framebufferTextureLayer(GL.FRAMEBUFFER, attachment, texture.target, level, layer);\n        break;\n\n      case GL.TEXTURE_CUBE_MAP:\n        // layer must be a cubemap face (or if index, converted to cube map face)\n        const face = mapIndexToCubeMapFace(layer);\n        gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, face, texture.handle, level);\n        break;\n\n      case GL.TEXTURE_2D:\n        gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, GL.TEXTURE_2D, texture.handle, level);\n        break;\n\n      default:\n        assert(false, 'Illegal texture type');\n    }\n\n    gl.bindTexture(texture.target, null);\n    this.attachments[attachment] = texture;\n  }\n\n  // Expects framebuffer to be bound\n  _setReadBuffer(readBuffer) {\n    const {gl} = this;\n    if (isWebGL2(gl)) {\n      gl.readBuffer(readBuffer);\n    } else {\n      // Setting to color attachment 0 is a noop, so allow it in WebGL1\n      assert(\n        readBuffer === GL.COLOR_ATTACHMENT0 || readBuffer === GL.BACK,\n        ERR_MULTIPLE_RENDERTARGETS\n      );\n    }\n    this.readBuffer = readBuffer;\n  }\n\n  // Expects framebuffer to be bound\n  _setDrawBuffers(drawBuffers) {\n    const {gl} = this;\n    if (isWebGL2(gl)) {\n      gl.drawBuffers(drawBuffers);\n    } else {\n      const ext = gl.getExtension('WEBGL.draw_buffers');\n      if (ext) {\n        ext.drawBuffersWEBGL(drawBuffers);\n      } else {\n        // Setting a single draw buffer to color attachment 0 is a noop, allow in WebGL1\n        assert(\n          drawBuffers.length === 1 &&\n            (drawBuffers[0] === GL.COLOR_ATTACHMENT0 || drawBuffers[0] === GL.BACK),\n          ERR_MULTIPLE_RENDERTARGETS\n        );\n      }\n    }\n    this.drawBuffers = drawBuffers;\n  }\n\n  // Attempt to provide workable defaults for WebGL2 symbols under WebGL1\n  // null means OK to query\n  // TODO - move to webgl1 polyfills\n  /* eslint-disable complexity */\n  _getAttachmentParameterFallback(pname) {\n    const caps = getFeatures(this.gl);\n\n    switch (pname) {\n      case GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: // GLint\n        return !caps.WEBGL2 ? 0 : null;\n      case GL.FRAMEBUFFER_ATTACHMENT_RED_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: // GLint\n        return !caps.WEBGL2 ? 8 : null;\n      case GL.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: // GLenum\n        return !caps.WEBGL2 ? GL.UNSIGNED_INT : null;\n      case GL.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING:\n        return !caps.WEBGL2 && !caps.EXT_sRGB ? GL.LINEAR : null;\n      default:\n        return null;\n    }\n  }\n  /* eslint-enable complexity */\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createFramebuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteFramebuffer(this.handle);\n  }\n\n  _bindHandle(handle) {\n    return this.gl.bindFramebuffer(GL.FRAMEBUFFER, handle);\n  }\n}\n\n// PUBLIC METHODS\n\n// Map an index to a cube map face constant\nfunction mapIndexToCubeMapFace(layer) {\n  // TEXTURE_CUBE_MAP_POSITIVE_X is a big value (0x8515)\n  // if smaller assume layer is index, otherwise assume it is already a cube map face constant\n  return layer < GL.TEXTURE_CUBE_MAP_POSITIVE_X ? layer + GL.TEXTURE_CUBE_MAP_POSITIVE_X : layer;\n}\n\n// Helper METHODS\n// Get a string describing the framebuffer error if installed\nfunction _getFrameBufferStatus(status) {\n  // Use error mapping if installed\n  const STATUS = Framebuffer.STATUS || {};\n  return STATUS[status] || `Framebuffer error ${status}`;\n}\n\nexport const FRAMEBUFFER_ATTACHMENT_PARAMETERS = [\n  GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME, // WebGLRenderbuffer or WebGLTexture\n  GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE, // GL.RENDERBUFFER, GL.TEXTURE, GL.NONE\n  // GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE, // GL.TEXTURE_CUBE_MAP_POSITIVE_X, etc.\n  // GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL, // GLint\n  // EXT_sRGB or WebGL2\n  GL.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING, // GL.LINEAR, GL.SRBG\n  // WebGL2\n  // GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_RED_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE // GLint\n  // GL.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE\n  // GL.FLOAT, GL.INT, GL.UNSIGNED_INT, GL.SIGNED_NORMALIZED, OR GL.UNSIGNED_NORMALIZED.\n];\n\nFramebuffer.ATTACHMENT_PARAMETERS = FRAMEBUFFER_ATTACHMENT_PARAMETERS;\n"]},"metadata":{},"sourceType":"module"}