{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport Texture2D from '../classes/texture-2d';\nimport TextureCube from '../classes/texture-cube';\nimport Texture3D from '../classes/texture-3d';\nimport Framebuffer from '../classes/framebuffer';\nimport { assert } from '../utils';\nexport function cloneTextureFrom(refTexture, overrides) {\n  assert(refTexture instanceof Texture2D || refTexture instanceof TextureCube || refTexture instanceof Texture3D);\n  var TextureType = refTexture.constructor;\n  var gl = refTexture.gl,\n      width = refTexture.width,\n      height = refTexture.height,\n      format = refTexture.format,\n      type = refTexture.type,\n      dataFormat = refTexture.dataFormat,\n      border = refTexture.border,\n      mipmaps = refTexture.mipmaps;\n  var textureOptions = Object.assign({\n    width: width,\n    height: height,\n    format: format,\n    type: type,\n    dataFormat: dataFormat,\n    border: border,\n    mipmaps: mipmaps\n  }, overrides);\n  return new TextureType(gl, textureOptions);\n}\nexport function toFramebuffer(texture, opts) {\n  var gl = texture.gl,\n      width = texture.width,\n      height = texture.height,\n      id = texture.id;\n  var framebuffer = new Framebuffer(gl, Object.assign({}, opts, {\n    id: \"framebuffer-for-\".concat(id),\n    width: width,\n    height: height,\n    attachments: _defineProperty({}, 36064, texture)\n  }));\n  return framebuffer;\n}","map":{"version":3,"sources":["../../../src/webgl-utils/texture-utils.js"],"names":["assert","refTexture","TextureType","gl","width","height","format","type","dataFormat","border","mipmaps","textureOptions","id","texture","framebuffer","attachments"],"mappings":";AACA,OAAA,SAAA,MAAA,uBAAA;AACA,OAAA,WAAA,MAAA,yBAAA;AACA,OAAA,SAAA,MAAA,uBAAA;AACA,OAAA,WAAA,MAAA,wBAAA;AAEA,SAAA,MAAA,QAAA,UAAA;AAGA,OAAO,SAAA,gBAAA,CAAA,UAAA,EAAA,SAAA,EAAiD;AACtDA,EAAAA,MAAM,CACJC,UAAU,YAAVA,SAAAA,IACEA,UAAU,YADZA,WAAAA,IAEEA,UAAU,YAHdD,SAAM,CAANA;AAMA,MAAME,WAAW,GAAGD,UAAU,CAA9B,WAAA;AAPsD,MAS/CE,EAT+C,GASiBF,UATjB,CAAA,EAAA;AAAA,MAS3CG,KAT2C,GASiBH,UATjB,CAAA,KAAA;AAAA,MASpCI,MAToC,GASiBJ,UATjB,CAAA,MAAA;AAAA,MAS5BK,MAT4B,GASiBL,UATjB,CAAA,MAAA;AAAA,MASpBM,IAToB,GASiBN,UATjB,CAAA,IAAA;AAAA,MASdO,UATc,GASiBP,UATjB,CAAA,UAAA;AAAA,MASFQ,MATE,GASiBR,UATjB,CAAA,MAAA;AAAA,MASMS,OATN,GASiBT,UATjB,CAAA,OAAA;AAWtD,MAAMU,cAAc,GAAG,MAAM,CAAN,MAAA,CACrB;AACEP,IAAAA,KAAK,EADP,KAAA;AAEEC,IAAAA,MAAM,EAFR,MAAA;AAGEC,IAAAA,MAAM,EAHR,MAAA;AAIEC,IAAAA,IAAI,EAJN,IAAA;AAKEC,IAAAA,UAAU,EALZ,UAAA;AAMEC,IAAAA,MAAM,EANR,MAAA;AAOEC,IAAAA,OAAO,EAAPA;AAPF,GADqB,EAAvB,SAAuB,CAAvB;AAcA,SAAO,IAAA,WAAA,CAAA,EAAA,EAAP,cAAO,CAAP;AACD;AAID,OAAO,SAAA,aAAA,CAAA,OAAA,EAAA,IAAA,EAAsC;AAAA,MACpCP,EADoC,GACXU,OADW,CAAA,EAAA;AAAA,MAChCT,KADgC,GACXS,OADW,CAAA,KAAA;AAAA,MACzBR,MADyB,GACXQ,OADW,CAAA,MAAA;AAAA,MACjBD,EADiB,GACXC,OADW,CAAA,EAAA;AAE3C,MAAMC,WAAW,GAAG,IAAA,WAAA,CAAA,EAAA,EAElB,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,IAAA,EAAwB;AACtBF,IAAAA,EAAE,EAAA,mBAAA,MAAA,CADoB,EACpB,CADoB;AAEtBR,IAAAA,KAAK,EAFiB,KAAA;AAGtBC,IAAAA,MAAM,EAHgB,MAAA;AAItBU,IAAAA,WAAW,EAAA,eAAA,CAAA,EAAA,EAAA,KAAA,EAAA,OAAA;AAJW,GAAxB,CAFkB,CAApB;AAWA,SAAA,WAAA;AACD","sourcesContent":["// TODO: Two subdirectories must not depend on each other (classes vs utils)!\nimport Texture2D from '../classes/texture-2d';\nimport TextureCube from '../classes/texture-cube';\nimport Texture3D from '../classes/texture-3d';\nimport Framebuffer from '../classes/framebuffer';\nimport GL from '@luma.gl/constants';\nimport {assert} from '../utils';\n\n// Clone a new texture object from a reference texture object.\nexport function cloneTextureFrom(refTexture, overrides) {\n  assert(\n    refTexture instanceof Texture2D ||\n      refTexture instanceof TextureCube ||\n      refTexture instanceof Texture3D\n  );\n\n  const TextureType = refTexture.constructor;\n\n  const {gl, width, height, format, type, dataFormat, border, mipmaps} = refTexture;\n\n  const textureOptions = Object.assign(\n    {\n      width,\n      height,\n      format,\n      type,\n      dataFormat,\n      border,\n      mipmaps\n    },\n    overrides\n  );\n\n  // TODO: move this to `Texture` class as instance method and use this.constructor\n  return new TextureType(gl, textureOptions);\n}\n\n// Wraps a given texture into a framebuffer object, that can be further used\n// to read data from the texture object.\nexport function toFramebuffer(texture, opts) {\n  const {gl, width, height, id} = texture;\n  const framebuffer = new Framebuffer(\n    gl,\n    Object.assign({}, opts, {\n      id: `framebuffer-for-${id}`,\n      width,\n      height,\n      attachments: {\n        [GL.COLOR_ATTACHMENT0]: texture\n      }\n    })\n  );\n  return framebuffer;\n}\n"]},"metadata":{},"sourceType":"module"}