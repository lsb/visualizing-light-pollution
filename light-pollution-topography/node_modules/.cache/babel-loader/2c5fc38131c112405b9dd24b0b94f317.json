{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { Matrix4, Vector3 } from '@math.gl/core';\nimport { Ellipsoid } from '@math.gl/geospatial';\nimport { Stats } from '@probe.gl/stats';\nimport { RequestScheduler, assert, path } from '@loaders.gl/loader-utils';\nimport TilesetCache from './tileset-cache';\nimport { calculateTransformProps } from './helpers/transform-utils';\nimport { getFrameState } from './helpers/frame-state';\nimport { getZoomFromBoundingVolume } from './helpers/zoom';\nimport Tile3D from './tile-3d';\nimport Tileset3DTraverser from './traversers/tileset-3d-traverser';\nimport TilesetTraverser from './traversers/tileset-traverser';\nimport I3SetTraverser from './traversers/i3s-tilset-traverser';\nimport { TILESET_TYPE } from '../constants';\nvar TILES_TOTAL = 'Tiles In Tileset(s)';\nvar TILES_IN_MEMORY = 'Tiles In Memory';\nvar TILES_IN_VIEW = 'Tiles In View';\nvar TILES_RENDERABLE = 'Tiles To Render';\nvar TILES_LOADED = 'Tiles Loaded';\nvar TILES_LOADING = 'Tiles Loading';\nvar TILES_UNLOADED = 'Tiles Unloaded';\nvar TILES_LOAD_FAILED = 'Failed Tile Loads';\nvar POINTS_COUNT = 'Points';\nvar TILES_GPU_MEMORY = 'Tile Memory Use';\n\nfunction getQueryParamString(queryParams) {\n  var queryParamStrings = [];\n\n  for (var _i = 0, _Object$keys = Object.keys(queryParams); _i < _Object$keys.length; _i++) {\n    var key = _Object$keys[_i];\n    queryParamStrings.push(\"\".concat(key, \"=\").concat(queryParams[key]));\n  }\n\n  switch (queryParamStrings.length) {\n    case 0:\n      return '';\n\n    case 1:\n      return \"?\".concat(queryParamStrings[0]);\n\n    default:\n      return \"?\".concat(queryParamStrings.join('&'));\n  }\n}\n\nvar DEFAULT_OPTIONS = {\n  ellipsoid: Ellipsoid.WGS84,\n  modelMatrix: new Matrix4(),\n  throttleRequests: false,\n  maximumMemoryUsage: 32,\n  onTileLoad: function onTileLoad() {},\n  onTileUnload: function onTileUnload() {},\n  onTileError: function onTileError(tile, message, url) {},\n  maximumScreenSpaceError: 8\n};\n\nvar Tileset3D = function () {\n  function Tileset3D(json) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Tileset3D);\n\n    assert(json);\n    this.options = _objectSpread({}, DEFAULT_OPTIONS, {}, options);\n    this.tileset = json;\n    this.loader = json.loader;\n    this.type = json.type;\n    this.url = json.url;\n    this.basePath = json.basePath || path.dirname(this.url);\n    this.modelMatrix = this.options.modelMatrix;\n    this.ellipsoid = this.options.ellipsoid;\n    this.lodMetricType = json.lodMetricType;\n    this.lodMetricValue = json.lodMetricValue;\n    this.refine = json.root.refine;\n    this.fetchOptions = this.options.fetchOptions || {};\n\n    if (this.options.headers) {\n      this.fetchOptions.headers = this.options.headers;\n    }\n\n    if (this.options.token) {\n      this.fetchOptions.token = this.options.token;\n    }\n\n    this.root = null;\n    this.cartographicCenter = null;\n    this.cartesianCenter = null;\n    this.zoom = 1;\n    this.boundingVolume = null;\n    this._traverser = this._initializeTraverser();\n    this._cache = new TilesetCache();\n    this._requestScheduler = new RequestScheduler({\n      throttleRequests: this.options.throttleRequests\n    });\n    this._frameNumber = 0;\n    this._updateFrameNumber = 0;\n    this._pendingCount = 0;\n    this._tiles = {};\n    this.selectedTiles = [];\n    this._emptyTiles = [];\n    this._requestedTiles = [];\n    this._selectedTilesToStyle = [];\n    this._queryParams = {};\n    this._queryParamsString = null;\n    this.maximumMemoryUsage = this.options.maximumMemoryUsage;\n    this.gpuMemoryUsageInBytes = 0;\n    this.stats = new Stats({\n      id: this.url\n    });\n\n    this._initializeStats();\n\n    this._hasMixedContent = false;\n    this._maximumScreenSpaceError = this.options.maximumScreenSpaceError;\n    this._properties = undefined;\n    this._extensionsUsed = undefined;\n    this._gltfUpAxis = undefined;\n    this._dynamicScreenSpaceErrorComputedDensity = 0.0;\n    this.extras = null;\n    this.asset = {};\n    this.credits = {};\n    this.description = this.options.description;\n    this._defaultGeometrySchema = [];\n\n    this._initializeTileSet(json, this.options);\n  }\n\n  _createClass(Tileset3D, [{\n    key: \"isLoaded\",\n    value: function isLoaded() {\n      return this._pendingCount === 0;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this._destroy();\n    }\n  }, {\n    key: \"update\",\n    value: function update(viewport) {\n      this._cache.reset();\n\n      this._frameNumber++;\n      var frameState = getFrameState(viewport, this._frameNumber);\n\n      this._traverser.traverse(this.root, frameState, this.options);\n\n      var selectedTiles = Object.values(this._traverser.selectedTiles);\n\n      if (this._tilesChanged(this.selectedTiles, selectedTiles)) {\n        this._updateFrameNumber++;\n      }\n\n      this.selectedTiles = selectedTiles;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.selectedTiles[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var tile = _step.value;\n          this._tiles[tile.id] = tile;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      this._requestedTiles = Object.values(this._traverser.requestedTiles);\n      this._emptyTiles = Object.values(this._traverser.emptyTiles);\n\n      this._loadTiles(frameState);\n\n      this._unloadTiles();\n\n      this._updateStats();\n\n      return this._updateFrameNumber;\n    }\n  }, {\n    key: \"getTileUrl\",\n    value: function getTileUrl(tilePath) {\n      var isDataUrl = tilePath.startsWith('data:');\n\n      if (isDataUrl) {\n        return tilePath;\n      }\n\n      return \"\".concat(tilePath).concat(this.queryParams);\n    }\n  }, {\n    key: \"_tilesChanged\",\n    value: function _tilesChanged(oldSelectedTiles, selectedTiles) {\n      if (oldSelectedTiles.length !== selectedTiles.length) {\n        return true;\n      }\n\n      var set1 = new Set(oldSelectedTiles.map(function (t) {\n        return t.id;\n      }));\n      var set2 = new Set(selectedTiles.map(function (t) {\n        return t.id;\n      }));\n      var changed = oldSelectedTiles.filter(function (x) {\n        return !set2.has(x.id);\n      }).length > 0;\n      changed = changed || selectedTiles.filter(function (x) {\n        return !set1.has(x.id);\n      }).length > 0;\n      return changed;\n    }\n  }, {\n    key: \"_loadTiles\",\n    value: function _loadTiles(frameState) {\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this._requestedTiles[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var tile = _step2.value;\n\n          this._loadTile(tile, frameState);\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n            _iterator2[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_unloadTiles\",\n    value: function _unloadTiles() {\n      this._cache.unloadTiles(this, function (tileset, tile) {\n        return tileset._unloadTile(tile);\n      });\n    }\n  }, {\n    key: \"_updateStats\",\n    value: function _updateStats() {\n      var tilesRenderable = 0;\n      var pointsRenderable = 0;\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = this.selectedTiles[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var tile = _step3.value;\n\n          if (tile.contentAvailable) {\n            tilesRenderable++;\n\n            if (tile.content.pointCount) {\n              pointsRenderable += tile.content.pointCount;\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3[\"return\"] != null) {\n            _iterator3[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      this.stats.get(TILES_IN_VIEW).count = this.selectedTiles.length;\n      this.stats.get(TILES_RENDERABLE).count = tilesRenderable;\n      this.stats.get(POINTS_COUNT).count = pointsRenderable;\n    }\n  }, {\n    key: \"_initializeTileSet\",\n    value: function _initializeTileSet(tilesetJson) {\n      this.root = this._initializeTileHeaders(tilesetJson, null, this.basePath);\n\n      if (this.type === TILESET_TYPE.TILES3D) {\n        this._initializeCesiumTileset(tilesetJson);\n      }\n\n      if (this.type === TILESET_TYPE.I3S) {\n        this._initializeI3STileset(tilesetJson);\n      }\n\n      this._calculateViewProps();\n    }\n  }, {\n    key: \"_calculateViewProps\",\n    value: function _calculateViewProps() {\n      var root = this.root;\n      var center = root.boundingVolume.center;\n\n      if (!center) {\n        console.warn('center was not pre-calculated for the root tile');\n        this.cartographicCenter = new Vector3();\n        this.zoom = 1;\n        return;\n      }\n\n      this.cartographicCenter = Ellipsoid.WGS84.cartesianToCartographic(center, new Vector3());\n      this.cartesianCenter = center;\n      this.zoom = getZoomFromBoundingVolume(root.boundingVolume);\n    }\n  }, {\n    key: \"_initializeStats\",\n    value: function _initializeStats() {\n      this.stats.get(TILES_TOTAL);\n      this.stats.get(TILES_LOADING);\n      this.stats.get(TILES_IN_MEMORY);\n      this.stats.get(TILES_IN_VIEW);\n      this.stats.get(TILES_RENDERABLE);\n      this.stats.get(TILES_LOADED);\n      this.stats.get(TILES_UNLOADED);\n      this.stats.get(TILES_LOAD_FAILED);\n      this.stats.get(POINTS_COUNT, 'memory');\n      this.stats.get(TILES_GPU_MEMORY, 'memory');\n    }\n  }, {\n    key: \"_initializeTileHeaders\",\n    value: function _initializeTileHeaders(tilesetJson, parentTileHeader, basePath) {\n      var rootTile = new Tile3D(this, tilesetJson.root, parentTileHeader, basePath);\n\n      if (parentTileHeader) {\n        parentTileHeader.children.push(rootTile);\n        rootTile.depth = parentTileHeader.depth + 1;\n      }\n\n      if (this.type === TILESET_TYPE.TILES3D) {\n        var stack = [];\n        stack.push(rootTile);\n\n        while (stack.length > 0) {\n          var tile = stack.pop();\n          this.stats.get(TILES_TOTAL).incrementCount();\n          var children = tile.header.children || [];\n          var _iteratorNormalCompletion4 = true;\n          var _didIteratorError4 = false;\n          var _iteratorError4 = undefined;\n\n          try {\n            for (var _iterator4 = children[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n              var childHeader = _step4.value;\n              var childTile = new Tile3D(this, childHeader, tile, basePath);\n              tile.children.push(childTile);\n              childTile.depth = tile.depth + 1;\n              stack.push(childTile);\n            }\n          } catch (err) {\n            _didIteratorError4 = true;\n            _iteratorError4 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion4 && _iterator4[\"return\"] != null) {\n                _iterator4[\"return\"]();\n              }\n            } finally {\n              if (_didIteratorError4) {\n                throw _iteratorError4;\n              }\n            }\n          }\n        }\n      }\n\n      return rootTile;\n    }\n  }, {\n    key: \"_initializeTraverser\",\n    value: function _initializeTraverser() {\n      var TraverserClass;\n      var type = this.type;\n\n      switch (type) {\n        case TILESET_TYPE.TILES3D:\n          TraverserClass = Tileset3DTraverser;\n          break;\n\n        case TILESET_TYPE.I3S:\n          TraverserClass = I3SetTraverser;\n          break;\n\n        default:\n          TraverserClass = TilesetTraverser;\n      }\n\n      return new TraverserClass({\n        basePath: this.basePath\n      });\n    }\n  }, {\n    key: \"_destroyTileHeaders\",\n    value: function _destroyTileHeaders(parentTile) {\n      this._destroySubtree(parentTile);\n    }\n  }, {\n    key: \"_loadTile\",\n    value: function () {\n      var _loadTile2 = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(tile, frameState) {\n        var loaded;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n\n                this._onStartTileLoading();\n\n                _context.next = 4;\n                return tile.loadContent(frameState);\n\n              case 4:\n                loaded = _context.sent;\n                _context.next = 10;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](0);\n\n                this._onTileLoadError(tile, _context.t0);\n\n              case 10:\n                _context.prev = 10;\n\n                this._onEndTileLoading();\n\n                this._onTileLoad(tile, loaded);\n\n                return _context.finish(10);\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 7, 10, 14]]);\n      }));\n\n      function _loadTile(_x, _x2) {\n        return _loadTile2.apply(this, arguments);\n      }\n\n      return _loadTile;\n    }()\n  }, {\n    key: \"_onTileLoadError\",\n    value: function _onTileLoadError(tile, error) {\n      this.stats.get(TILES_LOAD_FAILED).incrementCount();\n      var message = error.message || error.toString();\n      var url = tile.url;\n      console.error(\"A 3D tile failed to load: \".concat(tile.url, \" \").concat(message));\n      this.options.onTileError(tile, message, url);\n    }\n  }, {\n    key: \"_onTileLoad\",\n    value: function _onTileLoad(tile, loaded) {\n      if (!loaded) {\n        return;\n      }\n\n      if (tile && tile.content) {\n        calculateTransformProps(tile, tile.content);\n      }\n\n      this._addTileToCache(tile);\n\n      this.options.onTileLoad(tile);\n    }\n  }, {\n    key: \"_onStartTileLoading\",\n    value: function _onStartTileLoading() {\n      this._pendingCount++;\n      this.stats.get(TILES_LOADING).incrementCount();\n    }\n  }, {\n    key: \"_onEndTileLoading\",\n    value: function _onEndTileLoading() {\n      this._pendingCount--;\n      this.stats.get(TILES_LOADING).decrementCount();\n    }\n  }, {\n    key: \"_addTileToCache\",\n    value: function _addTileToCache(tile) {\n      this._cache.add(this, tile, function (tileset) {\n        return tileset._updateCacheStats(tile);\n      });\n    }\n  }, {\n    key: \"_updateCacheStats\",\n    value: function _updateCacheStats(tile) {\n      this.stats.get(TILES_LOADED).incrementCount();\n      this.stats.get(TILES_IN_MEMORY).incrementCount();\n      this.gpuMemoryUsageInBytes += tile.content.byteLength || 0;\n      this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;\n    }\n  }, {\n    key: \"_unloadTile\",\n    value: function _unloadTile(tile) {\n      this.gpuMemoryUsageInBytes -= tile.content.byteLength || 0;\n      this.stats.get(TILES_IN_MEMORY).decrementCount();\n      this.stats.get(TILES_UNLOADED).incrementCount();\n      this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;\n      this.options.onTileUnload(tile);\n      tile.unloadContent();\n    }\n  }, {\n    key: \"_destroy\",\n    value: function _destroy() {\n      var stack = [];\n\n      if (this.root) {\n        stack.push(this.root);\n      }\n\n      while (stack.length > 0) {\n        var tile = stack.pop();\n        var _iteratorNormalCompletion5 = true;\n        var _didIteratorError5 = false;\n        var _iteratorError5 = undefined;\n\n        try {\n          for (var _iterator5 = tile.children[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n            var child = _step5.value;\n            stack.push(child);\n          }\n        } catch (err) {\n          _didIteratorError5 = true;\n          _iteratorError5 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion5 && _iterator5[\"return\"] != null) {\n              _iterator5[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError5) {\n              throw _iteratorError5;\n            }\n          }\n        }\n\n        this._destroyTile(tile);\n      }\n\n      this.root = null;\n    }\n  }, {\n    key: \"_destroySubtree\",\n    value: function _destroySubtree(tile) {\n      var root = tile;\n      var stack = [];\n      stack.push(root);\n\n      while (stack.length > 0) {\n        tile = stack.pop();\n        var _iteratorNormalCompletion6 = true;\n        var _didIteratorError6 = false;\n        var _iteratorError6 = undefined;\n\n        try {\n          for (var _iterator6 = tile.children[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n            var child = _step6.value;\n            stack.push(child);\n          }\n        } catch (err) {\n          _didIteratorError6 = true;\n          _iteratorError6 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion6 && _iterator6[\"return\"] != null) {\n              _iterator6[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError6) {\n              throw _iteratorError6;\n            }\n          }\n        }\n\n        if (tile !== root) {\n          this._destroyTile(tile);\n        }\n      }\n\n      root.children = [];\n    }\n  }, {\n    key: \"_destroyTile\",\n    value: function _destroyTile(tile) {\n      this._cache.unloadTile(this, tile);\n\n      this._unloadTile(tile);\n\n      tile.destroy();\n    }\n  }, {\n    key: \"_initializeCesiumTileset\",\n    value: function _initializeCesiumTileset(tilesetJson) {\n      this.asset = tilesetJson.asset;\n\n      if (!this.asset) {\n        throw new Error('Tileset must have an asset property.');\n      }\n\n      if (this.asset.version !== '0.0' && this.asset.version !== '1.0') {\n        throw new Error('The tileset must be 3D Tiles version 0.0 or 1.0.');\n      }\n\n      if ('tilesetVersion' in this.asset) {\n        this._queryParams.v = this.asset.tilesetVersion;\n      }\n\n      this.credits = {\n        attributions: this.options.attributions || []\n      };\n      this.description = this.options.description;\n      this.properties = tilesetJson.properties;\n      this.geometricError = tilesetJson.geometricError;\n      this._extensionsUsed = tilesetJson.extensionsUsed;\n      this.extras = tilesetJson.extras;\n    }\n  }, {\n    key: \"_initializeI3STileset\",\n    value: function _initializeI3STileset(tilesetJson) {\n      if ('token' in this.options) {\n        this._queryParams.token = this.options.token;\n      }\n\n      this._defaultGeometrySchema = tilesetJson.store.defaultGeometrySchema;\n    }\n  }, {\n    key: \"hasExtension\",\n    value: function hasExtension(extensionName) {\n      return Boolean(this._extensionsUsed && this._extensionsUsed.indexOf(extensionName) > -1);\n    }\n  }, {\n    key: \"tiles\",\n    get: function get() {\n      return Object.values(this._tiles);\n    }\n  }, {\n    key: \"queryParams\",\n    get: function get() {\n      if (!this._queryParamsString) {\n        this._queryParamsString = getQueryParamString(this._queryParams);\n      }\n\n      return this._queryParamsString;\n    }\n  }]);\n\n  return Tileset3D;\n}();\n\nexport { Tileset3D as default };","map":{"version":3,"sources":["../../../src/tileset/tileset-3d.js"],"names":["TILES_TOTAL","TILES_IN_MEMORY","TILES_IN_VIEW","TILES_RENDERABLE","TILES_LOADED","TILES_LOADING","TILES_UNLOADED","TILES_LOAD_FAILED","POINTS_COUNT","TILES_GPU_MEMORY","queryParamStrings","key","Object","queryParams","DEFAULT_OPTIONS","ellipsoid","Ellipsoid","modelMatrix","throttleRequests","maximumMemoryUsage","onTileLoad","onTileUnload","onTileError","maximumScreenSpaceError","Tileset3D","options","assert","json","path","id","url","viewport","frameState","getFrameState","selectedTiles","tile","tilePath","isDataUrl","oldSelectedTiles","set1","t","set2","changed","x","tileset","tilesRenderable","pointsRenderable","tilesetJson","TILESET_TYPE","root","center","console","getZoomFromBoundingVolume","parentTileHeader","basePath","rootTile","stack","children","childHeader","childTile","type","TraverserClass","parentTile","loaded","error","message","calculateTransformProps","child","attributions","extensionName","Boolean","getQueryParamString"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {Matrix4, Vector3} from '@math.gl/core';\nimport {Ellipsoid} from '@math.gl/geospatial';\nimport {Stats} from '@probe.gl/stats';\nimport {RequestScheduler, assert, path} from '@loaders.gl/loader-utils';\n\nimport TilesetCache from './tileset-cache';\nimport {calculateTransformProps} from './helpers/transform-utils';\nimport {getFrameState} from './helpers/frame-state';\nimport {getZoomFromBoundingVolume} from './helpers/zoom';\nimport Tile3D from './tile-3d';\nimport Tileset3DTraverser from './traversers/tileset-3d-traverser';\nimport TilesetTraverser from './traversers/tileset-traverser';\nimport I3SetTraverser from './traversers/i3s-tilset-traverser';\nimport {TILESET_TYPE} from '../constants';\n\n// Tracked Stats\nconst TILES_TOTAL = 'Tiles In Tileset(s)';\nconst TILES_IN_MEMORY = 'Tiles In Memory';\nconst TILES_IN_VIEW = 'Tiles In View';\nconst TILES_RENDERABLE = 'Tiles To Render';\nconst TILES_LOADED = 'Tiles Loaded';\nconst TILES_LOADING = 'Tiles Loading';\nconst TILES_UNLOADED = 'Tiles Unloaded';\nconst TILES_LOAD_FAILED = 'Failed Tile Loads';\nconst POINTS_COUNT = 'Points';\nconst TILES_GPU_MEMORY = 'Tile Memory Use';\n\nfunction getQueryParamString(queryParams) {\n  const queryParamStrings = [];\n  for (const key of Object.keys(queryParams)) {\n    queryParamStrings.push(`${key}=${queryParams[key]}`);\n  }\n  switch (queryParamStrings.length) {\n    case 0:\n      return '';\n    case 1:\n      return `?${queryParamStrings[0]}`;\n    default:\n      return `?${queryParamStrings.join('&')}`;\n  }\n}\n\nconst DEFAULT_OPTIONS = {\n  ellipsoid: Ellipsoid.WGS84,\n  // A 4x4 transformation matrix this transforms the entire tileset.\n  modelMatrix: new Matrix4(),\n\n  // Set to true to enable experimental request throttling, for improved performance\n  throttleRequests: false,\n\n  maximumMemoryUsage: 32,\n\n  // Indicates this a tile's content was loaded\n  onTileLoad: () => {},\n  // Indicates this a tile's content was unloaded\n  onTileUnload: () => {},\n  onTileError: (tile, message, url) => {},\n\n  // TODO CESIUM\n  // The maximum screen space error used to drive level of detail refinement.\n  maximumScreenSpaceError: 8\n  // dynamicScreenSpaceError: false,\n  // dynamicScreenSpaceErrorDensity: 0.00278,\n  // dynamicScreenSpaceErrorFactor: 4.0,\n  // Optimization option. Determines if level of detail skipping should be applied during the traversal.\n  // skipLevelOfDetail: false,\n  // The screen space error this must be reached before skipping levels of detail.\n  // baseScreenSpaceError: 1024\n};\n\nexport default class Tileset3D {\n  // eslint-disable-next-line max-statements\n  constructor(json, options = {}) {\n    assert(json);\n\n    // PUBLIC MEMBERS\n    this.options = {...DEFAULT_OPTIONS, ...options};\n    // raw data\n    this.tileset = json;\n    this.loader = json.loader;\n    // could be  3d tiles, i3s\n    this.type = json.type;\n    // The url to a tileset JSON file.\n    this.url = json.url;\n    this.basePath = json.basePath || path.dirname(this.url);\n    this.modelMatrix = this.options.modelMatrix;\n    this.ellipsoid = this.options.ellipsoid;\n\n    // Geometric error when the tree is not rendered at all\n    this.lodMetricType = json.lodMetricType;\n    this.lodMetricValue = json.lodMetricValue;\n    this.refine = json.root.refine;\n\n    // TODO add to loader context?\n    this.fetchOptions = this.options.fetchOptions || {};\n    if (this.options.headers) {\n      this.fetchOptions.headers = this.options.headers;\n    }\n    if (this.options.token) {\n      this.fetchOptions.token = this.options.token;\n    }\n\n    this.root = null;\n    // view props\n    this.cartographicCenter = null;\n    this.cartesianCenter = null;\n    this.zoom = 1;\n    this.boundingVolume = null;\n\n    // TRAVERSAL\n    this._traverser = this._initializeTraverser();\n    this._cache = new TilesetCache();\n    this._requestScheduler = new RequestScheduler({\n      throttleRequests: this.options.throttleRequests\n    });\n    // update tracker\n    // increase in each update cycle\n    this._frameNumber = 0;\n    // increase when tiles selected for rendering changed\n    this._updateFrameNumber = 0;\n    // counter for tracking tiles requests\n    this._pendingCount = 0;\n\n    // HOLD TRAVERSAL RESULTS\n    this._tiles = {};\n    this.selectedTiles = [];\n    this._emptyTiles = [];\n    this._requestedTiles = [];\n    this._selectedTilesToStyle = [];\n\n    this._queryParams = {};\n    this._queryParamsString = null;\n\n    // METRICS\n    // The maximum amount of GPU memory (in MB) that may be used to cache tiles.\n    // Tiles not in view are unloaded to enforce this.\n    this.maximumMemoryUsage = this.options.maximumMemoryUsage;\n    // The total amount of GPU memory in bytes used by the tileset.\n    this.gpuMemoryUsageInBytes = 0;\n    this.stats = new Stats({id: this.url});\n    this._initializeStats();\n\n    // TODO CESIUM specific\n    this._hasMixedContent = false;\n    this._maximumScreenSpaceError = this.options.maximumScreenSpaceError;\n    // EXTRACTED FROM TILESET\n    this._properties = undefined; // Metadata for per-model/point/etc properties\n    this._extensionsUsed = undefined;\n    this._gltfUpAxis = undefined;\n    this._dynamicScreenSpaceErrorComputedDensity = 0.0; // Updated based on the camera position and direction\n    // Metadata for the entire tileset\n    this.extras = null;\n    this.asset = {};\n    this.credits = {};\n    this.description = this.options.description;\n\n    // TODO I3S Specific\n    this._defaultGeometrySchema = [];\n\n    this._initializeTileSet(json, this.options);\n  }\n\n  isLoaded() {\n    return this._pendingCount === 0;\n  }\n\n  destroy() {\n    this._destroy();\n  }\n\n  get tiles() {\n    return Object.values(this._tiles);\n  }\n\n  update(viewport) {\n    this._cache.reset();\n    this._frameNumber++;\n    const frameState = getFrameState(viewport, this._frameNumber);\n    this._traverser.traverse(this.root, frameState, this.options);\n\n    // populate traversal results\n    const selectedTiles = Object.values(this._traverser.selectedTiles);\n    if (this._tilesChanged(this.selectedTiles, selectedTiles)) {\n      this._updateFrameNumber++;\n    }\n\n    this.selectedTiles = selectedTiles;\n    for (const tile of this.selectedTiles) {\n      this._tiles[tile.id] = tile;\n    }\n    this._requestedTiles = Object.values(this._traverser.requestedTiles);\n    this._emptyTiles = Object.values(this._traverser.emptyTiles);\n\n    this._loadTiles(frameState);\n    this._unloadTiles();\n    this._updateStats();\n\n    return this._updateFrameNumber;\n  }\n\n  getTileUrl(tilePath) {\n    const isDataUrl = tilePath.startsWith('data:');\n    if (isDataUrl) {\n      return tilePath;\n    }\n    return `${tilePath}${this.queryParams}`;\n  }\n\n  _tilesChanged(oldSelectedTiles, selectedTiles) {\n    if (oldSelectedTiles.length !== selectedTiles.length) {\n      return true;\n    }\n    const set1 = new Set(oldSelectedTiles.map(t => t.id));\n    const set2 = new Set(selectedTiles.map(t => t.id));\n    let changed = oldSelectedTiles.filter(x => !set2.has(x.id)).length > 0;\n    changed = changed || selectedTiles.filter(x => !set1.has(x.id)).length > 0;\n    return changed;\n  }\n\n  _loadTiles(frameState) {\n    // Sort requests by priority before making any requests.\n    // This makes it less likely this requests will be cancelled after being issued.\n    // requestedTiles.sort((a, b) => a._priority - b._priority);\n    for (const tile of this._requestedTiles) {\n      this._loadTile(tile, frameState);\n    }\n  }\n\n  _unloadTiles() {\n    // unload tiles from cache when hit maximumMemoryUsage\n    this._cache.unloadTiles(this, (tileset, tile) => tileset._unloadTile(tile));\n  }\n\n  _updateStats() {\n    let tilesRenderable = 0;\n    let pointsRenderable = 0;\n    for (const tile of this.selectedTiles) {\n      if (tile.contentAvailable) {\n        tilesRenderable++;\n        if (tile.content.pointCount) {\n          pointsRenderable += tile.content.pointCount;\n        }\n      }\n    }\n\n    this.stats.get(TILES_IN_VIEW).count = this.selectedTiles.length;\n    this.stats.get(TILES_RENDERABLE).count = tilesRenderable;\n    this.stats.get(POINTS_COUNT).count = pointsRenderable;\n  }\n\n  _initializeTileSet(tilesetJson) {\n    this.root = this._initializeTileHeaders(tilesetJson, null, this.basePath);\n\n    // TODO CESIUM Specific\n    if (this.type === TILESET_TYPE.TILES3D) {\n      this._initializeCesiumTileset(tilesetJson);\n    }\n\n    if (this.type === TILESET_TYPE.I3S) {\n      this._initializeI3STileset(tilesetJson);\n    }\n    // Calculate cartographicCenter & zoom props to help apps center view on tileset\n    this._calculateViewProps();\n  }\n\n  // Called during initialize Tileset to initialize the tileset's cartographic center (longitude, latitude) and zoom.\n  _calculateViewProps() {\n    const root = this.root;\n    const {center} = root.boundingVolume;\n    // TODO - handle all cases\n    if (!center) {\n      // eslint-disable-next-line\n      console.warn('center was not pre-calculated for the root tile');\n      this.cartographicCenter = new Vector3();\n      this.zoom = 1;\n      return;\n    }\n    this.cartographicCenter = Ellipsoid.WGS84.cartesianToCartographic(center, new Vector3());\n    this.cartesianCenter = center;\n    this.zoom = getZoomFromBoundingVolume(root.boundingVolume);\n  }\n\n  _initializeStats() {\n    this.stats.get(TILES_TOTAL);\n    this.stats.get(TILES_LOADING);\n    this.stats.get(TILES_IN_MEMORY);\n    this.stats.get(TILES_IN_VIEW);\n    this.stats.get(TILES_RENDERABLE);\n    this.stats.get(TILES_LOADED);\n    this.stats.get(TILES_UNLOADED);\n    this.stats.get(TILES_LOAD_FAILED);\n    this.stats.get(POINTS_COUNT, 'memory');\n    this.stats.get(TILES_GPU_MEMORY, 'memory');\n  }\n\n  // Installs the main tileset JSON file or a tileset JSON file referenced from a tile.\n  // eslint-disable-next-line max-statements\n  _initializeTileHeaders(tilesetJson, parentTileHeader, basePath) {\n    // A tileset JSON file referenced from a tile may exist in a different directory than the root tileset.\n    // Get the basePath relative to the external tileset.\n    const rootTile = new Tile3D(this, tilesetJson.root, parentTileHeader, basePath); // resource\n\n    // If there is a parentTileHeader, add the root of the currently loading tileset\n    // to parentTileHeader's children, and update its depth.\n    if (parentTileHeader) {\n      parentTileHeader.children.push(rootTile);\n      rootTile.depth = parentTileHeader.depth + 1;\n    }\n\n    // Cesium 3d tiles knows the hierarchy beforehand\n    if (this.type === TILESET_TYPE.TILES3D) {\n      const stack = [];\n      stack.push(rootTile);\n\n      while (stack.length > 0) {\n        const tile = stack.pop();\n        this.stats.get(TILES_TOTAL).incrementCount();\n        const children = tile.header.children || [];\n        for (const childHeader of children) {\n          const childTile = new Tile3D(this, childHeader, tile, basePath);\n          tile.children.push(childTile);\n          childTile.depth = tile.depth + 1;\n          stack.push(childTile);\n        }\n      }\n    }\n\n    return rootTile;\n  }\n\n  _initializeTraverser() {\n    let TraverserClass;\n    const type = this.type;\n    switch (type) {\n      case TILESET_TYPE.TILES3D:\n        TraverserClass = Tileset3DTraverser;\n        break;\n      case TILESET_TYPE.I3S:\n        TraverserClass = I3SetTraverser;\n        break;\n      default:\n        TraverserClass = TilesetTraverser;\n    }\n\n    return new TraverserClass({\n      basePath: this.basePath\n    });\n  }\n\n  _destroyTileHeaders(parentTile) {\n    this._destroySubtree(parentTile);\n  }\n\n  async _loadTile(tile, frameState) {\n    let loaded;\n    try {\n      this._onStartTileLoading();\n      loaded = await tile.loadContent(frameState);\n    } catch (error) {\n      this._onTileLoadError(tile, error);\n    } finally {\n      this._onEndTileLoading();\n      this._onTileLoad(tile, loaded);\n    }\n  }\n\n  _onTileLoadError(tile, error) {\n    this.stats.get(TILES_LOAD_FAILED).incrementCount();\n\n    const message = error.message || error.toString();\n    const url = tile.url;\n    // TODO - Allow for probe log to be injected instead of console?\n    console.error(`A 3D tile failed to load: ${tile.url} ${message}`); // eslint-disable-line\n    this.options.onTileError(tile, message, url);\n  }\n\n  _onTileLoad(tile, loaded) {\n    if (!loaded) {\n      return;\n    }\n\n    // add coordinateOrigin and modelMatrix to tile\n    if (tile && tile.content) {\n      calculateTransformProps(tile, tile.content);\n    }\n\n    this._addTileToCache(tile);\n    this.options.onTileLoad(tile);\n  }\n\n  _onStartTileLoading() {\n    this._pendingCount++;\n    this.stats.get(TILES_LOADING).incrementCount();\n  }\n\n  _onEndTileLoading() {\n    this._pendingCount--;\n    this.stats.get(TILES_LOADING).decrementCount();\n  }\n\n  _addTileToCache(tile) {\n    this._cache.add(this, tile, tileset => tileset._updateCacheStats(tile));\n  }\n\n  _updateCacheStats(tile) {\n    this.stats.get(TILES_LOADED).incrementCount();\n    this.stats.get(TILES_IN_MEMORY).incrementCount();\n\n    // Good enough? Just use the raw binary ArrayBuffer's byte length.\n    this.gpuMemoryUsageInBytes += tile.content.byteLength || 0;\n    this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;\n  }\n\n  _unloadTile(tile) {\n    this.gpuMemoryUsageInBytes -= tile.content.byteLength || 0;\n\n    this.stats.get(TILES_IN_MEMORY).decrementCount();\n    this.stats.get(TILES_UNLOADED).incrementCount();\n    this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;\n\n    this.options.onTileUnload(tile);\n    tile.unloadContent();\n  }\n\n  // Traverse the tree and destroy all tiles\n  _destroy() {\n    const stack = [];\n\n    if (this.root) {\n      stack.push(this.root);\n    }\n\n    while (stack.length > 0) {\n      const tile = stack.pop();\n\n      for (const child of tile.children) {\n        stack.push(child);\n      }\n\n      this._destroyTile(tile);\n    }\n    this.root = null;\n  }\n\n  // Traverse the tree and destroy all sub tiles\n  _destroySubtree(tile) {\n    const root = tile;\n    const stack = [];\n    stack.push(root);\n    while (stack.length > 0) {\n      tile = stack.pop();\n      for (const child of tile.children) {\n        stack.push(child);\n      }\n      if (tile !== root) {\n        this._destroyTile(tile);\n      }\n    }\n    root.children = [];\n  }\n\n  _destroyTile(tile) {\n    this._cache.unloadTile(this, tile);\n    this._unloadTile(tile);\n    tile.destroy();\n  }\n\n  _initializeCesiumTileset(tilesetJson) {\n    this.asset = tilesetJson.asset;\n    if (!this.asset) {\n      throw new Error('Tileset must have an asset property.');\n    }\n    if (this.asset.version !== '0.0' && this.asset.version !== '1.0') {\n      throw new Error('The tileset must be 3D Tiles version 0.0 or 1.0.');\n    }\n\n    // Note: `asset.tilesetVersion` is version of the tileset itself (not the version of the 3D TILES standard)\n    // We add this version as a `v=1.0` query param to fetch the right version and not get an older cached version\n    if ('tilesetVersion' in this.asset) {\n      this._queryParams.v = this.asset.tilesetVersion;\n    }\n\n    // TODO - ion resources have a credits property we can use for additional attribution.\n    this.credits = {\n      attributions: this.options.attributions || []\n    };\n    this.description = this.options.description;\n\n    // Gets the tileset's properties dictionary object, which contains metadata about per-feature properties.\n    this.properties = tilesetJson.properties;\n    this.geometricError = tilesetJson.geometricError;\n    this._extensionsUsed = tilesetJson.extensionsUsed;\n    // Returns the extras property at the top of the tileset JSON (application specific metadata).\n    this.extras = tilesetJson.extras;\n  }\n\n  _initializeI3STileset(tilesetJson) {\n    if ('token' in this.options) {\n      this._queryParams.token = this.options.token;\n    }\n    // Initialize default Geometry schema\n    this._defaultGeometrySchema = tilesetJson.store.defaultGeometrySchema;\n  }\n\n  // TODO CESIUM specific\n  hasExtension(extensionName) {\n    return Boolean(this._extensionsUsed && this._extensionsUsed.indexOf(extensionName) > -1);\n  }\n\n  get queryParams() {\n    if (!this._queryParamsString) {\n      this._queryParamsString = getQueryParamString(this._queryParams);\n    }\n    return this._queryParamsString;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}