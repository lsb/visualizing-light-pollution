{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport WEBGL_LIMITS from './webgl-limits-table';\nimport { isWebGL2, getContextDebugInfo } from '@luma.gl/gltools';\nexport function getContextLimits(gl) {\n  gl.luma = gl.luma || {};\n\n  if (!gl.luma.limits) {\n    gl.luma.limits = {};\n    gl.luma.webgl1MinLimits = {};\n    gl.luma.webgl2MinLimits = {};\n    var isWebgl2 = isWebGL2(gl);\n\n    for (var parameter in WEBGL_LIMITS) {\n      var limit = WEBGL_LIMITS[parameter];\n      var webgl1MinLimit = limit.gl1;\n      var webgl2MinLimit = 'gl2' in limit ? limit.gl2 : limit.gl1;\n      var minLimit = isWebgl2 ? webgl2MinLimit : webgl1MinLimit;\n      var limitNotAvailable = 'gl2' in limit && !isWebgl2 || 'extension' in limit && !gl.getExtension(limit.extension);\n      var value = limitNotAvailable ? minLimit : gl.getParameter(parameter);\n      gl.luma.limits[parameter] = value;\n      gl.luma.webgl1MinLimits[parameter] = webgl1MinLimit;\n      gl.luma.webgl2MinLimits[parameter] = webgl2MinLimit;\n    }\n  }\n\n  return gl.luma.limits;\n}\nexport function getGLContextInfo(gl) {\n  gl.luma = gl.luma || {};\n  var info = getContextDebugInfo(gl);\n\n  if (!gl.luma.info) {\n    var _gl$luma$info;\n\n    gl.luma.info = (_gl$luma$info = {}, _defineProperty(_gl$luma$info, 37445, info.vendor), _defineProperty(_gl$luma$info, 37446, info.renderer), _defineProperty(_gl$luma$info, 7936, info.vendorMasked), _defineProperty(_gl$luma$info, 7937, info.rendererMasked), _defineProperty(_gl$luma$info, 7938, info.version), _defineProperty(_gl$luma$info, 35724, info.shadingLanguageVersion), _gl$luma$info);\n  }\n\n  return gl.luma.info;\n}\nexport function getContextInfo(gl) {\n  return Object.assign(getContextDebugInfo(gl), {\n    limits: getContextLimits(gl),\n    info: getGLContextInfo(gl),\n    webgl1MinLimits: gl.luma.webgl1MinLimits,\n    webgl2MinLimits: gl.luma.webgl2MinLimits\n  });\n}","map":{"version":3,"sources":["../../../src/features/limits.js"],"names":["gl","isWebgl2","isWebGL2","limit","WEBGL_LIMITS","webgl1MinLimit","webgl2MinLimit","minLimit","limitNotAvailable","value","info","getContextDebugInfo","limits","getContextLimits","getGLContextInfo","webgl1MinLimits","webgl2MinLimits"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\n\nimport WEBGL_LIMITS from './webgl-limits-table';\nimport {isWebGL2, getContextDebugInfo} from '@luma.gl/gltools';\n\nexport function getContextLimits(gl) {\n  gl.luma = gl.luma || {};\n\n  if (!gl.luma.limits) {\n    gl.luma.limits = {};\n    gl.luma.webgl1MinLimits = {};\n    gl.luma.webgl2MinLimits = {};\n\n    const isWebgl2 = isWebGL2(gl);\n\n    // WEBGL limits\n    for (const parameter in WEBGL_LIMITS) {\n      const limit = WEBGL_LIMITS[parameter];\n\n      const webgl1MinLimit = limit.gl1;\n      const webgl2MinLimit = 'gl2' in limit ? limit.gl2 : limit.gl1;\n      const minLimit = isWebgl2 ? webgl2MinLimit : webgl1MinLimit;\n\n      // Check if we can query for this limit\n      const limitNotAvailable =\n        ('gl2' in limit && !isWebgl2) ||\n        ('extension' in limit && !gl.getExtension(limit.extension));\n\n      const value = limitNotAvailable ? minLimit : gl.getParameter(parameter);\n      gl.luma.limits[parameter] = value;\n      gl.luma.webgl1MinLimits[parameter] = webgl1MinLimit;\n      gl.luma.webgl2MinLimits[parameter] = webgl2MinLimit;\n    }\n  }\n\n  return gl.luma.limits;\n}\n\nexport function getGLContextInfo(gl) {\n  gl.luma = gl.luma || {};\n\n  const info = getContextDebugInfo(gl);\n  if (!gl.luma.info) {\n    gl.luma.info = {\n      [GL.UNMASKED_VENDOR_WEBGL]: info.vendor,\n      [GL.UNMASKED_RENDERER_WEBGL]: info.renderer,\n      [GL.VENDOR]: info.vendorMasked,\n      [GL.RENDERER]: info.rendererMasked,\n      [GL.VERSION]: info.version,\n      [GL.SHADING_LANGUAGE_VERSION]: info.shadingLanguageVersion\n    };\n  }\n\n  return gl.luma.info;\n}\n\nexport function getContextInfo(gl) {\n  return Object.assign(getContextDebugInfo(gl), {\n    limits: getContextLimits(gl),\n    info: getGLContextInfo(gl),\n    webgl1MinLimits: gl.luma.webgl1MinLimits,\n    webgl2MinLimits: gl.luma.webgl2MinLimits\n  });\n}\n"]},"metadata":{},"sourceType":"module"}