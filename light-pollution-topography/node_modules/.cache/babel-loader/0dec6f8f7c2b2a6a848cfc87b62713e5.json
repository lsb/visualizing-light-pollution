{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { assert, validateLoaderVersion } from '@loaders.gl/loader-utils';\nimport { isLoaderObject } from './loader-utils/normalize-loader';\nimport { mergeOptions } from './loader-utils/merge-options';\nimport { getUrlFromData } from './loader-utils/get-data';\nimport { getArrayBufferOrStringFromData } from './loader-utils/get-data';\nimport { getLoaders, getLoaderContext } from './loader-utils/get-loader-context';\nimport parseWithWorker, { canParseWithWorker } from './loader-utils/parse-with-worker';\nimport { selectLoader } from './select-loader';\nexport function parse(_x, _x2, _x3, _x4) {\n  return _parse.apply(this, arguments);\n}\n\nfunction _parse() {\n  _parse = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(data, loaders, options, context) {\n    var url, autoUrl, candidateLoaders, loader;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (loaders && !Array.isArray(loaders) && !isLoaderObject(loaders)) {\n              context = options;\n              options = loaders;\n              loaders = null;\n            }\n\n            url = '';\n\n            if (typeof context === 'string') {\n              url = context;\n              context = null;\n            }\n\n            options = options || {};\n            autoUrl = getUrlFromData(data, url);\n            candidateLoaders = getLoaders(loaders, context);\n            loader = selectLoader(candidateLoaders, autoUrl, data);\n\n            if (loader) {\n              _context.next = 9;\n              break;\n            }\n\n            return _context.abrupt(\"return\", null);\n\n          case 9:\n            options = mergeOptions(loader, options, autoUrl);\n            context = getLoaderContext({\n              url: autoUrl,\n              parse: parse,\n              loaders: candidateLoaders\n            }, options, context);\n            _context.next = 13;\n            return parseWithLoader(loader, data, options, context);\n\n          case 13:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parse.apply(this, arguments);\n}\n\nfunction parseWithLoader(_x5, _x6, _x7, _x8) {\n  return _parseWithLoader.apply(this, arguments);\n}\n\nfunction _parseWithLoader() {\n  _parseWithLoader = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(loader, data, options, context) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            validateLoaderVersion(loader);\n            _context2.next = 3;\n            return getArrayBufferOrStringFromData(data, loader);\n\n          case 3:\n            data = _context2.sent;\n\n            if (!(loader.parseTextSync && typeof data === 'string')) {\n              _context2.next = 7;\n              break;\n            }\n\n            options.dataType = 'text';\n            return _context2.abrupt(\"return\", loader.parseTextSync(data, options, context, loader));\n\n          case 7:\n            if (!canParseWithWorker(loader, data, options, context)) {\n              _context2.next = 11;\n              break;\n            }\n\n            _context2.next = 10;\n            return parseWithWorker(loader, data, options, context);\n\n          case 10:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 11:\n            if (!loader.parse) {\n              _context2.next = 15;\n              break;\n            }\n\n            _context2.next = 14;\n            return loader.parse(data, options, context, loader);\n\n          case 14:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 15:\n            assert(!loader.parseSync);\n            return _context2.abrupt(\"return\", assert(false));\n\n          case 17:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _parseWithLoader.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../src/lib/parse.js"],"names":["loaders","Array","isLoaderObject","context","options","url","autoUrl","getUrlFromData","candidateLoaders","getLoaders","loader","selectLoader","mergeOptions","getLoaderContext","parse","parseWithLoader","validateLoaderVersion","data","getArrayBufferOrStringFromData","canParseWithWorker","parseWithWorker","assert"],"mappings":"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","sourcesContent":["import {assert, validateLoaderVersion} from '@loaders.gl/loader-utils';\nimport {isLoaderObject} from './loader-utils/normalize-loader';\nimport {mergeOptions} from './loader-utils/merge-options';\nimport {getUrlFromData} from './loader-utils/get-data';\nimport {getArrayBufferOrStringFromData} from './loader-utils/get-data';\nimport {getLoaders, getLoaderContext} from './loader-utils/get-loader-context';\nimport parseWithWorker, {canParseWithWorker} from './loader-utils/parse-with-worker';\nimport {selectLoader} from './select-loader';\n\nexport async function parse(data, loaders, options, context) {\n  // Signature: parse(data, options, context | url)\n  // Uses registered loaders\n  if (loaders && !Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    context = options;\n    options = loaders;\n    loaders = null;\n  }\n\n  // DEPRECATED - backwards compatibility, last param can be URL...\n  let url = '';\n  if (typeof context === 'string') {\n    url = context;\n    context = null;\n  }\n\n  options = options || {};\n\n  // Extract a url for auto detection\n  const autoUrl = getUrlFromData(data, url);\n\n  // Chooses a loader (and normalizes it)\n  // Also use any loaders in the context, new loaders take priority\n  const candidateLoaders = getLoaders(loaders, context);\n  const loader = selectLoader(candidateLoaders, autoUrl, data);\n  // Note: if nothrow option was set, it is possible that no loader was found, if so just return null\n  if (!loader) {\n    return null;\n  }\n\n  // Normalize options\n  options = mergeOptions(loader, options, autoUrl);\n\n  // Get a context (if already present, will be unchanged)\n  context = getLoaderContext({url: autoUrl, parse, loaders: candidateLoaders}, options, context);\n\n  return await parseWithLoader(loader, data, options, context);\n}\n\n// TODO: support progress and abort\n// TODO - should accept loader.parseAsyncIterator and concatenate.\nasync function parseWithLoader(loader, data, options, context) {\n  validateLoaderVersion(loader);\n\n  data = await getArrayBufferOrStringFromData(data, loader);\n\n  // First check for synchronous text parser, wrap results in promises\n  if (loader.parseTextSync && typeof data === 'string') {\n    options.dataType = 'text';\n    return loader.parseTextSync(data, options, context, loader);\n  }\n\n  // If we have a workerUrl and the loader can parse the given options efficiently in a worker\n  if (canParseWithWorker(loader, data, options, context)) {\n    return await parseWithWorker(loader, data, options, context);\n  }\n\n  // Check for asynchronous parser\n  if (loader.parse) {\n    return await loader.parse(data, options, context, loader);\n  }\n\n  // This should not happen, all sync loaders should also offer `parse` function\n  assert(!loader.parseSync);\n\n  // TBD - If asynchronous parser not available, return null\n  return assert(false);\n}\n"]},"metadata":{},"sourceType":"module"}