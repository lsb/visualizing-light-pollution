{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { resolvePath } from '@loaders.gl/loader-utils';\nimport assert from '../utils/assert';\nexport function generateUrl(getUrl, options, urlOptions) {\n  var url = getUrl;\n\n  if (typeof getUrl === 'function') {\n    url = getUrl(_objectSpread({}, options, {}, urlOptions));\n  }\n\n  assert(typeof url === 'string');\n  var baseUrl = options.baseUrl;\n\n  if (baseUrl) {\n    url = baseUrl[baseUrl.length - 1] === '/' ? \"\".concat(baseUrl).concat(url) : \"\".concat(baseUrl, \"/\").concat(url);\n  }\n\n  return resolvePath(url);\n}","map":{"version":3,"sources":["../../../../src/lib/texture-loading-api/generate-url.js"],"names":["url","getUrl","assert","baseUrl","options","resolvePath"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,WAAA,QAAA,0BAAA;AACA,OAAA,MAAA,MAAA,iBAAA;AAGA,OAAO,SAAA,WAAA,CAAA,MAAA,EAAA,OAAA,EAAA,UAAA,EAAkD;AAEvD,MAAIA,GAAG,GAAP,MAAA;;AACA,MAAI,OAAA,MAAA,KAAJ,UAAA,EAAkC;AAChCA,IAAAA,GAAG,GAAGC,MAAM,CAAA,aAAA,CAAA,EAAA,EAAA,OAAA,EAAA,EAAA,EAAZD,UAAY,CAAA,CAAZA;AACD;;AACDE,EAAAA,MAAM,CAAC,OAAA,GAAA,KAAPA,QAAM,CAANA;AANuD,MAShDC,OATgD,GASrCC,OATqC,CAAA,OAAA;;AAUvD,MAAA,OAAA,EAAa;AACXJ,IAAAA,GAAG,GAAGG,OAAO,CAACA,OAAO,CAAPA,MAAAA,GAARA,CAAO,CAAPA,KAAAA,GAAAA,GAAAA,GAAAA,MAAAA,CAAAA,OAAAA,EAAAA,MAAAA,CAAAA,GAAAA,CAAAA,GAAAA,GAAAA,MAAAA,CAAAA,OAAAA,EAAAA,GAAAA,EAAAA,MAAAA,CAANH,GAAMG,CAANH;AACD;;AAED,SAAOK,WAAW,CAAlB,GAAkB,CAAlB;AACD","sourcesContent":["import {resolvePath} from '@loaders.gl/loader-utils';\nimport assert from '../utils/assert';\n\n// Generate a url by calling getUrl with mix of options, applying options.baseUrl\nexport function generateUrl(getUrl, options, urlOptions) {\n  // Get url\n  let url = getUrl;\n  if (typeof getUrl === 'function') {\n    url = getUrl({...options, ...urlOptions});\n  }\n  assert(typeof url === 'string');\n\n  // Apply options.baseUrl\n  const {baseUrl} = options;\n  if (baseUrl) {\n    url = baseUrl[baseUrl.length - 1] === '/' ? `${baseUrl}${url}` : `${baseUrl}/${url}`;\n  }\n\n  return resolvePath(url);\n}\n"]},"metadata":{},"sourceType":"module"}