{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport React, { createElement } from 'react';\nimport PropTypes from 'prop-types';\nimport { Deck, _memoize as memoize } from '@deck.gl/core';\nimport extractJSXLayers from './utils/extract-jsx-layers';\nimport positionChildrenUnderViews from './utils/position-children-under-views';\nimport extractStyles from './utils/extract-styles';\nvar propTypes = Deck.getPropTypes(PropTypes);\nvar defaultProps = Deck.defaultProps;\n\nvar DeckGL = function (_React$Component) {\n  _inherits(DeckGL, _React$Component);\n\n  function DeckGL(props) {\n    var _this;\n\n    _classCallCheck(this, DeckGL);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DeckGL).call(this, props));\n    _this.viewports = null;\n    _this.children = null;\n    _this._needsRedraw = null;\n    _this._containerRef = React.createRef();\n    _this._canvasRef = React.createRef();\n    _this.pickObject = _this.pickObject.bind(_assertThisInitialized(_this));\n    _this.pickMultipleObjects = _this.pickMultipleObjects.bind(_assertThisInitialized(_this));\n    _this.pickObjects = _this.pickObjects.bind(_assertThisInitialized(_this));\n    _this._extractJSXLayers = memoize(extractJSXLayers);\n    _this._positionChildrenUnderViews = memoize(positionChildrenUnderViews);\n    _this._extractStyles = memoize(extractStyles);\n    return _this;\n  }\n\n  _createClass(DeckGL, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var DeckClass = this.props.Deck || Deck;\n      this.deck = this.deck || new DeckClass(Object.assign({}, this.props, {\n        parent: this._containerRef.current,\n        canvas: this._canvasRef.current,\n        style: null,\n        width: '100%',\n        height: '100%',\n        _customRender: this._customRender.bind(this)\n      }));\n\n      this._updateFromProps(this.props);\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps) {\n      this._updateFromProps(nextProps);\n\n      var childrenChanged = this.children !== this._parseJSX(nextProps).children;\n\n      var viewsChanged = this.deck.viewManager && this.deck.viewManager.needsRedraw();\n      return childrenChanged && !viewsChanged;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this._redrawDeck();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.deck.finalize();\n    }\n  }, {\n    key: \"pickObject\",\n    value: function pickObject(opts) {\n      return this.deck.pickObject(opts);\n    }\n  }, {\n    key: \"pickMultipleObjects\",\n    value: function pickMultipleObjects(opts) {\n      return this.deck.pickMultipleObjects(opts);\n    }\n  }, {\n    key: \"pickObjects\",\n    value: function pickObjects(opts) {\n      return this.deck.pickObjects(opts);\n    }\n  }, {\n    key: \"_redrawDeck\",\n    value: function _redrawDeck() {\n      if (this._needsRedraw) {\n        this.deck._drawLayers(this._needsRedraw);\n\n        this._needsRedraw = null;\n      }\n    }\n  }, {\n    key: \"_customRender\",\n    value: function _customRender(redrawReason) {\n      this._needsRedraw = redrawReason;\n      var viewports = this.deck.viewManager.getViewports();\n\n      if (viewports !== this.viewports) {\n        this.forceUpdate();\n      } else {\n        this._redrawDeck();\n      }\n    }\n  }, {\n    key: \"_parseJSX\",\n    value: function _parseJSX(props) {\n      return this._extractJSXLayers({\n        layers: props.layers,\n        views: props.views,\n        children: props.children\n      });\n    }\n  }, {\n    key: \"_updateFromProps\",\n    value: function _updateFromProps(props) {\n      var _this$_parseJSX = this._parseJSX(props),\n          layers = _this$_parseJSX.layers,\n          views = _this$_parseJSX.views;\n\n      var deckProps = Object.assign({}, props, {\n        style: null,\n        width: '100%',\n        height: '100%',\n        layers: layers,\n        views: views\n      });\n      this.deck.setProps(deckProps);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          ContextProvider = _this$props.ContextProvider,\n          width = _this$props.width,\n          height = _this$props.height,\n          style = _this$props.style;\n\n      var _ref = this.deck || {},\n          viewManager = _ref.viewManager;\n\n      this.viewports = viewManager && viewManager.getViewports();\n      this.children = this._parseJSX(this.props).children;\n\n      var children = this._positionChildrenUnderViews({\n        children: this.children,\n        viewports: this.viewports,\n        deck: this.deck,\n        ContextProvider: ContextProvider\n      });\n\n      var _this$_extractStyles = this._extractStyles({\n        width: width,\n        height: height,\n        style: style\n      }),\n          containerStyle = _this$_extractStyles.containerStyle,\n          canvasStyle = _this$_extractStyles.canvasStyle;\n\n      var canvas = createElement('canvas', {\n        key: 'canvas',\n        ref: this._canvasRef,\n        style: canvasStyle\n      });\n      return createElement('div', {\n        id: 'deckgl-wrapper',\n        ref: this._containerRef,\n        style: containerStyle\n      }, [canvas, children]);\n    }\n  }]);\n\n  return DeckGL;\n}(React.Component);\n\nexport { DeckGL as default };\nDeckGL.propTypes = propTypes;\nDeckGL.defaultProps = defaultProps;","map":{"version":3,"sources":["../../src/deckgl.js"],"names":["_memoize","propTypes","Deck","defaultProps","DeckGL","React","Component","memoize","DeckClass","parent","canvas","style","width","height","_customRender","nextProps","childrenChanged","viewsChanged","opts","redrawReason","viewports","props","layers","views","children","deckProps","ContextProvider","viewManager","deck","containerStyle","canvasStyle","createElement","key","ref","id"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport React, {createElement} from 'react';\nimport PropTypes from 'prop-types';\nimport {Deck, _memoize as memoize} from '@deck.gl/core';\n\nimport extractJSXLayers from './utils/extract-jsx-layers';\nimport positionChildrenUnderViews from './utils/position-children-under-views';\nimport extractStyles from './utils/extract-styles';\n\nconst propTypes = Deck.getPropTypes(PropTypes);\n\nconst defaultProps = Deck.defaultProps;\n\nexport default class DeckGL extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.viewports = null;\n    this.children = null;\n\n    // The redraw flag of deck\n    this._needsRedraw = null;\n\n    // Refs\n    this._containerRef = React.createRef();\n    this._canvasRef = React.createRef();\n\n    // Bind public methods\n    this.pickObject = this.pickObject.bind(this);\n    this.pickMultipleObjects = this.pickMultipleObjects.bind(this);\n    this.pickObjects = this.pickObjects.bind(this);\n\n    // Memoized functions\n    this._extractJSXLayers = memoize(extractJSXLayers);\n    this._positionChildrenUnderViews = memoize(positionChildrenUnderViews);\n    this._extractStyles = memoize(extractStyles);\n  }\n\n  componentDidMount() {\n    // Allows a subclass of Deck to be used\n    // TODO - update propTypes / defaultProps?\n    const DeckClass = this.props.Deck || Deck;\n\n    // DEVTOOLS can cause this to be called twice\n    this.deck =\n      this.deck ||\n      new DeckClass(\n        Object.assign({}, this.props, {\n          parent: this._containerRef.current,\n          canvas: this._canvasRef.current,\n          style: null,\n          width: '100%',\n          height: '100%',\n          // The Deck's animation loop is independent from React's render cycle, causing potential\n          // synchronization issues. We provide this custom render function to make sure that React\n          // and Deck update on the same schedule.\n          _customRender: this._customRender.bind(this)\n        })\n      );\n    this._updateFromProps(this.props);\n  }\n\n  // This method checks if React needs to call `render`.\n  // Props changes may lead to 3 types of updates:\n  // 1. Only the WebGL context - updated in Deck's render cycle (next animation frame)\n  // 2. Only the DOM - updated in React's lifecycle (now)\n  // 3. Both the WebGL context and the DOM - defer React rerender to next animation frame just\n  //    before Deck redraw to ensure perfect synchronization & avoid excessive redraw\n  //    This is because multiple changes may happen to Deck between two frames e.g. transition\n  shouldComponentUpdate(nextProps) {\n    // Update Deck's props. If Deck needs redraw, this will trigger a call to `_customRender` in\n    // the next animation frame.\n    this._updateFromProps(nextProps);\n\n    // If the child components have changed, React needs to rerender (case 2 or 3)\n    const childrenChanged = this.children !== this._parseJSX(nextProps).children;\n    // If the views have changed, both React and WebGL context need update (case 3)\n    const viewsChanged = this.deck.viewManager && this.deck.viewManager.needsRedraw();\n\n    // Only call `render` right away in case 2\n    return childrenChanged && !viewsChanged;\n  }\n\n  componentDidUpdate() {\n    // render has just been called. The children are positioned based on the current view state.\n    // Redraw Deck canvas immediately, if necessary, using the current view state, so that it\n    // matches the child components.\n    this._redrawDeck();\n  }\n\n  componentWillUnmount() {\n    this.deck.finalize();\n  }\n\n  // Public API\n\n  pickObject(opts) {\n    return this.deck.pickObject(opts);\n  }\n\n  pickMultipleObjects(opts) {\n    return this.deck.pickMultipleObjects(opts);\n  }\n\n  pickObjects(opts) {\n    return this.deck.pickObjects(opts);\n  }\n\n  // Callbacks\n  _redrawDeck() {\n    if (this._needsRedraw) {\n      // Only redraw it we have received a dirty flag\n      this.deck._drawLayers(this._needsRedraw);\n      this._needsRedraw = null;\n    }\n  }\n\n  _customRender(redrawReason) {\n    // Save the dirty flag for later\n    this._needsRedraw = redrawReason;\n\n    // Viewport/view state is passed to child components as props.\n    // If they have changed, we need to trigger a React rerender to update children props.\n    const viewports = this.deck.viewManager.getViewports();\n    if (viewports !== this.viewports) {\n      // Viewports have changed, update children props first.\n      // This will delay the Deck canvas redraw till after React update (in componentDidUpdate)\n      // so that the canvas does not get rendered before the child components update.\n      this.forceUpdate();\n    } else {\n      this._redrawDeck();\n    }\n  }\n\n  // Private Helpers\n\n  _parseJSX(props) {\n    return this._extractJSXLayers({\n      layers: props.layers,\n      views: props.views,\n      children: props.children\n    });\n  }\n\n  // 1. Extract any JSX layers from the react children\n  // 2. Handle any backwards compatiblity props for React layer\n  // Needs to be called both from initial mount, and when new props are received\n  _updateFromProps(props) {\n    // extract any deck.gl layers masquerading as react elements from props.children\n    const {layers, views} = this._parseJSX(props);\n    const deckProps = Object.assign({}, props, {\n      // Override user styling props. We will set the canvas style in render()\n      style: null,\n      width: '100%',\n      height: '100%',\n      layers,\n      views\n    });\n\n    this.deck.setProps(deckProps);\n  }\n\n  render() {\n    const {ContextProvider, width, height, style} = this.props;\n    // Save the viewports and children used for this render\n    const {viewManager} = this.deck || {};\n    this.viewports = viewManager && viewManager.getViewports();\n    this.children = this._parseJSX(this.props).children;\n\n    // Render the background elements (typically react-map-gl instances)\n    // using the view descriptors\n    const children = this._positionChildrenUnderViews({\n      children: this.children,\n      viewports: this.viewports,\n      deck: this.deck,\n      ContextProvider\n    });\n\n    const {containerStyle, canvasStyle} = this._extractStyles({width, height, style});\n\n    const canvas = createElement('canvas', {\n      key: 'canvas',\n      ref: this._canvasRef,\n      style: canvasStyle\n    });\n\n    // Render deck.gl as the last child\n    return createElement(\n      'div',\n      {id: 'deckgl-wrapper', ref: this._containerRef, style: containerStyle},\n      [canvas, children]\n    );\n  }\n}\n\nDeckGL.propTypes = propTypes;\nDeckGL.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}