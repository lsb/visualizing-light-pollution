{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { lngLatToWorld } from '@math.gl/web-mercator';\nvar TILE_SIZE = 512;\nexport var urlType = {\n  type: 'url',\n  value: '',\n  validate: function validate(value) {\n    return typeof value === 'string' || Array.isArray(value) && value.every(function (url) {\n      return typeof url === 'string';\n    });\n  },\n  equals: function equals(value1, value2) {\n    if (value1 === value2) {\n      return true;\n    }\n\n    if (!Array.isArray(value1) || !Array.isArray(value2)) {\n      return false;\n    }\n\n    var len = value1.length;\n\n    if (len !== value2.length) {\n      return false;\n    }\n\n    for (var i = 0; i < len; i++) {\n      if (value1[i] !== value2[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n};\nexport function getURLFromTemplate(template, properties) {\n  if (!template || !template.length) {\n    return null;\n  }\n\n  if (Array.isArray(template)) {\n    var index = Math.abs(properties.x + properties.y) % template.length;\n    template = template[index];\n  }\n\n  return template.replace(/\\{ *([\\w_-]+) *\\}/g, function (_, property) {\n    return properties[property];\n  });\n}\n\nfunction getBoundingBox(viewport) {\n  var corners = [viewport.unproject([0, 0]), viewport.unproject([viewport.width, 0]), viewport.unproject([0, viewport.height]), viewport.unproject([viewport.width, viewport.height])];\n  return [Math.min(corners[0][0], corners[1][0], corners[2][0], corners[3][0]), Math.min(corners[0][1], corners[1][1], corners[2][1], corners[3][1]), Math.max(corners[0][0], corners[1][0], corners[2][0], corners[3][0]), Math.max(corners[0][1], corners[1][1], corners[2][1], corners[3][1])];\n}\n\nfunction getOSMTileIndex(lngLat, scale) {\n  var _lngLatToWorld = lngLatToWorld(lngLat),\n      _lngLatToWorld2 = _slicedToArray(_lngLatToWorld, 2),\n      x = _lngLatToWorld2[0],\n      y = _lngLatToWorld2[1];\n\n  x *= scale / TILE_SIZE;\n  y = (1 - y / TILE_SIZE) * scale;\n  return [x, y];\n}\n\nfunction getTileIndex(_ref, scale) {\n  var _ref2 = _slicedToArray(_ref, 2),\n      x = _ref2[0],\n      y = _ref2[1];\n\n  return [x * scale / TILE_SIZE, y * scale / TILE_SIZE];\n}\n\nfunction getScale(z) {\n  var tileSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TILE_SIZE;\n  return Math.pow(2, z) * TILE_SIZE / tileSize;\n}\n\nfunction osmTile2lngLat(x, y, z) {\n  var scale = getScale(z);\n  var lng = x / scale * 360 - 180;\n  var n = Math.PI - 2 * Math.PI * y / scale;\n  var lat = 180 / Math.PI * Math.atan(0.5 * (Math.exp(n) - Math.exp(-n)));\n  return [lng, lat];\n}\n\nfunction tile2XY(x, y, z, tileSize) {\n  var scale = getScale(z, tileSize);\n  return [x / scale * TILE_SIZE, y / scale * TILE_SIZE];\n}\n\nexport function tileToBoundingBox(viewport, x, y, z) {\n  var tileSize = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : TILE_SIZE;\n\n  if (viewport.isGeospatial) {\n    var _osmTile2lngLat = osmTile2lngLat(x, y, z),\n        _osmTile2lngLat2 = _slicedToArray(_osmTile2lngLat, 2),\n        west = _osmTile2lngLat2[0],\n        north = _osmTile2lngLat2[1];\n\n    var _osmTile2lngLat3 = osmTile2lngLat(x + 1, y + 1, z),\n        _osmTile2lngLat4 = _slicedToArray(_osmTile2lngLat3, 2),\n        east = _osmTile2lngLat4[0],\n        south = _osmTile2lngLat4[1];\n\n    return {\n      west: west,\n      north: north,\n      east: east,\n      south: south\n    };\n  }\n\n  var _tile2XY = tile2XY(x, y, z, tileSize),\n      _tile2XY2 = _slicedToArray(_tile2XY, 2),\n      left = _tile2XY2[0],\n      top = _tile2XY2[1];\n\n  var _tile2XY3 = tile2XY(x + 1, y + 1, z, tileSize),\n      _tile2XY4 = _slicedToArray(_tile2XY3, 2),\n      right = _tile2XY4[0],\n      bottom = _tile2XY4[1];\n\n  return {\n    left: left,\n    top: top,\n    right: right,\n    bottom: bottom\n  };\n}\n\nfunction getIdentityTileIndices(viewport, z, tileSize) {\n  var bbox = getBoundingBox(viewport);\n  var scale = getScale(z, tileSize);\n\n  var _getTileIndex = getTileIndex([bbox[0], bbox[1]], scale),\n      _getTileIndex2 = _slicedToArray(_getTileIndex, 2),\n      minX = _getTileIndex2[0],\n      minY = _getTileIndex2[1];\n\n  var _getTileIndex3 = getTileIndex([bbox[2], bbox[3]], scale),\n      _getTileIndex4 = _slicedToArray(_getTileIndex3, 2),\n      maxX = _getTileIndex4[0],\n      maxY = _getTileIndex4[1];\n\n  var indices = [];\n\n  for (var x = Math.floor(minX); x < maxX; x++) {\n    for (var y = Math.floor(minY); y < maxY; y++) {\n      indices.push({\n        x: x,\n        y: y,\n        z: z\n      });\n    }\n  }\n\n  return indices;\n}\n\nfunction getOSMTileIndices(viewport, z) {\n  var bbox = getBoundingBox(viewport);\n  var scale = getScale(z);\n\n  var _getOSMTileIndex = getOSMTileIndex([bbox[0], bbox[3]], scale),\n      _getOSMTileIndex2 = _slicedToArray(_getOSMTileIndex, 2),\n      minX = _getOSMTileIndex2[0],\n      minY = _getOSMTileIndex2[1];\n\n  var _getOSMTileIndex3 = getOSMTileIndex([bbox[2], bbox[1]], scale),\n      _getOSMTileIndex4 = _slicedToArray(_getOSMTileIndex3, 2),\n      maxX = _getOSMTileIndex4[0],\n      maxY = _getOSMTileIndex4[1];\n\n  var indices = [];\n  minX = Math.floor(minX);\n  maxX = Math.min(minX + scale, maxX);\n  minY = Math.max(0, Math.floor(minY));\n  maxY = Math.min(scale, maxY);\n\n  for (var x = minX; x < maxX; x++) {\n    for (var y = minY; y < maxY; y++) {\n      var normalizedX = x - Math.floor(x / scale) * scale;\n      indices.push({\n        x: normalizedX,\n        y: y,\n        z: z\n      });\n    }\n  }\n\n  return indices;\n}\n\nexport function getTileIndices(viewport, maxZoom, minZoom) {\n  var tileSize = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : TILE_SIZE;\n  var z = Math.ceil(viewport.zoom);\n\n  if (Number.isFinite(minZoom) && z < minZoom) {\n    return [];\n  }\n\n  if (Number.isFinite(maxZoom) && z > maxZoom) {\n    z = maxZoom;\n  }\n\n  return viewport.isGeospatial ? getOSMTileIndices(viewport, z) : getIdentityTileIndices(viewport, z, tileSize);\n}","map":{"version":3,"sources":["../../../src/tile-layer/utils.js"],"names":["TILE_SIZE","urlType","type","value","validate","Array","equals","value1","len","value2","i","template","index","Math","properties","corners","viewport","x","y","lngLatToWorld","scale","tileSize","getScale","lng","n","lat","west","north","osmTile2lngLat","east","south","left","top","tile2XY","right","bottom","bbox","getBoundingBox","minX","minY","getTileIndex","maxX","maxY","indices","z","getOSMTileIndex","normalizedX","Number","getOSMTileIndices","getIdentityTileIndices"],"mappings":"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","sourcesContent":["import {lngLatToWorld} from '@math.gl/web-mercator';\n\nconst TILE_SIZE = 512;\n\nexport const urlType = {\n  type: 'url',\n  value: '',\n  validate: value =>\n    typeof value === 'string' ||\n    (Array.isArray(value) && value.every(url => typeof url === 'string')),\n  equals: (value1, value2) => {\n    if (value1 === value2) {\n      return true;\n    }\n    if (!Array.isArray(value1) || !Array.isArray(value2)) {\n      return false;\n    }\n    const len = value1.length;\n    if (len !== value2.length) {\n      return false;\n    }\n    for (let i = 0; i < len; i++) {\n      if (value1[i] !== value2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n};\n\nexport function getURLFromTemplate(template, properties) {\n  if (!template || !template.length) {\n    return null;\n  }\n  if (Array.isArray(template)) {\n    const index = Math.abs(properties.x + properties.y) % template.length;\n    template = template[index];\n  }\n  return template.replace(/\\{ *([\\w_-]+) *\\}/g, (_, property) => properties[property]);\n}\n\n/**\n * gets the bounding box of a viewport\n */\nfunction getBoundingBox(viewport) {\n  const corners = [\n    viewport.unproject([0, 0]),\n    viewport.unproject([viewport.width, 0]),\n    viewport.unproject([0, viewport.height]),\n    viewport.unproject([viewport.width, viewport.height])\n  ];\n  return [\n    Math.min(corners[0][0], corners[1][0], corners[2][0], corners[3][0]),\n    Math.min(corners[0][1], corners[1][1], corners[2][1], corners[3][1]),\n    Math.max(corners[0][0], corners[1][0], corners[2][0], corners[3][0]),\n    Math.max(corners[0][1], corners[1][1], corners[2][1], corners[3][1])\n  ];\n}\n\n/*\n * get the OSM tile index at the given location\n * https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames\n */\nfunction getOSMTileIndex(lngLat, scale) {\n  let [x, y] = lngLatToWorld(lngLat);\n  x *= scale / TILE_SIZE;\n  y = (1 - y / TILE_SIZE) * scale;\n  return [x, y];\n}\n\nfunction getTileIndex([x, y], scale) {\n  return [(x * scale) / TILE_SIZE, (y * scale) / TILE_SIZE];\n}\n\nfunction getScale(z, tileSize = TILE_SIZE) {\n  return (Math.pow(2, z) * TILE_SIZE) / tileSize;\n}\n\n// https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames#Lon..2Flat._to_tile_numbers_2\nfunction osmTile2lngLat(x, y, z) {\n  const scale = getScale(z);\n  const lng = (x / scale) * 360 - 180;\n  const n = Math.PI - (2 * Math.PI * y) / scale;\n  const lat = (180 / Math.PI) * Math.atan(0.5 * (Math.exp(n) - Math.exp(-n)));\n  return [lng, lat];\n}\n\nfunction tile2XY(x, y, z, tileSize) {\n  const scale = getScale(z, tileSize);\n  return [(x / scale) * TILE_SIZE, (y / scale) * TILE_SIZE];\n}\n\nexport function tileToBoundingBox(viewport, x, y, z, tileSize = TILE_SIZE) {\n  if (viewport.isGeospatial) {\n    const [west, north] = osmTile2lngLat(x, y, z);\n    const [east, south] = osmTile2lngLat(x + 1, y + 1, z);\n    return {west, north, east, south};\n  }\n  const [left, top] = tile2XY(x, y, z, tileSize);\n  const [right, bottom] = tile2XY(x + 1, y + 1, z, tileSize);\n  return {left, top, right, bottom};\n}\n\nfunction getIdentityTileIndices(viewport, z, tileSize) {\n  const bbox = getBoundingBox(viewport);\n  const scale = getScale(z, tileSize);\n\n  const [minX, minY] = getTileIndex([bbox[0], bbox[1]], scale);\n  const [maxX, maxY] = getTileIndex([bbox[2], bbox[3]], scale);\n  const indices = [];\n\n  /*\n      |  TILE  |  TILE  |  TILE  |\n        |(minX)            |(maxX)\n   */\n  for (let x = Math.floor(minX); x < maxX; x++) {\n    for (let y = Math.floor(minY); y < maxY; y++) {\n      indices.push({x, y, z});\n    }\n  }\n\n  return indices;\n}\n\nfunction getOSMTileIndices(viewport, z) {\n  const bbox = getBoundingBox(viewport);\n  const scale = getScale(z);\n  /*\n    minX, maxX could be out of bounds if longitude is near the 180 meridian or multiple worlds\n    are shown:\n                |       |\n    actual   -2 -1  0  1  2  3\n    expected  2  3  0  1  2  3\n   */\n  let [minX, minY] = getOSMTileIndex([bbox[0], bbox[3]], scale);\n  let [maxX, maxY] = getOSMTileIndex([bbox[2], bbox[1]], scale);\n  const indices = [];\n\n  /*\n      |  TILE  |  TILE  |  TILE  |\n        |(minX)            |(maxX)\n   */\n  minX = Math.floor(minX);\n  maxX = Math.min(minX + scale, maxX); // Avoid creating duplicates\n  minY = Math.max(0, Math.floor(minY));\n  maxY = Math.min(scale, maxY);\n  for (let x = minX; x < maxX; x++) {\n    for (let y = minY; y < maxY; y++) {\n      // Cast to valid x between [0, scale]\n      const normalizedX = x - Math.floor(x / scale) * scale;\n      indices.push({x: normalizedX, y, z});\n    }\n  }\n\n  return indices;\n}\n\n/**\n * Returns all tile indices in the current viewport. If the current zoom level is smaller\n * than minZoom, return an empty array. If the current zoom level is greater than maxZoom,\n * return tiles that are on maxZoom.\n */\nexport function getTileIndices(viewport, maxZoom, minZoom, tileSize = TILE_SIZE) {\n  let z = Math.ceil(viewport.zoom);\n  if (Number.isFinite(minZoom) && z < minZoom) {\n    return [];\n  }\n  if (Number.isFinite(maxZoom) && z > maxZoom) {\n    z = maxZoom;\n  }\n\n  return viewport.isGeospatial\n    ? getOSMTileIndices(viewport, z)\n    : getIdentityTileIndices(viewport, z, tileSize);\n}\n"]},"metadata":{},"sourceType":"module"}