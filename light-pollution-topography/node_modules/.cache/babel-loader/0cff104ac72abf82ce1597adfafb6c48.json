{"ast":null,"code":"var _jsxFileName = \"/home/lsb/wikidatageo/dark-sky-vacations/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport DeckGL from '@deck.gl/react';\nimport { TerrainLayer, TileLayer } from '@deck.gl/geo-layers';\nimport { BitmapLayer, ScatterplotLayer, TextLayer } from '@deck.gl/layers';\nimport { Table } from 'apache-arrow';\n\nconst logAndReturn = x => {\n  console.log(x);\n  return x;\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      initialViewState: {\n        longitude: -122.4,\n        latitude: 37.7,\n        zoom: 5,\n        pitch: 30,\n        bearing: 0,\n        maxZoom: 8\n      }\n    };\n  }\n\n  render() {\n    const light = new TileLayer({\n      data: './tiles/light-{z}-{x}-{y}.png',\n      tileSize: 1024,\n      maxZoom: 6,\n      wrapLongitude: true,\n      renderSubLayers: props => new BitmapLayer(logAndReturn(props), {\n        data: null,\n        image: props.data,\n        bounds: [props.tile.bbox.west, props.tile.bbox.south, props.tile.bbox.east, props.tile.bbox.north]\n      })\n    });\n    const lumaTopo = new TerrainLayer({\n      elevationDecoder: {\n        rScaler: 500,\n        gScaler: 0,\n        bScaler: 0,\n        offset: 0\n      },\n      meshMaxError: 1,\n      elevationData: './tiles/light-{z}-{x}-{y}.png',\n      maxZoom: 8,\n      wrapLongitude: true,\n      texture: './tiles/texture-{z}-{x}-{y}.png',\n      material: {\n        ambient: 0.2,\n        diffuse: 1,\n        shininess: 128,\n        specularColor: [255, 192, 64]\n      }\n    });\n    const dataTilesPointText = new TileLayer({\n      data: './data-tiles/geo-tile-{z}-{x}-{y}-light-0.arrow',\n      maxZoom: 8,\n      wrapLongitude: true,\n      renderSubLayers: ({\n        tile: {\n          bbox: {\n            north,\n            south,\n            east,\n            west\n          }\n        },\n        data\n      }) => {\n        console.log(data);\n        const table = Table.from(data);\n        const lat = table.getColumn('gt_lat').toArray();\n        const lon = table.getColumn('gt_lon').toArray();\n        const points = new ScatterplotLayer({\n          id: `points-{north}-{south}-{east}-{west}`,\n          data: {\n            length: lat.length\n          },\n          pickable: true,\n          onHover: ({\n            index,\n            picked\n          }) => this.setState({\n            pointpick: picked ? table.get(index) : null\n          }),\n          getRadius: 10,\n          wrapLongitude: true,\n          getPosition: (object, {\n            index,\n            data,\n            target\n          }) => [lon[index], lat[index]],\n          getFillColor: [100, 100, 150],\n          getLineColor: [0, 0, 0]\n        });\n      }\n    });\n    const textPick = !this.state.pointpick ? null : new TextLayer({\n      id: `title-${this.state.pointpick.item_id}`,\n      data: [this.state.pointpick.site_page],\n      pickable: false,\n      characterSet: this.state.pointpick.site_page.split(''),\n      backgroundColor: [255, 255, 255],\n      getText: d => `   ${d}   `,\n      getSize: 20,\n      sizeUnits: 'pixels',\n      wrapLongitude: true,\n      getPosition: [this.state.pointpick.gt_lon, this.state.pointpick.gt_lat]\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(DeckGL, {\n      initialViewState: this.state.initialViewState,\n      controller: true,\n      layers: [lumaTopo],\n      id: \"maincanvas\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"colophon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }, \"\\xA9 Lee Butterman 2020. Made in Oakland, California.\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/lsb/wikidatageo/dark-sky-vacations/src/App.js"],"names":["React","DeckGL","TerrainLayer","TileLayer","BitmapLayer","ScatterplotLayer","TextLayer","Table","logAndReturn","x","console","log","App","Component","constructor","props","state","initialViewState","longitude","latitude","zoom","pitch","bearing","maxZoom","render","light","data","tileSize","wrapLongitude","renderSubLayers","image","bounds","tile","bbox","west","south","east","north","lumaTopo","elevationDecoder","rScaler","gScaler","bScaler","offset","meshMaxError","elevationData","texture","material","ambient","diffuse","shininess","specularColor","dataTilesPointText","table","from","lat","getColumn","toArray","lon","points","id","length","pickable","onHover","index","picked","setState","pointpick","get","getRadius","getPosition","object","target","getFillColor","getLineColor","textPick","item_id","site_page","characterSet","split","backgroundColor","getText","d","getSize","sizeUnits","gt_lon","gt_lat"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport DeckGL from '@deck.gl/react';\nimport { TerrainLayer, TileLayer } from '@deck.gl/geo-layers';\nimport { BitmapLayer, ScatterplotLayer, TextLayer } from '@deck.gl/layers';\nimport { Table } from 'apache-arrow';\n\nconst logAndReturn = (x) => { console.log(x); return x };\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {initialViewState: {longitude: -122.4, latitude: 37.7, zoom: 5, pitch: 30, bearing: 0, maxZoom: 8}}\n  }\n  render() {\n    const light = new TileLayer({\n      data: './tiles/light-{z}-{x}-{y}.png',\n      tileSize: 1024,\n      maxZoom: 6,\n      wrapLongitude: true,\n      renderSubLayers: props => (\n        new BitmapLayer(logAndReturn(props), {\n          data: null,\n          image: props.data,\n          bounds: [props.tile.bbox.west, props.tile.bbox.south, props.tile.bbox.east, props.tile.bbox.north],\n        })\n      )\n    })\n    const lumaTopo = new TerrainLayer({\n      elevationDecoder: {\n        rScaler: 500,\n        gScaler: 0,\n        bScaler: 0,\n        offset: 0,\n      },\n      meshMaxError: 1,\n      elevationData: './tiles/light-{z}-{x}-{y}.png',\n      maxZoom: 8,\n      wrapLongitude: true,\n      texture: './tiles/texture-{z}-{x}-{y}.png',\n      material: {\n        ambient: 0.2,\n        diffuse: 1,\n        shininess: 128,\n        specularColor: [255, 192, 64]\n      }\n    });\n    const dataTilesPointText = new TileLayer({\n      data: './data-tiles/geo-tile-{z}-{x}-{y}-light-0.arrow',\n      maxZoom: 8,\n      wrapLongitude: true,\n      renderSubLayers: ({tile: {bbox: {north, south, east, west}}, data}) => {\n        console.log(data);\n        const table = Table.from(data);\n        const lat = table.getColumn('gt_lat').toArray();\n        const lon = table.getColumn('gt_lon').toArray();\n        const points = new ScatterplotLayer({\n          id: `points-{north}-{south}-{east}-{west}`,\n          data: {length: lat.length},\n          pickable: true,\n          onHover: ({index, picked}) => this.setState({pointpick: picked ? table.get(index) : null}),\n          getRadius: 10,\n          wrapLongitude: true,\n          getPosition: (object, {index, data, target}) => [lon[index], lat[index]],\n          getFillColor: [100,100,150],\n          getLineColor: [0,0,0],  \n        });\n      }\n    });\n    const textPick = !this.state.pointpick ? null : new TextLayer({\n      id: `title-${this.state.pointpick.item_id}`,\n      data: [this.state.pointpick.site_page],\n      pickable: false,\n      characterSet: this.state.pointpick.site_page.split(''),\n      backgroundColor: [255,255,255],\n      getText: (d) => `   ${d}   `,\n      getSize: 20,\n      sizeUnits: 'pixels',\n      wrapLongitude: true,\n      getPosition: [this.state.pointpick.gt_lon, this.state.pointpick.gt_lat],\n    });\n    return (\n      <div>\n        <div>\n          <DeckGL initialViewState={this.state.initialViewState} controller={true} layers={[lumaTopo]} id={\"maincanvas\"} />\n        </div>\n        <div id=\"colophon\">© Lee Butterman 2020. Made in Oakland, California.</div>\n        <div>\n          \n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}