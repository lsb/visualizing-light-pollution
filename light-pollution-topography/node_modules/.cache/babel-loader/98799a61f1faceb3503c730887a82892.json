{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nexport function waitForGLTFAssets(_x) {\n  return _waitForGLTFAssets.apply(this, arguments);\n}\n\nfunction _waitForGLTFAssets() {\n  _waitForGLTFAssets = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(gltfObjects) {\n    var remaining;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            remaining = [];\n            gltfObjects.scenes.forEach(function (scene) {\n              scene.traverse(function (model) {\n                Object.values(model.model.getUniforms()).forEach(function (uniform) {\n                  if (uniform.loaded === false) {\n                    remaining.push(uniform);\n                  }\n                });\n              });\n            });\n            _context.next = 4;\n            return waitWhileCondition(function () {\n              return remaining.some(function (uniform) {\n                return !uniform.loaded;\n              });\n            });\n\n          case 4:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _waitForGLTFAssets.apply(this, arguments);\n}\n\nfunction waitWhileCondition(_x2) {\n  return _waitWhileCondition.apply(this, arguments);\n}\n\nfunction _waitWhileCondition() {\n  _waitWhileCondition = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(condition) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!condition()) {\n              _context2.next = 5;\n              break;\n            }\n\n            _context2.next = 3;\n            return new Promise(function (resolve) {\n              return requestAnimationFrame(resolve);\n            });\n\n          case 3:\n            _context2.next = 0;\n            break;\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _waitWhileCondition.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../src/scenegraph-layer/gltf-utils.js"],"names":["remaining","gltfObjects","scene","Object","model","uniform","waitWhileCondition","condition","requestAnimationFrame"],"mappings":";;AAEA,OAAA,SAAA,iBAAA,CAAA,EAAA,EAAA;AAAA,SAAA,kBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;;kEAAO,SAAA,OAAA,CAAA,WAAA,EAAA;AAAA,QAAA,SAAA;AAAA,WAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,aAAA,CAAA,EAAA;AAAA,gBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,eAAA,CAAA;AACCA,YAAAA,SADD,GAAA,EACCA;AAENC,YAAAA,WAAW,CAAXA,MAAAA,CAAAA,OAAAA,CAA2B,UAAA,KAAA,EAAS;AAClCC,cAAAA,KAAK,CAALA,QAAAA,CAAe,UAAA,KAAA,EAAS;AACtBC,gBAAAA,MAAM,CAANA,MAAAA,CAAcC,KAAK,CAALA,KAAAA,CAAdD,WAAcC,EAAdD,EAAAA,OAAAA,CAAiD,UAAA,OAAA,EAAW;AAC1D,sBAAIE,OAAO,CAAPA,MAAAA,KAAJ,KAAA,EAA8B;AAC5BL,oBAAAA,SAAS,CAATA,IAAAA,CAAAA,OAAAA;AACD;AAHHG,iBAAAA;AADFD,eAAAA;AADFD,aAAAA;AAHK,YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA,mBAaQK,kBAAkB,CAAC,YAAA;AAAA,qBAAM,SAAS,CAAT,IAAA,CAAe,UAAA,OAAA,EAAO;AAAA,uBAAI,CAACD,OAAO,CAAZ,MAAA;AAA5B,eAAM,CAAN;AAb3B,aAa0B,CAb1B;;AAAA,eAAA,CAAA;AAAA,mBAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAAA,QAAA,CAAA,IAAA,CAAA;;AAAA,eAAA,CAAA;AAAA,eAAA,KAAA;AAAA,mBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,KAAA,EAAA,OAAA,CAAA;;;;;SAgBQC,kB;;;;;mEAAf,SAAA,QAAA,CAAA,SAAA,EAAA;AAAA,WAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,aAAA,CAAA,EAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,eAAA,CAAA;AAAA,gBAAA,CACSC,SADT,EAAA,EAAA;AAAA,cAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,YAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,mBAEU,IAAA,OAAA,CAAY,UAAA,OAAA,EAAO;AAAA,qBAAIC,qBAAqB,CAAzB,OAAyB,CAAzB;AAF7B,aAEU,CAFV;;AAAA,eAAA,CAAA;AAAA,YAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA;;AAAA,eAAA,CAAA;AAAA,eAAA,KAAA;AAAA,mBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,KAAA,EAAA,QAAA,CAAA","sourcesContent":["/* global requestAnimationFrame */\n\nexport async function waitForGLTFAssets(gltfObjects) {\n  const remaining = [];\n\n  gltfObjects.scenes.forEach(scene => {\n    scene.traverse(model => {\n      Object.values(model.model.getUniforms()).forEach(uniform => {\n        if (uniform.loaded === false) {\n          remaining.push(uniform);\n        }\n      });\n    });\n  });\n\n  return await waitWhileCondition(() => remaining.some(uniform => !uniform.loaded));\n}\n\nasync function waitWhileCondition(condition) {\n  while (condition()) {\n    await new Promise(resolve => requestAnimationFrame(resolve));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}