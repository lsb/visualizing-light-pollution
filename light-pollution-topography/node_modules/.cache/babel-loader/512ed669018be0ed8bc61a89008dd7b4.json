{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nvar channelHandles = 1;\nvar animationHandles = 1;\nexport var Timeline = function () {\n  function Timeline() {\n    _classCallCheck(this, Timeline);\n\n    this.time = 0;\n    this.channels = new Map();\n    this.animations = new Map();\n    this.playing = false;\n    this.lastEngineTime = -1;\n  }\n\n  _createClass(Timeline, [{\n    key: \"addChannel\",\n    value: function addChannel(props) {\n      var _props$delay = props.delay,\n          delay = _props$delay === void 0 ? 0 : _props$delay,\n          _props$duration = props.duration,\n          duration = _props$duration === void 0 ? Number.POSITIVE_INFINITY : _props$duration,\n          _props$rate = props.rate,\n          rate = _props$rate === void 0 ? 1 : _props$rate,\n          _props$repeat = props.repeat,\n          repeat = _props$repeat === void 0 ? 1 : _props$repeat;\n      var handle = channelHandles++;\n      var channel = {\n        time: 0,\n        delay: delay,\n        duration: duration,\n        rate: rate,\n        repeat: repeat\n      };\n\n      this._setChannelTime(channel, this.time);\n\n      this.channels.set(handle, channel);\n      return handle;\n    }\n  }, {\n    key: \"removeChannel\",\n    value: function removeChannel(handle) {\n      this.channels[\"delete\"](handle);\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.animations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              animationHandle = _step$value[0],\n              animation = _step$value[1];\n\n          if (animation.channel === handle) {\n            this.detachAnimation(animationHandle);\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"isFinished\",\n    value: function isFinished(handle) {\n      var channel = this.channels.get(handle);\n\n      if (channel === undefined) {\n        return false;\n      }\n\n      return this.time >= channel.delay + channel.duration * channel.repeat;\n    }\n  }, {\n    key: \"getTime\",\n    value: function getTime(handle) {\n      if (handle === undefined) {\n        return this.time;\n      }\n\n      var channel = this.channels.get(handle);\n\n      if (channel === undefined) {\n        return -1;\n      }\n\n      return channel.time;\n    }\n  }, {\n    key: \"setTime\",\n    value: function setTime(time) {\n      this.time = Math.max(0, time);\n      var channels = this.channels.values();\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = channels[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var channel = _step2.value;\n\n          this._setChannelTime(channel, this.time);\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n            _iterator2[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      var animations = this.animations.values();\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = animations[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var animationData = _step3.value;\n          var animation = animationData.animation,\n              _channel = animationData.channel;\n          animation.setTime(this.getTime(_channel));\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3[\"return\"] != null) {\n            _iterator3[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"play\",\n    value: function play() {\n      this.playing = true;\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      this.playing = false;\n      this.lastEngineTime = -1;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.setTime(0);\n    }\n  }, {\n    key: \"attachAnimation\",\n    value: function attachAnimation(animation, channelHandle) {\n      var animationHandle = animationHandles++;\n      this.animations.set(animationHandle, {\n        animation: animation,\n        channel: channelHandle\n      });\n      animation.setTime(this.getTime(channelHandle));\n      return animationHandle;\n    }\n  }, {\n    key: \"detachAnimation\",\n    value: function detachAnimation(handle) {\n      this.animations[\"delete\"](handle);\n    }\n  }, {\n    key: \"update\",\n    value: function update(engineTime) {\n      if (this.playing) {\n        if (this.lastEngineTime === -1) {\n          this.lastEngineTime = engineTime;\n        }\n\n        this.setTime(this.time + (engineTime - this.lastEngineTime));\n        this.lastEngineTime = engineTime;\n      }\n    }\n  }, {\n    key: \"_setChannelTime\",\n    value: function _setChannelTime(channel, time) {\n      var offsetTime = time - channel.delay;\n      var totalDuration = channel.duration * channel.repeat;\n\n      if (offsetTime >= totalDuration) {\n        channel.time = channel.duration * channel.rate;\n      } else {\n        channel.time = Math.max(0, offsetTime) % channel.duration;\n        channel.time *= channel.rate;\n      }\n    }\n  }]);\n\n  return Timeline;\n}();","map":{"version":3,"sources":["../../../src/animation/timeline.js"],"names":["channelHandles","animationHandles","Timeline","delay","duration","Number","rate","repeat","props","handle","channel","time","animationHandle","animation","Math","channels","animations","animationData","channelHandle","engineTime","offsetTime","totalDuration"],"mappings":"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","sourcesContent":["let channelHandles = 1;\nlet animationHandles = 1;\n\nexport class Timeline {\n  constructor() {\n    this.time = 0;\n    this.channels = new Map();\n    this.animations = new Map();\n    this.playing = false;\n    this.lastEngineTime = -1;\n  }\n\n  addChannel(props) {\n    const {delay = 0, duration = Number.POSITIVE_INFINITY, rate = 1, repeat = 1} = props;\n\n    const handle = channelHandles++;\n    const channel = {\n      time: 0,\n      delay,\n      duration,\n      rate,\n      repeat\n    };\n    this._setChannelTime(channel, this.time);\n    this.channels.set(handle, channel);\n\n    return handle;\n  }\n\n  removeChannel(handle) {\n    this.channels.delete(handle);\n\n    for (const [animationHandle, animation] of this.animations) {\n      if (animation.channel === handle) {\n        this.detachAnimation(animationHandle);\n      }\n    }\n  }\n\n  isFinished(handle) {\n    const channel = this.channels.get(handle);\n    if (channel === undefined) {\n      return false;\n    }\n\n    return this.time >= channel.delay + channel.duration * channel.repeat;\n  }\n\n  getTime(handle) {\n    if (handle === undefined) {\n      return this.time;\n    }\n\n    const channel = this.channels.get(handle);\n\n    if (channel === undefined) {\n      return -1;\n    }\n\n    return channel.time;\n  }\n\n  setTime(time) {\n    this.time = Math.max(0, time);\n\n    const channels = this.channels.values();\n    for (const channel of channels) {\n      this._setChannelTime(channel, this.time);\n    }\n\n    const animations = this.animations.values();\n    for (const animationData of animations) {\n      const {animation, channel} = animationData;\n      animation.setTime(this.getTime(channel));\n    }\n  }\n\n  play() {\n    this.playing = true;\n  }\n\n  pause() {\n    this.playing = false;\n    this.lastEngineTime = -1;\n  }\n\n  reset() {\n    this.setTime(0);\n  }\n\n  attachAnimation(animation, channelHandle) {\n    const animationHandle = animationHandles++;\n\n    this.animations.set(animationHandle, {\n      animation,\n      channel: channelHandle\n    });\n\n    animation.setTime(this.getTime(channelHandle));\n\n    return animationHandle;\n  }\n\n  detachAnimation(handle) {\n    this.animations.delete(handle);\n  }\n\n  update(engineTime) {\n    if (this.playing) {\n      if (this.lastEngineTime === -1) {\n        this.lastEngineTime = engineTime;\n      }\n      this.setTime(this.time + (engineTime - this.lastEngineTime));\n      this.lastEngineTime = engineTime;\n    }\n  }\n\n  _setChannelTime(channel, time) {\n    const offsetTime = time - channel.delay;\n    const totalDuration = channel.duration * channel.repeat;\n    // Note(Tarek): Don't loop on final repeat.\n    if (offsetTime >= totalDuration) {\n      channel.time = channel.duration * channel.rate;\n    } else {\n      channel.time = Math.max(0, offsetTime) % channel.duration;\n      channel.time *= channel.rate;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}