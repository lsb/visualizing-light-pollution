{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { assembleShaders } from '@luma.gl/shadertools';\nimport { Program } from '@luma.gl/webgl';\n\nvar ProgramManager = function () {\n  _createClass(ProgramManager, null, [{\n    key: \"getDefaultProgramManager\",\n    value: function getDefaultProgramManager(gl) {\n      gl.luma = gl.luma || {};\n      gl.luma.defaultProgramManager = gl.luma.defaultProgramManager || new ProgramManager(gl);\n      return gl.luma.defaultProgramManager;\n    }\n  }]);\n\n  function ProgramManager(gl) {\n    _classCallCheck(this, ProgramManager);\n\n    this.gl = gl;\n    this._programCache = {};\n    this._getUniforms = {};\n    this._registeredModules = {};\n    this._hookFunctions = [];\n    this._defaultModules = [];\n    this._hashes = {};\n    this._hashCounter = 0;\n    this.stateHash = 0;\n    this._useCounts = {};\n  }\n\n  _createClass(ProgramManager, [{\n    key: \"addDefaultModule\",\n    value: function addDefaultModule(module) {\n      if (!this._defaultModules.find(function (m) {\n        return m.name === module.name;\n      })) {\n        this._defaultModules.push(module);\n      }\n\n      this.stateHash++;\n    }\n  }, {\n    key: \"removeDefaultModule\",\n    value: function removeDefaultModule(module) {\n      var moduleName = typeof module === 'string' ? module : module.name;\n      this._defaultModules = this._defaultModules.filter(function (m) {\n        return m.name !== moduleName;\n      });\n      this.stateHash++;\n    }\n  }, {\n    key: \"addShaderHook\",\n    value: function addShaderHook(hook, opts) {\n      if (opts) {\n        hook = Object.assign(opts, {\n          hook: hook\n        });\n      }\n\n      this._hookFunctions.push(hook);\n\n      this.stateHash++;\n    }\n  }, {\n    key: \"get\",\n    value: function get() {\n      var _this = this;\n\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _props$vs = props.vs,\n          vs = _props$vs === void 0 ? '' : _props$vs,\n          _props$fs = props.fs,\n          fs = _props$fs === void 0 ? '' : _props$fs,\n          _props$defines = props.defines,\n          defines = _props$defines === void 0 ? {} : _props$defines,\n          _props$inject = props.inject,\n          inject = _props$inject === void 0 ? {} : _props$inject,\n          _props$varyings = props.varyings,\n          varyings = _props$varyings === void 0 ? [] : _props$varyings,\n          _props$bufferMode = props.bufferMode,\n          bufferMode = _props$bufferMode === void 0 ? 0x8c8d : _props$bufferMode,\n          _props$transpileToGLS = props.transpileToGLSL100,\n          transpileToGLSL100 = _props$transpileToGLS === void 0 ? false : _props$transpileToGLS;\n\n      var modules = this._getModuleList(props.modules);\n\n      var vsHash = this._getHash(vs);\n\n      var fsHash = this._getHash(fs);\n\n      var moduleHashes = modules.map(function (m) {\n        return _this._getHash(m.name);\n      }).sort();\n      var varyingHashes = varyings.map(function (v) {\n        return _this._getHash(v);\n      });\n      var defineKeys = Object.keys(defines).sort();\n      var injectKeys = Object.keys(inject).sort();\n      var defineHashes = [];\n      var injectHashes = [];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = defineKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var key = _step.value;\n          defineHashes.push(this._getHash(key));\n          defineHashes.push(this._getHash(defines[key]));\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = injectKeys[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var _key = _step2.value;\n          injectHashes.push(this._getHash(_key));\n          injectHashes.push(this._getHash(inject[_key]));\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n            _iterator2[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      var hash = \"\".concat(vsHash, \"/\").concat(fsHash, \"D\").concat(defineHashes.join('/'), \"M\").concat(moduleHashes.join('/'), \"I\").concat(injectHashes.join('/'), \"V\").concat(varyingHashes.join('/'), \"H\").concat(this.stateHash, \"B\").concat(bufferMode).concat(transpileToGLSL100 ? 'T' : '');\n\n      if (!this._programCache[hash]) {\n        var assembled = assembleShaders(this.gl, {\n          vs: vs,\n          fs: fs,\n          modules: modules,\n          inject: inject,\n          defines: defines,\n          hookFunctions: this._hookFunctions,\n          transpileToGLSL100: transpileToGLSL100\n        });\n        this._programCache[hash] = new Program(this.gl, {\n          hash: hash,\n          vs: assembled.vs,\n          fs: assembled.fs,\n          varyings: varyings,\n          bufferMode: bufferMode\n        });\n\n        this._getUniforms[hash] = assembled.getUniforms || function (x) {};\n\n        this._useCounts[hash] = 0;\n      }\n\n      this._useCounts[hash]++;\n      return this._programCache[hash];\n    }\n  }, {\n    key: \"getUniforms\",\n    value: function getUniforms(program) {\n      return this._getUniforms[program.hash] || null;\n    }\n  }, {\n    key: \"release\",\n    value: function release(program) {\n      var hash = program.hash;\n      this._useCounts[hash]--;\n\n      if (this._useCounts[hash] === 0) {\n        this._programCache[hash][\"delete\"]();\n\n        delete this._programCache[hash];\n        delete this._getUniforms[hash];\n        delete this._useCounts[hash];\n      }\n    }\n  }, {\n    key: \"_getHash\",\n    value: function _getHash(key) {\n      if (this._hashes[key] === undefined) {\n        this._hashes[key] = this._hashCounter++;\n      }\n\n      return this._hashes[key];\n    }\n  }, {\n    key: \"_getModuleList\",\n    value: function _getModuleList() {\n      var appModules = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var modules = new Array(this._defaultModules.length + appModules.length);\n      var seen = {};\n      var count = 0;\n\n      for (var i = 0, len = this._defaultModules.length; i < len; ++i) {\n        var module = this._defaultModules[i];\n        var name = module.name;\n        modules[count++] = module;\n        seen[name] = true;\n      }\n\n      for (var _i = 0, _len = appModules.length; _i < _len; ++_i) {\n        var _module = appModules[_i];\n        var _name = _module.name;\n\n        if (!seen[_name]) {\n          modules[count++] = _module;\n          seen[_name] = true;\n        }\n      }\n\n      modules.length = count;\n      return modules;\n    }\n  }]);\n\n  return ProgramManager;\n}();\n\nexport { ProgramManager as default };","map":{"version":3,"sources":["../../../src/lib/program-manager.js"],"names":["ProgramManager","gl","module","m","moduleName","hook","opts","props","vs","fs","defines","inject","varyings","bufferMode","transpileToGLSL100","modules","vsHash","fsHash","moduleHashes","varyingHashes","defineKeys","Object","injectKeys","defineHashes","injectHashes","key","hash","assembled","assembleShaders","hookFunctions","program","appModules","seen","count","i","len","name"],"mappings":"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","sourcesContent":["import {assembleShaders} from '@luma.gl/shadertools';\nimport {Program} from '@luma.gl/webgl';\n\nexport default class ProgramManager {\n  static getDefaultProgramManager(gl) {\n    gl.luma = gl.luma || {};\n    gl.luma.defaultProgramManager = gl.luma.defaultProgramManager || new ProgramManager(gl);\n\n    return gl.luma.defaultProgramManager;\n  }\n\n  constructor(gl) {\n    this.gl = gl;\n\n    this._programCache = {};\n    this._getUniforms = {};\n    this._registeredModules = {};\n    this._hookFunctions = [];\n    this._defaultModules = [];\n\n    this._hashes = {};\n    this._hashCounter = 0;\n    this.stateHash = 0; // Used change hashing if hooks are modified\n    this._useCounts = {};\n  }\n\n  addDefaultModule(module) {\n    if (!this._defaultModules.find(m => m.name === module.name)) {\n      this._defaultModules.push(module);\n    }\n\n    this.stateHash++;\n  }\n\n  removeDefaultModule(module) {\n    const moduleName = typeof module === 'string' ? module : module.name;\n    this._defaultModules = this._defaultModules.filter(m => m.name !== moduleName);\n    this.stateHash++;\n  }\n\n  addShaderHook(hook, opts) {\n    if (opts) {\n      hook = Object.assign(opts, {hook});\n    }\n\n    this._hookFunctions.push(hook);\n\n    this.stateHash++;\n  }\n\n  get(props = {}) {\n    const {\n      vs = '',\n      fs = '',\n      defines = {},\n      inject = {},\n      varyings = [],\n      bufferMode = 0x8c8d,\n      transpileToGLSL100 = false\n    } = props; // varyings/bufferMode for xform feedback, 0x8c8d = SEPARATE_ATTRIBS\n\n    const modules = this._getModuleList(props.modules); // Combine with default modules\n\n    const vsHash = this._getHash(vs);\n    const fsHash = this._getHash(fs);\n    const moduleHashes = modules.map(m => this._getHash(m.name)).sort();\n    const varyingHashes = varyings.map(v => this._getHash(v));\n\n    const defineKeys = Object.keys(defines).sort();\n    const injectKeys = Object.keys(inject).sort();\n    const defineHashes = [];\n    const injectHashes = [];\n\n    for (const key of defineKeys) {\n      defineHashes.push(this._getHash(key));\n      defineHashes.push(this._getHash(defines[key]));\n    }\n\n    for (const key of injectKeys) {\n      injectHashes.push(this._getHash(key));\n      injectHashes.push(this._getHash(inject[key]));\n    }\n\n    const hash = `${vsHash}/${fsHash}D${defineHashes.join('/')}M${moduleHashes.join(\n      '/'\n    )}I${injectHashes.join('/')}V${varyingHashes.join('/')}H${this.stateHash}B${bufferMode}${\n      transpileToGLSL100 ? 'T' : ''\n    }`;\n\n    if (!this._programCache[hash]) {\n      const assembled = assembleShaders(this.gl, {\n        vs,\n        fs,\n        modules,\n        inject,\n        defines,\n        hookFunctions: this._hookFunctions,\n        transpileToGLSL100\n      });\n\n      this._programCache[hash] = new Program(this.gl, {\n        hash,\n        vs: assembled.vs,\n        fs: assembled.fs,\n        varyings,\n        bufferMode\n      });\n\n      this._getUniforms[hash] = assembled.getUniforms || (x => {});\n      this._useCounts[hash] = 0;\n    }\n\n    this._useCounts[hash]++;\n\n    return this._programCache[hash];\n  }\n\n  getUniforms(program) {\n    return this._getUniforms[program.hash] || null;\n  }\n\n  release(program) {\n    const hash = program.hash;\n    this._useCounts[hash]--;\n\n    if (this._useCounts[hash] === 0) {\n      this._programCache[hash].delete();\n      delete this._programCache[hash];\n      delete this._getUniforms[hash];\n      delete this._useCounts[hash];\n    }\n  }\n\n  _getHash(key) {\n    if (this._hashes[key] === undefined) {\n      this._hashes[key] = this._hashCounter++;\n    }\n\n    return this._hashes[key];\n  }\n\n  // Dedup and combine with default modules\n  _getModuleList(appModules = []) {\n    const modules = new Array(this._defaultModules.length + appModules.length);\n    const seen = {};\n    let count = 0;\n\n    for (let i = 0, len = this._defaultModules.length; i < len; ++i) {\n      const module = this._defaultModules[i];\n      const name = module.name;\n      modules[count++] = module;\n      seen[name] = true;\n    }\n\n    for (let i = 0, len = appModules.length; i < len; ++i) {\n      const module = appModules[i];\n      const name = module.name;\n      if (!seen[name]) {\n        modules[count++] = module;\n        seen[name] = true;\n      }\n    }\n\n    modules.length = count;\n\n    return modules;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}