{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Visitor } from '../visitor';\nimport { BinaryBuilder } from '../builder/binary';\nimport { BoolBuilder } from '../builder/bool';\nimport { DateBuilder, DateDayBuilder, DateMillisecondBuilder } from '../builder/date';\nimport { DecimalBuilder } from '../builder/decimal';\nimport { DictionaryBuilder } from '../builder/dictionary';\nimport { FixedSizeBinaryBuilder } from '../builder/fixedsizebinary';\nimport { FixedSizeListBuilder } from '../builder/fixedsizelist';\nimport { FloatBuilder, Float16Builder, Float32Builder, Float64Builder } from '../builder/float';\nimport { IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder } from '../builder/interval';\nimport { IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder } from '../builder/int';\nimport { ListBuilder } from '../builder/list';\nimport { MapBuilder } from '../builder/map';\nimport { NullBuilder } from '../builder/null';\nimport { StructBuilder } from '../builder/struct';\nimport { TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder } from '../builder/timestamp';\nimport { TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder } from '../builder/time';\nimport { UnionBuilder, DenseUnionBuilder, SparseUnionBuilder } from '../builder/union';\nimport { Utf8Builder } from '../builder/utf8';\n/** @ignore */\n\nexport class GetBuilderCtor extends Visitor {\n  visitNull() {\n    return NullBuilder;\n  }\n\n  visitBool() {\n    return BoolBuilder;\n  }\n\n  visitInt() {\n    return IntBuilder;\n  }\n\n  visitInt8() {\n    return Int8Builder;\n  }\n\n  visitInt16() {\n    return Int16Builder;\n  }\n\n  visitInt32() {\n    return Int32Builder;\n  }\n\n  visitInt64() {\n    return Int64Builder;\n  }\n\n  visitUint8() {\n    return Uint8Builder;\n  }\n\n  visitUint16() {\n    return Uint16Builder;\n  }\n\n  visitUint32() {\n    return Uint32Builder;\n  }\n\n  visitUint64() {\n    return Uint64Builder;\n  }\n\n  visitFloat() {\n    return FloatBuilder;\n  }\n\n  visitFloat16() {\n    return Float16Builder;\n  }\n\n  visitFloat32() {\n    return Float32Builder;\n  }\n\n  visitFloat64() {\n    return Float64Builder;\n  }\n\n  visitUtf8() {\n    return Utf8Builder;\n  }\n\n  visitBinary() {\n    return BinaryBuilder;\n  }\n\n  visitFixedSizeBinary() {\n    return FixedSizeBinaryBuilder;\n  }\n\n  visitDate() {\n    return DateBuilder;\n  }\n\n  visitDateDay() {\n    return DateDayBuilder;\n  }\n\n  visitDateMillisecond() {\n    return DateMillisecondBuilder;\n  }\n\n  visitTimestamp() {\n    return TimestampBuilder;\n  }\n\n  visitTimestampSecond() {\n    return TimestampSecondBuilder;\n  }\n\n  visitTimestampMillisecond() {\n    return TimestampMillisecondBuilder;\n  }\n\n  visitTimestampMicrosecond() {\n    return TimestampMicrosecondBuilder;\n  }\n\n  visitTimestampNanosecond() {\n    return TimestampNanosecondBuilder;\n  }\n\n  visitTime() {\n    return TimeBuilder;\n  }\n\n  visitTimeSecond() {\n    return TimeSecondBuilder;\n  }\n\n  visitTimeMillisecond() {\n    return TimeMillisecondBuilder;\n  }\n\n  visitTimeMicrosecond() {\n    return TimeMicrosecondBuilder;\n  }\n\n  visitTimeNanosecond() {\n    return TimeNanosecondBuilder;\n  }\n\n  visitDecimal() {\n    return DecimalBuilder;\n  }\n\n  visitList() {\n    return ListBuilder;\n  }\n\n  visitStruct() {\n    return StructBuilder;\n  }\n\n  visitUnion() {\n    return UnionBuilder;\n  }\n\n  visitDenseUnion() {\n    return DenseUnionBuilder;\n  }\n\n  visitSparseUnion() {\n    return SparseUnionBuilder;\n  }\n\n  visitDictionary() {\n    return DictionaryBuilder;\n  }\n\n  visitInterval() {\n    return IntervalBuilder;\n  }\n\n  visitIntervalDayTime() {\n    return IntervalDayTimeBuilder;\n  }\n\n  visitIntervalYearMonth() {\n    return IntervalYearMonthBuilder;\n  }\n\n  visitFixedSizeList() {\n    return FixedSizeListBuilder;\n  }\n\n  visitMap() {\n    return MapBuilder;\n  }\n\n}\n/** @ignore */\n\nexport const instance = new GetBuilderCtor();","map":{"version":3,"sources":["visitor/builderctor.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { VectorType, BuilderCtor } from '../interfaces';\nimport { BinaryBuilder } from '../builder/binary';\nimport { BoolBuilder } from '../builder/bool';\nimport { DateBuilder, DateDayBuilder, DateMillisecondBuilder } from '../builder/date';\nimport { DecimalBuilder } from '../builder/decimal';\nimport { DictionaryBuilder } from '../builder/dictionary';\nimport { FixedSizeBinaryBuilder } from '../builder/fixedsizebinary';\nimport { FixedSizeListBuilder } from '../builder/fixedsizelist';\nimport { FloatBuilder, Float16Builder, Float32Builder, Float64Builder } from '../builder/float';\nimport { IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder } from '../builder/interval';\nimport { IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder } from '../builder/int';\nimport { ListBuilder } from '../builder/list';\nimport { MapBuilder } from '../builder/map';\nimport { NullBuilder } from '../builder/null';\nimport { StructBuilder } from '../builder/struct';\nimport { TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder } from '../builder/timestamp';\nimport { TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder } from '../builder/time';\nimport { UnionBuilder, DenseUnionBuilder, SparseUnionBuilder } from '../builder/union';\nimport { Utf8Builder } from '../builder/utf8';\n\n/** @ignore */\nexport interface GetBuilderCtor extends Visitor {\n    visit<T extends Type>(type: T): BuilderCtor<T>;\n    visitMany<T extends Type>(types: T[]): BuilderCtor<T>[];\n    getVisitFn<T extends Type>(type: T): () => BuilderCtor<T>;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): () => BuilderCtor<T>;\n}\n\n/** @ignore */\nexport class GetBuilderCtor extends Visitor {\n    public visitNull                 () { return NullBuilder;                 }\n    public visitBool                 () { return BoolBuilder;                 }\n    public visitInt                  () { return IntBuilder;                  }\n    public visitInt8                 () { return Int8Builder;                 }\n    public visitInt16                () { return Int16Builder;                }\n    public visitInt32                () { return Int32Builder;                }\n    public visitInt64                () { return Int64Builder;                }\n    public visitUint8                () { return Uint8Builder;                }\n    public visitUint16               () { return Uint16Builder;               }\n    public visitUint32               () { return Uint32Builder;               }\n    public visitUint64               () { return Uint64Builder;               }\n    public visitFloat                () { return FloatBuilder;                }\n    public visitFloat16              () { return Float16Builder;              }\n    public visitFloat32              () { return Float32Builder;              }\n    public visitFloat64              () { return Float64Builder;              }\n    public visitUtf8                 () { return Utf8Builder;                 }\n    public visitBinary               () { return BinaryBuilder;               }\n    public visitFixedSizeBinary      () { return FixedSizeBinaryBuilder;      }\n    public visitDate                 () { return DateBuilder;                 }\n    public visitDateDay              () { return DateDayBuilder;              }\n    public visitDateMillisecond      () { return DateMillisecondBuilder;      }\n    public visitTimestamp            () { return TimestampBuilder;            }\n    public visitTimestampSecond      () { return TimestampSecondBuilder;      }\n    public visitTimestampMillisecond () { return TimestampMillisecondBuilder; }\n    public visitTimestampMicrosecond () { return TimestampMicrosecondBuilder; }\n    public visitTimestampNanosecond  () { return TimestampNanosecondBuilder;  }\n    public visitTime                 () { return TimeBuilder;                 }\n    public visitTimeSecond           () { return TimeSecondBuilder;           }\n    public visitTimeMillisecond      () { return TimeMillisecondBuilder;      }\n    public visitTimeMicrosecond      () { return TimeMicrosecondBuilder;      }\n    public visitTimeNanosecond       () { return TimeNanosecondBuilder;       }\n    public visitDecimal              () { return DecimalBuilder;              }\n    public visitList                 () { return ListBuilder;                 }\n    public visitStruct               () { return StructBuilder;               }\n    public visitUnion                () { return UnionBuilder;                }\n    public visitDenseUnion           () { return DenseUnionBuilder;           }\n    public visitSparseUnion          () { return SparseUnionBuilder;          }\n    public visitDictionary           () { return DictionaryBuilder;           }\n    public visitInterval             () { return IntervalBuilder;             }\n    public visitIntervalDayTime      () { return IntervalDayTimeBuilder;      }\n    public visitIntervalYearMonth    () { return IntervalYearMonthBuilder;    }\n    public visitFixedSizeList        () { return FixedSizeListBuilder;        }\n    public visitMap                  () { return MapBuilder;                  }\n}\n\n/** @ignore */\nexport const instance = new GetBuilderCtor();\n"]},"metadata":{},"sourceType":"module"}