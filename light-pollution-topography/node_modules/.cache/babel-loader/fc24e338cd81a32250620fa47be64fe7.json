{"ast":null,"code":"import _classCallCheck from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _createSuper from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _inherits from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Visitor } from '../visitor';\n/** @ignore */\n\nexport var TypeComparator = /*#__PURE__*/function (_Visitor) {\n  _inherits(TypeComparator, _Visitor);\n\n  var _super = _createSuper(TypeComparator);\n\n  function TypeComparator() {\n    _classCallCheck(this, TypeComparator);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TypeComparator, [{\n    key: \"compareSchemas\",\n    value: function compareSchemas(schema, other) {\n      return schema === other || other instanceof schema.constructor && instance.compareFields(schema.fields, other.fields);\n    }\n  }, {\n    key: \"compareFields\",\n    value: function compareFields(fields, others) {\n      return fields === others || Array.isArray(fields) && Array.isArray(others) && fields.length === others.length && fields.every(function (f, i) {\n        return instance.compareField(f, others[i]);\n      });\n    }\n  }, {\n    key: \"compareField\",\n    value: function compareField(field, other) {\n      return field === other || other instanceof field.constructor && field.name === other.name && field.nullable === other.nullable && instance.visit(field.type, other.type);\n    }\n  }]);\n\n  return TypeComparator;\n}(Visitor);\n\nfunction compareConstructor(type, other) {\n  return other instanceof type.constructor;\n}\n\nfunction compareAny(type, other) {\n  return type === other || compareConstructor(type, other);\n}\n\nfunction compareInt(type, other) {\n  return type === other || compareConstructor(type, other) && type.bitWidth === other.bitWidth && type.isSigned === other.isSigned;\n}\n\nfunction compareFloat(type, other) {\n  return type === other || compareConstructor(type, other) && type.precision === other.precision;\n}\n\nfunction compareFixedSizeBinary(type, other) {\n  return type === other || compareConstructor(type, other) && type.byteWidth === other.byteWidth;\n}\n\nfunction compareDate(type, other) {\n  return type === other || compareConstructor(type, other) && type.unit === other.unit;\n}\n\nfunction compareTimestamp(type, other) {\n  return type === other || compareConstructor(type, other) && type.unit === other.unit && type.timezone === other.timezone;\n}\n\nfunction compareTime(type, other) {\n  return type === other || compareConstructor(type, other) && type.unit === other.unit && type.bitWidth === other.bitWidth;\n}\n\nfunction compareList(type, other) {\n  return type === other || compareConstructor(type, other) && type.children.length === other.children.length && instance.compareFields(type.children, other.children);\n}\n\nfunction compareStruct(type, other) {\n  return type === other || compareConstructor(type, other) && type.children.length === other.children.length && instance.compareFields(type.children, other.children);\n}\n\nfunction compareUnion(type, other) {\n  return type === other || compareConstructor(type, other) && type.mode === other.mode && type.typeIds.every(function (x, i) {\n    return x === other.typeIds[i];\n  }) && instance.compareFields(type.children, other.children);\n}\n\nfunction compareDictionary(type, other) {\n  return type === other || compareConstructor(type, other) && type.id === other.id && type.isOrdered === other.isOrdered && instance.visit(type.indices, other.indices) && instance.visit(type.dictionary, other.dictionary);\n}\n\nfunction compareInterval(type, other) {\n  return type === other || compareConstructor(type, other) && type.unit === other.unit;\n}\n\nfunction compareFixedSizeList(type, other) {\n  return type === other || compareConstructor(type, other) && type.listSize === other.listSize && type.children.length === other.children.length && instance.compareFields(type.children, other.children);\n}\n\nfunction compareMap(type, other) {\n  return type === other || compareConstructor(type, other) && type.keysSorted === other.keysSorted && type.children.length === other.children.length && instance.compareFields(type.children, other.children);\n}\n\nTypeComparator.prototype.visitNull = compareAny;\nTypeComparator.prototype.visitBool = compareAny;\nTypeComparator.prototype.visitInt = compareInt;\nTypeComparator.prototype.visitInt8 = compareInt;\nTypeComparator.prototype.visitInt16 = compareInt;\nTypeComparator.prototype.visitInt32 = compareInt;\nTypeComparator.prototype.visitInt64 = compareInt;\nTypeComparator.prototype.visitUint8 = compareInt;\nTypeComparator.prototype.visitUint16 = compareInt;\nTypeComparator.prototype.visitUint32 = compareInt;\nTypeComparator.prototype.visitUint64 = compareInt;\nTypeComparator.prototype.visitFloat = compareFloat;\nTypeComparator.prototype.visitFloat16 = compareFloat;\nTypeComparator.prototype.visitFloat32 = compareFloat;\nTypeComparator.prototype.visitFloat64 = compareFloat;\nTypeComparator.prototype.visitUtf8 = compareAny;\nTypeComparator.prototype.visitBinary = compareAny;\nTypeComparator.prototype.visitFixedSizeBinary = compareFixedSizeBinary;\nTypeComparator.prototype.visitDate = compareDate;\nTypeComparator.prototype.visitDateDay = compareDate;\nTypeComparator.prototype.visitDateMillisecond = compareDate;\nTypeComparator.prototype.visitTimestamp = compareTimestamp;\nTypeComparator.prototype.visitTimestampSecond = compareTimestamp;\nTypeComparator.prototype.visitTimestampMillisecond = compareTimestamp;\nTypeComparator.prototype.visitTimestampMicrosecond = compareTimestamp;\nTypeComparator.prototype.visitTimestampNanosecond = compareTimestamp;\nTypeComparator.prototype.visitTime = compareTime;\nTypeComparator.prototype.visitTimeSecond = compareTime;\nTypeComparator.prototype.visitTimeMillisecond = compareTime;\nTypeComparator.prototype.visitTimeMicrosecond = compareTime;\nTypeComparator.prototype.visitTimeNanosecond = compareTime;\nTypeComparator.prototype.visitDecimal = compareAny;\nTypeComparator.prototype.visitList = compareList;\nTypeComparator.prototype.visitStruct = compareStruct;\nTypeComparator.prototype.visitUnion = compareUnion;\nTypeComparator.prototype.visitDenseUnion = compareUnion;\nTypeComparator.prototype.visitSparseUnion = compareUnion;\nTypeComparator.prototype.visitDictionary = compareDictionary;\nTypeComparator.prototype.visitInterval = compareInterval;\nTypeComparator.prototype.visitIntervalDayTime = compareInterval;\nTypeComparator.prototype.visitIntervalYearMonth = compareInterval;\nTypeComparator.prototype.visitFixedSizeList = compareFixedSizeList;\nTypeComparator.prototype.visitMap = compareMap;\n/** @ignore */\n\nexport var instance = new TypeComparator();","map":{"version":3,"sources":["visitor/typecomparator.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { Schema, Field } from '../schema';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface TypeComparator extends Visitor {\n    visit<T extends DataType>(type: T, other?: DataType | null): other is T;\n    visitMany<T extends DataType>(nodes: T[], others?: DataType[] | null): boolean[];\n    getVisitFn<T extends DataType>(node: VectorType<T> |  Data<T> | T): (other?: DataType | null) => other is T;\n    visitNull                 <T extends Null>                 (type: T, other?: DataType | null): other is T;\n    visitBool                 <T extends Bool>                 (type: T, other?: DataType | null): other is T;\n    visitInt                  <T extends Int>                  (type: T, other?: DataType | null): other is T;\n    visitInt8                 <T extends Int8>                 (type: T, other?: DataType | null): other is T;\n    visitInt16                <T extends Int16>                (type: T, other?: DataType | null): other is T;\n    visitInt32                <T extends Int32>                (type: T, other?: DataType | null): other is T;\n    visitInt64                <T extends Int64>                (type: T, other?: DataType | null): other is T;\n    visitUint8                <T extends Uint8>                (type: T, other?: DataType | null): other is T;\n    visitUint16               <T extends Uint16>               (type: T, other?: DataType | null): other is T;\n    visitUint32               <T extends Uint32>               (type: T, other?: DataType | null): other is T;\n    visitUint64               <T extends Uint64>               (type: T, other?: DataType | null): other is T;\n    visitFloat                <T extends Float>                (type: T, other?: DataType | null): other is T;\n    visitFloat16              <T extends Float16>              (type: T, other?: DataType | null): other is T;\n    visitFloat32              <T extends Float32>              (type: T, other?: DataType | null): other is T;\n    visitFloat64              <T extends Float64>              (type: T, other?: DataType | null): other is T;\n    visitUtf8                 <T extends Utf8>                 (type: T, other?: DataType | null): other is T;\n    visitBinary               <T extends Binary>               (type: T, other?: DataType | null): other is T;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (type: T, other?: DataType | null): other is T;\n    visitDate                 <T extends Date_>                (type: T, other?: DataType | null): other is T;\n    visitDateDay              <T extends DateDay>              (type: T, other?: DataType | null): other is T;\n    visitDateMillisecond      <T extends DateMillisecond>      (type: T, other?: DataType | null): other is T;\n    visitTimestamp            <T extends Timestamp>            (type: T, other?: DataType | null): other is T;\n    visitTimestampSecond      <T extends TimestampSecond>      (type: T, other?: DataType | null): other is T;\n    visitTimestampMillisecond <T extends TimestampMillisecond> (type: T, other?: DataType | null): other is T;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (type: T, other?: DataType | null): other is T;\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (type: T, other?: DataType | null): other is T;\n    visitTime                 <T extends Time>                 (type: T, other?: DataType | null): other is T;\n    visitTimeSecond           <T extends TimeSecond>           (type: T, other?: DataType | null): other is T;\n    visitTimeMillisecond      <T extends TimeMillisecond>      (type: T, other?: DataType | null): other is T;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (type: T, other?: DataType | null): other is T;\n    visitTimeNanosecond       <T extends TimeNanosecond>       (type: T, other?: DataType | null): other is T;\n    visitDecimal              <T extends Decimal>              (type: T, other?: DataType | null): other is T;\n    visitList                 <T extends List>                 (type: T, other?: DataType | null): other is T;\n    visitStruct               <T extends Struct>               (type: T, other?: DataType | null): other is T;\n    visitUnion                <T extends Union>                (type: T, other?: DataType | null): other is T;\n    visitDenseUnion           <T extends DenseUnion>           (type: T, other?: DataType | null): other is T;\n    visitSparseUnion          <T extends SparseUnion>          (type: T, other?: DataType | null): other is T;\n    visitDictionary           <T extends Dictionary>           (type: T, other?: DataType | null): other is T;\n    visitInterval             <T extends Interval>             (type: T, other?: DataType | null): other is T;\n    visitIntervalDayTime      <T extends IntervalDayTime>      (type: T, other?: DataType | null): other is T;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (type: T, other?: DataType | null): other is T;\n    visitFixedSizeList        <T extends FixedSizeList>        (type: T, other?: DataType | null): other is T;\n    visitMap                  <T extends Map_>                 (type: T, other?: DataType | null): other is T;\n}\n\n/** @ignore */\nexport class TypeComparator extends Visitor {\n    compareSchemas<T extends { [key: string]: DataType }>(schema: Schema<T>, other?: Schema | null): other is Schema<T> {\n        return (schema === other) || (\n            other instanceof schema.constructor &&\n            instance.compareFields(schema.fields, other.fields)\n        );\n    }\n    compareFields<T extends { [key: string]: DataType }>(fields: Field<T[keyof T]>[], others?: Field[] | null): others is Field<T[keyof T]>[] {\n        return (fields === others) || (\n            Array.isArray(fields) &&\n            Array.isArray(others) &&\n            fields.length === others.length &&\n            fields.every((f, i) => instance.compareField(f, others[i]))\n        );\n    }\n    compareField<T extends DataType = any>(field: Field<T>, other?: Field | null): other is Field<T> {\n        return (field === other) || (\n            other instanceof field.constructor &&\n            field.name === other.name &&\n            field.nullable === other.nullable &&\n            instance.visit(field.type, other.type)\n        );\n    }\n}\n\nfunction compareConstructor<T extends DataType>(type: T, other?: DataType | null): other is T {\n    return other instanceof type.constructor;\n}\n\nfunction compareAny<T extends DataType>(type: T, other?: DataType | null): other is T {\n    return (type === other) || compareConstructor(type, other);\n}\n\nfunction compareInt<T extends Int>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.bitWidth === other.bitWidth &&\n        type.isSigned === other.isSigned\n    );\n}\n\nfunction compareFloat<T extends Float>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.precision === other.precision\n    );\n}\n\nfunction compareFixedSizeBinary<T extends FixedSizeBinary>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.byteWidth === other.byteWidth\n    );\n}\n\nfunction compareDate<T extends Date_>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit\n    );\n}\n\nfunction compareTimestamp<T extends Timestamp>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit &&\n        type.timezone === other.timezone\n    );\n}\n\nfunction compareTime<T extends Time>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit &&\n        type.bitWidth === other.bitWidth\n    );\n}\n\nfunction compareList<T extends List>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareStruct<T extends Struct>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareUnion<T extends Union>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.mode === other.mode &&\n        type.typeIds.every((x, i) => x === other.typeIds[i]) &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareDictionary<T extends Dictionary>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.id === other.id &&\n        type.isOrdered === other.isOrdered &&\n        instance.visit(<any> type.indices, other.indices) &&\n        instance.visit(type.dictionary, other.dictionary)\n    );\n}\n\nfunction compareInterval<T extends Interval>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit\n    );\n}\n\nfunction compareFixedSizeList<T extends FixedSizeList>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.listSize === other.listSize &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareMap<T extends Map_>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.keysSorted === other.keysSorted &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nTypeComparator.prototype.visitNull                 =             compareAny;\nTypeComparator.prototype.visitBool                 =             compareAny;\nTypeComparator.prototype.visitInt                  =             compareInt;\nTypeComparator.prototype.visitInt8                 =             compareInt;\nTypeComparator.prototype.visitInt16                =             compareInt;\nTypeComparator.prototype.visitInt32                =             compareInt;\nTypeComparator.prototype.visitInt64                =             compareInt;\nTypeComparator.prototype.visitUint8                =             compareInt;\nTypeComparator.prototype.visitUint16               =             compareInt;\nTypeComparator.prototype.visitUint32               =             compareInt;\nTypeComparator.prototype.visitUint64               =             compareInt;\nTypeComparator.prototype.visitFloat                =           compareFloat;\nTypeComparator.prototype.visitFloat16              =           compareFloat;\nTypeComparator.prototype.visitFloat32              =           compareFloat;\nTypeComparator.prototype.visitFloat64              =           compareFloat;\nTypeComparator.prototype.visitUtf8                 =             compareAny;\nTypeComparator.prototype.visitBinary               =             compareAny;\nTypeComparator.prototype.visitFixedSizeBinary      = compareFixedSizeBinary;\nTypeComparator.prototype.visitDate                 =            compareDate;\nTypeComparator.prototype.visitDateDay              =            compareDate;\nTypeComparator.prototype.visitDateMillisecond      =            compareDate;\nTypeComparator.prototype.visitTimestamp            =       compareTimestamp;\nTypeComparator.prototype.visitTimestampSecond      =       compareTimestamp;\nTypeComparator.prototype.visitTimestampMillisecond =       compareTimestamp;\nTypeComparator.prototype.visitTimestampMicrosecond =       compareTimestamp;\nTypeComparator.prototype.visitTimestampNanosecond  =       compareTimestamp;\nTypeComparator.prototype.visitTime                 =            compareTime;\nTypeComparator.prototype.visitTimeSecond           =            compareTime;\nTypeComparator.prototype.visitTimeMillisecond      =            compareTime;\nTypeComparator.prototype.visitTimeMicrosecond      =            compareTime;\nTypeComparator.prototype.visitTimeNanosecond       =            compareTime;\nTypeComparator.prototype.visitDecimal              =             compareAny;\nTypeComparator.prototype.visitList                 =            compareList;\nTypeComparator.prototype.visitStruct               =          compareStruct;\nTypeComparator.prototype.visitUnion                =           compareUnion;\nTypeComparator.prototype.visitDenseUnion           =           compareUnion;\nTypeComparator.prototype.visitSparseUnion          =           compareUnion;\nTypeComparator.prototype.visitDictionary           =      compareDictionary;\nTypeComparator.prototype.visitInterval             =        compareInterval;\nTypeComparator.prototype.visitIntervalDayTime      =        compareInterval;\nTypeComparator.prototype.visitIntervalYearMonth    =        compareInterval;\nTypeComparator.prototype.visitFixedSizeList        =   compareFixedSizeList;\nTypeComparator.prototype.visitMap                  =             compareMap;\n\n/** @ignore */\nexport const instance = new TypeComparator();\n"]},"metadata":{},"sourceType":"module"}