{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { toUint8Array } from '../../util/buffer';\nimport { isIterable, isAsyncIterable } from '../../util/compat';\n/** @ignore */\n\nexport function toDOMStream(source, options) {\n  if (isAsyncIterable(source)) {\n    return asyncIterableAsReadableDOMStream(source, options);\n  }\n\n  if (isIterable(source)) {\n    return iterableAsReadableDOMStream(source, options);\n  }\n  /* istanbul ignore next */\n\n\n  throw new Error(`toDOMStream() must be called with an Iterable or AsyncIterable`);\n}\n/** @ignore */\n\nfunction iterableAsReadableDOMStream(source, options) {\n  let it = null;\n  const bm = options && options.type === 'bytes' || false;\n  const hwm = options && options.highWaterMark || 2 ** 24;\n  return new ReadableStream({ ...options,\n\n    start(controller) {\n      next(controller, it || (it = source[Symbol.iterator]()));\n    },\n\n    pull(controller) {\n      it ? next(controller, it) : controller.close();\n    },\n\n    cancel() {\n      (it && it.return && it.return() || true) && (it = null);\n    }\n\n  }, {\n    highWaterMark: bm ? hwm : undefined,\n    ...options\n  });\n\n  function next(controller, it) {\n    let buf;\n    let r = null;\n    let size = controller.desiredSize || null;\n\n    while (!(r = it.next(bm ? size : null)).done) {\n      if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n        size != null && bm && (size = size - buf.byteLength + 1);\n        r.value = buf;\n      }\n\n      controller.enqueue(r.value);\n\n      if (size != null && --size <= 0) {\n        return;\n      }\n    }\n\n    controller.close();\n  }\n}\n/** @ignore */\n\n\nfunction asyncIterableAsReadableDOMStream(source, options) {\n  let it = null;\n  const bm = options && options.type === 'bytes' || false;\n  const hwm = options && options.highWaterMark || 2 ** 24;\n  return new ReadableStream({ ...options,\n\n    async start(controller) {\n      await next(controller, it || (it = source[Symbol.asyncIterator]()));\n    },\n\n    async pull(controller) {\n      it ? await next(controller, it) : controller.close();\n    },\n\n    async cancel() {\n      (it && it.return && (await it.return()) || true) && (it = null);\n    }\n\n  }, {\n    highWaterMark: bm ? hwm : undefined,\n    ...options\n  });\n\n  async function next(controller, it) {\n    let buf;\n    let r = null;\n    let size = controller.desiredSize || null;\n\n    while (!(r = await it.next(bm ? size : null)).done) {\n      if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n        size != null && bm && (size = size - buf.byteLength + 1);\n        r.value = buf;\n      }\n\n      controller.enqueue(r.value);\n\n      if (size != null && --size <= 0) {\n        return;\n      }\n    }\n\n    controller.close();\n  }\n}","map":{"version":3,"sources":["io/whatwg/iterable.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { toUint8Array } from '../../util/buffer';\nimport { ReadableDOMStreamOptions } from '../../io/interfaces';\nimport { isIterable, isAsyncIterable } from '../../util/compat';\n\n/** @ignore */\nexport function toDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\n    if (isAsyncIterable<T>(source)) { return asyncIterableAsReadableDOMStream(source, options); }\n    if (isIterable<T>(source)) { return iterableAsReadableDOMStream(source, options); }\n    /* istanbul ignore next */\n    throw new Error(`toDOMStream() must be called with an Iterable or AsyncIterable`);\n}\n\n/** @ignore */\nfunction iterableAsReadableDOMStream<T>(source: Iterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: Iterator<T> | null = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n\n    return new ReadableStream<T>({\n        ...options as any,\n        start(controller) { next(controller, it || (it = source[Symbol.iterator]())); },\n        pull(controller) { it ? (next(controller, it)) : controller.close(); },\n        cancel() { (it && (it.return && it.return()) || true) && (it = null); }\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n\n    function next(controller: ReadableStreamDefaultController<T>, it: Iterator<T>) {\n        let buf: Uint8Array;\n        let r: IteratorResult<T> | null = null;\n        let size = controller.desiredSize || null;\n        while (!(r = it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = <any> buf;\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n\n/** @ignore */\nfunction asyncIterableAsReadableDOMStream<T>(source: AsyncIterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: AsyncIterator<T> | null = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n\n    return new ReadableStream<T>({\n        ...options as any,\n        async start(controller) { await next(controller, it || (it = source[Symbol.asyncIterator]())); },\n        async pull(controller) { it ? (await next(controller, it)) : controller.close(); },\n        async cancel() { (it && (it.return && await it.return()) || true) && (it = null); },\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n\n    async function next(controller: ReadableStreamDefaultController<T>, it: AsyncIterator<T>) {\n        let buf: Uint8Array;\n        let r: IteratorResult<T> | null = null;\n        let size = controller.desiredSize || null;\n        while (!(r = await it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = <any> buf;\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}