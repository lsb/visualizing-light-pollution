{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Field } from '../schema';\nimport { DataBufferBuilder } from './buffer';\nimport { Builder } from '../builder';\nimport { Union } from '../type';\n/** @ignore */\n\nexport class UnionBuilder extends Builder {\n  constructor(options) {\n    super(options);\n    this._typeIds = new DataBufferBuilder(new Int8Array(0), 1);\n\n    if (typeof options['valueToChildTypeId'] === 'function') {\n      this._valueToChildTypeId = options['valueToChildTypeId'];\n    }\n  }\n\n  get typeIdToChildIndex() {\n    return this.type.typeIdToChildIndex;\n  }\n\n  append(value, childTypeId) {\n    return this.set(this.length, value, childTypeId);\n  }\n\n  set(index, value, childTypeId) {\n    if (childTypeId === undefined) {\n      childTypeId = this._valueToChildTypeId(this, value, index);\n    }\n\n    if (this.setValid(index, this.isValid(value))) {\n      this.setValue(index, value, childTypeId);\n    }\n\n    return this;\n  } // @ts-ignore\n\n\n  setValue(index, value, childTypeId) {\n    this._typeIds.set(index, childTypeId);\n\n    super.setValue(index, value);\n  } // @ts-ignore\n\n\n  addChild(child, name = `${this.children.length}`) {\n    const childTypeId = this.children.push(child);\n    const {\n      type: {\n        children,\n        mode,\n        typeIds\n      }\n    } = this;\n    const fields = [...children, new Field(name, child.type)];\n    this.type = new Union(mode, [...typeIds, childTypeId], fields);\n    return childTypeId;\n  }\n  /** @ignore */\n  // @ts-ignore\n\n\n  _valueToChildTypeId(builder, value, offset) {\n    throw new Error(`Cannot map UnionBuilder value to child typeId. \\\nPass the \\`childTypeId\\` as the second argument to unionBuilder.append(), \\\nor supply a \\`valueToChildTypeId\\` function as part of the UnionBuilder constructor options.`);\n  }\n\n}\n/** @ignore */\n\nexport class SparseUnionBuilder extends UnionBuilder {}\n/** @ignore */\n\nexport class DenseUnionBuilder extends UnionBuilder {\n  constructor(options) {\n    super(options);\n    this._offsets = new DataBufferBuilder(new Int32Array(0));\n  }\n  /** @ignore */\n\n\n  setValue(index, value, childTypeId) {\n    const childIndex = this.type.typeIdToChildIndex[childTypeId];\n\n    this._offsets.set(index, this.getChildAt(childIndex).length);\n\n    return super.setValue(index, value, childTypeId);\n  }\n\n}","map":{"version":3,"sources":["builder/union.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { DataBufferBuilder } from './buffer';\nimport { Builder, BuilderOptions } from '../builder';\nimport { Union, SparseUnion, DenseUnion } from '../type';\n\nexport interface UnionBuilderOptions<T extends Union = any, TNull = any> extends BuilderOptions<T, TNull> {\n    valueToChildTypeId?: (builder: UnionBuilder<T, TNull>, value: any, offset: number) => number;\n}\n\n/** @ignore */\nexport abstract class UnionBuilder<T extends Union, TNull = any> extends Builder<T, TNull> {\n\n    protected _typeIds: DataBufferBuilder<Int8Array>;\n\n    constructor(options: UnionBuilderOptions<T, TNull>) {\n        super(options);\n        this._typeIds = new DataBufferBuilder(new Int8Array(0), 1);\n        if (typeof options['valueToChildTypeId'] === 'function') {\n            this._valueToChildTypeId = options['valueToChildTypeId'];\n        }\n    }\n\n    public get typeIdToChildIndex() { return this.type.typeIdToChildIndex; }\n\n    public append(value: T['TValue'] | TNull, childTypeId?: number) {\n        return this.set(this.length, value, childTypeId);\n    }\n\n    public set(index: number, value: T['TValue'] | TNull, childTypeId?: number) {\n        if (childTypeId === undefined) {\n            childTypeId = this._valueToChildTypeId(this, value, index);\n        }\n        if (this.setValid(index, this.isValid(value))) {\n            this.setValue(index, value, childTypeId);\n        }\n        return this;\n    }\n\n    // @ts-ignore\n    public setValue(index: number, value: T['TValue'], childTypeId?: number) {\n        this._typeIds.set(index, childTypeId!);\n        super.setValue(index, value);\n    }\n\n    // @ts-ignore\n    public addChild(child: Builder, name = `${this.children.length}`) {\n        const childTypeId = this.children.push(child);\n        const { type: { children, mode, typeIds } } = this;\n        const fields = [...children, new Field(name, child.type)];\n        this.type = <T> new Union(mode, [...typeIds, childTypeId], fields);\n        return childTypeId;\n    }\n\n    /** @ignore */\n    // @ts-ignore\n    protected _valueToChildTypeId(builder: UnionBuilder<T, TNull>, value: any, offset: number): number {\n        throw new Error(`Cannot map UnionBuilder value to child typeId. \\\nPass the \\`childTypeId\\` as the second argument to unionBuilder.append(), \\\nor supply a \\`valueToChildTypeId\\` function as part of the UnionBuilder constructor options.`);\n    }\n}\n\n/** @ignore */\nexport class SparseUnionBuilder<T extends SparseUnion, TNull = any> extends UnionBuilder<T, TNull> {}\n/** @ignore */\nexport class DenseUnionBuilder<T extends DenseUnion, TNull = any> extends UnionBuilder<T, TNull> {\n\n    protected _offsets: DataBufferBuilder<Int32Array>;\n\n    constructor(options: UnionBuilderOptions<T, TNull>) {\n        super(options);\n        this._offsets = new DataBufferBuilder(new Int32Array(0));\n    }\n\n    /** @ignore */\n    public setValue(index: number, value: T['TValue'], childTypeId?: number) {\n        const childIndex = this.type.typeIdToChildIndex[childTypeId!];\n        this._offsets.set(index, this.getChildAt(childIndex)!.length);\n        return super.setValue(index, value, childTypeId);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}