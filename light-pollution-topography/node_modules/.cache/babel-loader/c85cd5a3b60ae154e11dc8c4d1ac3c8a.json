{"ast":null,"code":"import _classCallCheck from\"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _createSuper from\"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import _inherits from\"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import React from'react';import'./App.css';import DeckGL from'@deck.gl/react';import{TerrainLayer,TileLayer}from'@deck.gl/geo-layers';import{BitmapLayer,ScatterplotLayer,TextLayer}from'@deck.gl/layers';import{Table}from'apache-arrow';var logAndReturn=function logAndReturn(x){console.log(x);return x;};var App=/*#__PURE__*/function(_React$Component){_inherits(App,_React$Component);var _super=_createSuper(App);function App(props){var _this;_classCallCheck(this,App);_this=_super.call(this,props);_this.state={initialViewState:{longitude:-122.4,latitude:37.7,zoom:5,pitch:30,bearing:0,maxZoom:8}};return _this;}_createClass(App,[{key:\"render\",value:function render(){var _this2=this;var light=new TileLayer({data:'./tiles/light-{z}-{x}-{y}.png',tileSize:1024,maxZoom:6,wrapLongitude:true,renderSubLayers:function renderSubLayers(props){return new BitmapLayer(logAndReturn(props),{data:null,image:props.data,bounds:[props.tile.bbox.west,props.tile.bbox.south,props.tile.bbox.east,props.tile.bbox.north]});}});var lumaTopo=new TerrainLayer({elevationDecoder:{rScaler:500,gScaler:0,bScaler:0,offset:0},meshMaxError:1,elevationData:'./tiles/light-{z}-{x}-{y}.png',maxZoom:8,wrapLongitude:true,texture:'./tiles/texture-{z}-{x}-{y}.png',material:{ambient:0.2,diffuse:1,shininess:128,specularColor:[255,192,64]}});var dataTilesPointText=new TileLayer({data:'./data-tiles/geo-tile-{z}-{x}-{y}-light-0.arrow',maxZoom:7,wrapLongitude:true,renderSubLayers:function renderSubLayers(_ref){var _ref$tile$bbox=_ref.tile.bbox,north=_ref$tile$bbox.north,south=_ref$tile$bbox.south,east=_ref$tile$bbox.east,west=_ref$tile$bbox.west,data=_ref.data;console.log(data);var table=Table.from(data);var lat=table.getColumn('gt_lat').toArray();var lon=table.getColumn('gt_lon').toArray();var points=new ScatterplotLayer({id:\"points-{north}-{south}-{east}-{west}\",data:{length:lat.length},pickable:true,onHover:function onHover(_ref2){var index=_ref2.index,picked=_ref2.picked;return _this2.setState({pointpick:picked?table.get(index):null});},getRadius:10,wrapLongitude:true,getPosition:function getPosition(object,_ref3){var index=_ref3.index,data=_ref3.data,target=_ref3.target;return[lon[index],lat[index]];},getFillColor:[100,100,150],getLineColor:[0,0,0]});}});var textPick=!this.state.pointpick?null:new TextLayer({id:\"title-\".concat(this.state.pointpick.item_id),data:[this.state.pointpick.site_page],pickable:false,characterSet:this.state.pointpick.site_page.split(''),backgroundColor:[255,255,255],getText:function getText(d){return\"   \".concat(d,\"   \");},getSize:20,sizeUnits:'pixels',wrapLongitude:true,getPosition:[this.state.pointpick.gt_lon,this.state.pointpick.gt_lat]});return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(DeckGL,{initialViewState:this.state.initialViewState,controller:true,layers:[lumaTopo,dataTilesPointText,textPick],id:\"maincanvas\"})),/*#__PURE__*/React.createElement(\"div\",{id:\"colophon\"},\"\\xA9 Lee Butterman 2020. Made in Oakland, California.\"),/*#__PURE__*/React.createElement(\"div\",null));}}]);return App;}(React.Component);export default App;","map":{"version":3,"sources":["/home/lsb/wikidatageo/dark-sky-vacations/src/App.js"],"names":["React","DeckGL","TerrainLayer","TileLayer","BitmapLayer","ScatterplotLayer","TextLayer","Table","logAndReturn","x","console","log","App","props","state","initialViewState","longitude","latitude","zoom","pitch","bearing","maxZoom","light","data","tileSize","wrapLongitude","renderSubLayers","image","bounds","tile","bbox","west","south","east","north","lumaTopo","elevationDecoder","rScaler","gScaler","bScaler","offset","meshMaxError","elevationData","texture","material","ambient","diffuse","shininess","specularColor","dataTilesPointText","table","from","lat","getColumn","toArray","lon","points","id","length","pickable","onHover","index","picked","setState","pointpick","get","getRadius","getPosition","object","target","getFillColor","getLineColor","textPick","item_id","site_page","characterSet","split","backgroundColor","getText","d","getSize","sizeUnits","gt_lon","gt_lat","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport DeckGL from '@deck.gl/react';\nimport { TerrainLayer, TileLayer } from '@deck.gl/geo-layers';\nimport { BitmapLayer, ScatterplotLayer, TextLayer } from '@deck.gl/layers';\nimport { Table } from 'apache-arrow';\n\nconst logAndReturn = (x) => { console.log(x); return x };\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {initialViewState: {longitude: -122.4, latitude: 37.7, zoom: 5, pitch: 30, bearing: 0, maxZoom: 8}}\n  }\n  render() {\n    const light = new TileLayer({\n      data: './tiles/light-{z}-{x}-{y}.png',\n      tileSize: 1024,\n      maxZoom: 6,\n      wrapLongitude: true,\n      renderSubLayers: props => (\n        new BitmapLayer(logAndReturn(props), {\n          data: null,\n          image: props.data,\n          bounds: [props.tile.bbox.west, props.tile.bbox.south, props.tile.bbox.east, props.tile.bbox.north],\n        })\n      )\n    })\n    const lumaTopo = new TerrainLayer({\n      elevationDecoder: {\n        rScaler: 500,\n        gScaler: 0,\n        bScaler: 0,\n        offset: 0,\n      },\n      meshMaxError: 1,\n      elevationData: './tiles/light-{z}-{x}-{y}.png',\n      maxZoom: 8,\n      wrapLongitude: true,\n      texture: './tiles/texture-{z}-{x}-{y}.png',\n      material: {\n        ambient: 0.2,\n        diffuse: 1,\n        shininess: 128,\n        specularColor: [255, 192, 64]\n      }\n    });\n    const dataTilesPointText = new TileLayer({\n      data: './data-tiles/geo-tile-{z}-{x}-{y}-light-0.arrow',\n      maxZoom: 7,\n      wrapLongitude: true,\n      renderSubLayers: ({tile: {bbox: {north, south, east, west}}, data}) => {\n        console.log(data);\n        const table = Table.from(data);\n        const lat = table.getColumn('gt_lat').toArray();\n        const lon = table.getColumn('gt_lon').toArray();\n        const points = new ScatterplotLayer({\n          id: `points-{north}-{south}-{east}-{west}`,\n          data: {length: lat.length},\n          pickable: true,\n          onHover: ({index, picked}) => this.setState({pointpick: picked ? table.get(index) : null}),\n          getRadius: 10,\n          wrapLongitude: true,\n          getPosition: (object, {index, data, target}) => [lon[index], lat[index]],\n          getFillColor: [100,100,150],\n          getLineColor: [0,0,0],  \n        });\n      }\n    });\n    const textPick = !this.state.pointpick ? null : new TextLayer({\n      id: `title-${this.state.pointpick.item_id}`,\n      data: [this.state.pointpick.site_page],\n      pickable: false,\n      characterSet: this.state.pointpick.site_page.split(''),\n      backgroundColor: [255,255,255],\n      getText: (d) => `   ${d}   `,\n      getSize: 20,\n      sizeUnits: 'pixels',\n      wrapLongitude: true,\n      getPosition: [this.state.pointpick.gt_lon, this.state.pointpick.gt_lat],\n    });\n    return (\n      <div>\n        <div>\n          <DeckGL initialViewState={this.state.initialViewState} controller={true} layers={[lumaTopo, dataTilesPointText, textPick]} id={\"maincanvas\"} />\n        </div>\n        <div id=\"colophon\">© Lee Butterman 2020. Made in Oakland, California.</div>\n        <div>\n          \n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}