{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { log } from '@luma.gl/webgl';\nimport Display from './display';\nimport { createEnterVRButton } from './vr-button';\n\nvar VRDisplay = function (_Display) {\n  _inherits(VRDisplay, _Display);\n\n  _createClass(VRDisplay, null, [{\n    key: \"isSupported\",\n    value: function isSupported() {\n      return typeof navigator !== 'undefined' && 'getVRDisplays' in navigator && 'VRFrameData' in window;\n    }\n  }]);\n\n  function VRDisplay(props) {\n    var _this;\n\n    _classCallCheck(this, VRDisplay);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(VRDisplay).call(this, props));\n    _this._vrSupported = VRDisplay.isSupported();\n\n    if (_this._vrSupported) {\n      _this.vrFrameData = new window.VRFrameData();\n      _this.vrPresenting = false;\n      _this.vrFrame = false;\n      window.addEventListener('vrdisplaypresentchange', _this._vrDisplayPresentChange.bind(_assertThisInitialized(_this)));\n    }\n\n    return _this;\n  }\n\n  _createClass(VRDisplay, [{\n    key: \"delete\",\n    value: function _delete() {\n      _get(_getPrototypeOf(VRDisplay.prototype), \"delete\", this).call(this);\n\n      this._removeVRButton();\n    }\n  }, {\n    key: \"getViews\",\n    value: function getViews(options) {\n      if (this._vrSupported) {\n        this._addVRButton();\n      }\n\n      if (this.vrPresenting && this.vrFrame) {\n        this.vrDisplay.getFrameData(this.vrFrameData);\n        var _this$vrFrameData = this.vrFrameData,\n            leftProjectionMatrix = _this$vrFrameData.leftProjectionMatrix,\n            leftViewMatrix = _this$vrFrameData.leftViewMatrix,\n            rightProjectionMatrix = _this$vrFrameData.rightProjectionMatrix,\n            rightViewMatrix = _this$vrFrameData.rightViewMatrix;\n        var width = options.width,\n            height = options.height;\n        return [{\n          displayEye: 'left',\n          projectionMatrix: leftProjectionMatrix,\n          viewMatrix: leftViewMatrix,\n          params: {\n            viewport: [0, 0, width * 0.5, height],\n            scissor: [0, 0, width * 0.5, height],\n            scissorTest: true\n          }\n        }, {\n          displayEye: 'right',\n          projectionMatrix: rightProjectionMatrix,\n          viewMatrix: rightViewMatrix,\n          params: {\n            viewport: [width * 0.5, 0, width * 0.5, height],\n            scissor: [width * 0.5, 0, width * 0.5, height],\n            scissorTest: true\n          }\n        }];\n      }\n\n      return _get(_getPrototypeOf(VRDisplay.prototype), \"getViews\", this).call(this, options);\n    }\n  }, {\n    key: \"submitFrame\",\n    value: function submitFrame() {\n      if (this.vrPresenting && this.vrFrame) {\n        this.vrDisplay.submitFrame();\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"requestAnimationFrame\",\n    value: function requestAnimationFrame(renderFrame) {\n      var _this2 = this;\n\n      if (this.vrPresenting) {\n        this.vrDisplay.requestAnimationFrame(function () {\n          _this2.vrFrame = true;\n          renderFrame();\n          _this2.vrFrame = false;\n        });\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_addVRButton\",\n    value: function () {\n      var _addVRButton2 = _asyncToGenerator(_regeneratorRuntime.mark(function _callee() {\n        var _this3 = this;\n\n        var canvas, displays;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.vrButton) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 2:\n                canvas = this._getCanvas();\n\n                if (canvas) {\n                  _context.next = 5;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 5:\n                _context.next = 7;\n                return navigator.getVRDisplays();\n\n              case 7:\n                displays = _context.sent;\n\n                if (displays && displays.length) {\n                  log.info(2, 'Found VR Displays', displays)();\n                  this.vrDisplay = displays[0];\n                  this.vrButton = createEnterVRButton({\n                    canvas: canvas,\n                    title: \"Enter VR (\".concat(this.vrDisplay.displayName, \")\")\n                  });\n\n                  this.vrButton.onclick = function () {\n                    return _this3._startDisplay();\n                  };\n                }\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function _addVRButton() {\n        return _addVRButton2.apply(this, arguments);\n      }\n\n      return _addVRButton;\n    }()\n  }, {\n    key: \"_getCanvas\",\n    value: function _getCanvas() {\n      return this.animationLoop.canvas || this.animationLoop.gl && this.animationLoop.gl.canvas;\n    }\n  }, {\n    key: \"_removeVRButton\",\n    value: function _removeVRButton() {\n      if (this.vrButton) {}\n    }\n  }, {\n    key: \"_startDisplay\",\n    value: function _startDisplay() {\n      this.vrDisplay.requestPresent([{\n        source: this._getCanvas()\n      }]);\n    }\n  }, {\n    key: \"_vrDisplayPresentChange\",\n    value: function _vrDisplayPresentChange() {\n      if (this.vrDisplay.isPresenting) {\n        log.info(2, 'Entering VR')();\n        this.vrPresenting = true;\n        this.vrButton.style.display = 'none';\n      } else {\n        log.info(2, 'Exiting VR')();\n        this.vrPresenting = false;\n        this.vrButton.style.display = 'block';\n      }\n    }\n  }]);\n\n  return VRDisplay;\n}(Display);\n\nexport { VRDisplay as default };","map":{"version":3,"sources":["../../../src/webvr/vr-display.js"],"names":["VRDisplay","Display","window","options","leftProjectionMatrix","leftViewMatrix","rightProjectionMatrix","rightViewMatrix","width","height","displayEye","projectionMatrix","viewMatrix","params","viewport","scissor","scissorTest","renderFrame","vrButton","canvas","displays","navigator","log","createEnterVRButton","title","source"],"mappings":"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","sourcesContent":["/* global window, navigator */\nimport {log} from '@luma.gl/webgl';\nimport Display from './display';\nimport {createEnterVRButton} from './vr-button';\n\nexport default class VRDisplay extends Display {\n  static isSupported() {\n    return (\n      typeof navigator !== 'undefined' && 'getVRDisplays' in navigator && 'VRFrameData' in window\n    );\n  }\n\n  constructor(props) {\n    super(props);\n\n    this._vrSupported = VRDisplay.isSupported();\n    if (this._vrSupported) {\n      this.vrFrameData = new window.VRFrameData();\n      this.vrPresenting = false;\n      this.vrFrame = false;\n      window.addEventListener('vrdisplaypresentchange', this._vrDisplayPresentChange.bind(this));\n    }\n  }\n\n  delete() {\n    super.delete();\n    this._removeVRButton();\n  }\n\n  getViews(options) {\n    if (this._vrSupported) {\n      this._addVRButton();\n    }\n\n    // Need both vrPresenting and vrFrame\n    // to avoid race conditions when we exit VR\n    // after we schedule an animation frame\n    if (this.vrPresenting && this.vrFrame) {\n      this.vrDisplay.getFrameData(this.vrFrameData);\n\n      const {\n        leftProjectionMatrix,\n        leftViewMatrix,\n        rightProjectionMatrix,\n        rightViewMatrix\n      } = this.vrFrameData;\n\n      const {width, height} = options;\n\n      return [\n        {\n          displayEye: 'left',\n          projectionMatrix: leftProjectionMatrix,\n          viewMatrix: leftViewMatrix,\n          params: {\n            viewport: [0, 0, width * 0.5, height],\n            scissor: [0, 0, width * 0.5, height],\n            scissorTest: true\n          }\n        },\n        {\n          displayEye: 'right',\n          projectionMatrix: rightProjectionMatrix,\n          viewMatrix: rightViewMatrix,\n          params: {\n            viewport: [width * 0.5, 0, width * 0.5, height],\n            scissor: [width * 0.5, 0, width * 0.5, height],\n            scissorTest: true\n          }\n        }\n      ];\n    }\n\n    return super.getViews(options);\n  }\n\n  submitFrame() {\n    if (this.vrPresenting && this.vrFrame) {\n      this.vrDisplay.submitFrame();\n      return true;\n    }\n\n    return false;\n  }\n\n  requestAnimationFrame(renderFrame) {\n    if (this.vrPresenting) {\n      this.vrDisplay.requestAnimationFrame(() => {\n        this.vrFrame = true;\n        renderFrame();\n        this.vrFrame = false;\n      });\n\n      return true;\n    }\n\n    return false;\n  }\n\n  // PRIVATE\n\n  // TODO: Consider resizing canvas to match vrDisplay.getEyeParameters()\n  // TODO: Maybe allow to select display?\n  async _addVRButton() {\n    if (this.vrButton) {\n      return;\n    }\n\n    const canvas = this._getCanvas();\n    if (!canvas) {\n      return;\n    }\n\n    const displays = await navigator.getVRDisplays();\n    if (displays && displays.length) {\n      log.info(2, 'Found VR Displays', displays)();\n\n      this.vrDisplay = displays[0];\n      this.vrButton = createEnterVRButton({\n        canvas,\n        title: `Enter VR (${this.vrDisplay.displayName})`\n      });\n      this.vrButton.onclick = () => this._startDisplay();\n    }\n  }\n\n  _getCanvas() {\n    return this.animationLoop.canvas || (this.animationLoop.gl && this.animationLoop.gl.canvas);\n  }\n\n  _removeVRButton() {\n    if (this.vrButton) {\n      // TODO\n    }\n  }\n\n  _startDisplay() {\n    this.vrDisplay.requestPresent([\n      {\n        source: this._getCanvas()\n      }\n    ]);\n  }\n\n  _vrDisplayPresentChange() {\n    if (this.vrDisplay.isPresenting) {\n      log.info(2, 'Entering VR')();\n\n      this.vrPresenting = true;\n      this.vrButton.style.display = 'none';\n    } else {\n      log.info(2, 'Exiting VR')();\n\n      this.vrPresenting = false;\n      this.vrButton.style.display = 'block';\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}