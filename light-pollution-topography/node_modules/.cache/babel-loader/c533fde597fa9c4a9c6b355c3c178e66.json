{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Field } from '../schema';\nimport { Map_ } from '../type';\nimport { VariableWidthBuilder } from '../builder';\n/** @ignore */\n\nexport class MapBuilder extends VariableWidthBuilder {\n  set(index, value) {\n    return super.set(index, value);\n  }\n\n  setValue(index, value) {\n    value = value instanceof Map ? value : new Map(Object.entries(value));\n    const pending = this._pending || (this._pending = new Map());\n    const current = pending.get(index);\n    current && (this._pendingLength -= current.size);\n    this._pendingLength += value.size;\n    pending.set(index, value);\n  }\n\n  addChild(child, name = `${this.numChildren}`) {\n    if (this.numChildren > 0) {\n      throw new Error('ListBuilder can only have one child.');\n    }\n\n    this.children[this.numChildren] = child;\n    this.type = new Map_(new Field(name, child.type, true), this.type.keysSorted);\n    return this.numChildren - 1;\n  }\n\n  _flushPending(pending) {\n    const offsets = this._offsets;\n    const setValue = this._setValue;\n    pending.forEach((value, index) => {\n      if (value === undefined) {\n        offsets.set(index, 0);\n      } else {\n        offsets.set(index, value.size);\n        setValue(this, index, value);\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["builder/map.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAS,KAAT,QAAsB,WAAtB;AACA,SAAmB,IAAnB,QAAuC,SAAvC;AACA,SAAkB,oBAAlB,QAA8C,YAA9C;AAMA;;AACA,OAAM,MAAO,UAAP,SAA2F,oBAA3F,CAAkI;AAG7H,EAAA,GAAG,CAAC,KAAD,EAAgB,KAAhB,EAAgD;AACtD,WAAO,MAAM,GAAN,CAAU,KAAV,EAAiB,KAAjB,CAAP;AACH;;AAEM,EAAA,QAAQ,CAAC,KAAD,EAAgB,KAAhB,EAAwC;AACnD,IAAA,KAAK,GAAG,KAAK,YAAY,GAAjB,GAAuB,KAAvB,GAA+B,IAAI,GAAJ,CAAQ,MAAM,CAAC,OAAP,CAAe,KAAf,CAAR,CAAvC;AACA,UAAM,OAAO,GAAG,KAAK,QAAL,KAAkB,KAAK,QAAL,GAAgB,IAAI,GAAJ,EAAlC,CAAhB;AACA,UAAM,OAAO,GAAG,OAAO,CAAC,GAAR,CAAY,KAAZ,CAAhB;AACA,IAAA,OAAO,KAAK,KAAK,cAAL,IAAuB,OAAO,CAAC,IAApC,CAAP;AACA,SAAK,cAAL,IAAuB,KAAK,CAAC,IAA7B;AACA,IAAA,OAAO,CAAC,GAAR,CAAY,KAAZ,EAAmB,KAAnB;AACH;;AAEM,EAAA,QAAQ,CAAC,KAAD,EAA+C,IAAI,GAAG,GAAG,KAAK,WAAW,EAAzE,EAA2E;AACtF,QAAI,KAAK,WAAL,GAAmB,CAAvB,EAA0B;AACtB,YAAM,IAAI,KAAJ,CAAU,sCAAV,CAAN;AACH;;AACD,SAAK,QAAL,CAAc,KAAK,WAAnB,IAAkC,KAAlC;AACA,SAAK,IAAL,GAAY,IAAI,IAAJ,CAAe,IAAI,KAAJ,CAAU,IAAV,EAAgB,KAAK,CAAC,IAAtB,EAA4B,IAA5B,CAAf,EAAkD,KAAK,IAAL,CAAU,UAA5D,CAAZ;AACA,WAAO,KAAK,WAAL,GAAmB,CAA1B;AACH;;AAES,EAAA,aAAa,CAAC,OAAD,EAAyB;AAC5C,UAAM,OAAO,GAAG,KAAK,QAArB;AACA,UAAM,QAAQ,GAAG,KAAK,SAAtB;AACA,IAAA,OAAO,CAAC,OAAR,CAAgB,CAAC,KAAD,EAAQ,KAAR,KAAiB;AAC7B,UAAI,KAAK,KAAK,SAAd,EAAyB;AACrB,QAAA,OAAO,CAAC,GAAR,CAAY,KAAZ,EAAmB,CAAnB;AACH,OAFD,MAEO;AACH,QAAA,OAAO,CAAC,GAAR,CAAY,KAAZ,EAAmB,KAAK,CAAC,IAAzB;AACA,QAAA,QAAQ,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,CAAR;AACH;AACJ,KAPD;AAQH;;AApCmI","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { DataType, Map_, Struct } from '../type';\nimport { Builder, VariableWidthBuilder } from '../builder';\n\n/** @ignore */ type MapValue<K extends DataType = any, V extends DataType = any> = Map_<K, V>['TValue'];\n/** @ignore */ type MapValues<K extends DataType = any, V extends DataType = any> = Map<number, MapValue<K, V> | undefined>;\n/** @ignore */ type MapValueExt<K extends DataType = any, V extends DataType = any> = MapValue<K, V> | { [key: string]: V } | { [key: number]: V } ;\n\n/** @ignore */\nexport class MapBuilder<K extends DataType = any, V extends DataType = any, TNull = any> extends VariableWidthBuilder<Map_<K, V>, TNull> {\n\n    protected _pending: MapValues<K, V> | undefined;\n    public set(index: number, value: MapValueExt<K, V> | TNull) {\n        return super.set(index, value as MapValue<K, V> | TNull);\n    }\n\n    public setValue(index: number, value: MapValueExt<K, V>) {\n        value = value instanceof Map ? value : new Map(Object.entries(value));\n        const pending = this._pending || (this._pending = new Map() as MapValues<K, V>);\n        const current = pending.get(index);\n        current && (this._pendingLength -= current.size);\n        this._pendingLength += value.size;\n        pending.set(index, value);\n    }\n\n    public addChild(child: Builder<Struct<{ key: K, value: V }>>, name = `${this.numChildren}`) {\n        if (this.numChildren > 0) {\n            throw new Error('ListBuilder can only have one child.');\n        }\n        this.children[this.numChildren] = child;\n        this.type = new Map_<K, V>(new Field(name, child.type, true), this.type.keysSorted);\n        return this.numChildren - 1;\n    }\n\n    protected _flushPending(pending: MapValues<K, V>) {\n        const offsets = this._offsets;\n        const setValue = this._setValue;\n        pending.forEach((value, index) => {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            } else {\n                offsets.set(index, value.size);\n                setValue(this, index, value);\n            }\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}