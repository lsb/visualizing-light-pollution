{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport assert from '../utils/assert';\nimport { isImageTypeSupported, getDefaultImageType } from '../parsed-image-api/image-type';\nimport { getImageData } from '../parsed-image-api/parsed-image-api';\nimport parseToImage from './parse-to-image';\nimport parseToImageBitmap from './parse-to-image-bitmap';\nimport parseToNodeImage from './parse-to-node-image';\nexport default function parseImage(_x, _x2, _x3) {\n  return _parseImage.apply(this, arguments);\n}\n\nfunction _parseImage() {\n  _parseImage = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(arrayBuffer, options, context) {\n    var imageOptions, imageType, _ref, url, loadType, image;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = options || {};\n            imageOptions = options.image || {};\n            imageType = imageOptions.type || 'auto';\n            _ref = context || {}, url = _ref.url;\n            loadType = getLoadableImageType(imageType);\n            _context.t0 = loadType;\n            _context.next = _context.t0 === 'imagebitmap' ? 8 : _context.t0 === 'image' ? 12 : _context.t0 === 'data' ? 16 : 20;\n            break;\n\n          case 8:\n            _context.next = 10;\n            return parseToImageBitmap(arrayBuffer, options, url);\n\n          case 10:\n            image = _context.sent;\n            return _context.abrupt(\"break\", 21);\n\n          case 12:\n            _context.next = 14;\n            return parseToImage(arrayBuffer, options, url);\n\n          case 14:\n            image = _context.sent;\n            return _context.abrupt(\"break\", 21);\n\n          case 16:\n            _context.next = 18;\n            return parseToNodeImage(arrayBuffer, options);\n\n          case 18:\n            image = _context.sent;\n            return _context.abrupt(\"break\", 21);\n\n          case 20:\n            assert(false);\n\n          case 21:\n            if (imageType === 'data') {\n              image = getImageData(image);\n            }\n\n            return _context.abrupt(\"return\", image);\n\n          case 23:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parseImage.apply(this, arguments);\n}\n\nfunction getLoadableImageType(type) {\n  switch (type) {\n    case 'auto':\n    case 'data':\n      return getDefaultImageType();\n\n    default:\n      isImageTypeSupported(type);\n      return type;\n  }\n}","map":{"version":3,"sources":["../../../../src/lib/parsers/parse-image.js"],"names":["options","imageOptions","imageType","url","context","loadType","getLoadableImageType","image","parseToImageBitmap","parseToImage","parseToNodeImage","assert","getImageData","getDefaultImageType","isImageTypeSupported"],"mappings":"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","sourcesContent":["import assert from '../utils/assert';\nimport {isImageTypeSupported, getDefaultImageType} from '../parsed-image-api/image-type';\nimport {getImageData} from '../parsed-image-api/parsed-image-api';\nimport parseToImage from './parse-to-image';\nimport parseToImageBitmap from './parse-to-image-bitmap';\nimport parseToNodeImage from './parse-to-node-image';\n\n// Parse to platform defined image type (data on node, ImageBitmap or HTMLImage on browser)\n// eslint-disable-next-line complexity\nexport default async function parseImage(arrayBuffer, options, context) {\n  options = options || {};\n  const imageOptions = options.image || {};\n\n  // The user can request a specific output format via `options.image.type`\n  const imageType = imageOptions.type || 'auto';\n\n  const {url} = context || {};\n\n  // Note: For options.image.type === `data`, we may still need to load as `image` or `imagebitmap`\n  const loadType = getLoadableImageType(imageType);\n\n  let image;\n  switch (loadType) {\n    case 'imagebitmap':\n      image = await parseToImageBitmap(arrayBuffer, options, url);\n      break;\n    case 'image':\n      image = await parseToImage(arrayBuffer, options, url);\n      break;\n    case 'data':\n      // Node.js loads imagedata directly\n      image = await parseToNodeImage(arrayBuffer, options);\n      break;\n    default:\n      assert(false);\n  }\n\n  // Browser: if options.image.type === 'data', we can now extract data from the loaded image\n  if (imageType === 'data') {\n    image = getImageData(image);\n  }\n\n  return image;\n}\n\n// Get a loadable image type from image type\nfunction getLoadableImageType(type) {\n  switch (type) {\n    case 'auto':\n    case 'data':\n      // Browser: For image data we need still need to load using an image format\n      // Node: the default image type is `data`.\n      return getDefaultImageType();\n    default:\n      // Throw an error if not supported\n      isImageTypeSupported(type);\n      return type;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}