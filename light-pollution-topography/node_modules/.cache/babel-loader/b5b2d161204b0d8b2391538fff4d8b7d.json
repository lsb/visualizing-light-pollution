{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { isFileReadable } from '../javascript-utils/is-type';\nimport { fetchFile } from './fetch/fetch-file';\nimport { isLoaderObject } from './loader-utils/normalize-loader';\nimport { parse } from './parse';\nexport function load(_x, _x2, _x3) {\n  return _load.apply(this, arguments);\n}\n\nfunction _load() {\n  _load = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(url, loaders, options) {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n              options = loaders;\n              loaders = null;\n            }\n\n            data = url;\n\n            if (!(typeof url === 'string')) {\n              _context.next = 8;\n              break;\n            }\n\n            _context.next = 5;\n            return fetchFile(url, options);\n\n          case 5:\n            data = _context.sent;\n            _context.next = 9;\n            break;\n\n          case 8:\n            url = null;\n\n          case 9:\n            if (!isFileReadable(url)) {\n              _context.next = 14;\n              break;\n            }\n\n            _context.next = 12;\n            return fetchFile(url, options);\n\n          case 12:\n            data = _context.sent;\n            url = null;\n\n          case 14:\n            _context.next = 16;\n            return parse(data, loaders, options, url);\n\n          case 16:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _load.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../src/lib/load.js"],"names":["Array","isLoaderObject","options","loaders","data","fetchFile","url","isFileReadable","parse"],"mappings":";;AAAA,SAAA,cAAA,QAAA,6BAAA;AACA,SAAA,SAAA,QAAA,oBAAA;AACA,SAAA,cAAA,QAAA,iCAAA;AAEA,SAAA,KAAA,QAAA,SAAA;AAIA,OAAA,SAAA,IAAA,CAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA,SAAA,KAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;;qDAAO,SAAA,OAAA,CAAA,GAAA,EAAA,OAAA,EAAA,OAAA,EAAA;AAAA,QAAA,IAAA;AAAA,WAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,aAAA,CAAA,EAAA;AAAA,gBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,eAAA,CAAA;AAEL,gBAAI,CAACA,KAAK,CAALA,OAAAA,CAAD,OAACA,CAAD,IAA2B,CAACC,cAAc,CAA9C,OAA8C,CAA9C,EAAyD;AACvDC,cAAAA,OAAO,GAAPA,OAAAA;AACAC,cAAAA,OAAO,GAAPA,IAAAA;AACD;;AAGGC,YAAAA,IARC,GAAA,GAQDA;;AARC,gBAAA,EAWD,OAAA,GAAA,KAXC,QAAA,CAAA,EAAA;AAAA,cAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA,mBAYUC,SAAS,CAAA,GAAA,EAZnB,OAYmB,CAZnB;;AAAA,eAAA,CAAA;AAYHD,YAAAA,IAZG,GAAA,QAAA,CAAA,IAYHA;AAZG,YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA;;AAAA,eAAA,CAAA;AAcHE,YAAAA,GAAG,GAAHA,IAAAA;;AAdG,eAAA,CAAA;AAAA,gBAAA,CAkBDC,cAAc,CAlBb,GAkBa,CAlBb,EAAA;AAAA,cAAA,QAAA,CAAA,IAAA,GAAA,EAAA;AAAA;AAAA;;AAAA,YAAA,QAAA,CAAA,IAAA,GAAA,EAAA;AAAA,mBAoBUF,SAAS,CAAA,GAAA,EApBnB,OAoBmB,CApBnB;;AAAA,eAAA,EAAA;AAoBHD,YAAAA,IApBG,GAAA,QAAA,CAAA,IAoBHA;AACAE,YAAAA,GAAG,GAAHA,IAAAA;;AArBG,eAAA,EAAA;AAAA,YAAA,QAAA,CAAA,IAAA,GAAA,EAAA;AAAA,mBAyBQE,KAAK,CAAA,IAAA,EAAA,OAAA,EAAA,OAAA,EAzBb,GAyBa,CAzBb;;AAAA,eAAA,EAAA;AAAA,mBAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAAA,QAAA,CAAA,IAAA,CAAA;;AAAA,eAAA,EAAA;AAAA,eAAA,KAAA;AAAA,mBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,KAAA,EAAA,OAAA,CAAA","sourcesContent":["import {isFileReadable} from '../javascript-utils/is-type';\nimport {fetchFile} from './fetch/fetch-file';\nimport {isLoaderObject} from './loader-utils/normalize-loader';\n\nimport {parse} from './parse';\n\n// Note: Load does duplicate a lot of parse.\n// it can also call fetchFile on string urls, which `parse` won't do.\nexport async function load(url, loaders, options) {\n  // Signature: load(url, options)\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    options = loaders;\n    loaders = null;\n  }\n\n  // at this point, `url` could be already loaded binary data\n  let data = url;\n\n  // url is a string, fetch the url\n  if (typeof url === 'string') {\n    data = await fetchFile(url, options);\n  } else {\n    url = null;\n  }\n\n  // URL is Blob or File, fetchFile handles it (alt: we could generate ObjectURL here)\n  if (isFileReadable(url)) {\n    // The fetch response object will contain blob.name\n    data = await fetchFile(url, options);\n    url = null;\n  }\n\n  // Data is loaded (at least we have a `Response` object) so time to hand over to `parse`\n  return await parse(data, loaders, options, url);\n}\n"]},"metadata":{},"sourceType":"module"}