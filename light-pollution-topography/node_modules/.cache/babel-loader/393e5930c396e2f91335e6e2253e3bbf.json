{"ast":null,"code":"import { COORDINATE_SYSTEM, createIterable } from '@deck.gl/core';\nvar RADIAN_PER_DEGREE = Math.PI / 180;\nvar modelMatrix = new Float32Array(16);\nvar valueArray = new Float32Array(12);\n\nfunction calculateTransformMatrix(targetMatrix, orientation, scale) {\n  var pitch = orientation[0] * RADIAN_PER_DEGREE;\n  var yaw = orientation[1] * RADIAN_PER_DEGREE;\n  var roll = orientation[2] * RADIAN_PER_DEGREE;\n  var sr = Math.sin(roll);\n  var sp = Math.sin(pitch);\n  var sw = Math.sin(yaw);\n  var cr = Math.cos(roll);\n  var cp = Math.cos(pitch);\n  var cw = Math.cos(yaw);\n  var scx = scale[0];\n  var scy = scale[1];\n  var scz = scale[2];\n  targetMatrix[0] = scx * cw * cp;\n  targetMatrix[1] = scx * sw * cp;\n  targetMatrix[2] = scx * -sp;\n  targetMatrix[3] = scy * (-sw * cr + cw * sp * sr);\n  targetMatrix[4] = scy * (cw * cr + sw * sp * sr);\n  targetMatrix[5] = scy * cp * sr;\n  targetMatrix[6] = scz * (sw * sr + cw * sp * cr);\n  targetMatrix[7] = scz * (-cw * sr + sw * sp * cr);\n  targetMatrix[8] = scz * cp * cr;\n}\n\nfunction getExtendedMat3FromMat4(mat4) {\n  mat4[0] = mat4[0];\n  mat4[1] = mat4[1];\n  mat4[2] = mat4[2];\n  mat4[3] = mat4[4];\n  mat4[4] = mat4[5];\n  mat4[5] = mat4[6];\n  mat4[6] = mat4[8];\n  mat4[7] = mat4[9];\n  mat4[8] = mat4[10];\n  mat4[9] = mat4[12];\n  mat4[10] = mat4[13];\n  mat4[11] = mat4[14];\n  return mat4.subarray(0, 12);\n}\n\nexport var MATRIX_ATTRIBUTES = {\n  size: 12,\n  accessor: ['getOrientation', 'getScale', 'getTranslation', 'getTransformMatrix'],\n  shaderAttributes: {\n    instanceModelMatrix__LOCATION_0: {\n      size: 3,\n      elementOffset: 0\n    },\n    instanceModelMatrix__LOCATION_1: {\n      size: 3,\n      elementOffset: 3\n    },\n    instanceModelMatrix__LOCATION_2: {\n      size: 3,\n      elementOffset: 6\n    },\n    instanceTranslation: {\n      size: 3,\n      elementOffset: 9\n    }\n  },\n  update: function update(attribute, _ref) {\n    var startRow = _ref.startRow,\n        endRow = _ref.endRow;\n    var _this$props = this.props,\n        data = _this$props.data,\n        getOrientation = _this$props.getOrientation,\n        getScale = _this$props.getScale,\n        getTranslation = _this$props.getTranslation,\n        getTransformMatrix = _this$props.getTransformMatrix;\n    var arrayMatrix = Array.isArray(getTransformMatrix);\n    var constantMatrix = arrayMatrix && getTransformMatrix.length === 16;\n    var constantScale = Array.isArray(getScale);\n    var constantOrientation = Array.isArray(getOrientation);\n    var constantTranslation = Array.isArray(getTranslation);\n    var hasMatrix = constantMatrix || !arrayMatrix && Boolean(getTransformMatrix(data[0]));\n\n    if (hasMatrix) {\n      attribute.constant = constantMatrix;\n    } else {\n      attribute.constant = constantOrientation && constantScale && constantTranslation;\n    }\n\n    var instanceModelMatrixData = attribute.value;\n\n    if (attribute.constant) {\n      var matrix;\n\n      if (hasMatrix) {\n        modelMatrix.set(getTransformMatrix);\n        matrix = getExtendedMat3FromMat4(modelMatrix);\n      } else {\n        matrix = valueArray;\n        var orientation = getOrientation;\n        var scale = getScale;\n        calculateTransformMatrix(matrix, orientation, scale);\n        matrix.set(getTranslation, 9);\n      }\n\n      attribute.value = new Float32Array(matrix);\n    } else {\n      var i = startRow * attribute.size;\n\n      var _createIterable = createIterable(data, startRow, endRow),\n          iterable = _createIterable.iterable,\n          objectInfo = _createIterable.objectInfo;\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = iterable[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var object = _step.value;\n          objectInfo.index++;\n\n          var _matrix = void 0;\n\n          if (hasMatrix) {\n            modelMatrix.set(constantMatrix ? getTransformMatrix : getTransformMatrix(object, objectInfo));\n            _matrix = getExtendedMat3FromMat4(modelMatrix);\n          } else {\n            _matrix = valueArray;\n\n            var _orientation = constantOrientation ? getOrientation : getOrientation(object, objectInfo);\n\n            var _scale = constantScale ? getScale : getScale(object, objectInfo);\n\n            calculateTransformMatrix(_matrix, _orientation, _scale);\n\n            _matrix.set(constantTranslation ? getTranslation : getTranslation(object, objectInfo), 9);\n          }\n\n          instanceModelMatrixData[i++] = _matrix[0];\n          instanceModelMatrixData[i++] = _matrix[1];\n          instanceModelMatrixData[i++] = _matrix[2];\n          instanceModelMatrixData[i++] = _matrix[3];\n          instanceModelMatrixData[i++] = _matrix[4];\n          instanceModelMatrixData[i++] = _matrix[5];\n          instanceModelMatrixData[i++] = _matrix[6];\n          instanceModelMatrixData[i++] = _matrix[7];\n          instanceModelMatrixData[i++] = _matrix[8];\n          instanceModelMatrixData[i++] = _matrix[9];\n          instanceModelMatrixData[i++] = _matrix[10];\n          instanceModelMatrixData[i++] = _matrix[11];\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }\n};\nexport function shouldComposeModelMatrix(viewport, coordinateSystem) {\n  return coordinateSystem === COORDINATE_SYSTEM.CARTESIAN || coordinateSystem === COORDINATE_SYSTEM.METER_OFFSETS || coordinateSystem === COORDINATE_SYSTEM.DEFAULT && !viewport.isGeospatial;\n}","map":{"version":3,"sources":["../../../src/utils/matrix.js"],"names":["RADIAN_PER_DEGREE","Math","modelMatrix","valueArray","pitch","orientation","yaw","roll","sr","sp","sw","cr","cp","cw","scx","scale","scy","scz","targetMatrix","mat4","MATRIX_ATTRIBUTES","size","accessor","shaderAttributes","instanceModelMatrix__LOCATION_0","elementOffset","instanceModelMatrix__LOCATION_1","instanceModelMatrix__LOCATION_2","instanceTranslation","update","startRow","endRow","data","getOrientation","getScale","getTranslation","getTransformMatrix","arrayMatrix","Array","constantMatrix","constantScale","constantOrientation","constantTranslation","hasMatrix","Boolean","attribute","instanceModelMatrixData","matrix","getExtendedMat3FromMat4","calculateTransformMatrix","i","iterable","objectInfo","createIterable","object","coordinateSystem","COORDINATE_SYSTEM","viewport"],"mappings":"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","sourcesContent":["import {COORDINATE_SYSTEM, createIterable} from '@deck.gl/core';\n\n/* eslint-disable max-statements, complexity */\nconst RADIAN_PER_DEGREE = Math.PI / 180;\nconst modelMatrix = new Float32Array(16);\nconst valueArray = new Float32Array(12);\n\nfunction calculateTransformMatrix(targetMatrix, orientation, scale) {\n  const pitch = orientation[0] * RADIAN_PER_DEGREE;\n  const yaw = orientation[1] * RADIAN_PER_DEGREE;\n  const roll = orientation[2] * RADIAN_PER_DEGREE;\n\n  const sr = Math.sin(roll);\n  const sp = Math.sin(pitch);\n  const sw = Math.sin(yaw);\n\n  const cr = Math.cos(roll);\n  const cp = Math.cos(pitch);\n  const cw = Math.cos(yaw);\n\n  const scx = scale[0];\n  const scy = scale[1];\n  const scz = scale[2];\n\n  targetMatrix[0] = scx * cw * cp; // 0,0\n  targetMatrix[1] = scx * sw * cp; // 1,0\n  targetMatrix[2] = scx * -sp; // 2,0\n  targetMatrix[3] = scy * (-sw * cr + cw * sp * sr); // 0,1\n  targetMatrix[4] = scy * (cw * cr + sw * sp * sr); // 1,1\n  targetMatrix[5] = scy * cp * sr; // 2,1\n  targetMatrix[6] = scz * (sw * sr + cw * sp * cr); // 0,2\n  targetMatrix[7] = scz * (-cw * sr + sw * sp * cr); // 1,2\n  targetMatrix[8] = scz * cp * cr; // 2,2\n}\n\nfunction getExtendedMat3FromMat4(mat4) {\n  mat4[0] = mat4[0];\n  mat4[1] = mat4[1];\n  mat4[2] = mat4[2];\n  mat4[3] = mat4[4];\n  mat4[4] = mat4[5];\n  mat4[5] = mat4[6];\n  mat4[6] = mat4[8];\n  mat4[7] = mat4[9];\n  mat4[8] = mat4[10];\n  mat4[9] = mat4[12];\n  mat4[10] = mat4[13];\n  mat4[11] = mat4[14];\n\n  return mat4.subarray(0, 12);\n}\n\nexport const MATRIX_ATTRIBUTES = {\n  size: 12,\n  accessor: ['getOrientation', 'getScale', 'getTranslation', 'getTransformMatrix'],\n  shaderAttributes: {\n    instanceModelMatrix__LOCATION_0: {\n      size: 3,\n      elementOffset: 0\n    },\n    instanceModelMatrix__LOCATION_1: {\n      size: 3,\n      elementOffset: 3\n    },\n    instanceModelMatrix__LOCATION_2: {\n      size: 3,\n      elementOffset: 6\n    },\n    instanceTranslation: {\n      size: 3,\n      elementOffset: 9\n    }\n  },\n\n  update(attribute, {startRow, endRow}) {\n    // NOTE(Tarek): \"this\" will be bound to a layer!\n    const {data, getOrientation, getScale, getTranslation, getTransformMatrix} = this.props;\n\n    const arrayMatrix = Array.isArray(getTransformMatrix);\n    const constantMatrix = arrayMatrix && getTransformMatrix.length === 16;\n    const constantScale = Array.isArray(getScale);\n    const constantOrientation = Array.isArray(getOrientation);\n    const constantTranslation = Array.isArray(getTranslation);\n\n    const hasMatrix = constantMatrix || (!arrayMatrix && Boolean(getTransformMatrix(data[0])));\n\n    if (hasMatrix) {\n      attribute.constant = constantMatrix;\n    } else {\n      attribute.constant = constantOrientation && constantScale && constantTranslation;\n    }\n\n    const instanceModelMatrixData = attribute.value;\n\n    if (attribute.constant) {\n      let matrix;\n\n      if (hasMatrix) {\n        modelMatrix.set(getTransformMatrix);\n        matrix = getExtendedMat3FromMat4(modelMatrix);\n      } else {\n        matrix = valueArray;\n\n        const orientation = getOrientation;\n        const scale = getScale;\n\n        calculateTransformMatrix(matrix, orientation, scale);\n        matrix.set(getTranslation, 9);\n      }\n\n      attribute.value = new Float32Array(matrix);\n    } else {\n      let i = startRow * attribute.size;\n      const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n      for (const object of iterable) {\n        objectInfo.index++;\n        let matrix;\n\n        if (hasMatrix) {\n          modelMatrix.set(\n            constantMatrix ? getTransformMatrix : getTransformMatrix(object, objectInfo)\n          );\n          matrix = getExtendedMat3FromMat4(modelMatrix);\n        } else {\n          matrix = valueArray;\n\n          const orientation = constantOrientation\n            ? getOrientation\n            : getOrientation(object, objectInfo);\n          const scale = constantScale ? getScale : getScale(object, objectInfo);\n\n          calculateTransformMatrix(matrix, orientation, scale);\n          matrix.set(constantTranslation ? getTranslation : getTranslation(object, objectInfo), 9);\n        }\n\n        instanceModelMatrixData[i++] = matrix[0];\n        instanceModelMatrixData[i++] = matrix[1];\n        instanceModelMatrixData[i++] = matrix[2];\n        instanceModelMatrixData[i++] = matrix[3];\n        instanceModelMatrixData[i++] = matrix[4];\n        instanceModelMatrixData[i++] = matrix[5];\n        instanceModelMatrixData[i++] = matrix[6];\n        instanceModelMatrixData[i++] = matrix[7];\n        instanceModelMatrixData[i++] = matrix[8];\n        instanceModelMatrixData[i++] = matrix[9];\n        instanceModelMatrixData[i++] = matrix[10];\n        instanceModelMatrixData[i++] = matrix[11];\n      }\n    }\n  }\n};\n\n// only apply composeModelMatrix when in cartesian or meter_offsets coordinate system\n// with `composeModelMatrix` enabled, the rotation part of the layer's modelMatrix will be composed to instance's transformations\n// since rotating latitude and longitude can not provide meaningful results, hence `composeModelMatrix` is disabled\n// when in LNGLAT and LNGLAT_OFFSET coordinates.\nexport function shouldComposeModelMatrix(viewport, coordinateSystem) {\n  return (\n    coordinateSystem === COORDINATE_SYSTEM.CARTESIAN ||\n    coordinateSystem === COORDINATE_SYSTEM.METER_OFFSETS ||\n    (coordinateSystem === COORDINATE_SYSTEM.DEFAULT && !viewport.isGeospatial)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}