{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport streamAdapters from './adapters';\nimport { decodeUtf8 } from '../util/utf8';\nimport { ITERATOR_DONE, AsyncQueue } from './interfaces';\nimport { toUint8Array, joinUint8Arrays } from '../util/buffer';\nimport { isPromise, isFetchResponse, isIterable, isAsyncIterable, isReadableDOMStream, isReadableNodeStream } from '../util/compat';\n/** @ignore */\n\nexport class AsyncByteQueue extends AsyncQueue {\n  write(value) {\n    if ((value = toUint8Array(value)).byteLength > 0) {\n      return super.write(value);\n    }\n  }\n\n  toString(sync = false) {\n    return sync ? decodeUtf8(this.toUint8Array(true)) : this.toUint8Array(false).then(decodeUtf8);\n  }\n\n  toUint8Array(sync = false) {\n    return sync ? joinUint8Arrays(this._values)[0] : (async () => {\n      let buffers = [],\n          byteLength = 0;\n\n      for await (const chunk of this) {\n        buffers.push(chunk);\n        byteLength += chunk.byteLength;\n      }\n\n      return joinUint8Arrays(buffers, byteLength)[0];\n    })();\n  }\n\n}\n/** @ignore */\n\nexport class ByteStream {\n  constructor(source) {\n    if (source) {\n      this.source = new ByteStreamSource(streamAdapters.fromIterable(source));\n    }\n  }\n\n  [Symbol.iterator]() {\n    return this;\n  }\n\n  next(value) {\n    return this.source.next(value);\n  }\n\n  throw(value) {\n    return this.source.throw(value);\n  }\n\n  return(value) {\n    return this.source.return(value);\n  }\n\n  peek(size) {\n    return this.source.peek(size);\n  }\n\n  read(size) {\n    return this.source.read(size);\n  }\n\n}\n/** @ignore */\n\nexport class AsyncByteStream {\n  constructor(source) {\n    if (source instanceof AsyncByteStream) {\n      this.source = source.source;\n    } else if (source instanceof AsyncByteQueue) {\n      this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n    } else if (isReadableNodeStream(source)) {\n      this.source = new AsyncByteStreamSource(streamAdapters.fromNodeStream(source));\n    } else if (isReadableDOMStream(source)) {\n      this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source));\n    } else if (isFetchResponse(source)) {\n      this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source.body));\n    } else if (isIterable(source)) {\n      this.source = new AsyncByteStreamSource(streamAdapters.fromIterable(source));\n    } else if (isPromise(source)) {\n      this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n    } else if (isAsyncIterable(source)) {\n      this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n    }\n  }\n\n  [Symbol.asyncIterator]() {\n    return this;\n  }\n\n  next(value) {\n    return this.source.next(value);\n  }\n\n  throw(value) {\n    return this.source.throw(value);\n  }\n\n  return(value) {\n    return this.source.return(value);\n  }\n\n  get closed() {\n    return this.source.closed;\n  }\n\n  cancel(reason) {\n    return this.source.cancel(reason);\n  }\n\n  peek(size) {\n    return this.source.peek(size);\n  }\n\n  read(size) {\n    return this.source.read(size);\n  }\n\n}\n/** @ignore */\n\nclass ByteStreamSource {\n  constructor(source) {\n    this.source = source;\n  }\n\n  cancel(reason) {\n    this.return(reason);\n  }\n\n  peek(size) {\n    return this.next(size, 'peek').value;\n  }\n\n  read(size) {\n    return this.next(size, 'read').value;\n  }\n\n  next(size, cmd = 'read') {\n    return this.source.next({\n      cmd,\n      size\n    });\n  }\n\n  throw(value) {\n    return Object.create(this.source.throw && this.source.throw(value) || ITERATOR_DONE);\n  }\n\n  return(value) {\n    return Object.create(this.source.return && this.source.return(value) || ITERATOR_DONE);\n  }\n\n}\n/** @ignore */\n\n\nclass AsyncByteStreamSource {\n  constructor(source) {\n    this.source = source;\n    this._closedPromise = new Promise(r => this._closedPromiseResolve = r);\n  }\n\n  async cancel(reason) {\n    await this.return(reason);\n  }\n\n  get closed() {\n    return this._closedPromise;\n  }\n\n  async read(size) {\n    return (await this.next(size, 'read')).value;\n  }\n\n  async peek(size) {\n    return (await this.next(size, 'peek')).value;\n  }\n\n  async next(size, cmd = 'read') {\n    return await this.source.next({\n      cmd,\n      size\n    });\n  }\n\n  async throw(value) {\n    const result = this.source.throw && (await this.source.throw(value)) || ITERATOR_DONE;\n    this._closedPromiseResolve && this._closedPromiseResolve();\n    this._closedPromiseResolve = undefined;\n    return Object.create(result);\n  }\n\n  async return(value) {\n    const result = this.source.return && (await this.source.return(value)) || ITERATOR_DONE;\n    this._closedPromiseResolve && this._closedPromiseResolve();\n    this._closedPromiseResolve = undefined;\n    return Object.create(result);\n  }\n\n}","map":{"version":3,"sources":["io/stream.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters';\nimport { decodeUtf8 } from '../util/utf8';\nimport { ITERATOR_DONE, Readable, Writable, AsyncQueue } from './interfaces';\nimport { toUint8Array, joinUint8Arrays, ArrayBufferViewInput } from '../util/buffer';\n\nimport {\n    isPromise, isFetchResponse,\n    isIterable, isAsyncIterable,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat';\n\n/** @ignore */\nexport type WritableSink<T> = Writable<T> | WritableStream<T> | NodeJS.WritableStream | null;\n/** @ignore */\nexport type ReadableSource<T> = Readable<T> | PromiseLike<T> | AsyncIterable<T> | ReadableStream<T> | NodeJS.ReadableStream | null;\n\n/** @ignore */\nexport class AsyncByteQueue<T extends ArrayBufferViewInput = Uint8Array> extends AsyncQueue<Uint8Array, T> {\n    public write(value: ArrayBufferViewInput | Uint8Array) {\n        if ((value = toUint8Array(value)).byteLength > 0) {\n            return super.write(value as T);\n        }\n    }\n    public toString(sync: true): string;\n    public toString(sync?: false): Promise<string>;\n    public toString(sync = false) {\n        return sync\n            ? decodeUtf8(this.toUint8Array(true))\n            : this.toUint8Array(false).then(decodeUtf8);\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync = false) {\n        return sync ? joinUint8Arrays(this._values as any[])[0] : (async () => {\n            let buffers = [], byteLength = 0;\n            for await (const chunk of this) {\n                buffers.push(chunk);\n                byteLength += chunk.byteLength;\n            }\n            return joinUint8Arrays(buffers, byteLength)[0];\n        })();\n    }\n}\n\n/** @ignore */\nexport class ByteStream implements IterableIterator<Uint8Array> {\n    // @ts-ignore\n    private source: ByteStreamSource<Uint8Array>;\n    constructor(source?: Iterable<ArrayBufferViewInput> | ArrayBufferViewInput) {\n        if (source) {\n            this.source = new ByteStreamSource(streamAdapters.fromIterable(source));\n        }\n    }\n    [Symbol.iterator]() { return this; }\n    public next(value?: any) { return this.source.next(value); }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/** @ignore */\nexport class AsyncByteStream implements Readable<Uint8Array>, AsyncIterableIterator<Uint8Array> {\n    // @ts-ignore\n    private source: AsyncByteStreamSource<Uint8Array>;\n    constructor(source?: PromiseLike<ArrayBufferViewInput> | Response | ReadableStream<ArrayBufferViewInput> | NodeJS.ReadableStream | AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput>) {\n        if (source instanceof AsyncByteStream) {\n            this.source = (source as AsyncByteStream).source;\n        } else if (source instanceof AsyncByteQueue) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isReadableNodeStream(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromNodeStream(source));\n        } else if (isReadableDOMStream<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source));\n        } else if (isFetchResponse(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source.body!));\n        } else if (isIterable<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromIterable(source));\n        } else if (isPromise<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isAsyncIterable<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        }\n    }\n    [Symbol.asyncIterator]() { return this; }\n    public next(value?: any) { return this.source.next(value); }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public get closed(): Promise<void> { return this.source.closed; }\n    public cancel(reason?: any) { return this.source.cancel(reason); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/** @ignore */\ninterface ByteStreamSourceIterator<T> extends IterableIterator<T> {\n    next(value?: { cmd: 'peek' | 'read', size?: number | null }): IteratorResult<T>;\n}\n\n/** @ignore */\ninterface AsyncByteStreamSourceIterator<T> extends AsyncIterableIterator<T> {\n    next(value?: { cmd: 'peek' | 'read', size?: number | null }): Promise<IteratorResult<T>>;\n}\n\n/** @ignore */\nclass ByteStreamSource<T> {\n    constructor(protected source: ByteStreamSourceIterator<T>) {}\n    public cancel(reason?: any) { this.return(reason); }\n    public peek(size?: number | null): T | null { return this.next(size, 'peek').value; }\n    public read(size?: number | null): T | null { return this.next(size, 'read').value; }\n    public next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return this.source.next({ cmd, size }); }\n    public throw(value?: any) { return Object.create((this.source.throw && this.source.throw(value)) || ITERATOR_DONE); }\n    public return(value?: any) { return Object.create((this.source.return && this.source.return(value)) || ITERATOR_DONE); }\n}\n\n/** @ignore */\nclass AsyncByteStreamSource<T> implements Readable<T> {\n\n    private _closedPromise: Promise<void>;\n    private _closedPromiseResolve?: (value?: any) => void;\n    constructor (protected source: ByteStreamSourceIterator<T> | AsyncByteStreamSourceIterator<T>) {\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async read(size?: number | null): Promise<T | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<T | null> { return (await this.next(size, 'peek')).value; }\n    public async next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return (await this.source.next({ cmd, size })); }\n    public async throw(value?: any) {\n        const result = (this.source.throw && await this.source.throw(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n    public async return(value?: any) {\n        const result = (this.source.return && await this.source.return(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}