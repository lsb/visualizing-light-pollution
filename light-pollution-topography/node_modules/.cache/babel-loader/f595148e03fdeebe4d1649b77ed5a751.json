{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nexport { Vector } from '../vector';\nexport { BaseVector } from './base';\nexport { BinaryVector } from './binary';\nexport { BoolVector } from './bool';\nexport { Chunked } from './chunked';\nexport { DateVector, DateDayVector, DateMillisecondVector } from './date';\nexport { DecimalVector } from './decimal';\nexport { DictionaryVector } from './dictionary';\nexport { FixedSizeBinaryVector } from './fixedsizebinary';\nexport { FixedSizeListVector } from './fixedsizelist';\nexport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from './float';\nexport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from './interval';\nexport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from './int';\nexport { ListVector } from './list';\nexport { MapVector } from './map';\nexport { NullVector } from './null';\nexport { StructVector } from './struct';\nexport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from './timestamp';\nexport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from './time';\nexport { UnionVector, DenseUnionVector, SparseUnionVector } from './union';\nexport { Utf8Vector } from './utf8';\nexport { MapRow, StructRow } from './row';\nimport * as fn from '../util/fn';\nimport { Type } from '../enum';\nimport { Vector } from '../vector';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { setBool } from '../util/bit';\nimport { isIterable, isAsyncIterable } from '../util/compat';\nimport { Builder } from '../builder';\nimport { instance as getVisitor } from '../visitor/get';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as indexOfVisitor } from '../visitor/indexof';\nimport { instance as toArrayVisitor } from '../visitor/toarray';\nimport { instance as iteratorVisitor } from '../visitor/iterator';\nimport { instance as byteWidthVisitor } from '../visitor/bytewidth';\nimport { instance as getVectorConstructor } from '../visitor/vectorctor';\n/** @nocollapse */\n\nVector.new = newVector;\n/** @nocollapse */\n\nVector.from = vectorFrom;\n/** @ignore */\n\nfunction newVector(data, ...args) {\n  return new (getVectorConstructor.getVisitFn(data)())(data, ...args);\n}\n/** @ignore */\n\n\nexport function vectorFromValuesWithType(newDataType, input) {\n  if (isIterable(input)) {\n    return Vector.from({\n      'nullValues': [null, undefined],\n      type: newDataType(),\n      'values': input\n    });\n  } else if (isAsyncIterable(input)) {\n    return Vector.from({\n      'nullValues': [null, undefined],\n      type: newDataType(),\n      'values': input\n    });\n  }\n\n  const {\n    'values': values = [],\n    'type': type = newDataType(),\n    'nullValues': nullValues = [null, undefined]\n  } = { ...input\n  };\n  return isIterable(values) ? Vector.from({\n    nullValues,\n    ...input,\n    type\n  }) : Vector.from({\n    nullValues,\n    ...input,\n    type\n  });\n}\n\nfunction vectorFrom(input) {\n  const {\n    'values': values = [],\n    ...options\n  } = {\n    'nullValues': [null, undefined],\n    ...input\n  };\n\n  if (isIterable(values)) {\n    const chunks = [...Builder.throughIterable(options)(values)];\n    return chunks.length === 1 ? chunks[0] : Chunked.concat(chunks);\n  }\n\n  return (async chunks => {\n    const transform = Builder.throughAsyncIterable(options);\n\n    for await (const chunk of transform(values)) {\n      chunks.push(chunk);\n    }\n\n    return chunks.length === 1 ? chunks[0] : Chunked.concat(chunks);\n  })([]);\n} //\n// We provide the following method implementations for code navigability purposes only.\n// They're overridden at runtime below with the specific Visitor implementation for each type,\n// short-circuiting the usual Visitor traversal and reducing intermediate lookups and calls.\n// This comment is here to remind you to not set breakpoints in these function bodies, or to inform\n// you why the breakpoints you have already set are not being triggered. Have a great day!\n//\n\n\nBaseVector.prototype.get = function baseVectorGet(index) {\n  return getVisitor.visit(this, index);\n};\n\nBaseVector.prototype.set = function baseVectorSet(index, value) {\n  return setVisitor.visit(this, index, value);\n};\n\nBaseVector.prototype.indexOf = function baseVectorIndexOf(value, fromIndex) {\n  return indexOfVisitor.visit(this, value, fromIndex);\n};\n\nBaseVector.prototype.toArray = function baseVectorToArray() {\n  return toArrayVisitor.visit(this);\n};\n\nBaseVector.prototype.getByteWidth = function baseVectorGetByteWidth() {\n  return byteWidthVisitor.visit(this.type);\n};\n\nBaseVector.prototype[Symbol.iterator] = function baseVectorSymbolIterator() {\n  return iteratorVisitor.visit(this);\n};\n\nBaseVector.prototype._bindDataAccessors = bindBaseVectorDataAccessors; // Perf: bind and assign the operator Visitor methods to each of the Vector subclasses for each Type\n\nObject.keys(Type).map(T => Type[T]).filter(T => typeof T === 'number').filter(typeId => typeId !== Type.NONE).forEach(typeId => {\n  const VectorCtor = getVectorConstructor.visit(typeId);\n  VectorCtor.prototype['get'] = fn.partial1(getVisitor.getVisitFn(typeId));\n  VectorCtor.prototype['set'] = fn.partial2(setVisitor.getVisitFn(typeId));\n  VectorCtor.prototype['indexOf'] = fn.partial2(indexOfVisitor.getVisitFn(typeId));\n  VectorCtor.prototype['toArray'] = fn.partial0(toArrayVisitor.getVisitFn(typeId));\n  VectorCtor.prototype['getByteWidth'] = partialType0(byteWidthVisitor.getVisitFn(typeId));\n  VectorCtor.prototype[Symbol.iterator] = fn.partial0(iteratorVisitor.getVisitFn(typeId));\n});\n/** @ignore */\n\nfunction partialType0(visit) {\n  return function () {\n    return visit(this.type);\n  };\n}\n/** @ignore */\n\n\nfunction wrapNullableGet(fn) {\n  return function (i) {\n    return this.isValid(i) ? fn.call(this, i) : null;\n  };\n}\n/** @ignore */\n\n\nfunction wrapNullableSet(fn) {\n  return function (i, a) {\n    if (setBool(this.nullBitmap, this.offset + i, !(a === null || a === undefined))) {\n      fn.call(this, i, a);\n    }\n  };\n}\n/** @ignore */\n\n\nfunction bindBaseVectorDataAccessors() {\n  const nullBitmap = this.nullBitmap;\n\n  if (nullBitmap && nullBitmap.byteLength > 0) {\n    this.get = wrapNullableGet(this.get);\n    this.set = wrapNullableSet(this.set);\n  }\n}","map":{"version":3,"sources":["vector/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nexport { Vector } from '../vector';\nexport { BaseVector } from './base';\nexport { BinaryVector } from './binary';\nexport { BoolVector } from './bool';\nexport { Chunked } from './chunked';\nexport { DateVector, DateDayVector, DateMillisecondVector } from './date';\nexport { DecimalVector } from './decimal';\nexport { DictionaryVector } from './dictionary';\nexport { FixedSizeBinaryVector } from './fixedsizebinary';\nexport { FixedSizeListVector } from './fixedsizelist';\nexport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from './float';\nexport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from './interval';\nexport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from './int';\nexport { ListVector } from './list';\nexport { MapVector } from './map';\nexport { NullVector } from './null';\nexport { StructVector } from './struct';\nexport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from './timestamp';\nexport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from './time';\nexport { UnionVector, DenseUnionVector, SparseUnionVector } from './union';\nexport { Utf8Vector } from './utf8';\nexport { MapRow, StructRow } from './row';\n\nimport * as fn from '../util/fn';\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { setBool } from '../util/bit';\nimport { isIterable, isAsyncIterable } from '../util/compat';\nimport { Builder, IterableBuilderOptions } from '../builder';\nimport { VectorType as V, VectorCtorArgs } from '../interfaces';\nimport { instance as getVisitor } from '../visitor/get';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as indexOfVisitor } from '../visitor/indexof';\nimport { instance as toArrayVisitor } from '../visitor/toarray';\nimport { instance as iteratorVisitor } from '../visitor/iterator';\nimport { instance as byteWidthVisitor } from '../visitor/bytewidth';\nimport { instance as getVectorConstructor } from '../visitor/vectorctor';\n\ndeclare module '../vector' {\n    namespace Vector {\n        export { newVector as new };\n        export { vectorFrom as from };\n    }\n}\n\ndeclare module './base' {\n    namespace BaseVector {\n        export { vectorFrom as from };\n    }\n    interface BaseVector<T extends DataType> {\n        get(index: number): T['TValue'] | null;\n        set(index: number, value: T['TValue'] | null): void;\n        indexOf(value: T['TValue'] | null, fromIndex?: number): number;\n        toArray(): T['TArray'];\n        getByteWidth(): number;\n        [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n    }\n}\n\n/** @nocollapse */\nVector.new = newVector;\n\n/** @nocollapse */\nVector.from = vectorFrom;\n\n/** @ignore */\nfunction newVector<T extends DataType>(data: Data<T>, ...args: VectorCtorArgs<V<T>>): V<T> {\n    return new (getVectorConstructor.getVisitFn<T>(data)())(data, ...args) as V<T>;\n}\n\n/** @ignore */\nexport interface VectorBuilderOptions<T extends DataType, TNull = any> extends IterableBuilderOptions<T, TNull> { values: Iterable<T['TValue'] | TNull>; }\n/** @ignore */\nexport interface VectorBuilderOptionsAsync<T extends DataType, TNull = any> extends IterableBuilderOptions<T, TNull> { values: AsyncIterable<T['TValue'] | TNull>; }\n\n/** @ignore */\nexport function vectorFromValuesWithType<T extends DataType, TNull = any>(newDataType: () => T, input: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull> | VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>) {\n    if (isIterable(input)) {\n        return Vector.from({ 'nullValues': [null, undefined], type: newDataType(), 'values': input }) as V<T>;\n    } else if (isAsyncIterable(input)) {\n        return Vector.from({ 'nullValues': [null, undefined], type: newDataType(), 'values': input }) as Promise<V<T>>;\n    }\n    const {\n        'values': values = [],\n        'type': type = newDataType(),\n        'nullValues': nullValues = [null, undefined],\n    } = { ...input };\n    return isIterable(values)\n        ? Vector.from({ nullValues, ...input, type } as VectorBuilderOptions<T, TNull>)\n        : Vector.from({ nullValues, ...input, type } as VectorBuilderOptionsAsync<T, TNull>);\n}\n\n/** @ignore */\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptions<T, TNull>): Vector<T>;\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptionsAsync<T, TNull>): Promise<Vector<T>>;\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>) {\n    const { 'values': values = [], ...options } = { 'nullValues': [null, undefined], ...input } as VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>;\n    if (isIterable<T['TValue'] | TNull>(values)) {\n        const chunks = [...Builder.throughIterable(options)(values)];\n        return chunks.length === 1 ? chunks[0] : Chunked.concat<T>(chunks);\n    }\n    return (async (chunks: V<T>[]) => {\n        const transform = Builder.throughAsyncIterable(options);\n        for await (const chunk of transform(values)) {\n            chunks.push(chunk);\n        }\n        return chunks.length === 1 ? chunks[0] : Chunked.concat<T>(chunks);\n    })([]);\n}\n\n//\n// We provide the following method implementations for code navigability purposes only.\n// They're overridden at runtime below with the specific Visitor implementation for each type,\n// short-circuiting the usual Visitor traversal and reducing intermediate lookups and calls.\n// This comment is here to remind you to not set breakpoints in these function bodies, or to inform\n// you why the breakpoints you have already set are not being triggered. Have a great day!\n//\n\nBaseVector.prototype.get = function baseVectorGet<T extends DataType>(this: BaseVector<T>, index: number): T['TValue'] | null {\n    return getVisitor.visit(this, index);\n};\n\nBaseVector.prototype.set = function baseVectorSet<T extends DataType>(this: BaseVector<T>, index: number, value: T['TValue'] | null): void {\n    return setVisitor.visit(this, index, value);\n};\n\nBaseVector.prototype.indexOf = function baseVectorIndexOf<T extends DataType>(this: BaseVector<T>, value: T['TValue'] | null, fromIndex?: number): number {\n    return indexOfVisitor.visit(this, value, fromIndex);\n};\n\nBaseVector.prototype.toArray = function baseVectorToArray<T extends DataType>(this: BaseVector<T>): T['TArray'] {\n    return toArrayVisitor.visit(this);\n};\n\nBaseVector.prototype.getByteWidth = function baseVectorGetByteWidth<T extends DataType>(this: BaseVector<T>): number {\n    return byteWidthVisitor.visit(this.type);\n};\n\nBaseVector.prototype[Symbol.iterator] = function baseVectorSymbolIterator<T extends DataType>(this: BaseVector<T>): IterableIterator<T['TValue'] | null> {\n    return iteratorVisitor.visit(this);\n};\n\n(BaseVector.prototype as any)._bindDataAccessors = bindBaseVectorDataAccessors;\n\n// Perf: bind and assign the operator Visitor methods to each of the Vector subclasses for each Type\n(Object.keys(Type) as any[])\n    .map((T: any) => Type[T] as any)\n    .filter((T: any): T is Type => typeof T === 'number')\n    .filter((typeId) => typeId !== Type.NONE)\n    .forEach((typeId) => {\n        const VectorCtor = getVectorConstructor.visit(typeId);\n        VectorCtor.prototype['get'] = fn.partial1(getVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['set'] = fn.partial2(setVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['indexOf'] = fn.partial2(indexOfVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['toArray'] = fn.partial0(toArrayVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['getByteWidth'] = partialType0(byteWidthVisitor.getVisitFn(typeId));\n        VectorCtor.prototype[Symbol.iterator] = fn.partial0(iteratorVisitor.getVisitFn(typeId));\n    });\n\n/** @ignore */\nfunction partialType0<T extends Vector>(visit: (node: T['type']) => any) {\n    return function(this: T) { return visit(this.type); };\n}\n\n/** @ignore */\nfunction wrapNullableGet<T extends DataType, V extends Vector<T>, F extends (i: number) => any>(fn: F): (...args: Parameters<F>) => ReturnType<F> {\n    return function(this: V, i: number) { return this.isValid(i) ? fn.call(this, i) : null; };\n}\n\n/** @ignore */\nfunction wrapNullableSet<T extends DataType, V extends BaseVector<T>, F extends (i: number, a: any) => void>(fn: F): (...args: Parameters<F>) => void {\n    return function(this: V, i: number, a: any) {\n        if (setBool(this.nullBitmap, this.offset + i, !(a === null || a === undefined))) {\n            fn.call(this, i, a);\n        }\n    };\n}\n\n/** @ignore */\nfunction bindBaseVectorDataAccessors<T extends DataType>(this: BaseVector<T>) {\n    const nullBitmap = this.nullBitmap;\n    if (nullBitmap && nullBitmap.byteLength > 0) {\n        this.get = wrapNullableGet(this.get);\n        this.set = wrapNullableSet(this.set);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}