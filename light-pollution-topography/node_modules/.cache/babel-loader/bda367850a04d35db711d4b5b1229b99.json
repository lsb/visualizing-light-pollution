{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _WEBGL2_CONTEXT_POLYF;\n\nimport { assert, isWebGL2 } from '../utils';\nimport { getParameterPolyfill } from './get-parameter-polyfill';\nvar OES_vertex_array_object = 'OES_vertex_array_object';\nvar ANGLE_instanced_arrays = 'ANGLE_instanced_arrays';\nvar WEBGL_draw_buffers = 'WEBGL_draw_buffers';\nvar EXT_disjoint_timer_query = 'EXT_disjoint_timer_query';\nvar EXT_texture_filter_anisotropic = 'EXT_texture_filter_anisotropic';\nvar ERR_VAO_NOT_SUPPORTED = 'VertexArray requires WebGL2 or OES_vertex_array_object extension';\n\nfunction getExtensionData(gl, extension) {\n  return {\n    webgl2: isWebGL2(gl),\n    ext: gl.getExtension(extension)\n  };\n}\n\nexport var WEBGL2_CONTEXT_POLYFILLS = (_WEBGL2_CONTEXT_POLYF = {}, _defineProperty(_WEBGL2_CONTEXT_POLYF, OES_vertex_array_object, {\n  meta: {\n    suffix: 'OES'\n  },\n  createVertexArray: function createVertexArray() {\n    assert(false, ERR_VAO_NOT_SUPPORTED);\n  },\n  deleteVertexArray: function deleteVertexArray() {},\n  bindVertexArray: function bindVertexArray() {},\n  isVertexArray: function isVertexArray() {\n    return false;\n  }\n}), _defineProperty(_WEBGL2_CONTEXT_POLYF, ANGLE_instanced_arrays, {\n  meta: {\n    suffix: 'ANGLE'\n  },\n  vertexAttribDivisor: function vertexAttribDivisor(location, divisor) {\n    assert(divisor === 0, 'WebGL instanced rendering not supported');\n  },\n  drawElementsInstanced: function drawElementsInstanced() {},\n  drawArraysInstanced: function drawArraysInstanced() {}\n}), _defineProperty(_WEBGL2_CONTEXT_POLYF, WEBGL_draw_buffers, {\n  meta: {\n    suffix: 'WEBGL'\n  },\n  drawBuffers: function drawBuffers() {\n    assert(false);\n  }\n}), _defineProperty(_WEBGL2_CONTEXT_POLYF, EXT_disjoint_timer_query, {\n  meta: {\n    suffix: 'EXT'\n  },\n  createQuery: function createQuery() {\n    assert(false);\n  },\n  deleteQuery: function deleteQuery() {\n    assert(false);\n  },\n  beginQuery: function beginQuery() {\n    assert(false);\n  },\n  endQuery: function endQuery() {},\n  getQuery: function getQuery(handle, pname) {\n    return this.getQueryObject(handle, pname);\n  },\n  getQueryParameter: function getQueryParameter(handle, pname) {\n    return this.getQueryObject(handle, pname);\n  },\n  getQueryObject: function getQueryObject() {}\n}), _WEBGL2_CONTEXT_POLYF);\nexport var WEBGL2_CONTEXT_OVERRIDES = {\n  readBuffer: function readBuffer(gl, originalFunc, attachment) {\n    if (isWebGL2(gl)) {\n      originalFunc(attachment);\n    } else {}\n  },\n  getVertexAttrib: function getVertexAttrib(gl, originalFunc, location, pname) {\n    var _getExtensionData = getExtensionData(gl, ANGLE_instanced_arrays),\n        webgl2 = _getExtensionData.webgl2,\n        ext = _getExtensionData.ext;\n\n    var result;\n\n    switch (pname) {\n      case 35069:\n        result = !webgl2 ? false : undefined;\n        break;\n\n      case 35070:\n        result = !webgl2 && !ext ? 0 : undefined;\n        break;\n\n      default:\n    }\n\n    return result !== undefined ? result : originalFunc(location, pname);\n  },\n  getProgramParameter: function getProgramParameter(gl, originalFunc, program, pname) {\n    if (!isWebGL2(gl)) {\n      switch (pname) {\n        case 35967:\n          return 35981;\n\n        case 35971:\n          return 0;\n\n        case 35382:\n          return 0;\n\n        default:\n      }\n    }\n\n    return originalFunc(program, pname);\n  },\n  getInternalformatParameter: function getInternalformatParameter(gl, originalFunc, target, format, pname) {\n    if (!isWebGL2(gl)) {\n      switch (pname) {\n        case 32937:\n          return new Int32Array([0]);\n\n        default:\n      }\n    }\n\n    return gl.getInternalformatParameter(target, format, pname);\n  },\n  getTexParameter: function getTexParameter(gl, originalFunc, target, pname) {\n    switch (pname) {\n      case 34046:\n        var extensions = gl.luma.extensions;\n        var ext = extensions[EXT_texture_filter_anisotropic];\n        pname = ext && ext.TEXTURE_MAX_ANISOTROPY_EXT || 34046;\n        break;\n\n      default:\n    }\n\n    return originalFunc(target, pname);\n  },\n  getParameter: getParameterPolyfill,\n  hint: function hint(gl, originalFunc, pname, value) {\n    return originalFunc(pname, value);\n  }\n};","map":{"version":3,"sources":["../../../src/polyfill/polyfill-table.js"],"names":["OES_vertex_array_object","ANGLE_instanced_arrays","WEBGL_draw_buffers","EXT_disjoint_timer_query","EXT_texture_filter_anisotropic","ERR_VAO_NOT_SUPPORTED","webgl2","isWebGL2","ext","gl","WEBGL2_CONTEXT_POLYFILLS","meta","suffix","createVertexArray","assert","deleteVertexArray","bindVertexArray","isVertexArray","vertexAttribDivisor","divisor","drawElementsInstanced","drawArraysInstanced","drawBuffers","createQuery","deleteQuery","beginQuery","endQuery","getQuery","getQueryParameter","getQueryObject","WEBGL2_CONTEXT_OVERRIDES","readBuffer","originalFunc","getVertexAttrib","getExtensionData","result","getProgramParameter","getInternalformatParameter","getTexParameter","extensions","pname","getParameter","hint"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {assert, isWebGL2} from '../utils';\n\nimport {getParameterPolyfill} from './get-parameter-polyfill';\n\nconst OES_vertex_array_object = 'OES_vertex_array_object';\nconst ANGLE_instanced_arrays = 'ANGLE_instanced_arrays';\nconst WEBGL_draw_buffers = 'WEBGL_draw_buffers';\nconst EXT_disjoint_timer_query = 'EXT_disjoint_timer_query';\nconst EXT_texture_filter_anisotropic = 'EXT_texture_filter_anisotropic';\n\nconst ERR_VAO_NOT_SUPPORTED = 'VertexArray requires WebGL2 or OES_vertex_array_object extension';\n\n// Return object with webgl2 flag and an extension\nfunction getExtensionData(gl, extension) {\n  return {\n    webgl2: isWebGL2(gl),\n    ext: gl.getExtension(extension)\n  };\n}\n\n// function mapExtensionConstant(gl, constant) {\n//   switch (constant) {\n//   case ext.FRAGMENT_SHADER_DERIVATIVE_HINT_OES: return GL.FRAGMENT_SHADER_DERIVATIVE_HINT;\n//   }\n// }\n\nexport const WEBGL2_CONTEXT_POLYFILLS = {\n  // POLYFILL TABLE\n  [OES_vertex_array_object]: {\n    meta: {suffix: 'OES'},\n    // NEW METHODS\n    createVertexArray: () => {\n      assert(false, ERR_VAO_NOT_SUPPORTED);\n    },\n    deleteVertexArray: () => {},\n    bindVertexArray: () => {},\n    isVertexArray: () => false\n  },\n  [ANGLE_instanced_arrays]: {\n    meta: {\n      suffix: 'ANGLE'\n      // constants: {\n      //   VERTEX_ATTRIB_ARRAY_DIVISOR: 'VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE'\n      // }\n    },\n    vertexAttribDivisor(location, divisor) {\n      // Accept divisor 0 even if instancing is not supported (0 = no instancing)\n      assert(divisor === 0, 'WebGL instanced rendering not supported');\n    },\n    drawElementsInstanced: () => {},\n    drawArraysInstanced: () => {}\n  },\n  [WEBGL_draw_buffers]: {\n    meta: {\n      suffix: 'WEBGL'\n    },\n    drawBuffers: () => {\n      assert(false);\n    }\n  },\n  [EXT_disjoint_timer_query]: {\n    meta: {suffix: 'EXT'},\n    // WebGL1: Polyfills the WebGL2 Query API\n    createQuery: () => {\n      assert(false);\n    },\n    deleteQuery: () => {\n      assert(false);\n    },\n    beginQuery: () => {\n      assert(false);\n    },\n    endQuery: () => {},\n    getQuery(handle, pname) {\n      return this.getQueryObject(handle, pname);\n    },\n    // The WebGL1 extension uses getQueryObject rather then getQueryParameter\n    getQueryParameter(handle, pname) {\n      return this.getQueryObject(handle, pname);\n    },\n    getQueryObject: () => {}\n  }\n};\n\nexport const WEBGL2_CONTEXT_OVERRIDES = {\n  // Ensure readBuffer is a no-op\n  readBuffer: (gl, originalFunc, attachment) => {\n    if (isWebGL2(gl)) {\n      originalFunc(attachment);\n    } else {\n      // assert(attachment !== GL_COLOR_ATTACHMENT0 && attachment !== GL_FRONT);\n    }\n  },\n  // Override for getVertexAttrib that returns sane values for non-WebGL1 constants\n  getVertexAttrib: (gl, originalFunc, location, pname) => {\n    // const gl = this; // eslint-disable-line\n    const {webgl2, ext} = getExtensionData(gl, ANGLE_instanced_arrays);\n\n    let result;\n    switch (pname) {\n      // WebGL1 attributes will never be integer\n      case GL.VERTEX_ATTRIB_ARRAY_INTEGER:\n        result = !webgl2 ? false : undefined;\n        break;\n      // if instancing is not available, return 0 meaning divisor has not been set\n      case GL.VERTEX_ATTRIB_ARRAY_DIVISOR:\n        result = !webgl2 && !ext ? 0 : undefined;\n        break;\n      default:\n    }\n\n    return result !== undefined ? result : originalFunc(location, pname);\n  },\n  // Handle transform feedback and uniform block queries in WebGL1\n  getProgramParameter: (gl, originalFunc, program, pname) => {\n    if (!isWebGL2(gl)) {\n      switch (pname) {\n        case GL.TRANSFORM_FEEDBACK_BUFFER_MODE:\n          return GL.SEPARATE_ATTRIBS;\n        case GL.TRANSFORM_FEEDBACK_VARYINGS:\n          return 0;\n        case GL.ACTIVE_UNIFORM_BLOCKS:\n          return 0;\n        default:\n      }\n    }\n    return originalFunc(program, pname);\n  },\n  getInternalformatParameter: (gl, originalFunc, target, format, pname) => {\n    if (!isWebGL2(gl)) {\n      switch (pname) {\n        case GL.SAMPLES:\n          return new Int32Array([0]);\n        default:\n      }\n    }\n    return gl.getInternalformatParameter(target, format, pname);\n  },\n  getTexParameter(gl, originalFunc, target, pname) {\n    switch (pname) {\n      case GL.TEXTURE_MAX_ANISOTROPY_EXT:\n        const {extensions} = gl.luma;\n        const ext = extensions[EXT_texture_filter_anisotropic];\n        pname = (ext && ext.TEXTURE_MAX_ANISOTROPY_EXT) || GL.TEXTURE_MAX_ANISOTROPY_EXT;\n        break;\n      default:\n    }\n    return originalFunc(target, pname);\n  },\n  getParameter: getParameterPolyfill,\n  hint(gl, originalFunc, pname, value) {\n    // TODO - handle GL.FRAGMENT_SHADER_DERIVATIVE_HINT:\n    // switch (pname) {\n    // case GL.FRAGMENT_SHADER_DERIVATIVE_HINT:\n    // }\n    return originalFunc(pname, value);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}