{"ast":null,"code":"import _toConsumableArray from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _createForOfIteratorHelper from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _createSuper from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _inherits from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { clampRange } from '../util/vector';\nimport { DataType } from '../type';\nimport { selectChunkArgs } from '../util/args';\nimport { AbstractVector, Vector } from '../vector';\n/** @ignore */\n\nexport var Chunked = /*#__PURE__*/function (_AbstractVector) {\n  _inherits(Chunked, _AbstractVector);\n\n  var _super = _createSuper(Chunked);\n\n  function Chunked(type) {\n    var _this;\n\n    var chunks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var offsets = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : calculateOffsets(chunks);\n\n    _classCallCheck(this, Chunked);\n\n    _this = _super.call(this);\n    _this._nullCount = -1;\n    _this._type = type;\n    _this._chunks = chunks;\n    _this._chunkOffsets = offsets;\n    _this._length = offsets[offsets.length - 1];\n    _this._numChildren = (_this._type.children || []).length;\n    return _this;\n  }\n  /** @nocollapse */\n\n\n  _createClass(Chunked, [{\n    key: Symbol.iterator,\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function value() {\n      var _iterator, _step, chunk;\n\n      return _regeneratorRuntime.wrap(function value$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _iterator = _createForOfIteratorHelper(this._chunks);\n              _context.prev = 1;\n\n              _iterator.s();\n\n            case 3:\n              if ((_step = _iterator.n()).done) {\n                _context.next = 8;\n                break;\n              }\n\n              chunk = _step.value;\n              return _context.delegateYield(chunk, \"t0\", 6);\n\n            case 6:\n              _context.next = 3;\n              break;\n\n            case 8:\n              _context.next = 13;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t1 = _context[\"catch\"](1);\n\n              _iterator.e(_context.t1);\n\n            case 13:\n              _context.prev = 13;\n\n              _iterator.f();\n\n              return _context.finish(13);\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, value, this, [[1, 10, 13, 16]]);\n    })\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var chunks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._chunks;\n      return new Chunked(this._type, chunks);\n    }\n  }, {\n    key: \"concat\",\n    value: function concat() {\n      for (var _len = arguments.length, others = new Array(_len), _key = 0; _key < _len; _key++) {\n        others[_key] = arguments[_key];\n      }\n\n      return this.clone(Chunked.flatten.apply(Chunked, [this].concat(others)));\n    }\n  }, {\n    key: \"slice\",\n    value: function slice(begin, end) {\n      return clampRange(this, begin, end, this._sliceInternal);\n    }\n  }, {\n    key: \"getChildAt\",\n    value: function getChildAt(index) {\n      if (index < 0 || index >= this._numChildren) {\n        return null;\n      }\n\n      var columns = this._children || (this._children = []);\n      var child, field, chunks;\n\n      if (child = columns[index]) {\n        return child;\n      }\n\n      if (field = (this._type.children || [])[index]) {\n        chunks = this._chunks.map(function (vector) {\n          return vector.getChildAt(index);\n        }).filter(function (vec) {\n          return vec != null;\n        });\n\n        if (chunks.length > 0) {\n          return columns[index] = new Chunked(field.type, chunks);\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"search\",\n    value: function search(index, then) {\n      var idx = index; // binary search to find the child vector and value indices\n\n      var offsets = this._chunkOffsets,\n          rhs = offsets.length - 1; // return early if out of bounds, or if there's just one child\n\n      if (idx < 0) {\n        return null;\n      }\n\n      if (idx >= offsets[rhs]) {\n        return null;\n      }\n\n      if (rhs <= 1) {\n        return then ? then(this, 0, idx) : [0, idx];\n      }\n\n      var lhs = 0,\n          pos = 0,\n          mid = 0;\n\n      do {\n        if (lhs + 1 === rhs) {\n          return then ? then(this, lhs, idx - pos) : [lhs, idx - pos];\n        }\n\n        mid = lhs + (rhs - lhs) / 2 | 0;\n        idx >= offsets[mid] ? lhs = mid : rhs = mid;\n      } while (idx < offsets[rhs] && idx >= (pos = offsets[lhs]));\n\n      return null;\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid(index) {\n      return !!this.search(index, this.isValidInternal);\n    }\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      return this.search(index, this.getInternal);\n    }\n  }, {\n    key: \"set\",\n    value: function set(index, value) {\n      this.search(index, function (_ref, i, j) {\n        var chunks = _ref.chunks;\n        return chunks[i].set(j, value);\n      });\n    }\n  }, {\n    key: \"indexOf\",\n    value: function indexOf(element, offset) {\n      var _this2 = this;\n\n      if (offset && typeof offset === 'number') {\n        return this.search(offset, function (self, i, j) {\n          return _this2.indexOfInternal(self, i, j, element);\n        });\n      }\n\n      return this.indexOfInternal(this, 0, Math.max(0, offset || 0), element);\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      var chunks = this.chunks;\n      var n = chunks.length;\n      var ArrayType = this._type.ArrayType;\n\n      if (n <= 0) {\n        return new ArrayType(0);\n      }\n\n      if (n <= 1) {\n        return chunks[0].toArray();\n      }\n\n      var len = 0,\n          src = new Array(n);\n\n      for (var i = -1; ++i < n;) {\n        len += (src[i] = chunks[i].toArray()).length;\n      }\n\n      if (ArrayType !== src[0].constructor) {\n        ArrayType = src[0].constructor;\n      }\n\n      var dst = new ArrayType(len);\n      var set = ArrayType === Array ? arraySet : typedSet;\n\n      for (var _i = -1, idx = 0; ++_i < n;) {\n        idx = set(src[_i], dst, idx);\n      }\n\n      return dst;\n    }\n  }, {\n    key: \"getInternal\",\n    value: function getInternal(_ref2, i, j) {\n      var _chunks = _ref2._chunks;\n      return _chunks[i].get(j);\n    }\n  }, {\n    key: \"isValidInternal\",\n    value: function isValidInternal(_ref3, i, j) {\n      var _chunks = _ref3._chunks;\n      return _chunks[i].isValid(j);\n    }\n  }, {\n    key: \"indexOfInternal\",\n    value: function indexOfInternal(_ref4, chunkIndex, fromIndex, element) {\n      var _chunks = _ref4._chunks;\n      var i = chunkIndex - 1,\n          n = _chunks.length;\n      var start = fromIndex,\n          offset = 0,\n          found = -1;\n\n      while (++i < n) {\n        if (~(found = _chunks[i].indexOf(element, start))) {\n          return offset + found;\n        }\n\n        start = 0;\n        offset += _chunks[i].length;\n      }\n\n      return -1;\n    }\n  }, {\n    key: \"_sliceInternal\",\n    value: function _sliceInternal(self, begin, end) {\n      var slices = [];\n      var chunks = self.chunks,\n          chunkOffsets = self._chunkOffsets;\n\n      for (var i = -1, n = chunks.length; ++i < n;) {\n        var chunk = chunks[i];\n        var chunkLength = chunk.length;\n        var chunkOffset = chunkOffsets[i]; // If the child is to the right of the slice boundary, we can stop\n\n        if (chunkOffset >= end) {\n          break;\n        } // If the child is to the left of of the slice boundary, exclude\n\n\n        if (begin >= chunkOffset + chunkLength) {\n          continue;\n        } // If the child is between both left and right boundaries, include w/o slicing\n\n\n        if (chunkOffset >= begin && chunkOffset + chunkLength <= end) {\n          slices.push(chunk);\n          continue;\n        } // If the child overlaps one of the slice boundaries, include that slice\n\n\n        var from = Math.max(0, begin - chunkOffset);\n        var to = Math.min(end - chunkOffset, chunkLength);\n        slices.push(chunk.slice(from, to));\n      }\n\n      return self.clone(slices);\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._type;\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this._length;\n    }\n  }, {\n    key: \"chunks\",\n    get: function get() {\n      return this._chunks;\n    }\n  }, {\n    key: \"typeId\",\n    get: function get() {\n      return this._type.typeId;\n    }\n  }, {\n    key: \"VectorName\",\n    get: function get() {\n      return \"Chunked<\".concat(this._type, \">\");\n    }\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this._chunks[0] ? this._chunks[0].data : null;\n    }\n  }, {\n    key: \"ArrayType\",\n    get: function get() {\n      return this._type.ArrayType;\n    }\n  }, {\n    key: \"numChildren\",\n    get: function get() {\n      return this._numChildren;\n    }\n  }, {\n    key: \"stride\",\n    get: function get() {\n      return this._chunks[0] ? this._chunks[0].stride : 1;\n    }\n  }, {\n    key: \"byteLength\",\n    get: function get() {\n      return this._chunks.reduce(function (byteLength, chunk) {\n        return byteLength + chunk.byteLength;\n      }, 0);\n    }\n  }, {\n    key: \"nullCount\",\n    get: function get() {\n      var nullCount = this._nullCount;\n\n      if (nullCount < 0) {\n        this._nullCount = nullCount = this._chunks.reduce(function (x, _ref5) {\n          var nullCount = _ref5.nullCount;\n          return x + nullCount;\n        }, 0);\n      }\n\n      return nullCount;\n    }\n  }, {\n    key: \"indices\",\n    get: function get() {\n      if (DataType.isDictionary(this._type)) {\n        if (!this._indices) {\n          var _chunks2 = this._chunks;\n          this._indices = _chunks2.length === 1 ? _chunks2[0].indices : Chunked.concat.apply(Chunked, _toConsumableArray(_chunks2.map(function (x) {\n            return x.indices;\n          })));\n        }\n\n        return this._indices;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"dictionary\",\n    get: function get() {\n      if (DataType.isDictionary(this._type)) {\n        return this._chunks[this._chunks.length - 1].data.dictionary;\n      }\n\n      return null;\n    }\n  }], [{\n    key: \"flatten\",\n    value: function flatten() {\n      for (var _len2 = arguments.length, vectors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        vectors[_key2] = arguments[_key2];\n      }\n\n      return selectChunkArgs(Vector, vectors);\n    }\n    /** @nocollapse */\n\n  }, {\n    key: \"concat\",\n    value: function concat() {\n      var chunks = Chunked.flatten.apply(Chunked, arguments);\n      return new Chunked(chunks[0].type, chunks);\n    }\n  }]);\n\n  return Chunked;\n}(AbstractVector);\n/** @ignore */\n\nfunction calculateOffsets(vectors) {\n  var offsets = new Uint32Array((vectors || []).length + 1);\n  var offset = offsets[0] = 0,\n      length = offsets.length;\n\n  for (var index = 0; ++index < length;) {\n    offsets[index] = offset += vectors[index - 1].length;\n  }\n\n  return offsets;\n}\n/** @ignore */\n\n\nvar typedSet = function typedSet(src, dst, offset) {\n  dst.set(src, offset);\n  return offset + src.length;\n};\n/** @ignore */\n\n\nvar arraySet = function arraySet(src, dst, offset) {\n  var idx = offset;\n\n  for (var i = -1, n = src.length; ++i < n;) {\n    dst[idx++] = src[i];\n  }\n\n  return idx;\n};","map":{"version":3,"sources":["vector/chunked.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { clampRange } from '../util/vector';\nimport { DataType, Dictionary } from '../type';\nimport { selectChunkArgs } from '../util/args';\nimport { DictionaryVector } from './dictionary';\nimport { AbstractVector, Vector } from '../vector';\nimport { Clonable, Sliceable, Applicative } from '../vector';\n\n/** @ignore */\ntype ChunkedDict<T extends DataType> = T extends Dictionary ? Vector<T['dictionary']> : null | never;\n/** @ignore */\ntype ChunkedKeys<T extends DataType> = T extends Dictionary ? Vector<T['indices']> | Chunked<T['indices']> : null | never;\n\n/** @ignore */\nexport type SearchContinuation<T extends Chunked> = (column: T, chunkIndex: number, valueIndex: number) => any;\n\n/** @ignore */\nexport class Chunked<T extends DataType = any>\n    extends AbstractVector<T>\n    implements Clonable<Chunked<T>>,\n               Sliceable<Chunked<T>>,\n               Applicative<T, Chunked<T>> {\n\n    /** @nocollapse */\n    public static flatten<T extends DataType>(...vectors: (Vector<T> | Vector<T>[])[]) {\n        return selectChunkArgs<Vector<T>>(Vector, vectors);\n    }\n\n    /** @nocollapse */\n    public static concat<T extends DataType>(...vectors: (Vector<T> | Vector<T>[])[]) {\n        const chunks = Chunked.flatten<T>(...vectors);\n        return new Chunked<T>(chunks[0].type, chunks);\n    }\n\n    protected _type: T;\n    protected _length: number;\n    protected _chunks: Vector<T>[];\n    protected _numChildren: number;\n    protected _children?: Chunked[];\n    protected _nullCount: number = -1;\n    protected _chunkOffsets: Uint32Array;\n\n    constructor(type: T, chunks: Vector<T>[] = [], offsets = calculateOffsets(chunks)) {\n        super();\n        this._type = type;\n        this._chunks = chunks;\n        this._chunkOffsets = offsets;\n        this._length = offsets[offsets.length - 1];\n        this._numChildren = (this._type.children || []).length;\n    }\n\n    public get type() { return this._type; }\n    public get length() { return this._length; }\n    public get chunks() { return this._chunks; }\n    public get typeId(): T['TType'] { return this._type.typeId; }\n    public get VectorName() { return `Chunked<${this._type}>`; }\n    public get data(): Data<T> {\n        return this._chunks[0] ? this._chunks[0].data : <any> null;\n    }\n\n    public get ArrayType() { return this._type.ArrayType; }\n    public get numChildren() { return this._numChildren; }\n    public get stride() { return this._chunks[0] ? this._chunks[0].stride : 1; }\n    public get byteLength(): number {\n        return this._chunks.reduce((byteLength, chunk) => byteLength + chunk.byteLength, 0);\n    }\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        if (nullCount < 0) {\n            this._nullCount = nullCount = this._chunks.reduce((x, { nullCount }) => x + nullCount, 0);\n        }\n        return nullCount;\n    }\n\n    protected _indices?: ChunkedKeys<T>;\n    public get indices(): ChunkedKeys<T> | null {\n        if (DataType.isDictionary(this._type)) {\n            if (!this._indices) {\n                const chunks = (<any> this._chunks) as DictionaryVector<T, any>[];\n                this._indices = (chunks.length === 1\n                    ? chunks[0].indices\n                    : Chunked.concat(...chunks.map((x) => x.indices))) as ChunkedKeys<T>;\n            }\n            return this._indices;\n        }\n        return null;\n    }\n    public get dictionary(): ChunkedDict<T> | null {\n        if (DataType.isDictionary(this._type)) {\n            return this._chunks[this._chunks.length - 1].data.dictionary as ChunkedDict<T>;\n        }\n        return null;\n    }\n\n    public *[Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        for (const chunk of this._chunks) {\n            yield* chunk;\n        }\n    }\n\n    public clone(chunks = this._chunks): Chunked<T> {\n        return new Chunked(this._type, chunks);\n    }\n\n    public concat(...others: Vector<T>[]): Chunked<T> {\n        return this.clone(Chunked.flatten(this, ...others));\n    }\n\n    public slice(begin?: number, end?: number): Chunked<T> {\n        return clampRange(this, begin, end, this._sliceInternal);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Chunked<R> | null {\n\n        if (index < 0 || index >= this._numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let child: Chunked<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (child = columns[index]) { return child; }\n        if (field = ((this._type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Chunked<R>(field.type, chunks));\n            }\n        }\n\n        return null;\n    }\n\n    public search(index: number): [number, number] | null;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N): ReturnType<N>;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N) {\n        let idx = index;\n        // binary search to find the child vector and value indices\n        let offsets = this._chunkOffsets, rhs = offsets.length - 1;\n        // return early if out of bounds, or if there's just one child\n        if (idx < 0            ) { return null; }\n        if (idx >= offsets[rhs]) { return null; }\n        if (rhs <= 1           ) { return then ? then(this, 0, idx) : [0, idx]; }\n        let lhs = 0, pos = 0, mid = 0;\n        do {\n            if (lhs + 1 === rhs) {\n                return then ? then(this, lhs, idx - pos) : [lhs, idx - pos];\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            idx >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        } while (idx < offsets[rhs] && idx >= (pos = offsets[lhs]));\n        return null;\n    }\n\n    public isValid(index: number): boolean {\n        return !!this.search(index, this.isValidInternal);\n    }\n\n    public get(index: number): T['TValue'] | null {\n        return this.search(index, this.getInternal);\n    }\n\n    public set(index: number, value: T['TValue'] | null): void {\n        this.search(index, ({ chunks }, i, j) => chunks[i].set(j, value));\n    }\n\n    public indexOf(element: T['TValue'], offset?: number): number {\n        if (offset && typeof offset === 'number') {\n            return this.search(offset, (self, i, j) => this.indexOfInternal(self, i, j, element))!;\n        }\n        return this.indexOfInternal(this, 0, Math.max(0, offset || 0), element);\n    }\n\n    public toArray(): T['TArray'] {\n        const { chunks } = this;\n        const n = chunks.length;\n        let ArrayType: any = this._type.ArrayType;\n        if (n <= 0) { return new ArrayType(0); }\n        if (n <= 1) { return chunks[0].toArray(); }\n        let len = 0, src = new Array(n);\n        for (let i = -1; ++i < n;) {\n            len += (src[i] = chunks[i].toArray()).length;\n        }\n        if (ArrayType !== src[0].constructor) {\n            ArrayType = src[0].constructor;\n        }\n        let dst = new ArrayType(len);\n        let set: any = ArrayType === Array ? arraySet : typedSet;\n        for (let i = -1, idx = 0; ++i < n;) {\n            idx = set(src[i], dst, idx);\n        }\n        return dst;\n    }\n\n    protected getInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].get(j); }\n    protected isValidInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].isValid(j); }\n    protected indexOfInternal({ _chunks }: Chunked<T>, chunkIndex: number, fromIndex: number, element: T['TValue']) {\n        let i = chunkIndex - 1, n = _chunks.length;\n        let start = fromIndex, offset = 0, found = -1;\n        while (++i < n) {\n            if (~(found = _chunks[i].indexOf(element, start))) {\n                return offset + found;\n            }\n            start = 0;\n            offset += _chunks[i].length;\n        }\n        return -1;\n    }\n\n    protected _sliceInternal(self: Chunked<T>, begin: number, end: number) {\n        const slices: Vector<T>[] = [];\n        const { chunks, _chunkOffsets: chunkOffsets } = self;\n        for (let i = -1, n = chunks.length; ++i < n;) {\n            const chunk = chunks[i];\n            const chunkLength = chunk.length;\n            const chunkOffset = chunkOffsets[i];\n            // If the child is to the right of the slice boundary, we can stop\n            if (chunkOffset >= end) { break; }\n            // If the child is to the left of of the slice boundary, exclude\n            if (begin >= chunkOffset + chunkLength) { continue; }\n            // If the child is between both left and right boundaries, include w/o slicing\n            if (chunkOffset >= begin && (chunkOffset + chunkLength) <= end) {\n                slices.push(chunk);\n                continue;\n            }\n            // If the child overlaps one of the slice boundaries, include that slice\n            const from = Math.max(0, begin - chunkOffset);\n            const to = Math.min(end - chunkOffset, chunkLength);\n            slices.push(chunk.slice(from, to) as Vector<T>);\n        }\n        return self.clone(slices);\n    }\n}\n\n/** @ignore */\nfunction calculateOffsets<T extends DataType>(vectors: Vector<T>[]) {\n    let offsets = new Uint32Array((vectors || []).length + 1);\n    let offset = offsets[0] = 0, length = offsets.length;\n    for (let index = 0; ++index < length;) {\n        offsets[index] = (offset += vectors[index - 1].length);\n    }\n    return offsets;\n}\n\n/** @ignore */\nconst typedSet = (src: TypedArray, dst: TypedArray, offset: number) => {\n    dst.set(src, offset);\n    return (offset + src.length);\n};\n\n/** @ignore */\nconst arraySet = (src: any[], dst: any[], offset: number) => {\n    let idx = offset;\n    for (let i = -1, n = src.length; ++i < n;) {\n        dst[idx++] = src[i];\n    }\n    return idx;\n};\n\n/** @ignore */\ninterface TypedArray extends ArrayBufferView {\n    readonly length: number;\n    readonly [n: number]: number;\n    set(array: ArrayLike<number>, offset?: number): void;\n}\n"]},"metadata":{},"sourceType":"module"}