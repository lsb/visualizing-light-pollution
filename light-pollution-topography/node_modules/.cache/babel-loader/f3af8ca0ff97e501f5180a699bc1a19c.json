{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport React, { createElement } from 'react';\nimport { inheritsFrom } from './inherits-from';\nimport { Layer, View } from '@deck.gl/core';\n\nfunction wrapInView(node) {\n  if (!node) {\n    return node;\n  }\n\n  if (typeof node === 'function') {\n    return createElement(View, {}, node);\n  }\n\n  if (Array.isArray(node)) {\n    return node.map(wrapInView);\n  }\n\n  if (inheritsFrom(node.type, View)) {\n    return node;\n  }\n\n  return node;\n}\n\nexport default function extractJSXLayers(_ref) {\n  var children = _ref.children,\n      layers = _ref.layers,\n      views = _ref.views;\n  var reactChildren = [];\n  var jsxLayers = [];\n  var jsxViews = {};\n  React.Children.forEach(wrapInView(children), function (reactElement) {\n    if (reactElement) {\n      var ElementType = reactElement.type;\n\n      if (inheritsFrom(ElementType, Layer)) {\n        var layer = createLayer(ElementType, reactElement.props);\n        jsxLayers.push(layer);\n      } else {\n        reactChildren.push(reactElement);\n      }\n\n      if (ElementType !== View && inheritsFrom(ElementType, View) && reactElement.props.id) {\n        var view = new ElementType(reactElement.props);\n        jsxViews[view.id] = view;\n      }\n    }\n  });\n\n  if (Object.keys(jsxViews).length > 0) {\n    if (Array.isArray(views)) {\n      views.forEach(function (view) {\n        jsxViews[view.id] = view;\n      });\n    } else if (views) {\n      jsxViews[views.id] = views;\n    }\n\n    views = Object.values(jsxViews);\n  }\n\n  layers = jsxLayers.length > 0 ? [].concat(jsxLayers, _toConsumableArray(layers)) : layers;\n  return {\n    layers: layers,\n    children: reactChildren,\n    views: views\n  };\n}\n\nfunction createLayer(LayerType, reactProps) {\n  var props = {};\n  var defaultProps = LayerType.defaultProps || {};\n\n  for (var key in reactProps) {\n    if (defaultProps[key] !== reactProps[key]) {\n      props[key] = reactProps[key];\n    }\n  }\n\n  return new LayerType(props);\n}","map":{"version":3,"sources":["../../../src/utils/extract-jsx-layers.js"],"names":["createElement","Array","node","inheritsFrom","children","layers","views","reactChildren","jsxLayers","jsxViews","React","wrapInView","ElementType","reactElement","layer","createLayer","view","Object","props","defaultProps","LayerType","reactProps"],"mappings":"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","sourcesContent":["import React, {createElement} from 'react';\nimport {inheritsFrom} from './inherits-from';\nimport {Layer, View} from '@deck.gl/core';\n\n// recursively wrap render callbacks in `View`\nfunction wrapInView(node) {\n  if (!node) {\n    return node;\n  }\n  if (typeof node === 'function') {\n    // React.Children does not traverse functions.\n    // All render callbacks must be protected under a <View>\n    return createElement(View, {}, node);\n  }\n  if (Array.isArray(node)) {\n    return node.map(wrapInView);\n  }\n  if (inheritsFrom(node.type, View)) {\n    return node;\n  }\n  return node;\n}\n\n// extracts any deck.gl layers masquerading as react elements from props.children\nexport default function extractJSXLayers({children, layers, views}) {\n  const reactChildren = []; // extract real react elements (i.e. not deck.gl layers)\n  const jsxLayers = []; // extracted layer from react children, will add to deck.gl layer array\n  const jsxViews = {};\n\n  // React.children\n  React.Children.forEach(wrapInView(children), reactElement => {\n    if (reactElement) {\n      // For some reason Children.forEach doesn't filter out `null`s\n      const ElementType = reactElement.type;\n      if (inheritsFrom(ElementType, Layer)) {\n        const layer = createLayer(ElementType, reactElement.props);\n        jsxLayers.push(layer);\n      } else {\n        reactChildren.push(reactElement);\n      }\n\n      // empty id => default view\n      if (ElementType !== View && inheritsFrom(ElementType, View) && reactElement.props.id) {\n        const view = new ElementType(reactElement.props);\n        jsxViews[view.id] = view;\n      }\n    }\n  });\n\n  // Avoid modifying views if no JSX views were found\n  if (Object.keys(jsxViews).length > 0) {\n    // If a view is specified in both views prop and JSX, use the one in views\n    if (Array.isArray(views)) {\n      views.forEach(view => {\n        jsxViews[view.id] = view;\n      });\n    } else if (views) {\n      jsxViews[views.id] = views;\n    }\n    views = Object.values(jsxViews);\n  }\n\n  // Avoid modifying layers array if no JSX layers were found\n  layers = jsxLayers.length > 0 ? [...jsxLayers, ...layers] : layers;\n\n  return {layers, children: reactChildren, views};\n}\n\nfunction createLayer(LayerType, reactProps) {\n  const props = {};\n  // Layer.defaultProps is treated as ReactElement.defaultProps and merged into react props\n  // Remove them\n  const defaultProps = LayerType.defaultProps || {};\n  for (const key in reactProps) {\n    if (defaultProps[key] !== reactProps[key]) {\n      props[key] = reactProps[key];\n    }\n  }\n  return new LayerType(props);\n}\n"]},"metadata":{},"sourceType":"module"}