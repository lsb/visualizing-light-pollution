{"ast":null,"code":"import parseImage from './lib/parsers/parse-image';\nimport { isPng, isGif, isBmp, isJpeg } from './lib/binary-image-api/binary-image-parsers';\nvar VERSION = typeof \"2.1.2\" !== 'undefined' ? \"2.1.2\" : 'latest';\nvar EXTENSIONS = ['png', 'jpg', 'jpeg', 'gif', 'webp', 'bmp', 'ico', 'svg'];\nvar MIME_TYPES = ['image/png', 'image/jpeg', 'image/gif', 'image/webp', 'image/bmp', 'image/vndmicrosofticon', 'image/svg+xml'];\nvar ImageLoader = {\n  name: 'Images',\n  version: VERSION,\n  mimeTypes: MIME_TYPES,\n  extensions: EXTENSIONS,\n  parse: parseImage,\n  test: function test(arrayBuffer) {\n    var dataView = new DataView(arrayBuffer);\n    return isJpeg(dataView) || isBmp(dataView) || isGif(dataView) || isPng(dataView);\n  },\n  options: {\n    image: {\n      format: 'auto',\n      decode: true\n    }\n  }\n};\nexport default ImageLoader;","map":{"version":3,"sources":["../../src/image-loader.js"],"names":["VERSION","EXTENSIONS","MIME_TYPES","ImageLoader","name","version","mimeTypes","extensions","parse","test","dataView","isJpeg","isBmp","isGif","isPng","options","image","format","decode"],"mappings":"AAEA,OAAA,UAAA,MAAA,2BAAA;AACA,SAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,MAAA,QAAA,6CAAA;AAGA,IAAMA,OAAO,GAAG,OAAA,OAAA,KAAA,WAAA,GAAA,OAAA,GAAhB,QAAA;AAEA,IAAMC,UAAU,GAAG,CAAA,KAAA,EAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAAA,KAAA,EAAnB,KAAmB,CAAnB;AACA,IAAMC,UAAU,GAAG,CAAA,WAAA,EAAA,YAAA,EAAA,WAAA,EAAA,YAAA,EAAA,WAAA,EAAA,wBAAA,EAAnB,eAAmB,CAAnB;AAWA,IAAMC,WAAW,GAAG;AAClBC,EAAAA,IAAI,EADc,QAAA;AAElBC,EAAAA,OAAO,EAFW,OAAA;AAGlBC,EAAAA,SAAS,EAHS,UAAA;AAIlBC,EAAAA,UAAU,EAJQ,UAAA;AAKlBC,EAAAA,KAAK,EALa,UAAA;AAMlBC,EAAAA,IAAI,EAAE,SAAA,IAAA,CAAA,WAAA,EAAe;AACnB,QAAMC,QAAQ,GAAG,IAAA,QAAA,CAAjB,WAAiB,CAAjB;AACA,WAAOC,MAAM,CAANA,QAAM,CAANA,IAAoBC,KAAK,CAAzBD,QAAyB,CAAzBA,IAAuCE,KAAK,CAA5CF,QAA4C,CAA5CA,IAA0DG,KAAK,CAAtE,QAAsE,CAAtE;AARgB,GAAA;AAUlBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,KAAK,EAAE;AACLC,MAAAA,MAAM,EADD,MAAA;AAELC,MAAAA,MAAM,EAAE;AAFH;AADA;AAVS,CAApB;AAmBA,eAAA,WAAA","sourcesContent":["// __VERSION__ is injected by babel-plugin-version-inline\n/* global __VERSION__ */\nimport parseImage from './lib/parsers/parse-image';\nimport {isPng, isGif, isBmp, isJpeg} from './lib/binary-image-api/binary-image-parsers';\n\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n\nconst EXTENSIONS = ['png', 'jpg', 'jpeg', 'gif', 'webp', 'bmp', 'ico', 'svg'];\nconst MIME_TYPES = [\n  'image/png',\n  'image/jpeg',\n  'image/gif',\n  'image/webp',\n  'image/bmp',\n  'image/vndmicrosofticon',\n  'image/svg+xml'\n];\n\n// Loads a platform-specific image type that can be used as input data to WebGL textures\nconst ImageLoader = {\n  name: 'Images',\n  version: VERSION,\n  mimeTypes: MIME_TYPES,\n  extensions: EXTENSIONS,\n  parse: parseImage,\n  test: arrayBuffer => {\n    const dataView = new DataView(arrayBuffer); // , byteOffset, byteLength);\n    return isJpeg(dataView) || isBmp(dataView) || isGif(dataView) || isPng(dataView);\n  },\n  options: {\n    image: {\n      format: 'auto',\n      decode: true // if format is HTML\n    }\n    // imagebitmap: {} - passes (platform dependent) parameters to ImageBitmap constructor\n  }\n};\n\nexport default ImageLoader;\n"]},"metadata":{},"sourceType":"module"}