{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { Layer, project32, gouraudLighting, picking, COORDINATE_SYSTEM } from '@deck.gl/core';\nimport { Model, Geometry, hasFeatures, FEATURES } from '@luma.gl/core';\nimport PolygonTesselator from './polygon-tesselator';\nimport vsTop from './solid-polygon-layer-vertex-top.glsl';\nimport vsSide from './solid-polygon-layer-vertex-side.glsl';\nimport fs from './solid-polygon-layer-fragment.glsl';\nvar DEFAULT_COLOR = [0, 0, 0, 255];\nvar defaultProps = {\n  filled: true,\n  extruded: false,\n  wireframe: false,\n  _normalize: true,\n  elevationScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  getPolygon: {\n    type: 'accessor',\n    value: function value(f) {\n      return f.polygon;\n    }\n  },\n  getElevation: {\n    type: 'accessor',\n    value: 1000\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  material: true\n};\nvar ATTRIBUTE_TRANSITION = {\n  enter: function enter(value, chunk) {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\nvar SolidPolygonLayer = function (_Layer) {\n  _inherits(SolidPolygonLayer, _Layer);\n\n  function SolidPolygonLayer() {\n    _classCallCheck(this, SolidPolygonLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SolidPolygonLayer).apply(this, arguments));\n  }\n\n  _createClass(SolidPolygonLayer, [{\n    key: \"getShaders\",\n    value: function getShaders(vs) {\n      return _get(_getPrototypeOf(SolidPolygonLayer.prototype), \"getShaders\", this).call(this, {\n        vs: vs,\n        fs: fs,\n        defines: {},\n        modules: [project32, gouraudLighting, picking]\n      });\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      var _this = this;\n\n      var _this$context = this.context,\n          gl = _this$context.gl,\n          viewport = _this$context.viewport;\n      var coordinateSystem = this.props.coordinateSystem;\n\n      if (viewport.isGeospatial && coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n        coordinateSystem = COORDINATE_SYSTEM.LNGLAT;\n      }\n\n      this.setState({\n        numInstances: 0,\n        polygonTesselator: new PolygonTesselator({\n          preproject: coordinateSystem === COORDINATE_SYSTEM.LNGLAT,\n          fp64: this.use64bitPositions(),\n          IndexType: !gl || hasFeatures(gl, FEATURES.ELEMENT_INDEX_UINT32) ? Uint32Array : Uint16Array\n        })\n      });\n      var attributeManager = this.getAttributeManager();\n      var noAlloc = true;\n      attributeManager.remove(['instancePickingColors']);\n      attributeManager.add({\n        indices: {\n          size: 1,\n          isIndexed: true,\n          update: this.calculateIndices,\n          noAlloc: noAlloc\n        },\n        positions: {\n          size: 3,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          transition: ATTRIBUTE_TRANSITION,\n          accessor: 'getPolygon',\n          update: this.calculatePositions,\n          noAlloc: noAlloc,\n          shaderAttributes: {\n            positions: {\n              vertexOffset: 0,\n              divisor: 0\n            },\n            instancePositions: {\n              vertexOffset: 0,\n              divisor: 1\n            },\n            nextPositions: {\n              vertexOffset: 1,\n              divisor: 1\n            }\n          }\n        },\n        vertexValid: {\n          size: 1,\n          divisor: 1,\n          type: 5121,\n          update: this.calculateVertexValid,\n          noAlloc: noAlloc\n        },\n        elevations: {\n          size: 1,\n          transition: ATTRIBUTE_TRANSITION,\n          accessor: 'getElevation',\n          shaderAttributes: {\n            elevations: {\n              divisor: 0\n            },\n            instanceElevations: {\n              divisor: 1\n            }\n          }\n        },\n        fillColors: {\n          alias: 'colors',\n          size: this.props.colorFormat.length,\n          type: 5121,\n          normalized: true,\n          transition: ATTRIBUTE_TRANSITION,\n          accessor: 'getFillColor',\n          defaultValue: DEFAULT_COLOR,\n          shaderAttributes: {\n            fillColors: {\n              divisor: 0\n            },\n            instanceFillColors: {\n              divisor: 1\n            }\n          }\n        },\n        lineColors: {\n          alias: 'colors',\n          size: this.props.colorFormat.length,\n          type: 5121,\n          normalized: true,\n          transition: ATTRIBUTE_TRANSITION,\n          accessor: 'getLineColor',\n          defaultValue: DEFAULT_COLOR,\n          shaderAttributes: {\n            lineColors: {\n              divisor: 0\n            },\n            instanceLineColors: {\n              divisor: 1\n            }\n          }\n        },\n        pickingColors: {\n          size: 3,\n          type: 5121,\n          accessor: function accessor(object, _ref) {\n            var index = _ref.index,\n                value = _ref.target;\n            return _this.encodePickingColor(index, value);\n          },\n          shaderAttributes: {\n            pickingColors: {\n              divisor: 0\n            },\n            instancePickingColors: {\n              divisor: 1\n            }\n          }\n        }\n      });\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref2) {\n      var uniforms = _ref2.uniforms;\n      var _this$props = this.props,\n          extruded = _this$props.extruded,\n          filled = _this$props.filled,\n          wireframe = _this$props.wireframe,\n          elevationScale = _this$props.elevationScale;\n      var _this$state = this.state,\n          topModel = _this$state.topModel,\n          sideModel = _this$state.sideModel,\n          polygonTesselator = _this$state.polygonTesselator;\n      var renderUniforms = Object.assign({}, uniforms, {\n        extruded: Boolean(extruded),\n        elevationScale: elevationScale\n      });\n\n      if (sideModel) {\n        sideModel.setInstanceCount(polygonTesselator.instanceCount - 1);\n        sideModel.setUniforms(renderUniforms);\n\n        if (wireframe) {\n          sideModel.setDrawMode(3);\n          sideModel.setUniforms({\n            isWireframe: true\n          }).draw();\n        }\n\n        if (filled) {\n          sideModel.setDrawMode(6);\n          sideModel.setUniforms({\n            isWireframe: false\n          }).draw();\n        }\n      }\n\n      if (topModel) {\n        topModel.setVertexCount(polygonTesselator.vertexCount);\n        topModel.setUniforms(renderUniforms).draw();\n      }\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(updateParams) {\n      _get(_getPrototypeOf(SolidPolygonLayer.prototype), \"updateState\", this).call(this, updateParams);\n\n      this.updateGeometry(updateParams);\n      var props = updateParams.props,\n          oldProps = updateParams.oldProps,\n          changeFlags = updateParams.changeFlags;\n      var attributeManager = this.getAttributeManager();\n      var regenerateModels = changeFlags.extensionsChanged || props.filled !== oldProps.filled || props.extruded !== oldProps.extruded;\n\n      if (regenerateModels) {\n        if (this.state.models) {\n          this.state.models.forEach(function (model) {\n            return model[\"delete\"]();\n          });\n        }\n\n        this.setState(this._getModels(this.context.gl));\n        attributeManager.invalidateAll();\n      }\n    }\n  }, {\n    key: \"updateGeometry\",\n    value: function updateGeometry(_ref3) {\n      var props = _ref3.props,\n          oldProps = _ref3.oldProps,\n          changeFlags = _ref3.changeFlags;\n      var geometryConfigChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon);\n\n      if (geometryConfigChanged) {\n        var polygonTesselator = this.state.polygonTesselator;\n        var buffers = props.data.attributes || {};\n        polygonTesselator.updateGeometry({\n          data: props.data,\n          normalize: props._normalize,\n          geometryBuffer: buffers.getPolygon,\n          buffers: buffers,\n          getGeometry: props.getPolygon,\n          positionFormat: props.positionFormat,\n          fp64: this.use64bitPositions(),\n          dataChanged: changeFlags.dataChanged\n        });\n        this.setState({\n          numInstances: polygonTesselator.instanceCount,\n          startIndices: polygonTesselator.vertexStarts\n        });\n\n        if (!changeFlags.dataChanged) {\n          this.getAttributeManager().invalidateAll();\n        }\n      }\n    }\n  }, {\n    key: \"_getModels\",\n    value: function _getModels(gl) {\n      var _this$props2 = this.props,\n          id = _this$props2.id,\n          filled = _this$props2.filled,\n          extruded = _this$props2.extruded;\n      var topModel;\n      var sideModel;\n\n      if (filled) {\n        var shaders = this.getShaders(vsTop);\n        shaders.defines.NON_INSTANCED_MODEL = 1;\n        topModel = new Model(gl, Object.assign({}, shaders, {\n          id: \"\".concat(id, \"-top\"),\n          drawMode: 4,\n          attributes: {\n            vertexPositions: new Float32Array([0, 1])\n          },\n          uniforms: {\n            isWireframe: false,\n            isSideVertex: false\n          },\n          vertexCount: 0,\n          isIndexed: true\n        }));\n      }\n\n      if (extruded) {\n        sideModel = new Model(gl, Object.assign({}, this.getShaders(vsSide), {\n          id: \"\".concat(id, \"-side\"),\n          geometry: new Geometry({\n            drawMode: 1,\n            vertexCount: 4,\n            attributes: {\n              vertexPositions: {\n                size: 2,\n                value: new Float32Array([1, 1, 0, 1, 0, 0, 1, 0])\n              }\n            }\n          }),\n          instanceCount: 0,\n          isInstanced: 1\n        }));\n        sideModel.userData.excludeAttributes = {\n          indices: true\n        };\n      }\n\n      return {\n        models: [sideModel, topModel].filter(Boolean),\n        topModel: topModel,\n        sideModel: sideModel\n      };\n    }\n  }, {\n    key: \"calculateIndices\",\n    value: function calculateIndices(attribute) {\n      var polygonTesselator = this.state.polygonTesselator;\n      attribute.startIndices = polygonTesselator.indexStarts;\n      attribute.value = polygonTesselator.get('indices');\n    }\n  }, {\n    key: \"calculatePositions\",\n    value: function calculatePositions(attribute) {\n      var polygonTesselator = this.state.polygonTesselator;\n      attribute.startIndices = polygonTesselator.vertexStarts;\n      attribute.value = polygonTesselator.get('positions');\n    }\n  }, {\n    key: \"calculateVertexValid\",\n    value: function calculateVertexValid(attribute) {\n      attribute.value = this.state.polygonTesselator.get('vertexValid');\n    }\n  }]);\n\n  return SolidPolygonLayer;\n}(Layer);\n\nexport { SolidPolygonLayer as default };\nSolidPolygonLayer.layerName = 'SolidPolygonLayer';\nSolidPolygonLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/solid-polygon-layer/solid-polygon-layer.js"],"names":["DEFAULT_COLOR","defaultProps","filled","extruded","wireframe","_normalize","elevationScale","type","min","value","getPolygon","f","getElevation","getFillColor","getLineColor","material","ATTRIBUTE_TRANSITION","enter","chunk","SolidPolygonLayer","Layer","vs","fs","defines","modules","gl","viewport","coordinateSystem","COORDINATE_SYSTEM","numInstances","polygonTesselator","preproject","fp64","IndexType","hasFeatures","FEATURES","Uint16Array","attributeManager","noAlloc","indices","size","isIndexed","update","positions","transition","accessor","shaderAttributes","vertexOffset","divisor","instancePositions","nextPositions","vertexValid","elevations","instanceElevations","fillColors","alias","normalized","defaultValue","instanceFillColors","lineColors","instanceLineColors","pickingColors","index","instancePickingColors","uniforms","topModel","sideModel","renderUniforms","Boolean","isWireframe","updateParams","props","oldProps","changeFlags","regenerateModels","model","geometryConfigChanged","buffers","data","normalize","geometryBuffer","getGeometry","positionFormat","dataChanged","startIndices","vertexStarts","id","shaders","drawMode","attributes","vertexPositions","isSideVertex","vertexCount","geometry","instanceCount","isInstanced","models","attribute"],"mappings":";;;;;;AAoBA,SAAA,KAAA,EAAA,SAAA,EAAA,eAAA,EAAA,OAAA,EAAA,iBAAA,QAAA,eAAA;AAEA,SAAA,KAAA,EAAA,QAAA,EAAA,WAAA,EAAA,QAAA,QAAA,eAAA;AAGA,OAAA,iBAAA,MAAA,sBAAA;AAEA,OAAA,KAAA,MAAA,uCAAA;AACA,OAAA,MAAA,MAAA,wCAAA;AACA,OAAA,EAAA,MAAA,qCAAA;AAEA,IAAMA,aAAa,GAAG,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAtB,GAAsB,CAAtB;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EADa,IAAA;AAGnBC,EAAAA,QAAQ,EAHW,KAAA;AAKnBC,EAAAA,SAAS,EALU,KAAA;AAMnBC,EAAAA,UAAU,EANS,IAAA;AASnBC,EAAAA,cAAc,EAAE;AAACC,IAAAA,IAAI,EAAL,QAAA;AAAiBC,IAAAA,GAAG,EAApB,CAAA;AAAyBC,IAAAA,KAAK,EAAE;AAAhC,GATG;AAYnBC,EAAAA,UAAU,EAAE;AAACH,IAAAA,IAAI,EAAL,UAAA;AAAmBE,IAAAA,KAAK,EAAE,SAAA,KAAA,CAAA,CAAA,EAAC;AAAA,aAAIE,CAAC,CAAL,OAAA;AAAA;AAA3B,GAZO;AAcnBC,EAAAA,YAAY,EAAE;AAACL,IAAAA,IAAI,EAAL,UAAA;AAAmBE,IAAAA,KAAK,EAAE;AAA1B,GAdK;AAgBnBI,EAAAA,YAAY,EAAE;AAACN,IAAAA,IAAI,EAAL,UAAA;AAAmBE,IAAAA,KAAK,EAAET;AAA1B,GAhBK;AAiBnBc,EAAAA,YAAY,EAAE;AAACP,IAAAA,IAAI,EAAL,UAAA;AAAmBE,IAAAA,KAAK,EAAET;AAA1B,GAjBK;AAoBnBe,EAAAA,QAAQ,EAAE;AApBS,CAArB;AAuBA,IAAMC,oBAAoB,GAAG;AAC3BC,EAAAA,KAAK,EAAE,SAAA,KAAA,CAAA,KAAA,EAAA,KAAA,EAAkB;AACvB,WAAOC,KAAK,CAALA,MAAAA,GAAeA,KAAK,CAALA,QAAAA,CAAeA,KAAK,CAALA,MAAAA,GAAeT,KAAK,CAAlDS,MAAeA,CAAfA,GAAP,KAAA;AACD;AAH0B,CAA7B;;IAMqBC,iB;;;;;;;;;;;+BACRE,E,EAAI;AACb,aAAA,IAAA,CAAA,eAAA,CAAA,iBAAA,CAAA,SAAA,CAAA,EAAA,YAAA,EAAA,IAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAwB;AACtBA,QAAAA,EAAE,EADoB,EAAA;AAEtBC,QAAAA,EAAE,EAFoB,EAAA;AAGtBC,QAAAA,OAAO,EAHe,EAAA;AAItBC,QAAAA,OAAO,EAAE,CAAA,SAAA,EAAA,eAAA,EAAA,OAAA;AAJa,OAAxB,CAAA;AAMD;;;sCAEiB;AAAA,UAAA,KAAA,GAAA,IAAA;;AAAA,UAAA,aAAA,GACO,KADP,OAAA;AAAA,UACTC,EADS,GAAA,aAAA,CAAA,EAAA;AAAA,UACLC,QADK,GAAA,aAAA,CAAA,QAAA;AAAA,UAEXC,gBAFW,GAES,KAFT,KAES,CAFT,gBAAA;;AAGhB,UAAID,QAAQ,CAARA,YAAAA,IAAyBC,gBAAgB,KAAKC,iBAAiB,CAAnE,OAAA,EAA6E;AAC3ED,QAAAA,gBAAgB,GAAGC,iBAAiB,CAApCD,MAAAA;AACD;;AAED,WAAA,QAAA,CAAc;AACZE,QAAAA,YAAY,EADA,CAAA;AAEZC,QAAAA,iBAAiB,EAAE,IAAA,iBAAA,CAAsB;AACvCC,UAAAA,UAAU,EAAEJ,gBAAgB,KAAKC,iBAAiB,CADX,MAAA;AAEvCI,UAAAA,IAAI,EAAE,KAFiC,iBAEjC,EAFiC;AAGvCC,UAAAA,SAAS,EAAE,CAAA,EAAA,IAAOC,WAAW,CAAA,EAAA,EAAKC,QAAQ,CAA/B,oBAAkB,CAAlB,GAAA,WAAA,GAAsEC;AAH1C,SAAtB;AAFP,OAAd;AASA,UAAMC,gBAAgB,GAAG,KAAzB,mBAAyB,EAAzB;AACA,UAAMC,OAAO,GAAb,IAAA;AAEAD,MAAAA,gBAAgB,CAAhBA,MAAAA,CAAwB,CAAxBA,uBAAwB,CAAxBA;AAGAA,MAAAA,gBAAgB,CAAhBA,GAAAA,CAAqB;AACnBE,QAAAA,OAAO,EAAE;AAACC,UAAAA,IAAI,EAAL,CAAA;AAAUC,UAAAA,SAAS,EAAnB,IAAA;AAA2BC,UAAAA,MAAM,EAAE,KAAnC,gBAAA;AAA0DJ,UAAAA,OAAO,EAAPA;AAA1D,SADU;AAEnBK,QAAAA,SAAS,EAAE;AACTH,UAAAA,IAAI,EADK,CAAA;AAETjC,UAAAA,IAAI,EAFK,IAAA;AAGTyB,UAAAA,IAAI,EAAE,KAHG,iBAGH,EAHG;AAITY,UAAAA,UAAU,EAJD,oBAAA;AAKTC,UAAAA,QAAQ,EALC,YAAA;AAMTH,UAAAA,MAAM,EAAE,KANC,kBAAA;AAOTJ,UAAAA,OAAO,EAPE,OAAA;AAQTQ,UAAAA,gBAAgB,EAAE;AAChBH,YAAAA,SAAS,EAAE;AACTI,cAAAA,YAAY,EADH,CAAA;AAETC,cAAAA,OAAO,EAAE;AAFA,aADK;AAKhBC,YAAAA,iBAAiB,EAAE;AACjBF,cAAAA,YAAY,EADK,CAAA;AAEjBC,cAAAA,OAAO,EAAE;AAFQ,aALH;AAShBE,YAAAA,aAAa,EAAE;AACbH,cAAAA,YAAY,EADC,CAAA;AAEbC,cAAAA,OAAO,EAAE;AAFI;AATC;AART,SAFQ;AAyBnBG,QAAAA,WAAW,EAAE;AACXX,UAAAA,IAAI,EADO,CAAA;AAEXQ,UAAAA,OAAO,EAFI,CAAA;AAGXzC,UAAAA,IAAI,EAHO,IAAA;AAIXmC,UAAAA,MAAM,EAAE,KAJG,oBAAA;AAKXJ,UAAAA,OAAO,EAAPA;AALW,SAzBM;AAgCnBc,QAAAA,UAAU,EAAE;AACVZ,UAAAA,IAAI,EADM,CAAA;AAEVI,UAAAA,UAAU,EAFA,oBAAA;AAGVC,UAAAA,QAAQ,EAHE,cAAA;AAIVC,UAAAA,gBAAgB,EAAE;AAChBM,YAAAA,UAAU,EAAE;AACVJ,cAAAA,OAAO,EAAE;AADC,aADI;AAIhBK,YAAAA,kBAAkB,EAAE;AAClBL,cAAAA,OAAO,EAAE;AADS;AAJJ;AAJR,SAhCO;AA6CnBM,QAAAA,UAAU,EAAE;AACVC,UAAAA,KAAK,EADK,QAAA;AAEVf,UAAAA,IAAI,EAAE,KAAA,KAAA,CAAA,WAAA,CAFI,MAAA;AAGVjC,UAAAA,IAAI,EAHM,IAAA;AAIViD,UAAAA,UAAU,EAJA,IAAA;AAKVZ,UAAAA,UAAU,EALA,oBAAA;AAMVC,UAAAA,QAAQ,EANE,cAAA;AAOVY,UAAAA,YAAY,EAPF,aAAA;AAQVX,UAAAA,gBAAgB,EAAE;AAChBQ,YAAAA,UAAU,EAAE;AACVN,cAAAA,OAAO,EAAE;AADC,aADI;AAIhBU,YAAAA,kBAAkB,EAAE;AAClBV,cAAAA,OAAO,EAAE;AADS;AAJJ;AARR,SA7CO;AA8DnBW,QAAAA,UAAU,EAAE;AACVJ,UAAAA,KAAK,EADK,QAAA;AAEVf,UAAAA,IAAI,EAAE,KAAA,KAAA,CAAA,WAAA,CAFI,MAAA;AAGVjC,UAAAA,IAAI,EAHM,IAAA;AAIViD,UAAAA,UAAU,EAJA,IAAA;AAKVZ,UAAAA,UAAU,EALA,oBAAA;AAMVC,UAAAA,QAAQ,EANE,cAAA;AAOVY,UAAAA,YAAY,EAPF,aAAA;AAQVX,UAAAA,gBAAgB,EAAE;AAChBa,YAAAA,UAAU,EAAE;AACVX,cAAAA,OAAO,EAAE;AADC,aADI;AAIhBY,YAAAA,kBAAkB,EAAE;AAClBZ,cAAAA,OAAO,EAAE;AADS;AAJJ;AARR,SA9DO;AA+EnBa,QAAAA,aAAa,EAAE;AACbrB,UAAAA,IAAI,EADS,CAAA;AAEbjC,UAAAA,IAAI,EAFS,IAAA;AAGbsC,UAAAA,QAAQ,EAAE,SAAA,QAAA,CAAA,MAAA,EAAA,IAAA,EAAA;AAAA,gBAAUiB,KAAV,GAAA,IAAA,CAAA,KAAA;AAAA,gBAAyBrD,KAAzB,GAAA,IAAA,CAAA,MAAA;AAAA,mBAAoC,KAAI,CAAJ,kBAAA,CAAA,KAAA,EAApC,KAAoC,CAApC;AAHG,WAAA;AAIbqC,UAAAA,gBAAgB,EAAE;AAChBe,YAAAA,aAAa,EAAE;AACbb,cAAAA,OAAO,EAAE;AADI,aADC;AAIhBe,YAAAA,qBAAqB,EAAE;AACrBf,cAAAA,OAAO,EAAE;AADY;AAJP;AAJL;AA/EI,OAArBX;AA8FD;;;gCAEgB;AAAA,UAAX2B,QAAW,GAAA,KAAA,CAAXA,QAAW;AAAA,UAAA,WAAA,GACuC,KADvC,KAAA;AAAA,UACR7D,QADQ,GAAA,WAAA,CAAA,QAAA;AAAA,UACED,MADF,GAAA,WAAA,CAAA,MAAA;AAAA,UACUE,SADV,GAAA,WAAA,CAAA,SAAA;AAAA,UACqBE,cADrB,GAAA,WAAA,CAAA,cAAA;AAAA,UAAA,WAAA,GAEkC,KAFlC,KAAA;AAAA,UAER2D,QAFQ,GAAA,WAAA,CAAA,QAAA;AAAA,UAEEC,SAFF,GAAA,WAAA,CAAA,SAAA;AAAA,UAEapC,iBAFb,GAAA,WAAA,CAAA,iBAAA;AAIf,UAAMqC,cAAc,GAAG,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,QAAA,EAA4B;AACjDhE,QAAAA,QAAQ,EAAEiE,OAAO,CADgC,QAChC,CADgC;AAEjD9D,QAAAA,cAAc,EAAdA;AAFiD,OAA5B,CAAvB;;AAMA,UAAA,SAAA,EAAe;AACb4D,QAAAA,SAAS,CAATA,gBAAAA,CAA2BpC,iBAAiB,CAAjBA,aAAAA,GAA3BoC,CAAAA;AACAA,QAAAA,SAAS,CAATA,WAAAA,CAAAA,cAAAA;;AACA,YAAA,SAAA,EAAe;AACbA,UAAAA,SAAS,CAATA,WAAAA,CAAAA,CAAAA;AACAA,UAAAA,SAAS,CAATA,WAAAA,CAAsB;AAACG,YAAAA,WAAW,EAAE;AAAd,WAAtBH,EAAAA,IAAAA;AACD;;AACD,YAAA,MAAA,EAAY;AACVA,UAAAA,SAAS,CAATA,WAAAA,CAAAA,CAAAA;AACAA,UAAAA,SAAS,CAATA,WAAAA,CAAsB;AAACG,YAAAA,WAAW,EAAE;AAAd,WAAtBH,EAAAA,IAAAA;AACD;AACF;;AAED,UAAA,QAAA,EAAc;AACZD,QAAAA,QAAQ,CAARA,cAAAA,CAAwBnC,iBAAiB,CAAzCmC,WAAAA;AACAA,QAAAA,QAAQ,CAARA,WAAAA,CAAAA,cAAAA,EAAAA,IAAAA;AACD;AACF;;;gCAEWK,Y,EAAc;AACxB,MAAA,IAAA,CAAA,eAAA,CAAA,iBAAA,CAAA,SAAA,CAAA,EAAA,aAAA,EAAA,IAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAA,YAAA;;AAEA,WAAA,cAAA,CAAA,YAAA;AAHwB,UAKjBC,KALiB,GAKeD,YALf,CAAA,KAAA;AAAA,UAKVE,QALU,GAKeF,YALf,CAAA,QAAA;AAAA,UAKAG,WALA,GAKeH,YALf,CAAA,WAAA;AAMxB,UAAMjC,gBAAgB,GAAG,KAAzB,mBAAyB,EAAzB;AAEA,UAAMqC,gBAAgB,GACpBD,WAAW,CAAXA,iBAAAA,IACAF,KAAK,CAALA,MAAAA,KAAiBC,QAAQ,CADzBC,MAAAA,IAEAF,KAAK,CAALA,QAAAA,KAAmBC,QAAQ,CAH7B,QAAA;;AAKA,UAAA,gBAAA,EAAsB;AACpB,YAAI,KAAA,KAAA,CAAJ,MAAA,EAAuB;AACrB,eAAA,KAAA,CAAA,MAAA,CAAA,OAAA,CAA0B,UAAA,KAAA,EAAK;AAAA,mBAAIG,KAAK,CAAT,QAAS,CAALA,EAAJ;AAA/B,WAAA;AACD;;AAED,aAAA,QAAA,CAAc,KAAA,UAAA,CAAgB,KAAA,OAAA,CAA9B,EAAc,CAAd;AACAtC,QAAAA,gBAAgB,CAAhBA,aAAAA;AACD;AACF;;;0CAE8C;AAAA,UAA/BkC,KAA+B,GAAA,KAAA,CAA/BA,KAA+B;AAAA,UAAxBC,QAAwB,GAAA,KAAA,CAAxBA,QAAwB;AAAA,UAAdC,WAAc,GAAA,KAAA,CAAdA,WAAc;AAC7C,UAAMG,qBAAqB,GACzBH,WAAW,CAAXA,WAAAA,IACCA,WAAW,CAAXA,qBAAAA,KACEA,WAAW,CAAXA,qBAAAA,CAAAA,GAAAA,IAAyCA,WAAW,CAAXA,qBAAAA,CAH9C,UAEGA,CAFH;;AAOA,UAAA,qBAAA,EAA2B;AAAA,YAClB3C,iBADkB,GACG,KADH,KACG,CADH,iBAAA;AAEzB,YAAM+C,OAAO,GAAGN,KAAK,CAALA,IAAAA,CAAAA,UAAAA,IAAhB,EAAA;AACAzC,QAAAA,iBAAiB,CAAjBA,cAAAA,CAAiC;AAC/BgD,UAAAA,IAAI,EAAEP,KAAK,CADoB,IAAA;AAE/BQ,UAAAA,SAAS,EAAER,KAAK,CAFe,UAAA;AAG/BS,UAAAA,cAAc,EAAEH,OAAO,CAHQ,UAAA;AAI/BA,UAAAA,OAAO,EAJwB,OAAA;AAK/BI,UAAAA,WAAW,EAAEV,KAAK,CALa,UAAA;AAM/BW,UAAAA,cAAc,EAAEX,KAAK,CANU,cAAA;AAO/BvC,UAAAA,IAAI,EAAE,KAPyB,iBAOzB,EAPyB;AAQ/BmD,UAAAA,WAAW,EAAEV,WAAW,CAACU;AARM,SAAjCrD;AAWA,aAAA,QAAA,CAAc;AACZD,UAAAA,YAAY,EAAEC,iBAAiB,CADnB,aAAA;AAEZsD,UAAAA,YAAY,EAAEtD,iBAAiB,CAACuD;AAFpB,SAAd;;AAKA,YAAI,CAACZ,WAAW,CAAhB,WAAA,EAA8B;AAG5B,eAAA,mBAAA,GAAA,aAAA;AACD;AACF;AACF;;;+BAEUhD,E,EAAI;AAAA,UAAA,YAAA,GACkB,KADlB,KAAA;AAAA,UACN6D,EADM,GAAA,YAAA,CAAA,EAAA;AAAA,UACFpF,MADE,GAAA,YAAA,CAAA,MAAA;AAAA,UACMC,QADN,GAAA,YAAA,CAAA,QAAA;AAGb,UAAA,QAAA;AACA,UAAA,SAAA;;AAEA,UAAA,MAAA,EAAY;AACV,YAAMoF,OAAO,GAAG,KAAA,UAAA,CAAhB,KAAgB,CAAhB;AACAA,QAAAA,OAAO,CAAPA,OAAAA,CAAAA,mBAAAA,GAAAA,CAAAA;AAEAtB,QAAAA,QAAQ,GAAG,IAAA,KAAA,CAAA,EAAA,EAET,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,OAAA,EAA2B;AACzBqB,UAAAA,EAAE,EAAA,GAAA,MAAA,CAAA,EAAA,EADuB,MACvB,CADuB;AAEzBE,UAAAA,QAAQ,EAFiB,CAAA;AAGzBC,UAAAA,UAAU,EAAE;AACVC,YAAAA,eAAe,EAAE,IAAA,YAAA,CAAiB,CAAA,CAAA,EAAjB,CAAiB,CAAjB;AADP,WAHa;AAMzB1B,UAAAA,QAAQ,EAAE;AACRK,YAAAA,WAAW,EADH,KAAA;AAERsB,YAAAA,YAAY,EAAE;AAFN,WANe;AAUzBC,UAAAA,WAAW,EAVc,CAAA;AAWzBnD,UAAAA,SAAS,EAAE;AAXc,SAA3B,CAFS,CAAXwB;AAgBD;;AACD,UAAA,QAAA,EAAc;AACZC,QAAAA,SAAS,GAAG,IAAA,KAAA,CAAA,EAAA,EAEV,MAAM,CAAN,MAAA,CAAA,EAAA,EAAkB,KAAA,UAAA,CAAlB,MAAkB,CAAlB,EAA2C;AACzCoB,UAAAA,EAAE,EAAA,GAAA,MAAA,CAAA,EAAA,EADuC,OACvC,CADuC;AAEzCO,UAAAA,QAAQ,EAAE,IAAA,QAAA,CAAa;AACrBL,YAAAA,QAAQ,EADa,CAAA;AAErBI,YAAAA,WAAW,EAFU,CAAA;AAGrBH,YAAAA,UAAU,EAAE;AAEVC,cAAAA,eAAe,EAAE;AACflD,gBAAAA,IAAI,EADW,CAAA;AAEf/B,gBAAAA,KAAK,EAAE,IAAA,YAAA,CAAiB,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAjB,CAAiB,CAAjB;AAFQ;AAFP;AAHS,WAAb,CAF+B;AAazCqF,UAAAA,aAAa,EAb4B,CAAA;AAczCC,UAAAA,WAAW,EAAE;AAd4B,SAA3C,CAFU,CAAZ7B;AAoBAA,QAAAA,SAAS,CAATA,QAAAA,CAAAA,iBAAAA,GAAuC;AAAC3B,UAAAA,OAAO,EAAE;AAAV,SAAvC2B;AACD;;AAED,aAAO;AACL8B,QAAAA,MAAM,EAAE,CAAA,SAAA,EAAA,QAAA,EAAA,MAAA,CADH,OACG,CADH;AAEL/B,QAAAA,QAAQ,EAFH,QAAA;AAGLC,QAAAA,SAAS,EAATA;AAHK,OAAP;AAKD;;;qCAEgB+B,S,EAAW;AAAA,UACnBnE,iBADmB,GACE,KADF,KACE,CADF,iBAAA;AAE1BmE,MAAAA,SAAS,CAATA,YAAAA,GAAyBnE,iBAAiB,CAA1CmE,WAAAA;AACAA,MAAAA,SAAS,CAATA,KAAAA,GAAkBnE,iBAAiB,CAAjBA,GAAAA,CAAlBmE,SAAkBnE,CAAlBmE;AACD;;;uCAEkBA,S,EAAW;AAAA,UACrBnE,iBADqB,GACA,KADA,KACA,CADA,iBAAA;AAE5BmE,MAAAA,SAAS,CAATA,YAAAA,GAAyBnE,iBAAiB,CAA1CmE,YAAAA;AACAA,MAAAA,SAAS,CAATA,KAAAA,GAAkBnE,iBAAiB,CAAjBA,GAAAA,CAAlBmE,WAAkBnE,CAAlBmE;AACD;;;yCAEoBA,S,EAAW;AAC9BA,MAAAA,SAAS,CAATA,KAAAA,GAAkB,KAAA,KAAA,CAAA,iBAAA,CAAA,GAAA,CAAlBA,aAAkB,CAAlBA;AACD;;;;EA/R4C7E,K;;SAA1BD,iB;AAkSrBA,iBAAiB,CAAjBA,SAAAA,GAAAA,mBAAAA;AACAA,iBAAiB,CAAjBA,YAAAA,GAAAA,YAAAA","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, gouraudLighting, picking, COORDINATE_SYSTEM} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, hasFeatures, FEATURES} from '@luma.gl/core';\n\n// Polygon geometry generation is managed by the polygon tesselator\nimport PolygonTesselator from './polygon-tesselator';\n\nimport vsTop from './solid-polygon-layer-vertex-top.glsl';\nimport vsSide from './solid-polygon-layer-vertex-side.glsl';\nimport fs from './solid-polygon-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  filled: true,\n  // Whether to extrude\n  extruded: false,\n  // Whether to draw a GL.LINES wireframe of the polygon\n  wireframe: false,\n  _normalize: true,\n\n  // elevation multiplier\n  elevationScale: {type: 'number', min: 0, value: 1},\n\n  // Accessor for polygon geometry\n  getPolygon: {type: 'accessor', value: f => f.polygon},\n  // Accessor for extrusion height\n  getElevation: {type: 'accessor', value: 1000},\n  // Accessor for colors\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  // Optional settings for 'lighting' shader module\n  material: true\n};\n\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\nexport default class SolidPolygonLayer extends Layer {\n  getShaders(vs) {\n    return super.getShaders({\n      vs,\n      fs,\n      defines: {},\n      modules: [project32, gouraudLighting, picking]\n    });\n  }\n\n  initializeState() {\n    const {gl, viewport} = this.context;\n    let {coordinateSystem} = this.props;\n    if (viewport.isGeospatial && coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n      coordinateSystem = COORDINATE_SYSTEM.LNGLAT;\n    }\n\n    this.setState({\n      numInstances: 0,\n      polygonTesselator: new PolygonTesselator({\n        preproject: coordinateSystem === COORDINATE_SYSTEM.LNGLAT,\n        fp64: this.use64bitPositions(),\n        IndexType: !gl || hasFeatures(gl, FEATURES.ELEMENT_INDEX_UINT32) ? Uint32Array : Uint16Array\n      })\n    });\n\n    const attributeManager = this.getAttributeManager();\n    const noAlloc = true;\n\n    attributeManager.remove(['instancePickingColors']);\n\n    /* eslint-disable max-len */\n    attributeManager.add({\n      indices: {size: 1, isIndexed: true, update: this.calculateIndices, noAlloc},\n      positions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPolygon',\n        update: this.calculatePositions,\n        noAlloc,\n        shaderAttributes: {\n          positions: {\n            vertexOffset: 0,\n            divisor: 0\n          },\n          instancePositions: {\n            vertexOffset: 0,\n            divisor: 1\n          },\n          nextPositions: {\n            vertexOffset: 1,\n            divisor: 1\n          }\n        }\n      },\n      vertexValid: {\n        size: 1,\n        divisor: 1,\n        type: GL.UNSIGNED_BYTE,\n        update: this.calculateVertexValid,\n        noAlloc\n      },\n      elevations: {\n        size: 1,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getElevation',\n        shaderAttributes: {\n          elevations: {\n            divisor: 0\n          },\n          instanceElevations: {\n            divisor: 1\n          }\n        }\n      },\n      fillColors: {\n        alias: 'colors',\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getFillColor',\n        defaultValue: DEFAULT_COLOR,\n        shaderAttributes: {\n          fillColors: {\n            divisor: 0\n          },\n          instanceFillColors: {\n            divisor: 1\n          }\n        }\n      },\n      lineColors: {\n        alias: 'colors',\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getLineColor',\n        defaultValue: DEFAULT_COLOR,\n        shaderAttributes: {\n          lineColors: {\n            divisor: 0\n          },\n          instanceLineColors: {\n            divisor: 1\n          }\n        }\n      },\n      pickingColors: {\n        size: 3,\n        type: GL.UNSIGNED_BYTE,\n        accessor: (object, {index, target: value}) => this.encodePickingColor(index, value),\n        shaderAttributes: {\n          pickingColors: {\n            divisor: 0\n          },\n          instancePickingColors: {\n            divisor: 1\n          }\n        }\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  draw({uniforms}) {\n    const {extruded, filled, wireframe, elevationScale} = this.props;\n    const {topModel, sideModel, polygonTesselator} = this.state;\n\n    const renderUniforms = Object.assign({}, uniforms, {\n      extruded: Boolean(extruded),\n      elevationScale\n    });\n\n    // Note: the order is important\n    if (sideModel) {\n      sideModel.setInstanceCount(polygonTesselator.instanceCount - 1);\n      sideModel.setUniforms(renderUniforms);\n      if (wireframe) {\n        sideModel.setDrawMode(GL.LINE_STRIP);\n        sideModel.setUniforms({isWireframe: true}).draw();\n      }\n      if (filled) {\n        sideModel.setDrawMode(GL.TRIANGLE_FAN);\n        sideModel.setUniforms({isWireframe: false}).draw();\n      }\n    }\n\n    if (topModel) {\n      topModel.setVertexCount(polygonTesselator.vertexCount);\n      topModel.setUniforms(renderUniforms).draw();\n    }\n  }\n\n  updateState(updateParams) {\n    super.updateState(updateParams);\n\n    this.updateGeometry(updateParams);\n\n    const {props, oldProps, changeFlags} = updateParams;\n    const attributeManager = this.getAttributeManager();\n\n    const regenerateModels =\n      changeFlags.extensionsChanged ||\n      props.filled !== oldProps.filled ||\n      props.extruded !== oldProps.extruded;\n\n    if (regenerateModels) {\n      if (this.state.models) {\n        this.state.models.forEach(model => model.delete());\n      }\n\n      this.setState(this._getModels(this.context.gl));\n      attributeManager.invalidateAll();\n    }\n  }\n\n  updateGeometry({props, oldProps, changeFlags}) {\n    const geometryConfigChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    // When the geometry config  or the data is changed,\n    // tessellator needs to be invoked\n    if (geometryConfigChanged) {\n      const {polygonTesselator} = this.state;\n      const buffers = props.data.attributes || {};\n      polygonTesselator.updateGeometry({\n        data: props.data,\n        normalize: props._normalize,\n        geometryBuffer: buffers.getPolygon,\n        buffers,\n        getGeometry: props.getPolygon,\n        positionFormat: props.positionFormat,\n        fp64: this.use64bitPositions(),\n        dataChanged: changeFlags.dataChanged\n      });\n\n      this.setState({\n        numInstances: polygonTesselator.instanceCount,\n        startIndices: polygonTesselator.vertexStarts\n      });\n\n      if (!changeFlags.dataChanged) {\n        // Base `layer.updateState` only invalidates all attributes on data change\n        // Cover the rest of the scenarios here\n        this.getAttributeManager().invalidateAll();\n      }\n    }\n  }\n\n  _getModels(gl) {\n    const {id, filled, extruded} = this.props;\n\n    let topModel;\n    let sideModel;\n\n    if (filled) {\n      const shaders = this.getShaders(vsTop);\n      shaders.defines.NON_INSTANCED_MODEL = 1;\n\n      topModel = new Model(\n        gl,\n        Object.assign({}, shaders, {\n          id: `${id}-top`,\n          drawMode: GL.TRIANGLES,\n          attributes: {\n            vertexPositions: new Float32Array([0, 1])\n          },\n          uniforms: {\n            isWireframe: false,\n            isSideVertex: false\n          },\n          vertexCount: 0,\n          isIndexed: true\n        })\n      );\n    }\n    if (extruded) {\n      sideModel = new Model(\n        gl,\n        Object.assign({}, this.getShaders(vsSide), {\n          id: `${id}-side`,\n          geometry: new Geometry({\n            drawMode: GL.LINES,\n            vertexCount: 4,\n            attributes: {\n              // top right - top left - bootom left - bottom right\n              vertexPositions: {\n                size: 2,\n                value: new Float32Array([1, 1, 0, 1, 0, 0, 1, 0])\n              }\n            }\n          }),\n          instanceCount: 0,\n          isInstanced: 1\n        })\n      );\n\n      sideModel.userData.excludeAttributes = {indices: true};\n    }\n\n    return {\n      models: [sideModel, topModel].filter(Boolean),\n      topModel,\n      sideModel\n    };\n  }\n\n  calculateIndices(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.startIndices = polygonTesselator.indexStarts;\n    attribute.value = polygonTesselator.get('indices');\n  }\n\n  calculatePositions(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.startIndices = polygonTesselator.vertexStarts;\n    attribute.value = polygonTesselator.get('positions');\n  }\n\n  calculateVertexValid(attribute) {\n    attribute.value = this.state.polygonTesselator.get('vertexValid');\n  }\n}\n\nSolidPolygonLayer.layerName = 'SolidPolygonLayer';\nSolidPolygonLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}