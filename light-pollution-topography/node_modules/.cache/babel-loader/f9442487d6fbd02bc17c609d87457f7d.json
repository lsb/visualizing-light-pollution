{"ast":null,"code":"import project from '../project/project';\nvar DEFAULT_LIGHT_DIRECTION = new Float32Array([1, 1, 2]);\nvar DEFAULT_MODULE_OPTIONS = {\n  lightDirection: DEFAULT_LIGHT_DIRECTION\n};\n\nfunction getUniforms() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_MODULE_OPTIONS;\n  var uniforms = {};\n\n  if (opts.lightDirection) {\n    uniforms.dirlight_uLightDirection = opts.lightDirection;\n  }\n\n  return uniforms;\n}\n\nvar vs = null;\nvar fs = \"uniform vec3 dirlight_uLightDirection;\\nvec4 dirlight_filterColor(vec4 color) {\\n  vec3 normal = project_getNormal_World();\\n  float d = abs(dot(normalize(normal), normalize(dirlight_uLightDirection)));\\n  return vec4(color.rgb * d, color.a);\\n}\\n\";\nexport default {\n  name: 'dirlight',\n  vs: vs,\n  fs: fs,\n  getUniforms: getUniforms,\n  dependencies: [project]\n};","map":{"version":3,"sources":["../../../../src/modules/dirlight/dirlight.js"],"names":["DEFAULT_LIGHT_DIRECTION","DEFAULT_MODULE_OPTIONS","lightDirection","opts","uniforms","vs","fs","name","getUniforms","dependencies"],"mappings":"AAEA,OAAA,OAAA,MAAA,oBAAA;AAGA,IAAMA,uBAAuB,GAAG,IAAA,YAAA,CAAiB,CAAA,CAAA,EAAA,CAAA,EAAjD,CAAiD,CAAjB,CAAhC;AAEA,IAAMC,sBAAsB,GAAG;AAC7BC,EAAAA,cAAc,EAAEF;AADa,CAA/B;;AAIA,SAAA,WAAA,GAAoD;AAAA,MAA/BG,IAA+B,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAxBF,sBAAwB;AAClD,MAAMG,QAAQ,GAAd,EAAA;;AACA,MAAID,IAAI,CAAR,cAAA,EAAyB;AACvBC,IAAAA,QAAQ,CAARA,wBAAAA,GAAoCD,IAAI,CAAxCC,cAAAA;AACD;;AACD,SAAA,QAAA;AACD;;AAGD,IAAMC,EAAE,GAAR,IAAA;AAEA,IAAMC,EAAE,GAAR,yPAAA;AAaA,eAAe;AACbC,EAAAA,IAAI,EADS,UAAA;AAEbF,EAAAA,EAAE,EAFW,EAAA;AAGbC,EAAAA,EAAE,EAHW,EAAA;AAIbE,EAAAA,WAAW,EAJE,WAAA;AAKbC,EAAAA,YAAY,EAAE,CAAA,OAAA;AALD,CAAf","sourcesContent":["// Cheap lighting - single directional light, single dot product, one uniform\n\nimport project from '../project/project';\n\n/* eslint-disable camelcase */\nconst DEFAULT_LIGHT_DIRECTION = new Float32Array([1, 1, 2]);\n\nconst DEFAULT_MODULE_OPTIONS = {\n  lightDirection: DEFAULT_LIGHT_DIRECTION\n};\n\nfunction getUniforms(opts = DEFAULT_MODULE_OPTIONS) {\n  const uniforms = {};\n  if (opts.lightDirection) {\n    uniforms.dirlight_uLightDirection = opts.lightDirection;\n  }\n  return uniforms;\n}\n\n// TODO - reuse normal from geometry module\nconst vs = null;\n\nconst fs = `\\\nuniform vec3 dirlight_uLightDirection;\n\n/*\n * Returns color attenuated by angle from light source\n */\nvec4 dirlight_filterColor(vec4 color) {\n  vec3 normal = project_getNormal_World();\n  float d = abs(dot(normalize(normal), normalize(dirlight_uLightDirection)));\n  return vec4(color.rgb * d, color.a);\n}\n`;\n\nexport default {\n  name: 'dirlight',\n  vs,\n  fs,\n  getUniforms,\n  dependencies: [project]\n};\n"]},"metadata":{},"sourceType":"module"}