{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { parseGLTF } from './lib/parse-gltf';\nvar VERSION = typeof \"2.1.2\" !== 'undefined' ? \"2.1.2\" : 'latest';\nvar GLTFLoader = {\n  id: 'gltf',\n  name: 'glTF',\n  version: VERSION,\n  extensions: ['gltf', 'glb'],\n  mimeType: 'model/gltf+json',\n  text: true,\n  binary: true,\n  test: 'glTF',\n  parse: parse,\n  options: {\n    gltf: {\n      loadBuffers: true,\n      loadImages: true,\n      decompressMeshes: true,\n      postProcess: true\n    },\n    uri: '',\n    log: console\n  }\n};\nexport default GLTFLoader;\nexport function parse(_x) {\n  return _parse.apply(this, arguments);\n}\n\nfunction _parse() {\n  _parse = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(arrayBuffer) {\n    var options,\n        context,\n        _options,\n        _options$byteOffset,\n        byteOffset,\n        gltf,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            context = _args.length > 2 ? _args[2] : undefined;\n            options = _objectSpread({}, GLTFLoader.options, {}, options);\n            options.gltf = _objectSpread({}, GLTFLoader.options.gltf, {}, options.gltf);\n            addDeprecatedGLTFOptions(options);\n            _options = options, _options$byteOffset = _options.byteOffset, byteOffset = _options$byteOffset === void 0 ? 0 : _options$byteOffset;\n            gltf = {};\n            _context.next = 9;\n            return parseGLTF(gltf, arrayBuffer, byteOffset, options, context);\n\n          case 9:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parse.apply(this, arguments);\n}\n\nfunction addDeprecatedGLTFOptions(options) {\n  if ('fetchImages' in options) {\n    options.gltf.loadImages = options.fetchImages;\n  }\n\n  if ('createImages' in options) {\n    options.gltf.loadImages = options.createImages;\n  }\n\n  if ('fetchLinkedResources' in options) {\n    options.gltf.fetchBuffers = options.fetchLinkedResources;\n  }\n\n  if ('decompress' in options) {\n    options.gltf.decompressMeshes = options.decompress;\n  }\n\n  if ('decompress' in options.gltf) {\n    options.gltf.decompressMeshes = options.gltf.decompress;\n  }\n\n  if ('postProcess' in options) {\n    options.gltf.postProcess = options.postProcess;\n  }\n}","map":{"version":3,"sources":["../../src/gltf-loader.js"],"names":["VERSION","GLTFLoader","id","name","version","extensions","mimeType","text","binary","test","parse","options","gltf","loadBuffers","loadImages","decompressMeshes","postProcess","uri","log","console","context","addDeprecatedGLTFOptions","byteOffset","parseGLTF"],"mappings":"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","sourcesContent":["// __VERSION__ is injected by babel-plugin-version-inline\n/* global __VERSION__ */\n\nimport {parseGLTF} from './lib/parse-gltf';\n\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n\nconst GLTFLoader = {\n  id: 'gltf',\n  name: 'glTF',\n  version: VERSION,\n  extensions: ['gltf', 'glb'],\n  // mimeType: 'model/gltf-binary',\n  mimeType: 'model/gltf+json',\n\n  text: true,\n  binary: true,\n  test: 'glTF',\n  parse,\n\n  options: {\n    gltf: {\n      loadBuffers: true, // Fetch any linked .BIN buffers, decode base64\n      loadImages: true, // Create image objects\n      decompressMeshes: true, // Decompress Draco encoded meshes\n      postProcess: true // Postprocess glTF and return json structure directly\n    },\n\n    // common?\n    uri: '', // base URI\n    log: console // eslint-disable-line\n  }\n};\n\nexport default GLTFLoader;\n\nexport async function parse(arrayBuffer, options = {}, context) {\n  // Apps can call the parse method directly, we so apply default options here\n  options = {...GLTFLoader.options, ...options};\n  options.gltf = {...GLTFLoader.options.gltf, ...options.gltf};\n  addDeprecatedGLTFOptions(options);\n\n  const {byteOffset = 0} = options;\n  const gltf = {};\n  return await parseGLTF(gltf, arrayBuffer, byteOffset, options, context);\n}\n\n// DEPRECATED\n\nfunction addDeprecatedGLTFOptions(options) {\n  if ('fetchImages' in options) {\n    options.gltf.loadImages = options.fetchImages;\n  }\n  if ('createImages' in options) {\n    options.gltf.loadImages = options.createImages;\n  }\n  if ('fetchLinkedResources' in options) {\n    options.gltf.fetchBuffers = options.fetchLinkedResources;\n  }\n  if ('decompress' in options) {\n    options.gltf.decompressMeshes = options.decompress;\n  }\n  if ('decompress' in options.gltf) {\n    options.gltf.decompressMeshes = options.gltf.decompress;\n  }\n  if ('postProcess' in options) {\n    options.gltf.postProcess = options.postProcess;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}