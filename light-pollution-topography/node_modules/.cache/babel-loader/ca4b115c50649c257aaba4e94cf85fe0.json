{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { decomposeCompositeGLType } from '../webgl-utils/attribute-utils';\nimport { assert } from '../utils';\nvar ERR_ARGUMENT = 'UniformBufferLayout illegal argument';\nvar GL_FLOAT = 0x1406;\nvar GL_INT = 0x1404;\nvar GL_UNSIGNED_INT = 0x1405;\n\nvar UniformBufferLayout = function () {\n  function UniformBufferLayout(layout) {\n    var _this$typedArray;\n\n    _classCallCheck(this, UniformBufferLayout);\n\n    this.layout = {};\n    this.size = 0;\n\n    for (var key in layout) {\n      this._addUniform(key, layout[key]);\n    }\n\n    this.size += (4 - this.size % 4) % 4;\n    var data = new Float32Array(this.size);\n    this.typedArray = (_this$typedArray = {}, _defineProperty(_this$typedArray, GL_FLOAT, data), _defineProperty(_this$typedArray, GL_INT, new Int32Array(data.buffer)), _defineProperty(_this$typedArray, GL_UNSIGNED_INT, new Uint32Array(data.buffer)), _this$typedArray);\n  }\n\n  _createClass(UniformBufferLayout, [{\n    key: \"getBytes\",\n    value: function getBytes() {\n      return this.size * 4;\n    }\n  }, {\n    key: \"getData\",\n    value: function getData() {\n      return this.typedArray[GL_FLOAT];\n    }\n  }, {\n    key: \"getSubData\",\n    value: function getSubData(index) {\n      var data;\n      var offset;\n\n      if (index === undefined) {\n        data = this.data;\n        offset = 0;\n      } else {\n        var begin = this.offsets[index];\n        var end = begin + this.sizes[index];\n        data = this.data.subarray(begin, end);\n        offset = begin * 4;\n      }\n\n      return {\n        data: data,\n        offset: offset\n      };\n    }\n  }, {\n    key: \"setUniforms\",\n    value: function setUniforms(values) {\n      for (var key in values) {\n        this._setValue(key, values[key]);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"_setValue\",\n    value: function _setValue(key, value) {\n      var layout = this.layout[key];\n      assert(layout, 'UniformLayoutStd140 illegal argument');\n      var typedArray = this.typedArray[layout.type];\n\n      if (layout.size === 1) {\n        typedArray[layout.offset] = value;\n      } else {\n        typedArray.set(value, layout.offset);\n      }\n    }\n  }, {\n    key: \"_addUniform\",\n    value: function _addUniform(key, uniformType) {\n      var typeAndComponents = decomposeCompositeGLType(uniformType);\n      assert(typeAndComponents, ERR_ARGUMENT);\n      var type = typeAndComponents.type,\n          count = typeAndComponents.components;\n      this.size = this._alignTo(this.size, count);\n      var offset = this.size;\n      this.size += count;\n      this.layout[key] = {\n        type: type,\n        size: count,\n        offset: offset\n      };\n    }\n  }, {\n    key: \"_alignTo\",\n    value: function _alignTo(size, count) {\n      switch (count) {\n        case 1:\n          return size;\n\n        case 2:\n          return size + size % 2;\n\n        default:\n          return size + (4 - size % 4) % 4;\n      }\n    }\n  }]);\n\n  return UniformBufferLayout;\n}();\n\nexport { UniformBufferLayout as default };","map":{"version":3,"sources":["../../../src/classes/uniform-buffer-layout.js"],"names":["ERR_ARGUMENT","GL_FLOAT","GL_INT","GL_UNSIGNED_INT","UniformBufferLayout","layout","data","index","offset","begin","end","values","key","value","assert","typedArray","uniformType","typeAndComponents","decomposeCompositeGLType","type","count","size"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase */\nimport {decomposeCompositeGLType} from '../webgl-utils/attribute-utils';\nimport {assert} from '../utils';\n\nconst ERR_ARGUMENT = 'UniformBufferLayout illegal argument';\n\n// Local constants - these will \"collapse\" during minification\nconst GL_FLOAT = 0x1406;\nconst GL_INT = 0x1404;\nconst GL_UNSIGNED_INT = 0x1405;\n\n// Std140 layout for uniforms\nexport default class UniformBufferLayout {\n  constructor(layout) {\n    this.layout = {};\n    this.size = 0;\n\n    // Add layout (type, size and offset) definitions for each uniform in the layout\n    for (const key in layout) {\n      this._addUniform(key, layout[key]);\n    }\n\n    this.size += (4 - (this.size % 4)) % 4;\n\n    // Allocate three typed arrays pointing at same memory\n    const data = new Float32Array(this.size);\n    this.typedArray = {\n      [GL_FLOAT]: data,\n      [GL_INT]: new Int32Array(data.buffer),\n      [GL_UNSIGNED_INT]: new Uint32Array(data.buffer)\n    };\n  }\n\n  // Get number of bytes needed for buffer allocation\n  getBytes() {\n    return this.size * 4;\n  }\n\n  // Get the current data as Float32Array, for bufferSubData\n  getData() {\n    return this.typedArray[GL_FLOAT];\n  }\n\n  // Get offset and data for one object (for bufferSubData)\n  getSubData(index) {\n    let data;\n    let offset;\n    if (index === undefined) {\n      data = this.data;\n      offset = 0;\n    } else {\n      const begin = this.offsets[index];\n      const end = begin + this.sizes[index];\n      data = this.data.subarray(begin, end);\n      offset = begin * 4;\n    }\n    return {data, offset};\n  }\n\n  // Set a map of values\n  setUniforms(values) {\n    for (const key in values) {\n      this._setValue(key, values[key]);\n    }\n    return this;\n  }\n\n  _setValue(key, value) {\n    const layout = this.layout[key];\n    assert(layout, 'UniformLayoutStd140 illegal argument');\n    const typedArray = this.typedArray[layout.type];\n    if (layout.size === 1) {\n      // single value -> just set it\n      typedArray[layout.offset] = value;\n    } else {\n      // vector/matrix -> copy the supplied (typed) array, starting from offset\n      typedArray.set(value, layout.offset);\n    }\n  }\n\n  _addUniform(key, uniformType) {\n    const typeAndComponents = decomposeCompositeGLType(uniformType);\n    assert(typeAndComponents, ERR_ARGUMENT);\n    const {type, components: count} = typeAndComponents;\n\n    // First, align (bump) current offset to an even multiple of current object (1, 2, 4)\n    this.size = this._alignTo(this.size, count);\n    // Use the aligned size as the offset of the current uniform.\n    const offset = this.size;\n    // Then, add our object's padded size ((1, 2, multiple of 4) to the current offset\n    this.size += count;\n\n    this.layout[key] = {type, size: count, offset};\n  }\n\n  // Align offset to 1, 2 or 4 elements (4, 8 or 16 bytes)\n  _alignTo(size, count) {\n    switch (count) {\n      case 1:\n        return size; // Pad upwards to even multiple of 2\n      case 2:\n        return size + (size % 2); // Pad upwards to even multiple of 2\n      default:\n        return size + ((4 - (size % 4)) % 4); // Pad upwards to even multiple of 4\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}