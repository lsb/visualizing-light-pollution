{"ast":null,"code":"var _jsxFileName = \"/home/lsb/wikidatageo/dark-sky-vacations/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport DeckGL from '@deck.gl/react';\nimport { TerrainLayer, TileLayer } from '@deck.gl/geo-layers';\nimport { BitmapLayer, ScatterplotLayer, TextLayer } from '@deck.gl/layers';\nimport { Table } from 'apache-arrow';\n\nconst logAndReturn = x => {\n  console.log(x);\n  return x;\n};\n\nfunction getURLFromTemplate(template, properties) {\n  if (!template || !template.length) {\n    return null;\n  }\n\n  if (Array.isArray(template)) {\n    const index = Math.abs(properties.x + properties.y) % template.length;\n    template = template[index];\n  }\n\n  return template.replace(/\\{ *([\\w_-]+) *\\}/g, (_, property) => properties[property]);\n} // where can i import this from lol\n\n\nclass SingleBatchArrowTileLayer extends TileLayer {\n  async getTileData(tile) {\n    const {\n      fetch,\n      data\n    } = this.props;\n    tile.url = getURLFromTemplate(data, tile);\n\n    if (!tile.url) {\n      return null;\n    }\n\n    const table = await Table.from(fetch(tile.url, {\n      layer: this\n    }));\n    console.log(table);\n    return table;\n  }\n\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      initialViewState: {\n        longitude: -122.4,\n        latitude: 37.7,\n        zoom: 5,\n        pitch: 30,\n        bearing: 0,\n        maxZoom: 8\n      }\n    };\n  }\n\n  render() {\n    const light = new TileLayer({\n      data: './tiles/light-{z}-{x}-{y}.png',\n      tileSize: 1024,\n      maxZoom: 6,\n      wrapLongitude: true,\n      renderSubLayers: props => new BitmapLayer(logAndReturn(props), {\n        data: null,\n        image: props.data,\n        bounds: [props.tile.bbox.west, props.tile.bbox.south, props.tile.bbox.east, props.tile.bbox.north]\n      })\n    });\n    const lumaTopo = new TerrainLayer({\n      elevationDecoder: {\n        rScaler: 500,\n        gScaler: 0,\n        bScaler: 0,\n        offset: 0\n      },\n      meshMaxError: 1,\n      elevationData: './tiles/light-{z}-{x}-{y}.png',\n      maxZoom: 8,\n      wrapLongitude: true,\n      texture: './tiles/texture-{z}-{x}-{y}.png',\n      material: {\n        ambient: 0.2,\n        diffuse: 1,\n        shininess: 128,\n        specularColor: [255, 192, 64]\n      }\n    });\n    const dataTilesPointText = new SingleBatchArrowTileLayer({\n      data: './data-tiles/geo-tile-{z}-{x}-{y}-light-0.arrow',\n      maxZoom: 6,\n      wrapLongitude: true,\n      renderSubLayers: ({\n        tile: {\n          bbox: {\n            north,\n            south,\n            east,\n            west\n          }\n        },\n        data\n      }) => {\n        console.log(data);\n        const lat = data.getColumn('gt_lat').toArray();\n        const lon = data.getColumn('gt_lon').toArray();\n        const points = new ScatterplotLayer({\n          id: `points-{north}-{south}-{east}-{west}`,\n          data: {\n            length: lat.length\n          },\n          pickable: true,\n          onHover: ({\n            index,\n            picked\n          }) => this.setState({\n            pointpick: picked ? data.get(index) : null\n          }),\n          getRadius: 10,\n          wrapLongitude: true,\n          getPosition: (object, {\n            index,\n            data,\n            target\n          }) => [lon[index], lat[index]],\n          getFillColor: [100, 100, 150],\n          getLineColor: [0, 0, 0]\n        });\n      }\n    });\n    const textPick = !this.state.pointpick ? null : new TextLayer({\n      id: `title-${this.state.pointpick.item_id}`,\n      data: [this.state.pointpick.site_page],\n      pickable: false,\n      characterSet: this.state.pointpick.site_page.split(''),\n      backgroundColor: [255, 255, 255],\n      getText: d => `   ${d}   `,\n      getSize: 20,\n      sizeUnits: 'pixels',\n      wrapLongitude: true,\n      getPosition: [this.state.pointpick.gt_lon, this.state.pointpick.gt_lat]\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(DeckGL, {\n      initialViewState: this.state.initialViewState,\n      controller: true,\n      layers: [lumaTopo, dataTilesPointText, textPick],\n      id: \"maincanvas\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"colophon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }\n    }, \"\\xA9 Lee Butterman 2020. Made in Oakland, California.\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/lsb/wikidatageo/dark-sky-vacations/src/App.js"],"names":["React","DeckGL","TerrainLayer","TileLayer","BitmapLayer","ScatterplotLayer","TextLayer","Table","logAndReturn","x","console","log","getURLFromTemplate","template","properties","length","Array","isArray","index","Math","abs","y","replace","_","property","SingleBatchArrowTileLayer","getTileData","tile","fetch","data","props","url","table","from","layer","App","Component","constructor","state","initialViewState","longitude","latitude","zoom","pitch","bearing","maxZoom","render","light","tileSize","wrapLongitude","renderSubLayers","image","bounds","bbox","west","south","east","north","lumaTopo","elevationDecoder","rScaler","gScaler","bScaler","offset","meshMaxError","elevationData","texture","material","ambient","diffuse","shininess","specularColor","dataTilesPointText","lat","getColumn","toArray","lon","points","id","pickable","onHover","picked","setState","pointpick","get","getRadius","getPosition","object","target","getFillColor","getLineColor","textPick","item_id","site_page","characterSet","split","backgroundColor","getText","d","getSize","sizeUnits","gt_lon","gt_lat"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AACA,SAASC,YAAT,EAAuBC,SAAvB,QAAwC,qBAAxC;AACA,SAASC,WAAT,EAAsBC,gBAAtB,EAAwCC,SAAxC,QAAyD,iBAAzD;AACA,SAASC,KAAT,QAAsB,cAAtB;;AAEA,MAAMC,YAAY,GAAIC,CAAD,IAAO;AAAEC,EAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AAAgB,SAAOA,CAAP;AAAU,CAAxD;;AAEA,SAASG,kBAAT,CAA4BC,QAA5B,EAAsCC,UAAtC,EAAkD;AAChD,MAAI,CAACD,QAAD,IAAa,CAACA,QAAQ,CAACE,MAA3B,EAAmC;AACjC,WAAO,IAAP;AACD;;AACD,MAAIC,KAAK,CAACC,OAAN,CAAcJ,QAAd,CAAJ,EAA6B;AAC3B,UAAMK,KAAK,GAAGC,IAAI,CAACC,GAAL,CAASN,UAAU,CAACL,CAAX,GAAeK,UAAU,CAACO,CAAnC,IAAwCR,QAAQ,CAACE,MAA/D;AACAF,IAAAA,QAAQ,GAAGA,QAAQ,CAACK,KAAD,CAAnB;AACD;;AACD,SAAOL,QAAQ,CAACS,OAAT,CAAiB,oBAAjB,EAAuC,CAACC,CAAD,EAAIC,QAAJ,KAAiBV,UAAU,CAACU,QAAD,CAAlE,CAAP;AACD,C,CAAC;;;AAEF,MAAMC,yBAAN,SAAwCtB,SAAxC,CAAkD;AAChD,QAAMuB,WAAN,CAAkBC,IAAlB,EAAwB;AACtB,UAAM;AAACC,MAAAA,KAAD;AAAQC,MAAAA;AAAR,QAAgB,KAAKC,KAA3B;AACAH,IAAAA,IAAI,CAACI,GAAL,GAAWnB,kBAAkB,CAACiB,IAAD,EAAOF,IAAP,CAA7B;;AACA,QAAG,CAACA,IAAI,CAACI,GAAT,EAAc;AAAE,aAAO,IAAP;AAAa;;AAC7B,UAAMC,KAAK,GAAG,MAAMzB,KAAK,CAAC0B,IAAN,CAAWL,KAAK,CAACD,IAAI,CAACI,GAAN,EAAW;AAACG,MAAAA,KAAK,EAAE;AAAR,KAAX,CAAhB,CAApB;AACAxB,IAAAA,OAAO,CAACC,GAAR,CAAYqB,KAAZ;AACA,WAAOA,KAAP;AACD;;AAR+C;;AAWlD,MAAMG,GAAN,SAAkBnC,KAAK,CAACoC,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,CAACP,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKQ,KAAL,GAAa;AAACC,MAAAA,gBAAgB,EAAE;AAACC,QAAAA,SAAS,EAAE,CAAC,KAAb;AAAoBC,QAAAA,QAAQ,EAAE,IAA9B;AAAoCC,QAAAA,IAAI,EAAE,CAA1C;AAA6CC,QAAAA,KAAK,EAAE,EAApD;AAAwDC,QAAAA,OAAO,EAAE,CAAjE;AAAoEC,QAAAA,OAAO,EAAE;AAA7E;AAAnB,KAAb;AACD;;AACDC,EAAAA,MAAM,GAAG;AACP,UAAMC,KAAK,GAAG,IAAI5C,SAAJ,CAAc;AAC1B0B,MAAAA,IAAI,EAAE,+BADoB;AAE1BmB,MAAAA,QAAQ,EAAE,IAFgB;AAG1BH,MAAAA,OAAO,EAAE,CAHiB;AAI1BI,MAAAA,aAAa,EAAE,IAJW;AAK1BC,MAAAA,eAAe,EAAEpB,KAAK,IACpB,IAAI1B,WAAJ,CAAgBI,YAAY,CAACsB,KAAD,CAA5B,EAAqC;AACnCD,QAAAA,IAAI,EAAE,IAD6B;AAEnCsB,QAAAA,KAAK,EAAErB,KAAK,CAACD,IAFsB;AAGnCuB,QAAAA,MAAM,EAAE,CAACtB,KAAK,CAACH,IAAN,CAAW0B,IAAX,CAAgBC,IAAjB,EAAuBxB,KAAK,CAACH,IAAN,CAAW0B,IAAX,CAAgBE,KAAvC,EAA8CzB,KAAK,CAACH,IAAN,CAAW0B,IAAX,CAAgBG,IAA9D,EAAoE1B,KAAK,CAACH,IAAN,CAAW0B,IAAX,CAAgBI,KAApF;AAH2B,OAArC;AANwB,KAAd,CAAd;AAaA,UAAMC,QAAQ,GAAG,IAAIxD,YAAJ,CAAiB;AAChCyD,MAAAA,gBAAgB,EAAE;AAChBC,QAAAA,OAAO,EAAE,GADO;AAEhBC,QAAAA,OAAO,EAAE,CAFO;AAGhBC,QAAAA,OAAO,EAAE,CAHO;AAIhBC,QAAAA,MAAM,EAAE;AAJQ,OADc;AAOhCC,MAAAA,YAAY,EAAE,CAPkB;AAQhCC,MAAAA,aAAa,EAAE,+BARiB;AAShCpB,MAAAA,OAAO,EAAE,CATuB;AAUhCI,MAAAA,aAAa,EAAE,IAViB;AAWhCiB,MAAAA,OAAO,EAAE,iCAXuB;AAYhCC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,OAAO,EAAE,GADD;AAERC,QAAAA,OAAO,EAAE,CAFD;AAGRC,QAAAA,SAAS,EAAE,GAHH;AAIRC,QAAAA,aAAa,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,EAAX;AAJP;AAZsB,KAAjB,CAAjB;AAmBA,UAAMC,kBAAkB,GAAG,IAAI/C,yBAAJ,CAA8B;AACvDI,MAAAA,IAAI,EAAE,iDADiD;AAEvDgB,MAAAA,OAAO,EAAE,CAF8C;AAGvDI,MAAAA,aAAa,EAAE,IAHwC;AAIvDC,MAAAA,eAAe,EAAE,CAAC;AAACvB,QAAAA,IAAI,EAAE;AAAC0B,UAAAA,IAAI,EAAE;AAACI,YAAAA,KAAD;AAAQF,YAAAA,KAAR;AAAeC,YAAAA,IAAf;AAAqBF,YAAAA;AAArB;AAAP,SAAP;AAA2CzB,QAAAA;AAA3C,OAAD,KAAsD;AACrEnB,QAAAA,OAAO,CAACC,GAAR,CAAYkB,IAAZ;AACA,cAAM4C,GAAG,GAAG5C,IAAI,CAAC6C,SAAL,CAAe,QAAf,EAAyBC,OAAzB,EAAZ;AACA,cAAMC,GAAG,GAAG/C,IAAI,CAAC6C,SAAL,CAAe,QAAf,EAAyBC,OAAzB,EAAZ;AACA,cAAME,MAAM,GAAG,IAAIxE,gBAAJ,CAAqB;AAClCyE,UAAAA,EAAE,EAAG,sCAD6B;AAElCjD,UAAAA,IAAI,EAAE;AAACd,YAAAA,MAAM,EAAE0D,GAAG,CAAC1D;AAAb,WAF4B;AAGlCgE,UAAAA,QAAQ,EAAE,IAHwB;AAIlCC,UAAAA,OAAO,EAAE,CAAC;AAAC9D,YAAAA,KAAD;AAAQ+D,YAAAA;AAAR,WAAD,KAAqB,KAAKC,QAAL,CAAc;AAACC,YAAAA,SAAS,EAAEF,MAAM,GAAGpD,IAAI,CAACuD,GAAL,CAASlE,KAAT,CAAH,GAAqB;AAAvC,WAAd,CAJI;AAKlCmE,UAAAA,SAAS,EAAE,EALuB;AAMlCpC,UAAAA,aAAa,EAAE,IANmB;AAOlCqC,UAAAA,WAAW,EAAE,CAACC,MAAD,EAAS;AAACrE,YAAAA,KAAD;AAAQW,YAAAA,IAAR;AAAc2D,YAAAA;AAAd,WAAT,KAAmC,CAACZ,GAAG,CAAC1D,KAAD,CAAJ,EAAauD,GAAG,CAACvD,KAAD,CAAhB,CAPd;AAQlCuE,UAAAA,YAAY,EAAE,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,CARoB;AASlCC,UAAAA,YAAY,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL;AAToB,SAArB,CAAf;AAWD;AAnBsD,KAA9B,CAA3B;AAqBA,UAAMC,QAAQ,GAAG,CAAC,KAAKrD,KAAL,CAAW6C,SAAZ,GAAwB,IAAxB,GAA+B,IAAI7E,SAAJ,CAAc;AAC5DwE,MAAAA,EAAE,EAAG,SAAQ,KAAKxC,KAAL,CAAW6C,SAAX,CAAqBS,OAAQ,EADkB;AAE5D/D,MAAAA,IAAI,EAAE,CAAC,KAAKS,KAAL,CAAW6C,SAAX,CAAqBU,SAAtB,CAFsD;AAG5Dd,MAAAA,QAAQ,EAAE,KAHkD;AAI5De,MAAAA,YAAY,EAAE,KAAKxD,KAAL,CAAW6C,SAAX,CAAqBU,SAArB,CAA+BE,KAA/B,CAAqC,EAArC,CAJ8C;AAK5DC,MAAAA,eAAe,EAAE,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,CAL2C;AAM5DC,MAAAA,OAAO,EAAGC,CAAD,IAAQ,MAAKA,CAAE,KANoC;AAO5DC,MAAAA,OAAO,EAAE,EAPmD;AAQ5DC,MAAAA,SAAS,EAAE,QARiD;AAS5DnD,MAAAA,aAAa,EAAE,IAT6C;AAU5DqC,MAAAA,WAAW,EAAE,CAAC,KAAKhD,KAAL,CAAW6C,SAAX,CAAqBkB,MAAtB,EAA8B,KAAK/D,KAAL,CAAW6C,SAAX,CAAqBmB,MAAnD;AAV+C,KAAd,CAAhD;AAYA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AAAQ,MAAA,gBAAgB,EAAE,KAAKhE,KAAL,CAAWC,gBAArC;AAAuD,MAAA,UAAU,EAAE,IAAnE;AAAyE,MAAA,MAAM,EAAE,CAACmB,QAAD,EAAWc,kBAAX,EAA+BmB,QAA/B,CAAjF;AAA2H,MAAA,EAAE,EAAE,YAA/H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,eAIE;AAAK,MAAA,EAAE,EAAC,UAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DAJF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,CADF;AAWD;;AAlF+B;;AAqFlC,eAAexD,GAAf","sourcesContent":["import React from 'react';\nimport './App.css';\nimport DeckGL from '@deck.gl/react';\nimport { TerrainLayer, TileLayer } from '@deck.gl/geo-layers';\nimport { BitmapLayer, ScatterplotLayer, TextLayer } from '@deck.gl/layers';\nimport { Table } from 'apache-arrow';\n\nconst logAndReturn = (x) => { console.log(x); return x };\n\nfunction getURLFromTemplate(template, properties) {\n  if (!template || !template.length) {\n    return null;\n  }\n  if (Array.isArray(template)) {\n    const index = Math.abs(properties.x + properties.y) % template.length;\n    template = template[index];\n  }\n  return template.replace(/\\{ *([\\w_-]+) *\\}/g, (_, property) => properties[property]);\n} // where can i import this from lol\n\nclass SingleBatchArrowTileLayer extends TileLayer {\n  async getTileData(tile) {\n    const {fetch, data} = this.props;\n    tile.url = getURLFromTemplate(data, tile);\n    if(!tile.url) { return null }\n    const table = await Table.from(fetch(tile.url, {layer: this}));\n    console.log(table);\n    return table;\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {initialViewState: {longitude: -122.4, latitude: 37.7, zoom: 5, pitch: 30, bearing: 0, maxZoom: 8}}\n  }\n  render() {\n    const light = new TileLayer({\n      data: './tiles/light-{z}-{x}-{y}.png',\n      tileSize: 1024,\n      maxZoom: 6,\n      wrapLongitude: true,\n      renderSubLayers: props => (\n        new BitmapLayer(logAndReturn(props), {\n          data: null,\n          image: props.data,\n          bounds: [props.tile.bbox.west, props.tile.bbox.south, props.tile.bbox.east, props.tile.bbox.north],\n        })\n      )\n    })\n    const lumaTopo = new TerrainLayer({\n      elevationDecoder: {\n        rScaler: 500,\n        gScaler: 0,\n        bScaler: 0,\n        offset: 0,\n      },\n      meshMaxError: 1,\n      elevationData: './tiles/light-{z}-{x}-{y}.png',\n      maxZoom: 8,\n      wrapLongitude: true,\n      texture: './tiles/texture-{z}-{x}-{y}.png',\n      material: {\n        ambient: 0.2,\n        diffuse: 1,\n        shininess: 128,\n        specularColor: [255, 192, 64]\n      }\n    });\n    const dataTilesPointText = new SingleBatchArrowTileLayer({\n      data: './data-tiles/geo-tile-{z}-{x}-{y}-light-0.arrow',\n      maxZoom: 6,\n      wrapLongitude: true,\n      renderSubLayers: ({tile: {bbox: {north, south, east, west}}, data}) => {\n        console.log(data);\n        const lat = data.getColumn('gt_lat').toArray();\n        const lon = data.getColumn('gt_lon').toArray();\n        const points = new ScatterplotLayer({\n          id: `points-{north}-{south}-{east}-{west}`,\n          data: {length: lat.length},\n          pickable: true,\n          onHover: ({index, picked}) => this.setState({pointpick: picked ? data.get(index) : null}),\n          getRadius: 10,\n          wrapLongitude: true,\n          getPosition: (object, {index, data, target}) => [lon[index], lat[index]],\n          getFillColor: [100,100,150],\n          getLineColor: [0,0,0],  \n        });\n      }\n    });\n    const textPick = !this.state.pointpick ? null : new TextLayer({\n      id: `title-${this.state.pointpick.item_id}`,\n      data: [this.state.pointpick.site_page],\n      pickable: false,\n      characterSet: this.state.pointpick.site_page.split(''),\n      backgroundColor: [255,255,255],\n      getText: (d) => `   ${d}   `,\n      getSize: 20,\n      sizeUnits: 'pixels',\n      wrapLongitude: true,\n      getPosition: [this.state.pointpick.gt_lon, this.state.pointpick.gt_lat],\n    });\n    return (\n      <div>\n        <div>\n          <DeckGL initialViewState={this.state.initialViewState} controller={true} layers={[lumaTopo, dataTilesPointText, textPick]} id={\"maincanvas\"} />\n        </div>\n        <div id=\"colophon\">© Lee Butterman 2020. Made in Oakland, California.</div>\n        <div>\n          \n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}