{"ast":null,"code":"var _jsxFileName = \"/home/lsb/wikidatageo/dark-sky-vacations/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport DeckGL from '@deck.gl/react';\nimport { TerrainLayer, TileLayer } from '@deck.gl/geo-layers';\nimport { BitmapLayer, ScatterplotLayer, TextLayer } from '@deck.gl/layers';\nimport { Table } from 'apache-arrow';\n\nconst logAndReturn = x => {\n  console.log(x);\n  return x;\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      initialViewState: {\n        longitude: -122.4,\n        latitude: 37.7,\n        zoom: 5,\n        pitch: 30,\n        bearing: 0,\n        maxZoom: 16\n      }\n    };\n  }\n\n  render() {\n    const light = new TileLayer({\n      data: './tiles/texture-{z}-{x}-{y}.png',\n      id: 'light',\n      tileSize: 256,\n      maxZoom: 8,\n      wrapLongitude: true,\n      pickable: true,\n      onHover: h => console.log({\n        lightpicking: h\n      }),\n      renderSubLayers: props => new BitmapLayer(props, {\n        data: null,\n        image: props.data,\n        bounds: [props.tile.bbox.west, props.tile.bbox.south, props.tile.bbox.east, props.tile.bbox.north]\n      })\n    });\n    const lumaTopo = new TerrainLayer({\n      elevationDecoder: {\n        rScaler: 1024,\n        gScaler: 0,\n        bScaler: 0,\n        offset: 0\n      },\n      meshMaxError: 1,\n      elevationData: './tiles/light-{z}-{x}-{y}.png',\n      maxZoom: 8,\n      wrapLongitude: true,\n      texture: './tiles/texture-{z}-{x}-{y}.png',\n      material: {\n        ambient: 0.2,\n        diffuse: 1,\n        shininess: 128,\n        specularColor: [255, 192, 64]\n      }\n    });\n    const dTPTSLP = new TileLayer({\n      data: './data-tiles/geo-tile-{z}-{x}-{y}-light-0.arrow',\n      id: 'geo-tile',\n      maxZoom: 6,\n      wrapLongitude: true,\n      pickable: true,\n      getTileData: ({\n        url\n      }) => fetch(url).then(data => Table.from(data)),\n      onHover: ({\n        index,\n        picked,\n        sourceLayer: {\n          props: {\n            data,\n            onHover\n          }\n        }\n      }) => onHover({\n        data,\n        index,\n        picked\n      }),\n      renderSubLayers: ({\n        tile: {\n          bbox: {\n            north,\n            south,\n            east,\n            west\n          }\n        },\n        data\n      }) => [new ScatterplotLayer({\n        id: `points-${north}-${south}-${east}-${west}`,\n        data,\n        pickable: true,\n        onHover: ({\n          data,\n          index,\n          picked\n        }) => this.setState(logAndReturn({\n          pointpick: !picked ? NaN : data.get(index)\n        })),\n        lineWidthUnits: 'pixels',\n        radiusMinPixels: 10,\n        radiusMaxPixels: 40,\n        getRadius: 40,\n        wrapLongitude: true,\n        getPosition: ({\n          gt_lon,\n          gt_lat\n        }) => [gt_lon, gt_lat],\n        getFillColor: [0, 128, 255],\n        getLineColor: [0, 0, 0]\n      })]\n    });\n    console.log({\n      state: this.state\n    });\n    const textPick = !this.state.pointpick ? null : new TextLayer({\n      id: `title-${this.state.pointpick.item_id}`,\n      data: [this.state.pointpick.site_page],\n      pickable: false,\n      characterSet: this.state.pointpick.site_page.split(''),\n      backgroundColor: [255, 255, 255],\n      getText: d => `   ${d}   `,\n      getSize: 20,\n      sizeUnits: 'pixels',\n      wrapLongitude: true,\n      getPosition: [this.state.pointpick.gt_lon, this.state.pointpick.gt_lat]\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(DeckGL, {\n      initialViewState: this.state.initialViewState,\n      controller: true,\n      layers: [light, dTPTSLP, null && lumaTopo, textPick],\n      id: \"maincanvas\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/lsb/wikidatageo/dark-sky-vacations/src/App.js"],"names":["React","DeckGL","TerrainLayer","TileLayer","BitmapLayer","ScatterplotLayer","TextLayer","Table","logAndReturn","x","console","log","App","Component","constructor","props","state","initialViewState","longitude","latitude","zoom","pitch","bearing","maxZoom","render","light","data","id","tileSize","wrapLongitude","pickable","onHover","h","lightpicking","renderSubLayers","image","bounds","tile","bbox","west","south","east","north","lumaTopo","elevationDecoder","rScaler","gScaler","bScaler","offset","meshMaxError","elevationData","texture","material","ambient","diffuse","shininess","specularColor","dTPTSLP","getTileData","url","fetch","then","from","index","picked","sourceLayer","setState","pointpick","NaN","get","lineWidthUnits","radiusMinPixels","radiusMaxPixels","getRadius","getPosition","gt_lon","gt_lat","getFillColor","getLineColor","textPick","item_id","site_page","characterSet","split","backgroundColor","getText","d","getSize","sizeUnits"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\n\nimport DeckGL from '@deck.gl/react';\nimport { TerrainLayer, TileLayer } from '@deck.gl/geo-layers';\nimport { BitmapLayer, ScatterplotLayer, TextLayer } from '@deck.gl/layers';\nimport { Table } from 'apache-arrow';\nconst logAndReturn = x => { console.log(x); return x; };\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {initialViewState: {longitude: -122.4, latitude: 37.7, zoom: 5, pitch: 30, bearing: 0, maxZoom: 16}}\n  }\n  render() {\n    const light = new TileLayer({\n      data: './tiles/texture-{z}-{x}-{y}.png',\n      id: 'light',\n      tileSize: 256,\n      maxZoom: 8,\n      wrapLongitude: true,\n      pickable: true,\n      onHover: h => console.log({lightpicking: h}),\n      renderSubLayers: props => (\n        new BitmapLayer((props), {\n          data: null,\n          image: props.data,\n          bounds: [props.tile.bbox.west, props.tile.bbox.south, props.tile.bbox.east, props.tile.bbox.north],\n        })\n      )\n    })\n    const lumaTopo = new TerrainLayer({\n      elevationDecoder: {\n        rScaler: 1024,\n        gScaler: 0,\n        bScaler: 0,\n        offset: 0,\n      },\n      meshMaxError: 1,\n      elevationData: './tiles/light-{z}-{x}-{y}.png',\n      maxZoom: 8,\n      wrapLongitude: true,\n      texture: './tiles/texture-{z}-{x}-{y}.png',\n      material: {\n        ambient: 0.2,\n        diffuse: 1,\n        shininess: 128,\n        specularColor: [255, 192, 64]\n      }\n    });\n    const dTPTSLP = new TileLayer({\n      data: './data-tiles/geo-tile-{z}-{x}-{y}-light-0.arrow',\n      id: 'geo-tile',\n      maxZoom: 6,\n      wrapLongitude: true,\n      pickable: true,\n      getTileData: ({url}) => fetch(url).then(data => Table.from(data)),\n      onHover: ({index, picked, sourceLayer: {props: {data, onHover}}}) => (onHover({data,index,picked})),\n      renderSubLayers: ({tile: {bbox: {north, south, east, west}}, data}) => [\n        new ScatterplotLayer({\n          id: `points-${north}-${south}-${east}-${west}`,\n          data,\n          pickable: true,\n          onHover: ({data,index,picked}) => this.setState(logAndReturn({pointpick: !picked ? NaN : data.get(index)})),\n          lineWidthUnits: 'pixels',\n          radiusMinPixels: 10,\n          radiusMaxPixels: 40,\n          getRadius: 40,\n          wrapLongitude: true,\n          getPosition: ({gt_lon, gt_lat}) => [gt_lon, gt_lat],\n          getFillColor: [0,128,255],\n          getLineColor: [0,0,0],\n        })\n      ]\n    })\n    console.log({state: this.state});\n    const textPick = !this.state.pointpick ? null : new TextLayer({\n      id: `title-${this.state.pointpick.item_id}`,\n      data: [this.state.pointpick.site_page],\n      pickable: false,\n      characterSet: this.state.pointpick.site_page.split(''),\n      backgroundColor: [255,255,255],\n      getText: (d) => `   ${d}   `,\n      getSize: 20,\n      sizeUnits: 'pixels',\n      wrapLongitude: true,\n      getPosition: [this.state.pointpick.gt_lon, this.state.pointpick.gt_lat],\n    });\n    return (\n      <div>\n        <div>\n          <DeckGL initialViewState={this.state.initialViewState} controller={true} layers={[light, dTPTSLP, null && lumaTopo, textPick]} id={\"maincanvas\"} />\n        </div>\n        {/* <div id=\"colophon\">© Lee Butterman 2020. Made in Oakland, California.</div>\n        <div>\n          \n        </div> */}\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}