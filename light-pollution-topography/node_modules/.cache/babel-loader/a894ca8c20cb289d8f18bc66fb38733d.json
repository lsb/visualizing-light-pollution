{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { CompositeLayer } from '@deck.gl/core';\nimport { PolygonLayer } from '@deck.gl/layers';\nimport { getS2Polygon } from './s2-utils';\nvar defaultProps = Object.assign({\n  getS2Token: {\n    type: 'accessor',\n    value: function value(d) {\n      return d.token;\n    }\n  }\n}, PolygonLayer.defaultProps);\n\nvar S2Layer = function (_CompositeLayer) {\n  _inherits(S2Layer, _CompositeLayer);\n\n  function S2Layer() {\n    _classCallCheck(this, S2Layer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(S2Layer).apply(this, arguments));\n  }\n\n  _createClass(S2Layer, [{\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this$props = this.props,\n          data = _this$props.data,\n          getS2Token = _this$props.getS2Token;\n      var _this$props2 = this.props,\n          elevationScale = _this$props2.elevationScale,\n          extruded = _this$props2.extruded,\n          wireframe = _this$props2.wireframe,\n          filled = _this$props2.filled,\n          stroked = _this$props2.stroked,\n          lineWidthUnits = _this$props2.lineWidthUnits,\n          lineWidthScale = _this$props2.lineWidthScale,\n          lineWidthMinPixels = _this$props2.lineWidthMinPixels,\n          lineWidthMaxPixels = _this$props2.lineWidthMaxPixels,\n          lineJointRounded = _this$props2.lineJointRounded,\n          lineMiterLimit = _this$props2.lineMiterLimit,\n          lineDashJustified = _this$props2.lineDashJustified,\n          getElevation = _this$props2.getElevation,\n          getFillColor = _this$props2.getFillColor,\n          getLineColor = _this$props2.getLineColor,\n          getLineWidth = _this$props2.getLineWidth,\n          getLineDashArray = _this$props2.getLineDashArray;\n      var _this$props3 = this.props,\n          updateTriggers = _this$props3.updateTriggers,\n          material = _this$props3.material;\n      var CellLayer = this.getSubLayerClass('cell', PolygonLayer);\n      return new CellLayer({\n        filled: filled,\n        wireframe: wireframe,\n        extruded: extruded,\n        elevationScale: elevationScale,\n        stroked: stroked,\n        lineWidthUnits: lineWidthUnits,\n        lineWidthScale: lineWidthScale,\n        lineWidthMinPixels: lineWidthMinPixels,\n        lineWidthMaxPixels: lineWidthMaxPixels,\n        lineJointRounded: lineJointRounded,\n        lineMiterLimit: lineMiterLimit,\n        lineDashJustified: lineDashJustified,\n        material: material,\n        getElevation: getElevation,\n        getFillColor: getFillColor,\n        getLineColor: getLineColor,\n        getLineWidth: getLineWidth,\n        getLineDashArray: getLineDashArray\n      }, this.getSubLayerProps({\n        id: 'cell',\n        updateTriggers: {\n          getElevation: updateTriggers.getElevation,\n          getFillColor: updateTriggers.getFillColor,\n          getLineColor: updateTriggers.getLineColor,\n          getLineWidth: updateTriggers.getLineWidth,\n          getLineDashArray: updateTriggers.getLineDashArray\n        }\n      }), {\n        data: data,\n        _normalize: false,\n        positionFormat: 'XY',\n        getPolygon: function getPolygon(x, objectInfo) {\n          return getS2Polygon(getS2Token(x, objectInfo));\n        }\n      });\n    }\n  }]);\n\n  return S2Layer;\n}(CompositeLayer);\n\nexport { S2Layer as default };\nS2Layer.layerName = 'S2Layer';\nS2Layer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/s2-layer/s2-layer.js"],"names":["defaultProps","getS2Token","type","value","d","PolygonLayer","S2Layer","CompositeLayer","data","elevationScale","extruded","wireframe","filled","stroked","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","lineJointRounded","lineMiterLimit","lineDashJustified","getElevation","getFillColor","getLineColor","getLineWidth","getLineDashArray","updateTriggers","material","CellLayer","id","_normalize","positionFormat","getPolygon","getS2Polygon"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer} from '@deck.gl/core';\nimport {PolygonLayer} from '@deck.gl/layers';\n\nimport {getS2Polygon} from './s2-utils';\n\nconst defaultProps = Object.assign(\n  {\n    getS2Token: {type: 'accessor', value: d => d.token}\n  },\n  PolygonLayer.defaultProps\n);\n\nexport default class S2Layer extends CompositeLayer {\n  renderLayers() {\n    // Layer prop\n    const {data, getS2Token} = this.props;\n\n    // Rendering props underlying layer\n    const {\n      elevationScale,\n      extruded,\n      wireframe,\n      filled,\n      stroked,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified,\n      getElevation,\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {updateTriggers, material} = this.props;\n\n    // Filled Polygon Layer\n    const CellLayer = this.getSubLayerClass('cell', PolygonLayer);\n    return new CellLayer(\n      {\n        filled,\n        wireframe,\n\n        extruded,\n        elevationScale,\n\n        stroked,\n        lineWidthUnits,\n        lineWidthScale,\n        lineWidthMinPixels,\n        lineWidthMaxPixels,\n        lineJointRounded,\n        lineMiterLimit,\n        lineDashJustified,\n\n        material,\n\n        getElevation,\n        getFillColor,\n        getLineColor,\n        getLineWidth,\n        getLineDashArray\n      },\n      this.getSubLayerProps({\n        id: 'cell',\n        updateTriggers: {\n          getElevation: updateTriggers.getElevation,\n          getFillColor: updateTriggers.getFillColor,\n          getLineColor: updateTriggers.getLineColor,\n          getLineWidth: updateTriggers.getLineWidth,\n          getLineDashArray: updateTriggers.getLineDashArray\n        }\n      }),\n      {\n        data,\n        _normalize: false,\n        positionFormat: 'XY',\n        getPolygon: (x, objectInfo) => getS2Polygon(getS2Token(x, objectInfo))\n      }\n    );\n  }\n}\n\nS2Layer.layerName = 'S2Layer';\nS2Layer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}