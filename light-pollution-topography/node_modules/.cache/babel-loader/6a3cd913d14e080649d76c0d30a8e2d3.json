{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport getHiResTimestamp from '../utils/hi-res-timestamp';\n\nvar Stat = function () {\n  function Stat(name, type) {\n    _classCallCheck(this, Stat);\n\n    this.name = name;\n    this.type = type;\n    this.sampleSize = 1;\n    this.reset();\n  }\n\n  _createClass(Stat, [{\n    key: \"setSampleSize\",\n    value: function setSampleSize(samples) {\n      this.sampleSize = samples;\n      return this;\n    }\n  }, {\n    key: \"incrementCount\",\n    value: function incrementCount() {\n      this.addCount(1);\n      return this;\n    }\n  }, {\n    key: \"decrementCount\",\n    value: function decrementCount() {\n      this.subtractCount(1);\n      return this;\n    }\n  }, {\n    key: \"addCount\",\n    value: function addCount(value) {\n      this._count += value;\n      this._samples++;\n\n      this._checkSampling();\n\n      return this;\n    }\n  }, {\n    key: \"subtractCount\",\n    value: function subtractCount(value) {\n      this._count -= value;\n      this._samples++;\n\n      this._checkSampling();\n\n      return this;\n    }\n  }, {\n    key: \"addTime\",\n    value: function addTime(time) {\n      this._time += time;\n      this.lastTiming = time;\n      this._samples++;\n\n      this._checkSampling();\n\n      return this;\n    }\n  }, {\n    key: \"timeStart\",\n    value: function timeStart() {\n      this._startTime = getHiResTimestamp();\n      this._timerPending = true;\n      return this;\n    }\n  }, {\n    key: \"timeEnd\",\n    value: function timeEnd() {\n      if (!this._timerPending) {\n        return this;\n      }\n\n      this.addTime(getHiResTimestamp() - this._startTime);\n      this._timerPending = false;\n\n      this._checkSampling();\n\n      return this;\n    }\n  }, {\n    key: \"getSampleAverageCount\",\n    value: function getSampleAverageCount() {\n      return this.sampleSize > 0 ? this.lastSampleCount / this.sampleSize : 0;\n    }\n  }, {\n    key: \"getSampleAverageTime\",\n    value: function getSampleAverageTime() {\n      return this.sampleSize > 0 ? this.lastSampleTime / this.sampleSize : 0;\n    }\n  }, {\n    key: \"getSampleHz\",\n    value: function getSampleHz() {\n      return this.lastSampleTime > 0 ? this.sampleSize / (this.lastSampleTime / 1000) : 0;\n    }\n  }, {\n    key: \"getAverageCount\",\n    value: function getAverageCount() {\n      return this.samples > 0 ? this.count / this.samples : 0;\n    }\n  }, {\n    key: \"getAverageTime\",\n    value: function getAverageTime() {\n      return this.samples > 0 ? this.time / this.samples : 0;\n    }\n  }, {\n    key: \"getHz\",\n    value: function getHz() {\n      return this.time > 0 ? this.samples / (this.time / 1000) : 0;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.time = 0;\n      this.count = 0;\n      this.samples = 0;\n      this.lastTiming = 0;\n      this.lastSampleTime = 0;\n      this.lastSampleCount = 0;\n      this._count = 0;\n      this._time = 0;\n      this._samples = 0;\n      this._startTime = 0;\n      this._timerPending = false;\n      return this;\n    }\n  }, {\n    key: \"_checkSampling\",\n    value: function _checkSampling() {\n      if (this._samples === this.sampleSize) {\n        this.lastSampleTime = this._time;\n        this.lastSampleCount = this._count;\n        this.count += this._count;\n        this.time += this._time;\n        this.samples += this._samples;\n        this._time = 0;\n        this._count = 0;\n        this._samples = 0;\n      }\n    }\n  }]);\n\n  return Stat;\n}();\n\nexport { Stat as default };","map":{"version":3,"sources":["../../../src/lib/stat.js"],"names":["Stat","samples","value","time","getHiResTimestamp"],"mappings":"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","sourcesContent":["import getHiResTimestamp from '../utils/hi-res-timestamp';\n\nexport default class Stat {\n  constructor(name, type) {\n    this.name = name;\n    this.type = type;\n    this.sampleSize = 1;\n    this.reset();\n  }\n\n  setSampleSize(samples) {\n    this.sampleSize = samples;\n\n    return this;\n  }\n\n  // Call to increment count (+1)\n  incrementCount() {\n    this.addCount(1);\n\n    return this;\n  }\n\n  // Call to decrement count (-1)\n  decrementCount() {\n    this.subtractCount(1);\n\n    return this;\n  }\n\n  // Increase count\n  addCount(value) {\n    this._count += value;\n    this._samples++;\n    this._checkSampling();\n\n    return this;\n  }\n\n  // Decrease count\n  subtractCount(value) {\n    this._count -= value;\n    this._samples++;\n    this._checkSampling();\n\n    return this;\n  }\n\n  // Add an arbitrary timing and bump the count\n  addTime(time) {\n    this._time += time;\n    this.lastTiming = time;\n    this._samples++;\n    this._checkSampling();\n\n    return this;\n  }\n\n  // Start a timer\n  timeStart() {\n    this._startTime = getHiResTimestamp();\n    this._timerPending = true;\n\n    return this;\n  }\n\n  // End a timer. Adds to time and bumps the timing count.\n  timeEnd() {\n    if (!this._timerPending) {\n      return this;\n    }\n\n    this.addTime(getHiResTimestamp() - this._startTime);\n    this._timerPending = false;\n    this._checkSampling();\n\n    return this;\n  }\n\n  getSampleAverageCount() {\n    return this.sampleSize > 0 ? this.lastSampleCount / this.sampleSize : 0;\n  }\n\n  // Calculate average time / count for the previous window\n  getSampleAverageTime() {\n    return this.sampleSize > 0 ? this.lastSampleTime / this.sampleSize : 0;\n  }\n\n  // Calculate counts per second for the previous window\n  getSampleHz() {\n    return this.lastSampleTime > 0 ? this.sampleSize / (this.lastSampleTime / 1000) : 0;\n  }\n\n  getAverageCount() {\n    return this.samples > 0 ? this.count / this.samples : 0;\n  }\n\n  // Calculate average time / count\n  getAverageTime() {\n    return this.samples > 0 ? this.time / this.samples : 0;\n  }\n\n  // Calculate counts per second\n  getHz() {\n    return this.time > 0 ? this.samples / (this.time / 1000) : 0;\n  }\n\n  reset() {\n    this.time = 0;\n    this.count = 0;\n    this.samples = 0;\n    this.lastTiming = 0;\n    this.lastSampleTime = 0;\n    this.lastSampleCount = 0;\n    this._count = 0;\n    this._time = 0;\n    this._samples = 0;\n    this._startTime = 0;\n    this._timerPending = false;\n\n    return this;\n  }\n\n  _checkSampling() {\n    if (this._samples === this.sampleSize) {\n      this.lastSampleTime = this._time;\n      this.lastSampleCount = this._count;\n      this.count += this._count;\n      this.time += this._time;\n      this.samples += this._samples;\n      this._time = 0;\n      this._count = 0;\n      this._samples = 0;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}