{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport Viewport from '../viewports/viewport';\nimport { parsePosition, getPosition } from '../utils/positions';\nimport { deepEqual } from '../utils/deep-equal';\nimport assert from '../utils/assert';\n\nvar View = function () {\n  function View() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, View);\n\n    var _props$id = props.id,\n        id = _props$id === void 0 ? null : _props$id,\n        _props$x = props.x,\n        x = _props$x === void 0 ? 0 : _props$x,\n        _props$y = props.y,\n        y = _props$y === void 0 ? 0 : _props$y,\n        _props$width = props.width,\n        width = _props$width === void 0 ? '100%' : _props$width,\n        _props$height = props.height,\n        height = _props$height === void 0 ? '100%' : _props$height,\n        _props$projectionMatr = props.projectionMatrix,\n        projectionMatrix = _props$projectionMatr === void 0 ? null : _props$projectionMatr,\n        _props$fovy = props.fovy,\n        fovy = _props$fovy === void 0 ? 50 : _props$fovy,\n        _props$near = props.near,\n        near = _props$near === void 0 ? 0.1 : _props$near,\n        _props$far = props.far,\n        far = _props$far === void 0 ? 1000 : _props$far,\n        _props$modelMatrix = props.modelMatrix,\n        modelMatrix = _props$modelMatrix === void 0 ? null : _props$modelMatrix,\n        _props$viewportInstan = props.viewportInstance,\n        viewportInstance = _props$viewportInstan === void 0 ? null : _props$viewportInstan,\n        _props$type = props.type,\n        type = _props$type === void 0 ? Viewport : _props$type;\n    assert(!viewportInstance || viewportInstance instanceof Viewport);\n    this.viewportInstance = viewportInstance;\n    this.id = id || this.constructor.displayName || 'view';\n    this.type = type;\n    this.props = Object.assign({}, props, {\n      id: this.id,\n      projectionMatrix: projectionMatrix,\n      fovy: fovy,\n      near: near,\n      far: far,\n      modelMatrix: modelMatrix\n    });\n\n    this._parseDimensions({\n      x: x,\n      y: y,\n      width: width,\n      height: height\n    });\n\n    this.equals = this.equals.bind(this);\n    Object.seal(this);\n  }\n\n  _createClass(View, [{\n    key: \"equals\",\n    value: function equals(view) {\n      if (this === view) {\n        return true;\n      }\n\n      if (this.viewportInstance) {\n        return view.viewportInstance && this.viewportInstance.equals(view.viewportInstance);\n      }\n\n      var viewChanged = deepEqual(this.props, view.props);\n      return viewChanged;\n    }\n  }, {\n    key: \"makeViewport\",\n    value: function makeViewport(_ref) {\n      var width = _ref.width,\n          height = _ref.height,\n          viewState = _ref.viewState;\n\n      if (this.viewportInstance) {\n        return this.viewportInstance;\n      }\n\n      viewState = this.filterViewState(viewState);\n      var viewportDimensions = this.getDimensions({\n        width: width,\n        height: height\n      });\n      var props = Object.assign({\n        viewState: viewState\n      }, viewState, this.props, viewportDimensions);\n      return this._getViewport(props);\n    }\n  }, {\n    key: \"getViewStateId\",\n    value: function getViewStateId() {\n      switch (_typeof(this.props.viewState)) {\n        case 'string':\n          return this.props.viewState;\n\n        case 'object':\n          return this.props.viewState && this.props.viewState.id;\n\n        default:\n          return this.id;\n      }\n    }\n  }, {\n    key: \"filterViewState\",\n    value: function filterViewState(viewState) {\n      if (this.props.viewState && _typeof(this.props.viewState) === 'object') {\n        if (!this.props.viewState.id) {\n          return this.props.viewState;\n        }\n\n        var newViewState = Object.assign({}, viewState);\n\n        for (var key in this.props.viewState) {\n          if (key !== 'id') {\n            newViewState[key] = this.props.viewState[key];\n          }\n        }\n\n        return newViewState;\n      }\n\n      return viewState;\n    }\n  }, {\n    key: \"getDimensions\",\n    value: function getDimensions(_ref2) {\n      var width = _ref2.width,\n          height = _ref2.height;\n      return {\n        x: getPosition(this._x, width),\n        y: getPosition(this._y, height),\n        width: getPosition(this._width, width),\n        height: getPosition(this._height, height)\n      };\n    }\n  }, {\n    key: \"_getControllerProps\",\n    value: function _getControllerProps(defaultOpts) {\n      var opts = this.props.controller;\n\n      if (!opts) {\n        return null;\n      }\n\n      if (opts === true) {\n        return defaultOpts;\n      }\n\n      if (typeof opts === 'function') {\n        opts = {\n          type: opts\n        };\n      }\n\n      return Object.assign({}, defaultOpts, opts);\n    }\n  }, {\n    key: \"_getViewport\",\n    value: function _getViewport(props) {\n      var ViewportType = this.type;\n      return new ViewportType(props);\n    }\n  }, {\n    key: \"_parseDimensions\",\n    value: function _parseDimensions(_ref3) {\n      var x = _ref3.x,\n          y = _ref3.y,\n          width = _ref3.width,\n          height = _ref3.height;\n      this._x = parsePosition(x);\n      this._y = parsePosition(y);\n      this._width = parsePosition(width);\n      this._height = parsePosition(height);\n    }\n  }]);\n\n  return View;\n}();\n\nexport { View as default };","map":{"version":3,"sources":["../../../src/views/view.js"],"names":["View","props","id","x","y","width","height","projectionMatrix","fovy","near","far","modelMatrix","viewportInstance","type","assert","Object","view","viewChanged","deepEqual","viewState","viewportDimensions","newViewState","key","getPosition","defaultOpts","opts","ViewportType","parsePosition"],"mappings":"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","sourcesContent":["import Viewport from '../viewports/viewport';\nimport {parsePosition, getPosition} from '../utils/positions';\nimport {deepEqual} from '../utils/deep-equal';\nimport assert from '../utils/assert';\n\nexport default class View {\n  constructor(props = {}) {\n    const {\n      id = null,\n\n      // Window width/height in pixels (for pixel projection)\n      x = 0,\n      y = 0,\n      width = '100%',\n      height = '100%',\n\n      // Viewport Options\n      projectionMatrix = null, // Projection matrix\n      fovy = 50, // Perspective projection parameters, used if projectionMatrix not supplied\n      near = 0.1, // Distance of near clipping plane\n      far = 1000, // Distance of far clipping plane\n      modelMatrix = null, // A model matrix to be applied to position, to match the layer props API\n\n      // A View can be a wrapper for a viewport instance\n      viewportInstance = null,\n\n      // Internal: Viewport Type\n      type = Viewport // TODO - default to WebMercator?\n    } = props;\n\n    assert(!viewportInstance || viewportInstance instanceof Viewport);\n    this.viewportInstance = viewportInstance;\n\n    // Id\n    this.id = id || this.constructor.displayName || 'view';\n    this.type = type;\n\n    this.props = Object.assign({}, props, {\n      id: this.id,\n      projectionMatrix,\n      fovy,\n      near,\n      far,\n      modelMatrix\n    });\n\n    // Extents\n    this._parseDimensions({x, y, width, height});\n\n    // Bind methods for easy access\n    this.equals = this.equals.bind(this);\n\n    Object.seal(this);\n  }\n\n  equals(view) {\n    if (this === view) {\n      return true;\n    }\n\n    // if `viewportInstance` is set, it is the only prop that is used\n    // Delegate to `Viewport.equals`\n    if (this.viewportInstance) {\n      return view.viewportInstance && this.viewportInstance.equals(view.viewportInstance);\n    }\n\n    const viewChanged = deepEqual(this.props, view.props);\n\n    return viewChanged;\n  }\n\n  // Build a `Viewport` from a view descriptor\n  // TODO - add support for autosizing viewports using width and height\n  makeViewport({width, height, viewState}) {\n    if (this.viewportInstance) {\n      return this.viewportInstance;\n    }\n\n    viewState = this.filterViewState(viewState);\n\n    // Resolve relative viewport dimensions\n    const viewportDimensions = this.getDimensions({width, height});\n    const props = Object.assign({viewState}, viewState, this.props, viewportDimensions);\n    return this._getViewport(props);\n  }\n\n  getViewStateId() {\n    switch (typeof this.props.viewState) {\n      case 'string':\n        // if View.viewState is a string, return it\n        return this.props.viewState;\n\n      case 'object':\n        // If it is an object, return its id component\n        return this.props.viewState && this.props.viewState.id;\n\n      default:\n        return this.id;\n    }\n  }\n\n  // Allows view to override (or completely define) viewState\n  filterViewState(viewState) {\n    if (this.props.viewState && typeof this.props.viewState === 'object') {\n      // If we have specified an id, then intent is to override,\n      // If not, completely specify the view state\n      if (!this.props.viewState.id) {\n        return this.props.viewState;\n      }\n\n      // Merge in all props from View's viewState, except id\n      const newViewState = Object.assign({}, viewState);\n      for (const key in this.props.viewState) {\n        if (key !== 'id') {\n          newViewState[key] = this.props.viewState[key];\n        }\n      }\n      return newViewState;\n    }\n\n    return viewState;\n  }\n\n  // Resolve relative viewport dimensions into actual dimensions (y='50%', width=800 => y=400)\n  getDimensions({width, height}) {\n    return {\n      x: getPosition(this._x, width),\n      y: getPosition(this._y, height),\n      width: getPosition(this._width, width),\n      height: getPosition(this._height, height)\n    };\n  }\n\n  // Used by sub classes to resolve controller props\n  _getControllerProps(defaultOpts) {\n    let opts = this.props.controller;\n\n    if (!opts) {\n      return null;\n    }\n    if (opts === true) {\n      return defaultOpts;\n    }\n    if (typeof opts === 'function') {\n      opts = {type: opts};\n    }\n    return Object.assign({}, defaultOpts, opts);\n  }\n\n  // Overridable method\n  _getViewport(props) {\n    // Get the type of the viewport\n    const {type: ViewportType} = this;\n    return new ViewportType(props);\n  }\n\n  // Parse relative viewport dimension descriptors (e.g {y: '50%', height: '50%'})\n  _parseDimensions({x, y, width, height}) {\n    this._x = parsePosition(x);\n    this._y = parsePosition(y);\n    this._width = parsePosition(width);\n    this._height = parsePosition(height);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}