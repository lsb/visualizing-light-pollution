{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { withParameters } from '@luma.gl/gltools';\n\nvar Display = function () {\n  function Display() {\n    _classCallCheck(this, Display);\n  }\n\n  _createClass(Display, [{\n    key: \"getViews\",\n    value: function getViews(options) {\n      var width = options.width,\n          height = options.height;\n      return [{\n        params: {\n          viewport: [0, 0, width, height],\n          scissor: [0, 0, width, height],\n          scissorTest: true\n        }\n      }];\n    }\n  }, {\n    key: \"submitFrame\",\n    value: function submitFrame() {\n      return true;\n    }\n  }, {\n    key: \"requestAnimationFrame\",\n    value: function requestAnimationFrame(renderFrame) {\n      return false;\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete() {}\n  }, {\n    key: \"_renderFrame\",\n    value: function _renderFrame(options) {\n      var _this = this;\n\n      var views = this.getViews(options);\n\n      if (!views) {\n        return false;\n      }\n\n      var gl = this.animationLoop.gl;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        var _loop = function _loop() {\n          var view = _step.value;\n          withParameters(gl, view.params, function () {\n            return _this.animationLoop.onRender(_objectSpread({}, options, view));\n          });\n        };\n\n        for (var _iterator = views[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          _loop();\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      this.submitFrame();\n      return true;\n    }\n  }]);\n\n  return Display;\n}();\n\nexport { Display as default };","map":{"version":3,"sources":["../../../src/webvr/display.js"],"names":["Display","options","width","height","params","viewport","scissor","scissorTest","renderFrame","views","gl","view","withParameters"],"mappings":";;;AAAA,SAAA,cAAA,QAAA,kBAAA;;IAEqBA,O;;;;;;;6BACVC,O,EAAS;AAAA,UACTC,KADS,GACQD,OADR,CAAA,KAAA;AAAA,UACFE,MADE,GACQF,OADR,CAAA,MAAA;AAEhB,aAAO,CACL;AACEG,QAAAA,MAAM,EAAE;AACNC,UAAAA,QAAQ,EAAE,CAAA,CAAA,EAAA,CAAA,EAAA,KAAA,EADJ,MACI,CADJ;AAENC,UAAAA,OAAO,EAAE,CAAA,CAAA,EAAA,CAAA,EAAA,KAAA,EAFH,MAEG,CAFH;AAGNC,UAAAA,WAAW,EAAE;AAHP;AADV,OADK,CAAP;AASD;;;kCAEa;AACZ,aAAA,IAAA;AACD;;;0CAGqBC,W,EAAa;AACjC,aAAA,KAAA;AACD;;;8BAEQ,CAAE;;;iCAGEP,O,EAAS;AAAA,UAAA,KAAA,GAAA,IAAA;;AACpB,UAAMQ,KAAK,GAAG,KAAA,QAAA,CAAd,OAAc,CAAd;;AACA,UAAI,CAAJ,KAAA,EAAY;AACV,eAAA,KAAA;AACD;;AAJmB,UAMbC,EANa,GAMP,KANO,aAMP,CANO,EAAA;AAAA,UAAA,yBAAA,GAAA,IAAA;AAAA,UAAA,iBAAA,GAAA,KAAA;AAAA,UAAA,cAAA,GAAA,SAAA;;AAAA,UAAA;AAAA,YAAA,KAAA,GAAA,SAAA,KAAA,GAAA;AAAA,cAOTC,IAPS,GAAA,KAAA,CAAA,KAAA;AAQlBC,UAAAA,cAAc,CAAA,EAAA,EAAKD,IAAI,CAAT,MAAA,EAAkB,YAAA;AAAA,mBAAM,KAAI,CAAJ,aAAA,CAAA,QAAA,CAAA,aAAA,CAAA,EAAA,EAAA,OAAA,EAAN,IAAM,CAAA,CAAN;AAAhCC,WAAc,CAAdA;AARkB,SAAA;;AAOpB,aAAA,IAAA,SAAA,GAAmBH,KAAnB,CAAA,MAAA,CAAA,QAAA,CAAmBA,EAAnB,EAAA,KAAA,EAAA,EAAA,yBAAA,GAAA,CAAA,KAAA,GAAA,SAAA,CAAA,IAAA,EAAA,EAAA,IAAA,CAAA,EAAA,yBAAA,GAAA,IAAA,EAA0B;AAAA,UAAA,KAAA;AAEzB;AATmB,OAAA,CAAA,OAAA,GAAA,EAAA;AAAA,QAAA,iBAAA,GAAA,IAAA;AAAA,QAAA,cAAA,GAAA,GAAA;AAAA,OAAA,SAAA;AAAA,YAAA;AAAA,cAAA,CAAA,yBAAA,IAAA,SAAA,CAAA,QAAA,CAAA,IAAA,IAAA,EAAA;AAAA,YAAA,SAAA,CAAA,QAAA,CAAA;AAAA;AAAA,SAAA,SAAA;AAAA,cAAA,iBAAA,EAAA;AAAA,kBAAA,cAAA;AAAA;AAAA;AAAA;;AAWpB,WAAA,WAAA;AACA,aAAA,IAAA;AACD;;;;;;SAvCkBT,O","sourcesContent":["import {withParameters} from '@luma.gl/gltools';\n\nexport default class Display {\n  getViews(options) {\n    const {width, height} = options;\n    return [\n      {\n        params: {\n          viewport: [0, 0, width, height],\n          scissor: [0, 0, width, height],\n          scissorTest: true\n        }\n      }\n    ];\n  }\n\n  submitFrame() {\n    return true;\n  }\n\n  // return true if animation frame has been requested\n  requestAnimationFrame(renderFrame) {\n    return false;\n  }\n\n  delete() {}\n\n  // AnimationLoop calls this API\n  _renderFrame(options) {\n    const views = this.getViews(options);\n    if (!views) {\n      return false;\n    }\n\n    const {gl} = this.animationLoop;\n    for (const view of views) {\n      withParameters(gl, view.params, () => this.animationLoop.onRender({...options, ...view}));\n    }\n\n    this.submitFrame();\n    return true;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}