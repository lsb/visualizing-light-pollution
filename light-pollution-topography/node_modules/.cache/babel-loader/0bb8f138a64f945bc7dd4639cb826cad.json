{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { Vector3 } from 'math.gl';\nimport Geometry from '../geometry/geometry';\nimport { uid } from '@luma.gl/webgl';\nvar ICO_POSITIONS = [-1, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 1, 0, -1, 0, 1, 0, 0];\nvar ICO_INDICES = [3, 4, 5, 3, 5, 1, 3, 1, 0, 3, 0, 4, 4, 0, 2, 4, 2, 5, 2, 0, 1, 5, 2, 1];\n\nvar IcoSphereGeometry = function (_Geometry) {\n  _inherits(IcoSphereGeometry, _Geometry);\n\n  function IcoSphereGeometry() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, IcoSphereGeometry);\n\n    var _props$id = props.id,\n        id = _props$id === void 0 ? uid('ico-sphere-geometry') : _props$id;\n\n    var _tesselateIcosaHedron = tesselateIcosaHedron(props),\n        indices = _tesselateIcosaHedron.indices,\n        attributes = _tesselateIcosaHedron.attributes;\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(IcoSphereGeometry).call(this, _objectSpread({}, props, {\n      id: id,\n      indices: indices,\n      attributes: _objectSpread({}, attributes, props.attributes)\n    })));\n  }\n\n  return IcoSphereGeometry;\n}(Geometry);\n\nexport { IcoSphereGeometry as default };\n\nfunction tesselateIcosaHedron(props) {\n  var _props$iterations = props.iterations,\n      iterations = _props$iterations === void 0 ? 0 : _props$iterations;\n  var PI = Math.PI;\n  var PI2 = PI * 2;\n  var positions = [].concat(ICO_POSITIONS);\n  var indices = [].concat(ICO_INDICES);\n  positions.push();\n  indices.push();\n\n  var getMiddlePoint = function () {\n    var pointMemo = {};\n    return function (i1, i2) {\n      i1 *= 3;\n      i2 *= 3;\n      var mini = i1 < i2 ? i1 : i2;\n      var maxi = i1 > i2 ? i1 : i2;\n      var key = \"\".concat(mini, \"|\").concat(maxi);\n\n      if (key in pointMemo) {\n        return pointMemo[key];\n      }\n\n      var x1 = positions[i1];\n      var y1 = positions[i1 + 1];\n      var z1 = positions[i1 + 2];\n      var x2 = positions[i2];\n      var y2 = positions[i2 + 1];\n      var z2 = positions[i2 + 2];\n      var xm = (x1 + x2) / 2;\n      var ym = (y1 + y2) / 2;\n      var zm = (z1 + z2) / 2;\n      var len = Math.sqrt(xm * xm + ym * ym + zm * zm);\n      xm /= len;\n      ym /= len;\n      zm /= len;\n      positions.push(xm, ym, zm);\n      return pointMemo[key] = positions.length / 3 - 1;\n    };\n  }();\n\n  for (var i = 0; i < iterations; i++) {\n    var indices2 = [];\n\n    for (var j = 0; j < indices.length; j += 3) {\n      var a = getMiddlePoint(indices[j + 0], indices[j + 1]);\n      var b = getMiddlePoint(indices[j + 1], indices[j + 2]);\n      var c = getMiddlePoint(indices[j + 2], indices[j + 0]);\n      indices2.push(c, indices[j + 0], a, a, indices[j + 1], b, b, indices[j + 2], c, a, b, c);\n    }\n\n    indices = indices2;\n  }\n\n  var normals = new Array(positions.length);\n  var texCoords = new Array(positions.length / 3 * 2);\n  var l = indices.length;\n\n  for (var _i = l - 3; _i >= 0; _i -= 3) {\n    var i1 = indices[_i + 0];\n    var i2 = indices[_i + 1];\n    var i3 = indices[_i + 2];\n    var in1 = i1 * 3;\n    var in2 = i2 * 3;\n    var in3 = i3 * 3;\n    var iu1 = i1 * 2;\n    var iu2 = i2 * 2;\n    var iu3 = i3 * 2;\n    var x1 = positions[in1 + 0];\n    var y1 = positions[in1 + 1];\n    var z1 = positions[in1 + 2];\n    var theta1 = Math.acos(z1 / Math.sqrt(x1 * x1 + y1 * y1 + z1 * z1));\n    var phi1 = Math.atan2(y1, x1) + PI;\n    var v1 = theta1 / PI;\n    var u1 = 1 - phi1 / PI2;\n    var x2 = positions[in2 + 0];\n    var y2 = positions[in2 + 1];\n    var z2 = positions[in2 + 2];\n    var theta2 = Math.acos(z2 / Math.sqrt(x2 * x2 + y2 * y2 + z2 * z2));\n    var phi2 = Math.atan2(y2, x2) + PI;\n    var v2 = theta2 / PI;\n    var u2 = 1 - phi2 / PI2;\n    var x3 = positions[in3 + 0];\n    var y3 = positions[in3 + 1];\n    var z3 = positions[in3 + 2];\n    var theta3 = Math.acos(z3 / Math.sqrt(x3 * x3 + y3 * y3 + z3 * z3));\n    var phi3 = Math.atan2(y3, x3) + PI;\n    var v3 = theta3 / PI;\n    var u3 = 1 - phi3 / PI2;\n    var vec1 = [x3 - x2, y3 - y2, z3 - z2];\n    var vec2 = [x1 - x2, y1 - y2, z1 - z2];\n    var normal = new Vector3(vec1).cross(vec2).normalize();\n    var newIndex = void 0;\n\n    if ((u1 === 0 || u2 === 0 || u3 === 0) && (u1 === 0 || u1 > 0.5) && (u2 === 0 || u2 > 0.5) && (u3 === 0 || u3 > 0.5)) {\n      positions.push(positions[in1 + 0], positions[in1 + 1], positions[in1 + 2]);\n      newIndex = positions.length / 3 - 1;\n      indices.push(newIndex);\n      texCoords[newIndex * 2 + 0] = 1;\n      texCoords[newIndex * 2 + 1] = v1;\n      normals[newIndex * 3 + 0] = normal.x;\n      normals[newIndex * 3 + 1] = normal.y;\n      normals[newIndex * 3 + 2] = normal.z;\n      positions.push(positions[in2 + 0], positions[in2 + 1], positions[in2 + 2]);\n      newIndex = positions.length / 3 - 1;\n      indices.push(newIndex);\n      texCoords[newIndex * 2 + 0] = 1;\n      texCoords[newIndex * 2 + 1] = v2;\n      normals[newIndex * 3 + 0] = normal.x;\n      normals[newIndex * 3 + 1] = normal.y;\n      normals[newIndex * 3 + 2] = normal.z;\n      positions.push(positions[in3 + 0], positions[in3 + 1], positions[in3 + 2]);\n      newIndex = positions.length / 3 - 1;\n      indices.push(newIndex);\n      texCoords[newIndex * 2 + 0] = 1;\n      texCoords[newIndex * 2 + 1] = v3;\n      normals[newIndex * 3 + 0] = normal.x;\n      normals[newIndex * 3 + 1] = normal.y;\n      normals[newIndex * 3 + 2] = normal.z;\n    }\n\n    normals[in1 + 0] = normals[in2 + 0] = normals[in3 + 0] = normal.x;\n    normals[in1 + 1] = normals[in2 + 1] = normals[in3 + 1] = normal.y;\n    normals[in1 + 2] = normals[in2 + 2] = normals[in3 + 2] = normal.z;\n    texCoords[iu1 + 0] = u1;\n    texCoords[iu1 + 1] = v1;\n    texCoords[iu2 + 0] = u2;\n    texCoords[iu2 + 1] = v2;\n    texCoords[iu3 + 0] = u3;\n    texCoords[iu3 + 1] = v3;\n  }\n\n  return {\n    indices: {\n      size: 1,\n      value: new Uint16Array(indices)\n    },\n    attributes: {\n      POSITION: {\n        size: 3,\n        value: new Float32Array(positions)\n      },\n      NORMAL: {\n        size: 3,\n        value: new Float32Array(normals)\n      },\n      TEXCOORD_0: {\n        size: 2,\n        value: new Float32Array(texCoords)\n      }\n    }\n  };\n}","map":{"version":3,"sources":["../../../src/geometries/ico-sphere-geometry.js"],"names":["ICO_POSITIONS","ICO_INDICES","IcoSphereGeometry","Geometry","props","id","uid","indices","attributes","tesselateIcosaHedron","iterations","PI","Math","PI2","positions","getMiddlePoint","pointMemo","i1","i2","mini","maxi","key","x1","y1","z1","x2","y2","z2","xm","ym","zm","len","i","indices2","j","a","b","c","normals","texCoords","l","i3","in1","in2","in3","iu1","iu2","iu3","theta1","phi1","v1","u1","theta2","phi2","v2","u2","x3","y3","z3","theta3","phi3","v3","u3","vec1","vec2","normal","newIndex","size","value","POSITION","NORMAL","TEXCOORD_0"],"mappings":"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","sourcesContent":["import {Vector3} from 'math.gl';\nimport Geometry from '../geometry/geometry';\nimport {uid} from '@luma.gl/webgl';\n\n/* eslint-disable comma-spacing, max-statements, complexity */\n\nconst ICO_POSITIONS = [-1, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 1, 0, -1, 0, 1, 0, 0];\nconst ICO_INDICES = [3, 4, 5, 3, 5, 1, 3, 1, 0, 3, 0, 4, 4, 0, 2, 4, 2, 5, 2, 0, 1, 5, 2, 1];\n\nexport default class IcoSphereGeometry extends Geometry {\n  constructor(props = {}) {\n    const {id = uid('ico-sphere-geometry')} = props;\n    const {indices, attributes} = tesselateIcosaHedron(props);\n    super({\n      ...props,\n      id,\n      indices,\n      attributes: {...attributes, ...props.attributes}\n    });\n  }\n}\n\nfunction tesselateIcosaHedron(props) {\n  const {iterations = 0} = props;\n\n  const PI = Math.PI;\n  const PI2 = PI * 2;\n\n  const positions = [...ICO_POSITIONS];\n  let indices = [...ICO_INDICES];\n\n  positions.push();\n  indices.push();\n\n  const getMiddlePoint = (() => {\n    const pointMemo = {};\n\n    return (i1, i2) => {\n      i1 *= 3;\n      i2 *= 3;\n      const mini = i1 < i2 ? i1 : i2;\n      const maxi = i1 > i2 ? i1 : i2;\n      const key = `${mini}|${maxi}`;\n\n      if (key in pointMemo) {\n        return pointMemo[key];\n      }\n\n      const x1 = positions[i1];\n      const y1 = positions[i1 + 1];\n      const z1 = positions[i1 + 2];\n      const x2 = positions[i2];\n      const y2 = positions[i2 + 1];\n      const z2 = positions[i2 + 2];\n      let xm = (x1 + x2) / 2;\n      let ym = (y1 + y2) / 2;\n      let zm = (z1 + z2) / 2;\n      const len = Math.sqrt(xm * xm + ym * ym + zm * zm);\n\n      xm /= len;\n      ym /= len;\n      zm /= len;\n\n      positions.push(xm, ym, zm);\n\n      return (pointMemo[key] = positions.length / 3 - 1);\n    };\n  })();\n\n  for (let i = 0; i < iterations; i++) {\n    const indices2 = [];\n    for (let j = 0; j < indices.length; j += 3) {\n      const a = getMiddlePoint(indices[j + 0], indices[j + 1]);\n      const b = getMiddlePoint(indices[j + 1], indices[j + 2]);\n      const c = getMiddlePoint(indices[j + 2], indices[j + 0]);\n\n      indices2.push(c, indices[j + 0], a, a, indices[j + 1], b, b, indices[j + 2], c, a, b, c);\n    }\n    indices = indices2;\n  }\n\n  // Calculate texCoords and normals\n  const normals = new Array(positions.length);\n  const texCoords = new Array((positions.length / 3) * 2);\n\n  const l = indices.length;\n  for (let i = l - 3; i >= 0; i -= 3) {\n    const i1 = indices[i + 0];\n    const i2 = indices[i + 1];\n    const i3 = indices[i + 2];\n    const in1 = i1 * 3;\n    const in2 = i2 * 3;\n    const in3 = i3 * 3;\n    const iu1 = i1 * 2;\n    const iu2 = i2 * 2;\n    const iu3 = i3 * 2;\n    const x1 = positions[in1 + 0];\n    const y1 = positions[in1 + 1];\n    const z1 = positions[in1 + 2];\n    const theta1 = Math.acos(z1 / Math.sqrt(x1 * x1 + y1 * y1 + z1 * z1));\n    const phi1 = Math.atan2(y1, x1) + PI;\n    const v1 = theta1 / PI;\n    const u1 = 1 - phi1 / PI2;\n    const x2 = positions[in2 + 0];\n    const y2 = positions[in2 + 1];\n    const z2 = positions[in2 + 2];\n    const theta2 = Math.acos(z2 / Math.sqrt(x2 * x2 + y2 * y2 + z2 * z2));\n    const phi2 = Math.atan2(y2, x2) + PI;\n    const v2 = theta2 / PI;\n    const u2 = 1 - phi2 / PI2;\n    const x3 = positions[in3 + 0];\n    const y3 = positions[in3 + 1];\n    const z3 = positions[in3 + 2];\n    const theta3 = Math.acos(z3 / Math.sqrt(x3 * x3 + y3 * y3 + z3 * z3));\n    const phi3 = Math.atan2(y3, x3) + PI;\n    const v3 = theta3 / PI;\n    const u3 = 1 - phi3 / PI2;\n    const vec1 = [x3 - x2, y3 - y2, z3 - z2];\n    const vec2 = [x1 - x2, y1 - y2, z1 - z2];\n    const normal = new Vector3(vec1).cross(vec2).normalize();\n    let newIndex;\n\n    if (\n      (u1 === 0 || u2 === 0 || u3 === 0) &&\n      (u1 === 0 || u1 > 0.5) &&\n      (u2 === 0 || u2 > 0.5) &&\n      (u3 === 0 || u3 > 0.5)\n    ) {\n      positions.push(positions[in1 + 0], positions[in1 + 1], positions[in1 + 2]);\n      newIndex = positions.length / 3 - 1;\n      indices.push(newIndex);\n      texCoords[newIndex * 2 + 0] = 1;\n      texCoords[newIndex * 2 + 1] = v1;\n      normals[newIndex * 3 + 0] = normal.x;\n      normals[newIndex * 3 + 1] = normal.y;\n      normals[newIndex * 3 + 2] = normal.z;\n\n      positions.push(positions[in2 + 0], positions[in2 + 1], positions[in2 + 2]);\n      newIndex = positions.length / 3 - 1;\n      indices.push(newIndex);\n      texCoords[newIndex * 2 + 0] = 1;\n      texCoords[newIndex * 2 + 1] = v2;\n      normals[newIndex * 3 + 0] = normal.x;\n      normals[newIndex * 3 + 1] = normal.y;\n      normals[newIndex * 3 + 2] = normal.z;\n\n      positions.push(positions[in3 + 0], positions[in3 + 1], positions[in3 + 2]);\n      newIndex = positions.length / 3 - 1;\n      indices.push(newIndex);\n      texCoords[newIndex * 2 + 0] = 1;\n      texCoords[newIndex * 2 + 1] = v3;\n      normals[newIndex * 3 + 0] = normal.x;\n      normals[newIndex * 3 + 1] = normal.y;\n      normals[newIndex * 3 + 2] = normal.z;\n    }\n\n    normals[in1 + 0] = normals[in2 + 0] = normals[in3 + 0] = normal.x;\n    normals[in1 + 1] = normals[in2 + 1] = normals[in3 + 1] = normal.y;\n    normals[in1 + 2] = normals[in2 + 2] = normals[in3 + 2] = normal.z;\n\n    texCoords[iu1 + 0] = u1;\n    texCoords[iu1 + 1] = v1;\n\n    texCoords[iu2 + 0] = u2;\n    texCoords[iu2 + 1] = v2;\n\n    texCoords[iu3 + 0] = u3;\n    texCoords[iu3 + 1] = v3;\n  }\n\n  return {\n    indices: {size: 1, value: new Uint16Array(indices)},\n    attributes: {\n      POSITION: {size: 3, value: new Float32Array(positions)},\n      NORMAL: {size: 3, value: new Float32Array(normals)},\n      TEXCOORD_0: {size: 2, value: new Float32Array(texCoords)}\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}