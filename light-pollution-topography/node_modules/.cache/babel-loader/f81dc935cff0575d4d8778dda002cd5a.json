{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { GL, GLType } from '@loaders.gl/math';\n\nvar Tile3DFeatureTable = function () {\n  function Tile3DFeatureTable(featureTableJson, featureTableBinary) {\n    _classCallCheck(this, Tile3DFeatureTable);\n\n    this.json = featureTableJson;\n    this.buffer = featureTableBinary;\n    this.featuresLength = 0;\n    this._cachedTypedArrays = {};\n  }\n\n  _createClass(Tile3DFeatureTable, [{\n    key: \"getExtension\",\n    value: function getExtension(extensionName) {\n      return this.json.extensions && this.json.extensions[extensionName];\n    }\n  }, {\n    key: \"hasProperty\",\n    value: function hasProperty(propertyName) {\n      return Boolean(this.json[propertyName]);\n    }\n  }, {\n    key: \"getGlobalProperty\",\n    value: function getGlobalProperty(propertyName) {\n      var componentType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : GL.UNSIGNED_INT;\n      var componentLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      var jsonValue = this.json[propertyName];\n\n      if (jsonValue && Number.isFinite(jsonValue.byteOffset)) {\n        return this._getTypedArrayFromBinary(propertyName, componentType, componentLength, 1, jsonValue.byteOffset);\n      }\n\n      return jsonValue;\n    }\n  }, {\n    key: \"getPropertyArray\",\n    value: function getPropertyArray(propertyName, componentType, componentLength) {\n      var jsonValue = this.json[propertyName];\n\n      if (jsonValue && Number.isFinite(jsonValue.byteOffset)) {\n        if ('componentType' in jsonValue) {\n          componentType = GLType.fromName(jsonValue.componentType);\n        }\n\n        return this._getTypedArrayFromBinary(propertyName, componentType, componentLength, this.featuresLength, jsonValue.byteOffset);\n      }\n\n      return this._getTypedArrayFromArray(propertyName, componentType, jsonValue);\n    }\n  }, {\n    key: \"getProperty\",\n    value: function getProperty(propertyName, componentType, componentLength, featureId, result) {\n      var jsonValue = this.json[propertyName];\n\n      if (!jsonValue) {\n        return jsonValue;\n      }\n\n      var typedArray = this.getPropertyArray(propertyName, componentType, componentLength);\n\n      if (componentLength === 1) {\n        return typedArray[featureId];\n      }\n\n      for (var i = 0; i < componentLength; ++i) {\n        result[i] = typedArray[componentLength * featureId + i];\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_getTypedArrayFromBinary\",\n    value: function _getTypedArrayFromBinary(propertyName, componentType, componentLength, count, byteOffset) {\n      var cachedTypedArrays = this._cachedTypedArrays;\n      var typedArray = cachedTypedArrays[propertyName];\n\n      if (!typedArray) {\n        typedArray = GLType.createTypedArray(componentType, this.buffer.buffer, this.buffer.byteOffset + byteOffset, count * componentLength);\n        cachedTypedArrays[propertyName] = typedArray;\n      }\n\n      return typedArray;\n    }\n  }, {\n    key: \"_getTypedArrayFromArray\",\n    value: function _getTypedArrayFromArray(propertyName, componentType, array) {\n      var cachedTypedArrays = this._cachedTypedArrays;\n      var typedArray = cachedTypedArrays[propertyName];\n\n      if (!typedArray) {\n        typedArray = GLType.createTypedArray(componentType, array);\n        cachedTypedArrays[propertyName] = typedArray;\n      }\n\n      return typedArray;\n    }\n  }]);\n\n  return Tile3DFeatureTable;\n}();\n\nexport { Tile3DFeatureTable as default };","map":{"version":3,"sources":["../../../../src/lib/classes/tile-3d-feature-table.js"],"names":["Tile3DFeatureTable","extensionName","propertyName","Boolean","componentType","GL","UNSIGNED_INT","componentLength","jsonValue","Number","GLType","featureId","result","typedArray","i","count","byteOffset","cachedTypedArrays","array"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {GL, GLType} from '@loaders.gl/math';\n\n// Reference:\n// https://github.com/AnalyticalGraphicsInc/cesium/blob/1de96d087f0b17575eb1a3f736407b348c765d59/Source/Scene/Cesium3DTileFeatureTable.js\nexport default class Tile3DFeatureTable {\n  constructor(featureTableJson, featureTableBinary) {\n    this.json = featureTableJson;\n    this.buffer = featureTableBinary;\n    this.featuresLength = 0;\n    this._cachedTypedArrays = {};\n  }\n\n  getExtension(extensionName) {\n    return this.json.extensions && this.json.extensions[extensionName];\n  }\n\n  hasProperty(propertyName) {\n    return Boolean(this.json[propertyName]);\n  }\n\n  getGlobalProperty(propertyName, componentType = GL.UNSIGNED_INT, componentLength = 1) {\n    const jsonValue = this.json[propertyName];\n\n    if (jsonValue && Number.isFinite(jsonValue.byteOffset)) {\n      return this._getTypedArrayFromBinary(\n        propertyName,\n        componentType,\n        componentLength,\n        1,\n        jsonValue.byteOffset\n      );\n    }\n\n    return jsonValue;\n  }\n\n  getPropertyArray(propertyName, componentType, componentLength) {\n    const jsonValue = this.json[propertyName];\n\n    if (jsonValue && Number.isFinite(jsonValue.byteOffset)) {\n      if ('componentType' in jsonValue) {\n        componentType = GLType.fromName(jsonValue.componentType);\n      }\n      return this._getTypedArrayFromBinary(\n        propertyName,\n        componentType,\n        componentLength,\n        this.featuresLength,\n        jsonValue.byteOffset\n      );\n    }\n\n    return this._getTypedArrayFromArray(propertyName, componentType, jsonValue);\n  }\n\n  getProperty(propertyName, componentType, componentLength, featureId, result) {\n    const jsonValue = this.json[propertyName];\n    if (!jsonValue) {\n      return jsonValue;\n    }\n\n    const typedArray = this.getPropertyArray(propertyName, componentType, componentLength);\n\n    if (componentLength === 1) {\n      return typedArray[featureId];\n    }\n\n    for (let i = 0; i < componentLength; ++i) {\n      result[i] = typedArray[componentLength * featureId + i];\n    }\n\n    return result;\n  }\n\n  // HELPERS\n\n  _getTypedArrayFromBinary(propertyName, componentType, componentLength, count, byteOffset) {\n    const cachedTypedArrays = this._cachedTypedArrays;\n    let typedArray = cachedTypedArrays[propertyName];\n    if (!typedArray) {\n      typedArray = GLType.createTypedArray(\n        componentType,\n        this.buffer.buffer,\n        this.buffer.byteOffset + byteOffset,\n        count * componentLength\n      );\n      cachedTypedArrays[propertyName] = typedArray;\n    }\n    return typedArray;\n  }\n\n  _getTypedArrayFromArray(propertyName, componentType, array) {\n    const cachedTypedArrays = this._cachedTypedArrays;\n    let typedArray = cachedTypedArrays[propertyName];\n    if (!typedArray) {\n      typedArray = GLType.createTypedArray(componentType, array);\n      cachedTypedArrays[propertyName] = typedArray;\n    }\n    return typedArray;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}