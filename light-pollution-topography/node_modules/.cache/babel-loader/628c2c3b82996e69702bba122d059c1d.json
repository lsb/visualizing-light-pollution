{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { fetchFile } from './fetch/fetch-file';\nimport { parseInBatches } from './parse-in-batches';\nexport function loadInBatches(_x, _x2, _x3) {\n  return _loadInBatches.apply(this, arguments);\n}\n\nfunction _loadInBatches() {\n  _loadInBatches = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(url, loaders, options) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetchFile(url, options);\n\n          case 2:\n            response = _context.sent;\n            return _context.abrupt(\"return\", parseInBatches(response, loaders, options, url));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _loadInBatches.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../src/lib/load-in-batches.js"],"names":["response","fetchFile","parseInBatches"],"mappings":";;AAAA,SAAA,SAAA,QAAA,oBAAA;AACA,SAAA,cAAA,QAAA,oBAAA;AAEA,OAAA,SAAA,aAAA,CAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA,SAAA,cAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;;8DAAO,SAAA,OAAA,CAAA,GAAA,EAAA,OAAA,EAAA,OAAA,EAAA;AAAA,QAAA,QAAA;AAAA,WAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,aAAA,CAAA,EAAA;AAAA,gBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,eAAA,CAAA;AAAA,YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA,mBACkBC,SAAS,CAAA,GAAA,EAD3B,OAC2B,CAD3B;;AAAA,eAAA,CAAA;AACCD,YAAAA,QADD,GAAA,QAAA,CAAA,IACCA;AADD,mBAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAEEE,cAAc,CAAA,QAAA,EAAA,OAAA,EAAA,OAAA,EAFhB,GAEgB,CAFhB,CAAA;;AAAA,eAAA,CAAA;AAAA,eAAA,KAAA;AAAA,mBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,KAAA,EAAA,OAAA,CAAA","sourcesContent":["import {fetchFile} from './fetch/fetch-file';\nimport {parseInBatches} from './parse-in-batches';\n\nexport async function loadInBatches(url, loaders, options) {\n  const response = await fetchFile(url, options);\n  return parseInBatches(response, loaders, options, url);\n}\n"]},"metadata":{},"sourceType":"module"}