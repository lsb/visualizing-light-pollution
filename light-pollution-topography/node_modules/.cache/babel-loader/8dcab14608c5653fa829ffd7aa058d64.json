{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { getRegisteredLoaders } from './register-loaders';\nimport { normalizeLoader } from './loader-utils/normalize-loader';\nimport { isFetchResponse } from '../javascript-utils/is-type';\nvar EXT_PATTERN = /\\.([^.]+)$/;\nvar DATA_URL_PATTERN = /^data:(.*?)(;|,)/;\nexport function selectLoader(loaders) {\n  var url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n  var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n      _ref$nothrow = _ref.nothrow,\n      nothrow = _ref$nothrow === void 0 ? false : _ref$nothrow;\n\n  url = url || '';\n\n  if (loaders && !Array.isArray(loaders)) {\n    var _loader = loaders;\n    normalizeLoader(_loader);\n    return _loader;\n  }\n\n  loaders = [].concat(_toConsumableArray(loaders || []), _toConsumableArray(getRegisteredLoaders()));\n  normalizeLoaders(loaders);\n  url = url.replace(/\\?.*/, '');\n  var loader = findLoaderByUrl(loaders, url);\n  loader = loader || findLoaderByContentType(loaders, data);\n  loader = loader || findLoaderByExamingInitialData(loaders, data);\n\n  if (!loader) {\n    if (nothrow) {\n      return null;\n    }\n\n    var message = 'No valid loader found';\n\n    if (data) {\n      message += \" for data starting with \\\"\".concat(getFirstCharacters(data), \"\\\"\");\n    }\n\n    if (url) {\n      message += \" for \".concat(url);\n    }\n\n    throw new Error(message);\n  }\n\n  return loader;\n}\n\nfunction normalizeLoaders(loaders) {\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = loaders[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var loader = _step.value;\n      normalizeLoader(loader);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n        _iterator[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n}\n\nfunction findLoaderByUrl(loaders, url) {\n  var match = url.match(DATA_URL_PATTERN);\n  var mimeType = match && match[1];\n\n  if (mimeType) {\n    return findLoaderByMimeType(loaders, mimeType);\n  }\n\n  match = url.match(EXT_PATTERN);\n  var extension = match && match[1];\n  return extension && findLoaderByExtension(loaders, extension);\n}\n\nfunction findLoaderByMimeType(loaders, mimeType) {\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = loaders[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var loader = _step2.value;\n\n      if (loader.mimeTypes && loader.mimeTypes.includes(mimeType)) {\n        return loader;\n      }\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n        _iterator2[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction findLoaderByExtension(loaders, extension) {\n  extension = extension.toLowerCase();\n  var _iteratorNormalCompletion3 = true;\n  var _didIteratorError3 = false;\n  var _iteratorError3 = undefined;\n\n  try {\n    for (var _iterator3 = loaders[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n      var loader = _step3.value;\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = loader.extensions[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var loaderExtension = _step4.value;\n\n          if (loaderExtension.toLowerCase() === extension) {\n            return loader;\n          }\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4[\"return\"] != null) {\n            _iterator4[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError3 = true;\n    _iteratorError3 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion3 && _iterator3[\"return\"] != null) {\n        _iterator3[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError3) {\n        throw _iteratorError3;\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction findLoaderByContentType(loaders, data) {\n  if (!data || !isFetchResponse(data) || !data.headers) {\n    return null;\n  }\n\n  var contentType = data.headers.get('content-type');\n  return findLoaderByMimeType(loaders, contentType);\n}\n\nfunction findLoaderByExamingInitialData(loaders, data) {\n  if (!data) {\n    return null;\n  }\n\n  var _iteratorNormalCompletion5 = true;\n  var _didIteratorError5 = false;\n  var _iteratorError5 = undefined;\n\n  try {\n    for (var _iterator5 = loaders[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n      var loader = _step5.value;\n\n      if (typeof data === 'string') {\n        if (testText(data, loader)) {\n          return loader;\n        }\n      } else if (ArrayBuffer.isView(data)) {\n        if (testBinary(data.buffer, data.byteOffset, loader)) {\n          return loader;\n        }\n      } else if (data instanceof ArrayBuffer) {\n        var byteOffset = 0;\n\n        if (testBinary(data, byteOffset, loader)) {\n          return loader;\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError5 = true;\n    _iteratorError5 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion5 && _iterator5[\"return\"] != null) {\n        _iterator5[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError5) {\n        throw _iteratorError5;\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction testText(data, loader) {\n  return loader.testText && loader.testText(data);\n}\n\nfunction testBinary(data, byteOffset, loader) {\n  var type = Array.isArray(loader.test) ? 'array' : _typeof(loader.test);\n\n  switch (type) {\n    case 'function':\n      return loader.test(data, loader);\n\n    case 'string':\n    case 'array':\n      var tests = Array.isArray(loader.test) ? loader.test : [loader.test];\n      return tests.some(function (test) {\n        var magic = getMagicString(data, byteOffset, test.length);\n        return test === magic;\n      });\n\n    default:\n      return false;\n  }\n}\n\nfunction getFirstCharacters(data) {\n  var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;\n\n  if (typeof data === 'string') {\n    return data.slice(0, length);\n  } else if (ArrayBuffer.isView(data)) {\n    return getMagicString(data.buffer, data.byteOffset, length);\n  } else if (data instanceof ArrayBuffer) {\n    var byteOffset = 0;\n    return getMagicString(data, byteOffset, length);\n  }\n\n  return '';\n}\n\nfunction getMagicString(arrayBuffer, byteOffset, length) {\n  if (arrayBuffer.byteLength <= byteOffset + length) {\n    return '';\n  }\n\n  var dataView = new DataView(arrayBuffer);\n  var magic = '';\n\n  for (var i = 0; i < length; i++) {\n    magic += String.fromCharCode(dataView.getUint8(byteOffset + i));\n  }\n\n  return magic;\n}","map":{"version":3,"sources":["../../../src/lib/select-loader.js"],"names":["EXT_PATTERN","DATA_URL_PATTERN","url","data","nothrow","loaders","Array","loader","normalizeLoader","getRegisteredLoaders","normalizeLoaders","findLoaderByUrl","findLoaderByContentType","findLoaderByExamingInitialData","message","getFirstCharacters","match","mimeType","findLoaderByMimeType","extension","findLoaderByExtension","loaderExtension","isFetchResponse","contentType","testText","ArrayBuffer","testBinary","byteOffset","type","tests","magic","getMagicString","test","length","arrayBuffer","dataView","i","String"],"mappings":"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","sourcesContent":["import {getRegisteredLoaders} from './register-loaders';\nimport {normalizeLoader} from './loader-utils/normalize-loader';\nimport {isFetchResponse} from '../javascript-utils/is-type';\n\nconst EXT_PATTERN = /\\.([^.]+)$/;\nconst DATA_URL_PATTERN = /^data:(.*?)(;|,)/;\n\n// Find a loader that matches file extension and/or initial file content\n// Search the loaders array argument for a loader that matches url extension or initial data\n// Returns: a normalized loader\n\n// TODO - Need a variant that peeks at streams for parseInBatches\n// TODO - Detect multiple matching loaders? Use heuristics to grade matches?\n// TODO - Allow apps to pass context to disambiguate between multiple matches (e.g. multiple .json formats)?\n\n// eslint-disable-next-line complexity\nexport function selectLoader(loaders, url = '', data = null, {nothrow = false} = {}) {\n  url = url || '';\n\n  // if only a single loader was provided (not as array), force its use\n  // TODO - Should this behaviour be kept and documented?\n  if (loaders && !Array.isArray(loaders)) {\n    const loader = loaders;\n    normalizeLoader(loader);\n    return loader;\n  }\n\n  // If no loaders provided, get the registered loaders\n  loaders = [...(loaders || []), ...getRegisteredLoaders()];\n  normalizeLoaders(loaders);\n\n  url = url.replace(/\\?.*/, '');\n  let loader = findLoaderByUrl(loaders, url);\n  loader = loader || findLoaderByContentType(loaders, data);\n  loader = loader || findLoaderByExamingInitialData(loaders, data);\n\n  // no loader available\n  if (!loader) {\n    if (nothrow) {\n      return null;\n    }\n    let message = 'No valid loader found';\n    if (data) {\n      message += ` for data starting with \"${getFirstCharacters(data)}\"`;\n    }\n    if (url) {\n      message += ` for ${url}`;\n    }\n    throw new Error(message);\n  }\n\n  return loader;\n}\n\nfunction normalizeLoaders(loaders) {\n  for (const loader of loaders) {\n    normalizeLoader(loader);\n  }\n}\n\n// TODO - Would be nice to support http://example.com/file.glb?parameter=1\n// E.g: x = new URL('http://example.com/file.glb?load=1'; x.pathname\nfunction findLoaderByUrl(loaders, url) {\n  // Check for data url\n  let match = url.match(DATA_URL_PATTERN);\n  const mimeType = match && match[1];\n  if (mimeType) {\n    return findLoaderByMimeType(loaders, mimeType);\n  }\n  // Get extension\n  match = url.match(EXT_PATTERN);\n  const extension = match && match[1];\n  return extension && findLoaderByExtension(loaders, extension);\n}\n\nfunction findLoaderByMimeType(loaders, mimeType) {\n  for (const loader of loaders) {\n    if (loader.mimeTypes && loader.mimeTypes.includes(mimeType)) {\n      return loader;\n    }\n  }\n  return null;\n}\n\nfunction findLoaderByExtension(loaders, extension) {\n  extension = extension.toLowerCase();\n\n  for (const loader of loaders) {\n    for (const loaderExtension of loader.extensions) {\n      if (loaderExtension.toLowerCase() === extension) {\n        return loader;\n      }\n    }\n  }\n  return null;\n}\n\n// data should be a Response object\nfunction findLoaderByContentType(loaders, data) {\n  if (!data || !isFetchResponse(data) || !data.headers) {\n    return null;\n  }\n\n  const contentType = data.headers.get('content-type');\n  return findLoaderByMimeType(loaders, contentType);\n}\n\nfunction findLoaderByExamingInitialData(loaders, data) {\n  if (!data) {\n    return null;\n  }\n\n  for (const loader of loaders) {\n    if (typeof data === 'string') {\n      if (testText(data, loader)) {\n        return loader;\n      }\n    } else if (ArrayBuffer.isView(data)) {\n      // Typed Arrays can have offsets into underlying buffer\n      if (testBinary(data.buffer, data.byteOffset, loader)) {\n        return loader;\n      }\n    } else if (data instanceof ArrayBuffer) {\n      const byteOffset = 0;\n      if (testBinary(data, byteOffset, loader)) {\n        return loader;\n      }\n    }\n    // TODO Handle streaming case (requires creating a new AsyncIterator)\n  }\n  return null;\n}\n\nfunction testText(data, loader) {\n  return loader.testText && loader.testText(data);\n}\n\nfunction testBinary(data, byteOffset, loader) {\n  const type = Array.isArray(loader.test) ? 'array' : typeof loader.test;\n  switch (type) {\n    case 'function':\n      return loader.test(data, loader);\n\n    case 'string':\n    case 'array':\n      // Magic bytes check: If `loader.test` is a string or array of strings,\n      // check if binary data starts with one of those strings\n      const tests = Array.isArray(loader.test) ? loader.test : [loader.test];\n      return tests.some(test => {\n        const magic = getMagicString(data, byteOffset, test.length);\n        return test === magic;\n      });\n\n    default:\n      return false;\n  }\n}\n\nfunction getFirstCharacters(data, length = 5) {\n  if (typeof data === 'string') {\n    return data.slice(0, length);\n  } else if (ArrayBuffer.isView(data)) {\n    // Typed Arrays can have offsets into underlying buffer\n    return getMagicString(data.buffer, data.byteOffset, length);\n  } else if (data instanceof ArrayBuffer) {\n    const byteOffset = 0;\n    return getMagicString(data, byteOffset, length);\n  }\n  return '';\n}\n\nfunction getMagicString(arrayBuffer, byteOffset, length) {\n  if (arrayBuffer.byteLength <= byteOffset + length) {\n    return '';\n  }\n  const dataView = new DataView(arrayBuffer);\n  let magic = '';\n  for (let i = 0; i < length; i++) {\n    magic += String.fromCharCode(dataView.getUint8(byteOffset + i));\n  }\n  return magic;\n}\n"]},"metadata":{},"sourceType":"module"}