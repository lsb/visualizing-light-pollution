{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nexport function checkFetchResponseStatus(_x) {\n  return _checkFetchResponseStatus.apply(this, arguments);\n}\n\nfunction _checkFetchResponseStatus() {\n  _checkFetchResponseStatus = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(response) {\n    var errorMessage, text;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (response.ok) {\n              _context.next = 12;\n              break;\n            }\n\n            errorMessage = \"fetch failed \".concat(response.status, \" \");\n            _context.prev = 2;\n            _context.next = 5;\n            return response.text();\n\n          case 5:\n            text = _context.sent;\n            errorMessage += text;\n            _context.next = 11;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](2);\n\n          case 11:\n            throw new Error(errorMessage);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 9]]);\n  }));\n  return _checkFetchResponseStatus.apply(this, arguments);\n}\n\nexport function checkFetchResponseStatusSync(response) {\n  if (!response.ok) {\n    throw new Error(\"fetch failed \".concat(response.status));\n  }\n}","map":{"version":3,"sources":["../../../../src/lib/loader-utils/check-errors.js"],"names":["response","errorMessage","text"],"mappings":";;AAAA,OAAA,SAAA,wBAAA,CAAA,EAAA,EAAA;AAAA,SAAA,yBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;;yEAAO,SAAA,OAAA,CAAA,QAAA,EAAA;AAAA,QAAA,YAAA,EAAA,IAAA;AAAA,WAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,aAAA,CAAA,EAAA;AAAA,gBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,eAAA,CAAA;AAAA,gBACAA,QAAQ,CADR,EAAA,EAAA;AAAA,cAAA,QAAA,CAAA,IAAA,GAAA,EAAA;AAAA;AAAA;;AAECC,YAAAA,YAFD,GAAA,gBAAA,MAAA,CAEgCD,QAAQ,CAFxC,MAAA,EAAA,GAAA,CAECC;AAFD,YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA,YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA,mBAIkBD,QAAQ,CAJ1B,IAIkBA,EAJlB;;AAAA,eAAA,CAAA;AAIKE,YAAAA,IAJL,GAAA,QAAA,CAAA,IAIKA;AACND,YAAAA,YAAY,IAAZA,IAAAA;AALC,YAAA,QAAA,CAAA,IAAA,GAAA,EAAA;AAAA;;AAAA,eAAA,CAAA;AAAA,YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA,YAAA,QAAA,CAAA,EAAA,GAAA,QAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA;;AAAA,eAAA,EAAA;AAAA,kBASG,IAAA,KAAA,CATH,YASG,CATH;;AAAA,eAAA,EAAA;AAAA,eAAA,KAAA;AAAA,mBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,KAAA,EAAA,OAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA;;;;;AAaP,OAAO,SAAA,4BAAA,CAAA,QAAA,EAAgD;AACrD,MAAI,CAACD,QAAQ,CAAb,EAAA,EAAkB;AAChB,UAAM,IAAA,KAAA,CAAA,gBAAA,MAAA,CAA0BA,QAAQ,CAAxC,MAAM,CAAA,CAAN;AACD;AACF","sourcesContent":["export async function checkFetchResponseStatus(response) {\n  if (!response.ok) {\n    let errorMessage = `fetch failed ${response.status} `;\n    try {\n      const text = await response.text();\n      errorMessage += text;\n    } catch (error) {\n      // ignore error\n    }\n    throw new Error(errorMessage);\n  }\n}\n\nexport function checkFetchResponseStatusSync(response) {\n  if (!response.ok) {\n    throw new Error(`fetch failed ${response.status}`);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}