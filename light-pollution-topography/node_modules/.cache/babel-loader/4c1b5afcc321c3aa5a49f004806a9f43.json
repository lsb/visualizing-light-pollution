{"ast":null,"code":"import _toConsumableArray from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _assertThisInitialized from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _createSuper from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _inherits from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Field } from './schema';\nimport { Vector } from './vector';\nimport { Chunked } from './vector/chunked';\nexport var Column = /*#__PURE__*/function (_Chunked) {\n  _inherits(Column, _Chunked);\n\n  var _super = _createSuper(Column);\n\n  function Column(field) {\n    var _this;\n\n    var vectors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var offsets = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, Column);\n\n    vectors = Chunked.flatten.apply(Chunked, _toConsumableArray(vectors));\n    _this = _super.call(this, field.type, vectors, offsets);\n    _this._field = field;\n\n    if (vectors.length === 1 && !(_assertThisInitialized(_this) instanceof SingleChunkColumn)) {\n      return _possibleConstructorReturn(_this, new SingleChunkColumn(field, vectors[0], _this._chunkOffsets));\n    }\n\n    return _this;\n  }\n  /** @nocollapse */\n\n\n  _createClass(Column, [{\n    key: \"clone\",\n    value: function clone() {\n      var chunks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._chunks;\n      return new Column(this._field, chunks);\n    }\n  }, {\n    key: \"getChildAt\",\n    value: function getChildAt(index) {\n      if (index < 0 || index >= this.numChildren) {\n        return null;\n      }\n\n      var columns = this._children || (this._children = []);\n      var column, field, chunks;\n\n      if (column = columns[index]) {\n        return column;\n      }\n\n      if (field = (this.type.children || [])[index]) {\n        chunks = this._chunks.map(function (vector) {\n          return vector.getChildAt(index);\n        }).filter(function (vec) {\n          return vec != null;\n        });\n\n        if (chunks.length > 0) {\n          return columns[index] = new Column(field, chunks);\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"field\",\n    get: function get() {\n      return this._field;\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this._field.name;\n    }\n  }, {\n    key: \"nullable\",\n    get: function get() {\n      return this._field.nullable;\n    }\n  }, {\n    key: \"metadata\",\n    get: function get() {\n      return this._field.metadata;\n    }\n  }], [{\n    key: \"new\",\n    value: function _new(field, data) {\n      for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        rest[_key - 2] = arguments[_key];\n      }\n\n      var chunks = Chunked.flatten(Array.isArray(data) ? [].concat(_toConsumableArray(data), rest) : data instanceof Vector ? [data].concat(rest) : [Vector.new.apply(Vector, [data].concat(rest))]);\n\n      if (typeof field === 'string') {\n        var type = chunks[0].data.type;\n        field = new Field(field, type, true);\n      } else if (!field.nullable && chunks.some(function (_ref) {\n        var nullCount = _ref.nullCount;\n        return nullCount > 0;\n      })) {\n        field = field.clone({\n          nullable: true\n        });\n      }\n\n      return new Column(field, chunks);\n    }\n  }]);\n\n  return Column;\n}(Chunked);\n/** @ignore */\n\nvar SingleChunkColumn = /*#__PURE__*/function (_Column) {\n  _inherits(SingleChunkColumn, _Column);\n\n  var _super2 = _createSuper(SingleChunkColumn);\n\n  function SingleChunkColumn(field, vector, offsets) {\n    var _this2;\n\n    _classCallCheck(this, SingleChunkColumn);\n\n    _this2 = _super2.call(this, field, [vector], offsets);\n    _this2._chunk = vector;\n    return _this2;\n  }\n\n  _createClass(SingleChunkColumn, [{\n    key: \"search\",\n    value: function search(index, then) {\n      return then ? then(this, 0, index) : [0, index];\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid(index) {\n      return this._chunk.isValid(index);\n    }\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      return this._chunk.get(index);\n    }\n  }, {\n    key: \"set\",\n    value: function set(index, value) {\n      this._chunk.set(index, value);\n    }\n  }, {\n    key: \"indexOf\",\n    value: function indexOf(element, offset) {\n      return this._chunk.indexOf(element, offset);\n    }\n  }]);\n\n  return SingleChunkColumn;\n}(Column);","map":{"version":3,"sources":["column.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Field } from './schema';\nimport { DataType } from './type';\nimport { Vector } from './vector';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { VectorCtorArgs, VectorType as V } from './interfaces';\nimport { Chunked, SearchContinuation } from './vector/chunked';\n\nexport interface Column<T extends DataType = any> {\n    typeId: T['TType'];\n    concat(...others: Vector<T>[]): Column<T>;\n    slice(begin?: number, end?: number): Column<T>;\n    clone(chunks?: Vector<T>[], offsets?: Uint32Array): Column<T>;\n}\n\nexport class Column<T extends DataType = any>\n    extends Chunked<T>\n    implements Clonable<Column<T>>,\n               Sliceable<Column<T>>,\n               Applicative<T, Column<T>> {\n\n    public static new<T extends DataType>(field: string | Field<T>, ...chunks: (Vector<T> | Vector<T>[])[]): Column<T>;\n    public static new<T extends DataType>(field: string | Field<T>, data: Data<T>, ...args: VectorCtorArgs<V<T>>): Column<T>;\n    /** @nocollapse */\n    public static new<T extends DataType = any>(field: string | Field<T>, data: Data<T> | Vector<T> | (Data<T> | Vector<T>)[], ...rest: any[]) {\n\n        const chunks = Chunked.flatten<T>(\n            Array.isArray(data) ? [...data, ...rest] :\n            data instanceof Vector ? [data, ...rest] :\n            [Vector.new(data, ...rest)]\n        );\n\n        if (typeof field === 'string') {\n            const type = chunks[0].data.type;\n            field = new Field(field, type, true);\n        } else if (!field.nullable && chunks.some(({ nullCount }) => nullCount > 0)) {\n            field = field.clone({ nullable: true });\n        }\n        return new Column(field, chunks);\n    }\n\n    constructor(field: Field<T>, vectors: Vector<T>[] = [], offsets?: Uint32Array) {\n        vectors = Chunked.flatten<T>(...vectors);\n        super(field.type, vectors, offsets);\n        this._field = field;\n        if (vectors.length === 1 && !(this instanceof SingleChunkColumn)) {\n            return new SingleChunkColumn(field, vectors[0], this._chunkOffsets);\n        }\n    }\n\n    protected _field: Field<T>;\n    protected _children?: Column[];\n\n    public get field() { return this._field; }\n    public get name() { return this._field.name; }\n    public get nullable() { return this._field.nullable; }\n    public get metadata() { return this._field.metadata; }\n\n    public clone(chunks = this._chunks) {\n        return new Column(this._field, chunks);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\n\n        if (index < 0 || index >= this.numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let column: Column<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (column = columns[index]) { return column; }\n        if (field = ((this.type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column<R>(field, chunks));\n            }\n        }\n\n        return null;\n    }\n}\n\n/** @ignore */\nclass SingleChunkColumn<T extends DataType = any> extends Column<T> {\n    protected _chunk: Vector<T>;\n    constructor(field: Field<T>, vector: Vector<T>, offsets?: Uint32Array) {\n        super(field, [vector], offsets);\n        this._chunk = vector;\n    }\n    public search(index: number): [number, number] | null;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N): ReturnType<N>;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N) {\n        return then ? then(this, 0, index) : [0, index];\n    }\n    public isValid(index: number): boolean {\n        return this._chunk.isValid(index);\n    }\n    public get(index: number): T['TValue'] | null {\n        return this._chunk.get(index);\n    }\n    public set(index: number, value: T['TValue'] | null): void {\n        this._chunk.set(index, value);\n    }\n    public indexOf(element: T['TValue'], offset?: number): number {\n        return this._chunk.indexOf(element, offset);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}