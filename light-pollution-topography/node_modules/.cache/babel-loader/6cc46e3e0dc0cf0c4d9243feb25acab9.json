{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { assert } from '@loaders.gl/loader-utils';\n\nvar ManagedArray = function () {\n  function ManagedArray() {\n    var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n    _classCallCheck(this, ManagedArray);\n\n    this._array = new Array(length);\n    this._map = new Map();\n    this._length = length;\n  }\n\n  _createClass(ManagedArray, [{\n    key: \"get\",\n    value: function get(index) {\n      assert(index < this._array.length);\n      return this._array[index];\n    }\n  }, {\n    key: \"set\",\n    value: function set(index, element) {\n      assert(index >= 0);\n\n      if (index >= this.length) {\n        this.length = index + 1;\n      }\n\n      if (this._map.has(this._array[index])) {\n        this._map[\"delete\"](this._array[index]);\n      }\n\n      this._array[index] = element;\n\n      this._map.set(element, index);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(element) {\n      var index = this._map.get(element);\n\n      if (index >= 0) {\n        this._array.splice(index, 1);\n\n        this._map[\"delete\"](element);\n\n        this.length--;\n      }\n    }\n  }, {\n    key: \"peek\",\n    value: function peek() {\n      return this._array[this._length - 1];\n    }\n  }, {\n    key: \"push\",\n    value: function push(element) {\n      if (!this._map.has(element)) {\n        var index = this.length++;\n        this._array[index] = element;\n\n        this._map.set(element, index);\n      }\n    }\n  }, {\n    key: \"pop\",\n    value: function pop() {\n      var element = this._array[--this.length];\n\n      this._map[\"delete\"](element);\n\n      return element;\n    }\n  }, {\n    key: \"reserve\",\n    value: function reserve(length) {\n      assert(length >= 0);\n\n      if (length > this._array.length) {\n        this._array.length = length;\n      }\n    }\n  }, {\n    key: \"resize\",\n    value: function resize(length) {\n      assert(length >= 0);\n      this.length = length;\n    }\n  }, {\n    key: \"trim\",\n    value: function trim(length) {\n      if (length === null || length === undefined) {\n        length = this.length;\n      }\n\n      this._array.length = length;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this._array = [];\n      this._map = new Map();\n      this._length = 0;\n    }\n  }, {\n    key: \"find\",\n    value: function find(target) {\n      return this._map.has(target);\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this._length;\n    },\n    set: function set(length) {\n      this._length = length;\n\n      if (length > this._array.length) {\n        this._array.length = length;\n      }\n    }\n  }, {\n    key: \"values\",\n    get: function get() {\n      return this._array;\n    }\n  }]);\n\n  return ManagedArray;\n}();\n\nexport { ManagedArray as default };","map":{"version":3,"sources":["../../../src/utils/managed-array.js"],"names":["ManagedArray","length","index","assert","element","target"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {assert} from '@loaders.gl/loader-utils';\n\n/**\n * A wrapper around arrays so that the internal length of the array can be manually managed.\n *\n * @alias ManagedArray\n * @constructor\n * @private\n *\n * @param {Number} [length=0] The initial length of the array.\n */\nexport default class ManagedArray {\n  constructor(length = 0) {\n    this._array = new Array(length);\n    this._map = new Map();\n    this._length = length;\n  }\n\n  /**\n   * Gets or sets the length of the array.\n   * If the set length is greater than the length of the internal array, the internal array is resized.\n   *\n   * @memberof ManagedArray.prototype\n   * @type Number\n   */\n  get length() {\n    return this._length;\n  }\n\n  set length(length) {\n    this._length = length;\n    if (length > this._array.length) {\n      this._array.length = length;\n    }\n  }\n\n  /**\n   * Gets the internal array.\n   *\n   * @memberof ManagedArray.prototype\n   * @type Array\n   * @readonly\n   */\n  get values() {\n    return this._array;\n  }\n\n  /**\n   * Gets the element at an index.\n   *\n   * @param {Number} index The index to get.\n   */\n  get(index) {\n    assert(index < this._array.length);\n    return this._array[index];\n  }\n\n  /**\n   * Sets the element at an index. Resizes the array if index is greater than the length of the array.\n   *\n   * @param {Number} index The index to set.\n   * @param {*} element The element to set at index.\n   */\n  set(index, element) {\n    assert(index >= 0);\n\n    if (index >= this.length) {\n      this.length = index + 1;\n    }\n\n    if (this._map.has(this._array[index])) {\n      this._map.delete(this._array[index]);\n    }\n\n    this._array[index] = element;\n    this._map.set(element, index);\n  }\n\n  delete(element) {\n    const index = this._map.get(element);\n    if (index >= 0) {\n      this._array.splice(index, 1);\n      this._map.delete(element);\n      this.length--;\n    }\n  }\n\n  /**\n   * Returns the last element in the array without modifying the array.\n   *\n   * @returns {*} The last element in the array.\n   */\n  peek() {\n    return this._array[this._length - 1];\n  }\n\n  /**\n   * Push an element into the array.\n   *\n   * @param {*} element The element to push.\n   */\n  push(element) {\n    if (!this._map.has(element)) {\n      const index = this.length++;\n      this._array[index] = element;\n      this._map.set(element, index);\n    }\n  }\n\n  /**\n   * Pop an element from the array.\n   *\n   * @returns {*} The last element in the array.\n   */\n  pop() {\n    const element = this._array[--this.length];\n    this._map.delete(element);\n    return element;\n  }\n\n  /**\n   * Resize the internal array if length > _array.length.\n   *\n   * @param {Number} length The length.\n   */\n  reserve(length) {\n    assert(length >= 0);\n\n    if (length > this._array.length) {\n      this._array.length = length;\n    }\n  }\n\n  /**\n   * Resize the array.\n   *\n   * @param {Number} length The length.\n   */\n  resize(length) {\n    assert(length >= 0);\n\n    this.length = length;\n  }\n\n  /**\n   * Trim the internal array to the specified length. Defaults to the current length.\n   *\n   * @param {Number} [length] The length.\n   */\n  trim(length) {\n    if (length === null || length === undefined) {\n      length = this.length;\n    }\n    this._array.length = length;\n  }\n\n  reset() {\n    this._array = [];\n    this._map = new Map();\n    this._length = 0;\n  }\n\n  find(target) {\n    return this._map.has(target);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}