{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { Vector3, Matrix4 } from '@math.gl/core';\nimport { CullingVolume } from '@math.gl/culling';\nimport { load } from '@loaders.gl/core';\nimport { assert, path } from '@loaders.gl/loader-utils';\nimport { TILE_REFINEMENT, TILE_CONTENT_STATE, TILESET_TYPE } from '../constants';\nimport { createBoundingVolume } from './helpers/bounding-volume';\nimport { getTiles3DScreenSpaceError } from './helpers/tiles-3d-lod';\nimport { getI3ScreenSize } from './helpers/i3s-lod';\nvar scratchVector = new Vector3();\n\nfunction defined(x) {\n  return x !== undefined && x !== null;\n}\n\nfunction updatePriority(tile) {\n  if (!tile.isVisible) {\n    return -1;\n  }\n\n  if (tile.contentState === TILE_CONTENT_STATE.UNLOADED) {\n    return -1;\n  }\n\n  return Math.max(1e7 - tile._priority, 0) || 0;\n}\n\nvar TileHeader = function () {\n  function TileHeader(tileset, header, parentHeader) {\n    _classCallCheck(this, TileHeader);\n\n    assert(_typeof(header) === 'object');\n    this.header = header;\n    this.tileset = tileset;\n    this.id = header.id;\n    this.url = header.url;\n    this.parent = parentHeader;\n    this.refine = this._getRefine(header.refine);\n    this.type = header.type;\n    this.contentUrl = header.contentUrl;\n    this.lodMetricType = null;\n    this.lodMetricValue = null;\n    this.boundingVolume = null;\n    this.content = null;\n    this.contentState = TILE_CONTENT_STATE.UNLOADED;\n    this.gpuMemoryUsageInBytes = 0;\n    this.children = [];\n    this.depth = 0;\n    this._cacheNode = null;\n    this._frameNumber = null;\n    this._cacheNode = null;\n\n    this._initializeLodMetric(header);\n\n    this._initializeTransforms(header);\n\n    this._initializeBoundingVolumes(header);\n\n    this._initializeContent(header);\n\n    this._initializeRenderingState(header);\n\n    this._lodJudge = null;\n    this._expireDate = null;\n    this._expiredContent = null;\n    Object.seal(this);\n  }\n\n  _createClass(TileHeader, [{\n    key: \"destroy\",\n    value: function destroy() {\n      this.header = null;\n    }\n  }, {\n    key: \"isDestroyed\",\n    value: function isDestroyed() {\n      return this.header === null;\n    }\n  }, {\n    key: \"getScreenSpaceError\",\n    value: function getScreenSpaceError(frameState, useParentLodMetric) {\n      switch (this.tileset.type) {\n        case TILESET_TYPE.I3S:\n          return getI3ScreenSize(this, frameState);\n\n        case TILESET_TYPE.TILES3D:\n          return getTiles3DScreenSpaceError(this, frameState, useParentLodMetric);\n\n        default:\n          console.error('Unsupported tileset type');\n          return null;\n      }\n    }\n  }, {\n    key: \"loadContent\",\n    value: function () {\n      var _loadContent = _asyncToGenerator(_regeneratorRuntime.mark(function _callee() {\n        var expired, cancelled, contentUrl, fetchOptions, loader, options;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.hasEmptyContent) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", false);\n\n              case 2:\n                if (!this.content) {\n                  _context.next = 4;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", true);\n\n              case 4:\n                expired = this.contentExpired;\n\n                if (expired) {\n                  this._expireDate = null;\n                }\n\n                this.contentState = TILE_CONTENT_STATE.LOADING;\n                _context.next = 9;\n                return this.tileset._requestScheduler.scheduleRequest(this, updatePriority);\n\n              case 9:\n                cancelled = !_context.sent;\n\n                if (!cancelled) {\n                  _context.next = 13;\n                  break;\n                }\n\n                this.contentState = TILE_CONTENT_STATE.UNLOADED;\n                return _context.abrupt(\"return\", false);\n\n              case 13:\n                _context.prev = 13;\n                contentUrl = this.tileset.getTileUrl(this.contentUrl);\n\n                this.tileset._requestScheduler.startRequest(this);\n\n                fetchOptions = this.tileset.fetchOptions;\n                loader = this.tileset.loader;\n                options = _objectSpread({}, fetchOptions, _defineProperty({}, loader.id, {\n                  tile: this.header,\n                  tileset: this.tileset.tileset\n                }));\n                _context.next = 21;\n                return load(contentUrl, loader, options);\n\n              case 21:\n                this.content = _context.sent;\n\n                if (this._isTileset()) {\n                  this.tileset._initializeTileHeaders(this.content, this, path.dirname(this.contentUrl));\n                }\n\n                this.contentState = TILE_CONTENT_STATE.READY;\n\n                this._onContentLoaded();\n\n                return _context.abrupt(\"return\", true);\n\n              case 28:\n                _context.prev = 28;\n                _context.t0 = _context[\"catch\"](13);\n                this.contentState = TILE_CONTENT_STATE.FAILED;\n                throw _context.t0;\n\n              case 32:\n                _context.prev = 32;\n\n                this.tileset._requestScheduler.endRequest(this);\n\n                return _context.finish(32);\n\n              case 35:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[13, 28, 32, 35]]);\n      }));\n\n      function loadContent() {\n        return _loadContent.apply(this, arguments);\n      }\n\n      return loadContent;\n    }()\n  }, {\n    key: \"unloadContent\",\n    value: function unloadContent() {\n      if (this.content && this.content.destroy) {\n        this.content.destroy();\n      }\n\n      this.content = null;\n      this.contentState = TILE_CONTENT_STATE.UNLOADED;\n      return true;\n    }\n  }, {\n    key: \"updateVisibility\",\n    value: function updateVisibility(frameState) {\n      if (this._frameNumber === frameState.frameNumber) {\n        return;\n      }\n\n      var parent = this.parent;\n      var parentTransform = parent ? parent.computedTransform : this.tileset.modelMatrix;\n      var parentVisibilityPlaneMask = parent ? parent._visibilityPlaneMask : CullingVolume.MASK_INDETERMINATE;\n\n      this._updateTransform(parentTransform);\n\n      this._distanceToCamera = this.distanceToTile(frameState);\n      this._screenSpaceError = this.getScreenSpaceError(frameState, false);\n      this._visibilityPlaneMask = this.visibility(frameState, parentVisibilityPlaneMask);\n      this._visible = this._visibilityPlaneMask !== CullingVolume.MASK_OUTSIDE;\n      this._inRequestVolume = this.insideViewerRequestVolume(frameState);\n      this._priority = this.lodMetricValue;\n      this._frameNumber = frameState.frameNumber;\n    }\n  }, {\n    key: \"visibility\",\n    value: function visibility(frameState, parentVisibilityPlaneMask) {\n      var cullingVolume = frameState.cullingVolume;\n      var boundingVolume = this.boundingVolume;\n      return cullingVolume.computeVisibilityWithPlaneMask(boundingVolume, parentVisibilityPlaneMask);\n    }\n  }, {\n    key: \"contentVisibility\",\n    value: function contentVisibility(frameState) {\n      return true;\n    }\n  }, {\n    key: \"distanceToTile\",\n    value: function distanceToTile(frameState) {\n      var boundingVolume = this.boundingVolume;\n      return Math.sqrt(Math.max(boundingVolume.distanceSquaredTo(frameState.camera.position), 0));\n    }\n  }, {\n    key: \"cameraSpaceZDepth\",\n    value: function cameraSpaceZDepth(_ref) {\n      var camera = _ref.camera;\n      var boundingVolume = this.boundingVolume;\n      scratchVector.subVectors(boundingVolume.center, camera.position);\n      return camera.direction.dot(scratchVector);\n    }\n  }, {\n    key: \"insideViewerRequestVolume\",\n    value: function insideViewerRequestVolume(frameState) {\n      var viewerRequestVolume = this._viewerRequestVolume;\n      return !viewerRequestVolume || viewerRequestVolume.distanceToCamera(frameState) === 0.0;\n    }\n  }, {\n    key: \"_initializeLodMetric\",\n    value: function _initializeLodMetric(header) {\n      if ('lodMetricType' in header) {\n        this.lodMetricType = header.lodMetricType;\n      } else {\n        this.lodMetricType = this.parent && this.parent.lodMetricType || this.tileset.lodMetricType;\n        console.warn(\"3D Tile: Required prop lodMetricType is undefined. Using parent lodMetricType\");\n      }\n\n      if ('lodMetricValue' in header) {\n        this.lodMetricValue = header.lodMetricValue;\n      } else {\n        this.lodMetricValue = this.parent && this.parent.lodMetricValue || this.tileset.lodMetricValue;\n        console.warn(\"3D Tile: Required prop lodMetricValue is undefined. Using parent lodMetricValue\");\n      }\n    }\n  }, {\n    key: \"_initializeTransforms\",\n    value: function _initializeTransforms(tileHeader) {\n      this.transform = tileHeader.transform ? new Matrix4(tileHeader.transform) : new Matrix4();\n      var parent = this.parent;\n      var tileset = this.tileset;\n      var parentTransform = parent && parent.computedTransform ? parent.computedTransform.clone() : tileset.modelMatrix.clone();\n      this.computedTransform = new Matrix4(parentTransform).multiplyRight(this.transform);\n      var parentInitialTransform = parent && parent._initialTransform ? parent._initialTransform.clone() : new Matrix4();\n      this._initialTransform = new Matrix4(parentInitialTransform).multiplyRight(this.transform);\n    }\n  }, {\n    key: \"_initializeBoundingVolumes\",\n    value: function _initializeBoundingVolumes(tileHeader) {\n      this._contentBoundingVolume = null;\n      this._viewerRequestVolume = null;\n\n      this._updateBoundingVolume(tileHeader);\n    }\n  }, {\n    key: \"_initializeContent\",\n    value: function _initializeContent(tileHeader) {\n      this.content = {\n        _tileset: this.tileset,\n        _tile: this\n      };\n      this.hasEmptyContent = true;\n      this.contentState = TILE_CONTENT_STATE.UNLOADED;\n      this.hasTilesetContent = false;\n\n      if (tileHeader.contentUrl) {\n        this.content = null;\n        this.hasEmptyContent = false;\n      }\n    }\n  }, {\n    key: \"_initializeRenderingState\",\n    value: function _initializeRenderingState(header) {\n      this.depth = header.level;\n      this._shouldRefine = false;\n      this._distanceToCamera = 0;\n      this._centerZDepth = 0;\n      this._screenSpaceError = 0;\n      this._visibilityPlaneMask = CullingVolume.MASK_INDETERMINATE;\n      this._visible = false;\n      this._inRequestVolume = false;\n      this._stackLength = 0;\n      this._selectionDepth = 0;\n      this._frameNumber = 0;\n      this._touchedFrame = 0;\n      this._visitedFrame = 0;\n      this._selectedFrame = 0;\n      this._requestedFrame = 0;\n      this._priority = 0.0;\n    }\n  }, {\n    key: \"_getRefine\",\n    value: function _getRefine(refine) {\n      return refine || this.parent && this.parent.refine || TILE_REFINEMENT.REPLACE;\n    }\n  }, {\n    key: \"_isTileset\",\n    value: function _isTileset() {\n      return this.contentUrl.indexOf('.json') !== -1;\n    }\n  }, {\n    key: \"_onContentLoaded\",\n    value: function _onContentLoaded() {\n      switch (this.content && this.content.type) {\n        case 'vctr':\n        case 'geom':\n          this.tileset.traverser.disableSkipLevelOfDetail = true;\n          break;\n\n        default:\n      }\n\n      if (this._isTileset()) {\n        this.hasTilesetContent = true;\n      }\n    }\n  }, {\n    key: \"_updateBoundingVolume\",\n    value: function _updateBoundingVolume(header) {\n      this.boundingVolume = createBoundingVolume(header.boundingVolume, this.computedTransform, this.boundingVolume);\n      var content = header.content;\n\n      if (!content) {\n        return;\n      }\n\n      if (content.boundingVolume) {\n        this._contentBoundingVolume = createBoundingVolume(content.boundingVolume, this.computedTransform, this._contentBoundingVolume);\n      }\n\n      if (header.viewerRequestVolume) {\n        this._viewerRequestVolume = createBoundingVolume(header.viewerRequestVolume, this.computedTransform, this._viewerRequestVolume);\n      }\n    }\n  }, {\n    key: \"_updateTransform\",\n    value: function _updateTransform() {\n      var parentTransform = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Matrix4();\n      var computedTransform = parentTransform.clone().multiplyRight(this.transform);\n      var didTransformChange = !computedTransform.equals(this.computedTransform);\n\n      if (!didTransformChange) {\n        return;\n      }\n\n      this.computedTransform = computedTransform;\n\n      this._updateBoundingVolume(this.header);\n    }\n  }, {\n    key: \"updateExpiration\",\n    value: function updateExpiration() {\n      if (defined(this._expireDate) && this.contentReady && !this.hasEmptyContent) {\n        var now = Date.now();\n\n        if (Date.lessThan(this._expireDate, now)) {\n          this.contentState = TILE_CONTENT_STATE.EXPIRED;\n          this._expiredContent = this.content;\n        }\n      }\n    }\n  }, {\n    key: \"selected\",\n    get: function get() {\n      return this._selectedFrame === this.tileset._frameNumber;\n    }\n  }, {\n    key: \"isVisible\",\n    get: function get() {\n      return this._visible;\n    }\n  }, {\n    key: \"isVisibleAndInRequestVolume\",\n    get: function get() {\n      return this._visible && this._inRequestVolume;\n    }\n  }, {\n    key: \"hasRenderContent\",\n    get: function get() {\n      return !this.hasEmptyContent && !this.hasTilesetContent;\n    }\n  }, {\n    key: \"hasChildren\",\n    get: function get() {\n      return this.children.length > 0 || this.header.children && this.header.children.length > 0;\n    }\n  }, {\n    key: \"contentReady\",\n    get: function get() {\n      return this.contentState === TILE_CONTENT_STATE.READY || this.hasEmptyContent;\n    }\n  }, {\n    key: \"contentAvailable\",\n    get: function get() {\n      return Boolean(this.contentReady && this.hasRenderContent || this._expiredContent && !this.contentFailed);\n    }\n  }, {\n    key: \"hasUnloadedContent\",\n    get: function get() {\n      return this.hasRenderContent && this.contentUnloaded;\n    }\n  }, {\n    key: \"contentUnloaded\",\n    get: function get() {\n      return this.contentState === TILE_CONTENT_STATE.UNLOADED;\n    }\n  }, {\n    key: \"contentExpired\",\n    get: function get() {\n      return this.contentState === TILE_CONTENT_STATE.EXPIRED;\n    }\n  }, {\n    key: \"contentFailed\",\n    get: function get() {\n      return this.contentState === TILE_CONTENT_STATE.FAILED;\n    }\n  }, {\n    key: \"extras\",\n    get: function get() {\n      return this.header.extras;\n    }\n  }]);\n\n  return TileHeader;\n}();\n\nexport { TileHeader as default };","map":{"version":3,"sources":["../../../src/tileset/tile-3d.js"],"names":["scratchVector","x","tile","TILE_CONTENT_STATE","Math","TileHeader","assert","header","Object","Boolean","frameState","useParentLodMetric","TILESET_TYPE","getI3ScreenSize","getTiles3DScreenSpaceError","console","hasEmptyContent","content","expired","contentExpired","cancelled","contentUrl","fetchOptions","loader","options","id","tileset","load","path","parent","parentTransform","parentVisibilityPlaneMask","CullingVolume","cullingVolume","boundingVolume","camera","viewerRequestVolume","tileHeader","parentInitialTransform","_tileset","_tile","refine","TILE_REFINEMENT","createBoundingVolume","computedTransform","didTransformChange","defined","now","Date"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\nimport {Vector3, Matrix4} from '@math.gl/core';\nimport {CullingVolume} from '@math.gl/culling';\n\nimport {load} from '@loaders.gl/core';\nimport {assert, path} from '@loaders.gl/loader-utils';\nimport {TILE_REFINEMENT, TILE_CONTENT_STATE, TILESET_TYPE} from '../constants';\n\nimport {createBoundingVolume} from './helpers/bounding-volume';\nimport {getTiles3DScreenSpaceError} from './helpers/tiles-3d-lod';\nimport {getI3ScreenSize} from './helpers/i3s-lod';\n\nconst scratchVector = new Vector3();\n\nfunction defined(x) {\n  return x !== undefined && x !== null;\n}\n\nfunction updatePriority(tile) {\n  // Check if any reason to abort\n  if (!tile.isVisible) {\n    return -1;\n  }\n  if (tile.contentState === TILE_CONTENT_STATE.UNLOADED) {\n    return -1;\n  }\n\n  return Math.max(1e7 - tile._priority, 0) || 0;\n}\n\n// A Tile3DHeader represents a tile as Tileset3D. When a tile is first created, its content is not loaded;\n// the content is loaded on-demand when needed based on the view.\n// Do not construct this directly, instead access tiles through {@link Tileset3D#tileVisible}.\nexport default class TileHeader {\n  // eslint-disable-next-line max-statements\n  constructor(tileset, header, parentHeader) {\n    assert(typeof header === 'object');\n\n    // PUBLIC MEMBERS\n    // original tile data\n    this.header = header;\n    // The tileset containing this tile.\n    this.tileset = tileset;\n    this.id = header.id;\n    this.url = header.url;\n    // This tile's parent or `undefined` if this tile is the root.\n    this.parent = parentHeader;\n    this.refine = this._getRefine(header.refine);\n    this.type = header.type;\n    this.contentUrl = header.contentUrl;\n    // The error, in meters, introduced if this tile is rendered and its children are not.\n    this.lodMetricType = null;\n    this.lodMetricValue = null;\n    // Specifies the type of refine that is used when traversing this tile for rendering.\n    this.boundingVolume = null;\n    // The tile's content.  This represents the actual tile's payload,\n    // not the content's metadata in the tileset JSON file.\n    this.content = null;\n    this.contentState = TILE_CONTENT_STATE.UNLOADED;\n    this.gpuMemoryUsageInBytes = 0;\n    // The tile's children - an array of Tile3D objects.\n    this.children = [];\n\n    this.depth = 0;\n\n    // PRIVATE MEMBERS\n    this._cacheNode = null;\n    this._frameNumber = null;\n    this._cacheNode = null;\n\n    this._initializeLodMetric(header);\n    this._initializeTransforms(header);\n    this._initializeBoundingVolumes(header);\n    this._initializeContent(header);\n    this._initializeRenderingState(header);\n\n    // TODO i3s specific, needs to remove\n    this._lodJudge = null;\n\n    // TODO Cesium 3d tiles specific\n    this._expireDate = null;\n    this._expiredContent = null;\n\n    Object.seal(this);\n  }\n\n  destroy() {\n    this.header = null;\n  }\n\n  isDestroyed() {\n    return this.header === null;\n  }\n\n  get selected() {\n    return this._selectedFrame === this.tileset._frameNumber;\n  }\n\n  get isVisible() {\n    return this._visible;\n  }\n\n  get isVisibleAndInRequestVolume() {\n    return this._visible && this._inRequestVolume;\n  }\n\n  // Returns true if tile is not an empty tile and not an external tileset\n  get hasRenderContent() {\n    return !this.hasEmptyContent && !this.hasTilesetContent;\n  }\n\n  get hasChildren() {\n    return this.children.length > 0 || (this.header.children && this.header.children.length > 0);\n  }\n\n  // Determines if the tile's content is ready. This is automatically `true` for\n  // tile's with empty content.\n  get contentReady() {\n    return this.contentState === TILE_CONTENT_STATE.READY || this.hasEmptyContent;\n  }\n\n  // Determines if the tile has available content to render.  `true` if the tile's\n  // content is ready or if it has expired content this renders while new content loads; otherwise,\n  get contentAvailable() {\n    return Boolean(\n      (this.contentReady && this.hasRenderContent) || (this._expiredContent && !this.contentFailed)\n    );\n  }\n\n  // Returns true if tile has renderable content but it's unloaded\n  get hasUnloadedContent() {\n    return this.hasRenderContent && this.contentUnloaded;\n  }\n\n  // Determines if the tile's content has not be requested. `true` if tile's\n  // content has not be requested; otherwise, `false`.\n  get contentUnloaded() {\n    return this.contentState === TILE_CONTENT_STATE.UNLOADED;\n  }\n\n  // Determines if the tile's content is expired. `true` if tile's\n  // content is expired; otherwise, `false`.\n  get contentExpired() {\n    return this.contentState === TILE_CONTENT_STATE.EXPIRED;\n  }\n\n  // Determines if the tile's content failed to load.  `true` if the tile's\n  // content failed to load; otherwise, `false`.\n  get contentFailed() {\n    return this.contentState === TILE_CONTENT_STATE.FAILED;\n  }\n\n  // Get the tile's screen space error.\n  getScreenSpaceError(frameState, useParentLodMetric) {\n    switch (this.tileset.type) {\n      case TILESET_TYPE.I3S:\n        return getI3ScreenSize(this, frameState);\n      case TILESET_TYPE.TILES3D:\n        return getTiles3DScreenSpaceError(this, frameState, useParentLodMetric);\n      default:\n        // eslint-disable-next-line\n        console.error('Unsupported tileset type');\n        return null;\n    }\n  }\n\n  // Requests the tile's content.\n  // The request may not be made if the Request Scheduler can't prioritize it.\n  // eslint-disable-next-line max-statements\n  async loadContent() {\n    if (this.hasEmptyContent) {\n      return false;\n    }\n\n    if (this.content) {\n      return true;\n    }\n\n    const expired = this.contentExpired;\n\n    if (expired) {\n      this._expireDate = null;\n    }\n\n    this.contentState = TILE_CONTENT_STATE.LOADING;\n\n    const cancelled = !(await this.tileset._requestScheduler.scheduleRequest(this, updatePriority));\n\n    if (cancelled) {\n      this.contentState = TILE_CONTENT_STATE.UNLOADED;\n      return false;\n    }\n\n    try {\n      const contentUrl = this.tileset.getTileUrl(this.contentUrl);\n      this.tileset._requestScheduler.startRequest(this);\n      // The content can be a binary tile ot a JSON tileset\n      const fetchOptions = this.tileset.fetchOptions;\n      const loader = this.tileset.loader;\n      const options = {\n        ...fetchOptions,\n        [loader.id]: {\n          tile: this.header,\n          tileset: this.tileset.tileset\n        }\n      };\n\n      this.content = await load(contentUrl, loader, options);\n      if (this._isTileset()) {\n        // Add tile headers for the nested tilset's subtree\n        // Async update of the tree should be fine since there would never be edits to the same node\n        // TODO - we need to capture the child tileset's URL\n        this.tileset._initializeTileHeaders(this.content, this, path.dirname(this.contentUrl));\n      }\n\n      this.contentState = TILE_CONTENT_STATE.READY;\n      this._onContentLoaded();\n      return true;\n    } catch (error) {\n      // Tile is unloaded before the content finishes loading\n      this.contentState = TILE_CONTENT_STATE.FAILED;\n      throw error;\n    } finally {\n      this.tileset._requestScheduler.endRequest(this);\n    }\n  }\n\n  // Unloads the tile's content.\n  unloadContent() {\n    if (this.content && this.content.destroy) {\n      this.content.destroy();\n    }\n    this.content = null;\n    this.contentState = TILE_CONTENT_STATE.UNLOADED;\n    return true;\n  }\n\n  // Update the tile's visibility.\n  updateVisibility(frameState) {\n    if (this._frameNumber === frameState.frameNumber) {\n      // Return early if visibility has already been checked during the traversal.\n      // The visibility may have already been checked if the cullWithChildrenBounds optimization is used.\n      return;\n    }\n\n    const parent = this.parent;\n    const parentTransform = parent ? parent.computedTransform : this.tileset.modelMatrix;\n    const parentVisibilityPlaneMask = parent\n      ? parent._visibilityPlaneMask\n      : CullingVolume.MASK_INDETERMINATE;\n\n    this._updateTransform(parentTransform);\n    this._distanceToCamera = this.distanceToTile(frameState);\n    this._screenSpaceError = this.getScreenSpaceError(frameState, false);\n    this._visibilityPlaneMask = this.visibility(frameState, parentVisibilityPlaneMask); // Use parent's plane mask to speed up visibility test\n    this._visible = this._visibilityPlaneMask !== CullingVolume.MASK_OUTSIDE;\n    this._inRequestVolume = this.insideViewerRequestVolume(frameState);\n\n    this._priority = this.lodMetricValue;\n    this._frameNumber = frameState.frameNumber;\n  }\n\n  // Determines whether the tile's bounding volume intersects the culling volume.\n  // @param {FrameState} frameState The frame state.\n  // @param {Number} parentVisibilityPlaneMask The parent's plane mask to speed up the visibility check.\n  // @returns {Number} A plane mask as described above in {@link CullingVolume#computeVisibilityWithPlaneMask}.\n  visibility(frameState, parentVisibilityPlaneMask) {\n    const {cullingVolume} = frameState;\n    const {boundingVolume} = this;\n\n    // TODO Cesium specific - restore clippingPlanes\n    // const {clippingPlanes, clippingPlanesOriginMatrix} = tileset;\n    // if (clippingPlanes && clippingPlanes.enabled) {\n    //   const intersection = clippingPlanes.computeIntersectionWithBoundingVolume(\n    //     boundingVolume,\n    //     clippingPlanesOriginMatrix\n    //   );\n    //   this._isClipped = intersection !== Intersect.INSIDE;\n    //   if (intersection === Intersect.OUTSIDE) {\n    //     return CullingVolume.MASK_OUTSIDE;\n    //   }\n    // }\n\n    // return cullingVolume.computeVisibilityWithPlaneMask(boundingVolume, parentVisibilityPlaneMask);\n    return cullingVolume.computeVisibilityWithPlaneMask(boundingVolume, parentVisibilityPlaneMask);\n  }\n\n  // Assuming the tile's bounding volume intersects the culling volume, determines\n  // whether the tile's content's bounding volume intersects the culling volume.\n  // @param {FrameState} frameState The frame state.\n  // @returns {Intersect} The result of the intersection: the tile's content is completely outside, completely inside, or intersecting the culling volume.\n  contentVisibility(frameState) {\n    return true;\n\n    // TODO restore\n    /*\n    // Assumes the tile's bounding volume intersects the culling volume already, so\n    // just return Intersect.INSIDE if there is no content bounding volume.\n    if (!defined(this.contentBoundingVolume)) {\n      return Intersect.INSIDE;\n    }\n\n    if (this._visibilityPlaneMask === CullingVolume.MASK_INSIDE) {\n      // The tile's bounding volume is completely inside the culling volume so\n      // the content bounding volume must also be inside.\n      return Intersect.INSIDE;\n    }\n\n    // PERFORMANCE_IDEA: is it possible to burn less CPU on this test since we know the\n    // tile's (not the content's) bounding volume intersects the culling volume?\n    const cullingVolume = frameState.cullingVolume;\n    const boundingVolume = tile.contentBoundingVolume;\n\n    const tileset = this.tileset;\n    const clippingPlanes = tileset.clippingPlanes;\n    if (defined(clippingPlanes) && clippingPlanes.enabled) {\n      const intersection = clippingPlanes.computeIntersectionWithBoundingVolume(\n        boundingVolume,\n        tileset.clippingPlanesOriginMatrix\n      );\n      this._isClipped = intersection !== Intersect.INSIDE;\n      if (intersection === Intersect.OUTSIDE) {\n        return Intersect.OUTSIDE;\n      }\n    }\n\n    return cullingVolume.computeVisibility(boundingVolume);\n    */\n  }\n\n  // Computes the (potentially approximate) distance from the closest point of the tile's bounding volume to the camera.\n  // @param {FrameState} frameState The frame state.\n  // @returns {Number} The distance, in meters, or zero if the camera is inside the bounding volume.\n  distanceToTile(frameState) {\n    const boundingVolume = this.boundingVolume;\n    return Math.sqrt(Math.max(boundingVolume.distanceSquaredTo(frameState.camera.position), 0));\n  }\n\n  // Computes the tile's camera-space z-depth.\n  // @param {FrameState} frameState The frame state.\n  // @returns {Number} The distance, in meters.\n  cameraSpaceZDepth({camera}) {\n    const boundingVolume = this.boundingVolume; // Gets the underlying OrientedBoundingBox or BoundingSphere\n    scratchVector.subVectors(boundingVolume.center, camera.position);\n    return camera.direction.dot(scratchVector);\n  }\n\n  /**\n   * Checks if the camera is inside the viewer request volume.\n   * @param {FrameState} frameState The frame state.\n   * @returns {Boolean} Whether the camera is inside the volume.\n   */\n  insideViewerRequestVolume(frameState) {\n    const viewerRequestVolume = this._viewerRequestVolume;\n    return !viewerRequestVolume || viewerRequestVolume.distanceToCamera(frameState) === 0.0;\n  }\n\n  _initializeLodMetric(header) {\n    if ('lodMetricType' in header) {\n      this.lodMetricType = header.lodMetricType;\n    } else {\n      this.lodMetricType = (this.parent && this.parent.lodMetricType) || this.tileset.lodMetricType;\n      // eslint-disable-next-line\n      console.warn(`3D Tile: Required prop lodMetricType is undefined. Using parent lodMetricType`);\n    }\n\n    // This is used to compute screen space error, i.e., the error measured in pixels.\n    if ('lodMetricValue' in header) {\n      this.lodMetricValue = header.lodMetricValue;\n    } else {\n      this.lodMetricValue =\n        (this.parent && this.parent.lodMetricValue) || this.tileset.lodMetricValue;\n      // eslint-disable-next-line\n      console.warn(\n        `3D Tile: Required prop lodMetricValue is undefined. Using parent lodMetricValue`\n      );\n    }\n  }\n\n  _initializeTransforms(tileHeader) {\n    // The local transform of this tile.\n    this.transform = tileHeader.transform ? new Matrix4(tileHeader.transform) : new Matrix4();\n\n    const parent = this.parent;\n    const tileset = this.tileset;\n\n    const parentTransform =\n      parent && parent.computedTransform\n        ? parent.computedTransform.clone()\n        : tileset.modelMatrix.clone();\n    this.computedTransform = new Matrix4(parentTransform).multiplyRight(this.transform);\n\n    const parentInitialTransform =\n      parent && parent._initialTransform ? parent._initialTransform.clone() : new Matrix4();\n    this._initialTransform = new Matrix4(parentInitialTransform).multiplyRight(this.transform);\n  }\n\n  _initializeBoundingVolumes(tileHeader) {\n    this._contentBoundingVolume = null;\n    this._viewerRequestVolume = null;\n\n    this._updateBoundingVolume(tileHeader);\n  }\n\n  _initializeContent(tileHeader) {\n    // Empty tile by default\n    this.content = {_tileset: this.tileset, _tile: this};\n    this.hasEmptyContent = true;\n    this.contentState = TILE_CONTENT_STATE.UNLOADED;\n\n    // When `true`, the tile's content points to an external tileset.\n    // This is `false` until the tile's content is loaded.\n    this.hasTilesetContent = false;\n\n    if (tileHeader.contentUrl) {\n      this.content = null;\n      this.hasEmptyContent = false;\n    }\n  }\n\n  // TODO - remove anything not related to basic visibility detection\n  _initializeRenderingState(header) {\n    this.depth = header.level;\n    this._shouldRefine = false;\n\n    // Members this are updated every frame for tree traversal and rendering optimizations:\n    this._distanceToCamera = 0;\n    this._centerZDepth = 0;\n    this._screenSpaceError = 0;\n    this._visibilityPlaneMask = CullingVolume.MASK_INDETERMINATE;\n    this._visible = false;\n    this._inRequestVolume = false;\n\n    this._stackLength = 0;\n    this._selectionDepth = 0;\n\n    this._frameNumber = 0;\n    this._touchedFrame = 0;\n    this._visitedFrame = 0;\n    this._selectedFrame = 0;\n    this._requestedFrame = 0;\n\n    this._priority = 0.0;\n  }\n\n  _getRefine(refine) {\n    // Inherit from parent tile if omitted.\n    return refine || (this.parent && this.parent.refine) || TILE_REFINEMENT.REPLACE;\n  }\n\n  _isTileset() {\n    return this.contentUrl.indexOf('.json') !== -1;\n  }\n\n  _onContentLoaded() {\n    // Vector and Geometry tile rendering do not support the skip LOD optimization.\n    switch (this.content && this.content.type) {\n      case 'vctr':\n      case 'geom':\n        this.tileset.traverser.disableSkipLevelOfDetail = true;\n        break;\n      default:\n    }\n\n    // The content may be tileset json\n    if (this._isTileset()) {\n      this.hasTilesetContent = true;\n    }\n  }\n\n  _updateBoundingVolume(header) {\n    // Update the bounding volumes\n    this.boundingVolume = createBoundingVolume(\n      header.boundingVolume,\n      this.computedTransform,\n      this.boundingVolume\n    );\n\n    const content = header.content;\n    if (!content) {\n      return;\n    }\n\n    // TODO Cesium specific\n    // Non-leaf tiles may have a content bounding-volume, which is a tight-fit bounding volume\n    // around only the features in the tile. This box is useful for culling for rendering,\n    // but not for culling for traversing the tree since it does not guarantee spatial coherence, i.e.,\n    // since it only bounds features in the tile, not the entire tile, children may be\n    // outside of this box.\n    if (content.boundingVolume) {\n      this._contentBoundingVolume = createBoundingVolume(\n        content.boundingVolume,\n        this.computedTransform,\n        this._contentBoundingVolume\n      );\n    }\n    if (header.viewerRequestVolume) {\n      this._viewerRequestVolume = createBoundingVolume(\n        header.viewerRequestVolume,\n        this.computedTransform,\n        this._viewerRequestVolume\n      );\n    }\n  }\n\n  // Update the tile's transform. The transform is applied to the tile's bounding volumes.\n  _updateTransform(parentTransform = new Matrix4()) {\n    const computedTransform = parentTransform.clone().multiplyRight(this.transform);\n    const didTransformChange = !computedTransform.equals(this.computedTransform);\n\n    if (!didTransformChange) {\n      return;\n    }\n\n    this.computedTransform = computedTransform;\n\n    this._updateBoundingVolume(this.header);\n  }\n\n  // TODO Cesium specific\n  // Update whether the tile has expired.\n  updateExpiration() {\n    if (defined(this._expireDate) && this.contentReady && !this.hasEmptyContent) {\n      const now = Date.now();\n      if (Date.lessThan(this._expireDate, now)) {\n        this.contentState = TILE_CONTENT_STATE.EXPIRED;\n        this._expiredContent = this.content;\n      }\n    }\n  }\n\n  get extras() {\n    return this.header.extras;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}