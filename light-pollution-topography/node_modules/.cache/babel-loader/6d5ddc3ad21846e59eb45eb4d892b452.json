{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { uid, assert } from '@luma.gl/webgl';\nexport var DRAW_MODE = {\n  POINTS: 0x0000,\n  LINES: 0x0001,\n  LINE_LOOP: 0x0002,\n  LINE_STRIP: 0x0003,\n  TRIANGLES: 0x0004,\n  TRIANGLE_STRIP: 0x0005,\n  TRIANGLE_FAN: 0x0006\n};\n\nvar Geometry = function () {\n  _createClass(Geometry, null, [{\n    key: \"DRAW_MODE\",\n    get: function get() {\n      return DRAW_MODE;\n    }\n  }]);\n\n  function Geometry() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Geometry);\n\n    var _props$id = props.id,\n        id = _props$id === void 0 ? uid('geometry') : _props$id,\n        _props$drawMode = props.drawMode,\n        drawMode = _props$drawMode === void 0 ? DRAW_MODE.TRIANGLES : _props$drawMode,\n        _props$attributes = props.attributes,\n        attributes = _props$attributes === void 0 ? {} : _props$attributes,\n        _props$indices = props.indices,\n        indices = _props$indices === void 0 ? null : _props$indices,\n        _props$vertexCount = props.vertexCount,\n        vertexCount = _props$vertexCount === void 0 ? null : _props$vertexCount;\n    this.id = id;\n    this.drawMode = drawMode | 0;\n    this.attributes = {};\n    this.userData = {};\n\n    this._setAttributes(attributes, indices);\n\n    this.vertexCount = vertexCount || this._calculateVertexCount(this.attributes, this.indices);\n  }\n\n  _createClass(Geometry, [{\n    key: \"getVertexCount\",\n    value: function getVertexCount() {\n      return this.vertexCount;\n    }\n  }, {\n    key: \"getAttributes\",\n    value: function getAttributes() {\n      return this.indices ? _objectSpread({\n        indices: this.indices\n      }, this.attributes) : this.attributes;\n    }\n  }, {\n    key: \"_print\",\n    value: function _print(attributeName) {\n      return \"Geometry \".concat(this.id, \" attribute \").concat(attributeName);\n    }\n  }, {\n    key: \"_setAttributes\",\n    value: function _setAttributes(attributes, indices) {\n      if (indices) {\n        this.indices = ArrayBuffer.isView(indices) ? {\n          value: indices,\n          size: 1\n        } : indices;\n      }\n\n      for (var attributeName in attributes) {\n        var attribute = attributes[attributeName];\n        attribute = ArrayBuffer.isView(attribute) ? {\n          value: attribute\n        } : attribute;\n        assert(ArrayBuffer.isView(attribute.value), \"\".concat(this._print(attributeName), \": must be typed array or object with value as typed array\"));\n\n        if ((attributeName === 'POSITION' || attributeName === 'positions') && !attribute.size) {\n          attribute.size = 3;\n        }\n\n        if (attributeName === 'indices') {\n          assert(!this.indices);\n          this.indices = attribute;\n        } else {\n          this.attributes[attributeName] = attribute;\n        }\n      }\n\n      if (this.indices && this.indices.isIndexed !== undefined) {\n        this.indices = Object.assign({}, this.indices);\n        delete this.indices.isIndexed;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"_calculateVertexCount\",\n    value: function _calculateVertexCount(attributes, indices) {\n      if (indices) {\n        return indices.value.length;\n      }\n\n      var vertexCount = Infinity;\n\n      for (var attributeName in attributes) {\n        var attribute = attributes[attributeName];\n        var value = attribute.value,\n            size = attribute.size,\n            constant = attribute.constant;\n\n        if (!constant && value && size >= 1) {\n          vertexCount = Math.min(vertexCount, value.length / size);\n        }\n      }\n\n      assert(Number.isFinite(vertexCount));\n      return vertexCount;\n    }\n  }, {\n    key: \"mode\",\n    get: function get() {\n      return this.drawMode;\n    }\n  }]);\n\n  return Geometry;\n}();\n\nexport { Geometry as default };","map":{"version":3,"sources":["../../../src/geometry/geometry.js"],"names":["DRAW_MODE","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","Geometry","props","id","uid","drawMode","attributes","indices","vertexCount","attributeName","value","size","attribute","assert","ArrayBuffer","Object","constant","Math","Number"],"mappings":"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","sourcesContent":["import {uid, assert} from '@luma.gl/webgl';\n\n// Rendering primitives - specify how to extract primitives from vertices.\n// NOTE: These are numerically identical to the corresponding WebGL/OpenGL constants\nexport const DRAW_MODE = {\n  POINTS: 0x0000, // draw single points.\n  LINES: 0x0001, // draw lines. Each vertex connects to the one after it.\n  LINE_LOOP: 0x0002, // draw lines. Each set of two vertices is treated as a separate line segment.\n  LINE_STRIP: 0x0003, // draw a connected group of line segments from the first vertex to the last\n  TRIANGLES: 0x0004, // draw triangles. Each set of three vertices creates a separate triangle.\n  TRIANGLE_STRIP: 0x0005, // draw a connected group of triangles.\n  TRIANGLE_FAN: 0x0006 // draw a connected group of triangles.\n  // Each vertex connects to the previous and the first vertex in the fan.\n};\n\nexport default class Geometry {\n  static get DRAW_MODE() {\n    return DRAW_MODE;\n  }\n\n  constructor(props = {}) {\n    const {\n      id = uid('geometry'),\n      drawMode = DRAW_MODE.TRIANGLES,\n      attributes = {},\n      indices = null,\n      vertexCount = null\n    } = props;\n\n    this.id = id;\n    this.drawMode = drawMode | 0;\n    this.attributes = {};\n    this.userData = {};\n\n    this._setAttributes(attributes, indices);\n\n    this.vertexCount = vertexCount || this._calculateVertexCount(this.attributes, this.indices);\n\n    // stubRemovedMethods(this, [\n    //   'setNeedsRedraw', 'needsRedraw', 'setAttributes'\n    // ], 'Immutable');\n\n    // stubRemovedMethods(this, [\n    //   'hasAttribute', 'getAttribute', 'getArray'\n    // ], 'Use geometry.attributes and geometry.indices');\n\n    // deprecateMethods(this, ['getAttributes'])\n  }\n\n  get mode() {\n    return this.drawMode;\n  }\n\n  getVertexCount() {\n    return this.vertexCount;\n  }\n\n  // Return an object with all attributes plus indices added as a field.\n  getAttributes() {\n    return this.indices ? {indices: this.indices, ...this.attributes} : this.attributes;\n  }\n\n  // PRIVATE\n\n  _print(attributeName) {\n    return `Geometry ${this.id} attribute ${attributeName}`;\n  }\n\n  // Attribute\n  // value: typed array\n  // type: indices, vertices, uvs\n  // size: elements per vertex\n  // target: WebGL buffer type (string or constant)\n  _setAttributes(attributes, indices) {\n    if (indices) {\n      this.indices = ArrayBuffer.isView(indices) ? {value: indices, size: 1} : indices;\n    }\n\n    for (const attributeName in attributes) {\n      let attribute = attributes[attributeName];\n\n      // Wrap \"unwrapped\" arrays and try to autodetect their type\n      attribute = ArrayBuffer.isView(attribute) ? {value: attribute} : attribute;\n\n      assert(\n        ArrayBuffer.isView(attribute.value),\n        `${this._print(attributeName)}: must be typed array or object with value as typed array`\n      );\n\n      if ((attributeName === 'POSITION' || attributeName === 'positions') && !attribute.size) {\n        attribute.size = 3;\n      }\n\n      // Move indices to separate field\n      if (attributeName === 'indices') {\n        assert(!this.indices);\n        this.indices = attribute;\n      } else {\n        this.attributes[attributeName] = attribute;\n      }\n    }\n\n    if (this.indices && this.indices.isIndexed !== undefined) {\n      this.indices = Object.assign({}, this.indices);\n      delete this.indices.isIndexed;\n    }\n\n    return this;\n  }\n\n  _calculateVertexCount(attributes, indices) {\n    if (indices) {\n      return indices.value.length;\n    }\n    let vertexCount = Infinity;\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const {value, size, constant} = attribute;\n      if (!constant && value && size >= 1) {\n        vertexCount = Math.min(vertexCount, value.length / size);\n      }\n    }\n\n    assert(Number.isFinite(vertexCount));\n    return vertexCount;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}