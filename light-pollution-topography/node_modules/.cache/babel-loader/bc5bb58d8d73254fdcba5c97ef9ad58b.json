{"ast":null,"code":"import assert from './assert';\nvar uidCounters = {};\nexport function uid() {\n  var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'id';\n  uidCounters[id] = uidCounters[id] || 1;\n  var count = uidCounters[id]++;\n  return \"\".concat(id, \"-\").concat(count);\n}\nexport function isPowerOfTwo(n) {\n  assert(typeof n === 'number', 'Input must be a number');\n  return n && (n & n - 1) === 0;\n}\nexport function isObjectEmpty(obj) {\n  var isEmpty = true;\n\n  for (var key in obj) {\n    isEmpty = false;\n    break;\n  }\n\n  return isEmpty;\n}","map":{"version":3,"sources":["../../../src/utils/utils.js"],"names":["uidCounters","id","count","assert","n","isEmpty"],"mappings":"AAAA,OAAA,MAAA,MAAA,UAAA;AAEA,IAAMA,WAAW,GAAjB,EAAA;AAOA,OAAO,SAAA,GAAA,GAAwB;AAAA,MAAXC,EAAW,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAN,IAAM;AAC7BD,EAAAA,WAAW,CAAXA,EAAW,CAAXA,GAAkBA,WAAW,CAAXA,EAAW,CAAXA,IAAlBA,CAAAA;AACA,MAAME,KAAK,GAAGF,WAAW,CAAzB,EAAyB,CAAXA,EAAd;AACA,SAAA,GAAA,MAAA,CAAA,EAAA,EAAA,GAAA,EAAA,MAAA,CAAA,KAAA,CAAA;AACD;AAOD,OAAO,SAAA,YAAA,CAAA,CAAA,EAAyB;AAC9BG,EAAAA,MAAM,CAAC,OAAA,CAAA,KAAD,QAAA,EAANA,wBAAM,CAANA;AACA,SAAOC,CAAC,IAAI,CAACA,CAAC,GAAIA,CAAC,GAAP,CAAA,MAAZ,CAAA;AACD;AAGD,OAAO,SAAA,aAAA,CAAA,GAAA,EAA4B;AACjC,MAAIC,OAAO,GAAX,IAAA;;AAEA,OAAK,IAAL,GAAA,IAAA,GAAA,EAAuB;AACrBA,IAAAA,OAAO,GAAPA,KAAAA;AACA;AACD;;AAED,SAAA,OAAA;AACD","sourcesContent":["import assert from './assert';\n\nconst uidCounters = {};\n\n/**\n * Returns a UID.\n * @param {String} id= - Identifier base name\n * @return {number} uid\n **/\nexport function uid(id = 'id') {\n  uidCounters[id] = uidCounters[id] || 1;\n  const count = uidCounters[id]++;\n  return `${id}-${count}`;\n}\n\n/**\n * Verifies if a given number is power of two or not.\n * @param {object} n - The number to check.\n * @return {Array} Returns true if the given number is power of 2, false otherwise.\n **/\nexport function isPowerOfTwo(n) {\n  assert(typeof n === 'number', 'Input must be a number');\n  return n && (n & (n - 1)) === 0;\n}\n\n// Returns true if given object is empty, false otherwise.\nexport function isObjectEmpty(obj) {\n  let isEmpty = true;\n  /* eslint-disable no-unused-vars  */\n  for (const key in obj) {\n    isEmpty = false;\n    break;\n  }\n  /* eslint-enable no-unused-vars  */\n  return isEmpty;\n}\n"]},"metadata":{},"sourceType":"module"}