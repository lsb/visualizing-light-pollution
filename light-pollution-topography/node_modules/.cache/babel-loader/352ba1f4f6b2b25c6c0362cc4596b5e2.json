{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { getWorkerURL } from './get-worker-url';\nimport { getTransferList } from '@loaders.gl/loader-utils';\nvar count = 0;\n\nfunction defaultOnMessage(_ref) {\n  var data = _ref.data,\n      resolve = _ref.resolve;\n  resolve(data);\n}\n\nvar WorkerThread = function () {\n  function WorkerThread(_ref2) {\n    var source = _ref2.source,\n        _ref2$name = _ref2.name,\n        name = _ref2$name === void 0 ? \"web-worker-\".concat(count++) : _ref2$name,\n        onMessage = _ref2.onMessage;\n\n    _classCallCheck(this, WorkerThread);\n\n    var url = getWorkerURL(source, name);\n    this.worker = new Worker(url, {\n      name: name\n    });\n    this.name = name;\n    this.onMessage = onMessage || defaultOnMessage;\n  }\n\n  _createClass(WorkerThread, [{\n    key: \"process\",\n    value: function () {\n      var _process = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(data) {\n        var _this = this;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  _this.worker.onmessage = function (event) {\n                    return _this.onMessage({\n                      worker: _this.worker,\n                      data: event.data,\n                      resolve: resolve,\n                      reject: reject\n                    });\n                  };\n\n                  _this.worker.onerror = function (error) {\n                    var message = \"\".concat(_this.name, \": WorkerThread.process() failed\");\n\n                    if (error.message) {\n                      message += \" \".concat(error.message, \" \").concat(error.filename, \":\").concat(error.lineno, \":\").concat(error.colno);\n                    }\n\n                    var betterError = new Error(message);\n                    console.error(error);\n                    reject(betterError);\n                  };\n\n                  var transferList = getTransferList(data);\n\n                  _this.worker.postMessage(data, transferList);\n                }));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function process(_x) {\n        return _process.apply(this, arguments);\n      }\n\n      return process;\n    }()\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.worker.terminate();\n      this.worker = null;\n    }\n  }]);\n\n  return WorkerThread;\n}();\n\nexport { WorkerThread as default };","map":{"version":3,"sources":["../../../src/worker-utils/worker-thread.js"],"names":["count","data","resolve","WorkerThread","source","name","onMessage","url","getWorkerURL","worker","event","reject","message","error","betterError","console","transferList","getTransferList"],"mappings":";;;;AACA,SAAA,YAAA,QAAA,kBAAA;AACA,SAAA,eAAA,QAAA,0BAAA;AAEA,IAAIA,KAAK,GAAT,CAAA;;AAGA,SAAA,gBAAA,CAAA,IAAA,EAA2C;AAAA,MAAhBC,IAAgB,GAAA,IAAA,CAAhBA,IAAgB;AAAA,MAAVC,OAAU,GAAA,IAAA,CAAVA,OAAU;AACzCA,EAAAA,OAAO,CAAPA,IAAO,CAAPA;AACD;;IAEoBC,Y;AACnB,WAAA,YAAA,CAAA,KAAA,EAAiE;AAAA,QAApDC,MAAoD,GAAA,KAAA,CAApDA,MAAoD;AAAA,QAAA,UAAA,GAAA,KAAA,CAA5CC,IAA4C;AAAA,QAA5CA,IAA4C,GAAA,UAAA,KAAA,KAAA,CAAA,GAAA,cAAA,MAAA,CAAvBL,KAAK,EAAkB,CAAA,GAAA,UAAA;AAAA,QAAZM,SAAY,GAAA,KAAA,CAAZA,SAAY;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,YAAA,CAAA;;AAC/D,QAAMC,GAAG,GAAGC,YAAY,CAAA,MAAA,EAAxB,IAAwB,CAAxB;AACA,SAAA,MAAA,GAAc,IAAA,MAAA,CAAA,GAAA,EAAgB;AAACH,MAAAA,IAAI,EAAJA;AAAD,KAAhB,CAAd;AACA,SAAA,IAAA,GAAA,IAAA;AACA,SAAA,SAAA,GAAiBC,SAAS,IAA1B,gBAAA;AACD;;;;;iFAOaL,I;;;;;;;iDACL,IAAA,OAAA,CAAY,UAAA,OAAA,EAAA,MAAA,EAAqB;AACtC,kBAAA,KAAI,CAAJ,MAAA,CAAA,SAAA,GAAwB,UAAA,KAAA,EAAK;AAAA,2BAC3B,KAAI,CAAJ,SAAA,CAAe;AAACQ,sBAAAA,MAAM,EAAE,KAAI,CAAb,MAAA;AAAsBR,sBAAAA,IAAI,EAAES,KAAK,CAAjC,IAAA;AAAwCR,sBAAAA,OAAO,EAA/C,OAAA;AAAiDS,sBAAAA,MAAM,EAANA;AAAjD,qBAAf,CAD2B;AAA7B,mBAAA;;AAEA,kBAAA,KAAI,CAAJ,MAAA,CAAA,OAAA,GAAsB,UAAA,KAAA,EAAS;AAI7B,wBAAIC,OAAO,GAAA,GAAA,MAAA,CAAM,KAAI,CAAV,IAAA,EAAX,iCAAW,CAAX;;AACA,wBAAIC,KAAK,CAAT,OAAA,EAAmB;AACjBD,sBAAAA,OAAO,IAAA,IAAA,MAAA,CAAQC,KAAK,CAAb,OAAA,EAAA,GAAA,EAAA,MAAA,CAAyBA,KAAK,CAA9B,QAAA,EAAA,GAAA,EAAA,MAAA,CAA2CA,KAAK,CAAhD,MAAA,EAAA,GAAA,EAAA,MAAA,CAA2DA,KAAK,CAAvED,KAAO,CAAPA;AACD;;AACD,wBAAME,WAAW,GAAG,IAAA,KAAA,CAApB,OAAoB,CAApB;AACAC,oBAAAA,OAAO,CAAPA,KAAAA,CAAAA,KAAAA;AACAJ,oBAAAA,MAAM,CAANA,WAAM,CAANA;AAVF,mBAAA;;AAYA,sBAAMK,YAAY,GAAGC,eAAe,CAApC,IAAoC,CAApC;;AACA,kBAAA,KAAI,CAAJ,MAAA,CAAA,WAAA,CAAA,IAAA,EAAA,YAAA;AAhBK,iBAAA,C;;;;;;;;;;;;;;;;;;8BAoBC;AACR,WAAA,MAAA,CAAA,SAAA;AACA,WAAA,MAAA,GAAA,IAAA;AACD;;;;;;SArCkBd,Y","sourcesContent":["/* global Worker */\nimport {getWorkerURL} from './get-worker-url';\nimport {getTransferList} from '@loaders.gl/loader-utils';\n\nlet count = 0;\n\n// By default resolves to the first message the worker sends back\nfunction defaultOnMessage({data, resolve}) {\n  resolve(data);\n}\n\nexport default class WorkerThread {\n  constructor({source, name = `web-worker-${count++}`, onMessage}) {\n    const url = getWorkerURL(source, name);\n    this.worker = new Worker(url, {name});\n    this.name = name;\n    this.onMessage = onMessage || defaultOnMessage;\n  }\n\n  /**\n   * Process binary data in a worker\n   * @param data {data containing binary typed arrays} - data to be transferred to worker\n   * @returns a Promise with data containing typed arrays transferred back from work\n   */\n  async process(data) {\n    return new Promise((resolve, reject) => {\n      this.worker.onmessage = event =>\n        this.onMessage({worker: this.worker, data: event.data, resolve, reject});\n      this.worker.onerror = error => {\n        // Note Error object does not have the expected fields if loading failed completely\n        // https://developer.mozilla.org/en-US/docs/Web/API/Worker#Event_handlers\n        // https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent\n        let message = `${this.name}: WorkerThread.process() failed`;\n        if (error.message) {\n          message += ` ${error.message} ${error.filename}:${error.lineno}:${error.colno}`;\n        }\n        const betterError = new Error(message);\n        console.error(error); // eslint-disable-line\n        reject(betterError);\n      };\n      const transferList = getTransferList(data);\n      this.worker.postMessage(data, transferList);\n    });\n  }\n\n  destroy() {\n    this.worker.terminate();\n    this.worker = null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}