{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nexport function encode(_x, _x2, _x3, _x4) {\n  return _encode.apply(this, arguments);\n}\n\nfunction _encode() {\n  _encode = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(data, writer, options, url) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!writer.encode) {\n              _context.next = 4;\n              break;\n            }\n\n            _context.next = 3;\n            return writer.encode(data, options);\n\n          case 3:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 4:\n            if (!writer.encodeSync) {\n              _context.next = 6;\n              break;\n            }\n\n            return _context.abrupt(\"return\", writer.encodeSync(data, options));\n\n          case 6:\n            throw new Error('Writer could not encode data');\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _encode.apply(this, arguments);\n}\n\nexport function encodeSync(data, writer, options, url) {\n  if (writer.encodeSync) {\n    return writer.encodeSync(data, options);\n  }\n\n  throw new Error('Writer could not synchronously encode data');\n}\nexport function encodeInBatches(data, writer, options, url) {\n  if (writer.encodeInBatches) {\n    return writer.encodeInBatches(data, options);\n  }\n\n  throw new Error('Writer could not encode data in batches');\n}","map":{"version":3,"sources":["../../../src/lib/encode.js"],"names":["writer"],"mappings":";;AAAA,OAAA,SAAA,MAAA,CAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA,SAAA,OAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;;uDAAO,SAAA,OAAA,CAAA,IAAA,EAAA,MAAA,EAAA,OAAA,EAAA,GAAA,EAAA;AAAA,WAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,aAAA,CAAA,EAAA;AAAA,gBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,eAAA,CAAA;AAAA,gBAAA,CACDA,MAAM,CADL,MAAA,EAAA;AAAA,cAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA,mBAEUA,MAAM,CAANA,MAAAA,CAAAA,IAAAA,EAFV,OAEUA,CAFV;;AAAA,eAAA,CAAA;AAAA,mBAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAAA,QAAA,CAAA,IAAA,CAAA;;AAAA,eAAA,CAAA;AAAA,gBAAA,CAIDA,MAAM,CAJL,UAAA,EAAA;AAAA,cAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,mBAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAKIA,MAAM,CAANA,UAAAA,CAAAA,IAAAA,EALJ,OAKIA,CALJ,CAAA;;AAAA,eAAA,CAAA;AAAA,kBAQC,IAAA,KAAA,CARD,8BAQC,CARD;;AAAA,eAAA,CAAA;AAAA,eAAA,KAAA;AAAA,mBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,KAAA,EAAA,OAAA,CAAA;;;;;AAWP,OAAO,SAAA,UAAA,CAAA,IAAA,EAAA,MAAA,EAAA,OAAA,EAAA,GAAA,EAAgD;AACrD,MAAIA,MAAM,CAAV,UAAA,EAAuB;AACrB,WAAOA,MAAM,CAANA,UAAAA,CAAAA,IAAAA,EAAP,OAAOA,CAAP;AACD;;AACD,QAAM,IAAA,KAAA,CAAN,4CAAM,CAAN;AACD;AAED,OAAO,SAAA,eAAA,CAAA,IAAA,EAAA,MAAA,EAAA,OAAA,EAAA,GAAA,EAAqD;AAC1D,MAAIA,MAAM,CAAV,eAAA,EAA4B;AAC1B,WAAOA,MAAM,CAANA,eAAAA,CAAAA,IAAAA,EAAP,OAAOA,CAAP;AACD;;AAED,QAAM,IAAA,KAAA,CAAN,yCAAM,CAAN;AACD","sourcesContent":["export async function encode(data, writer, options, url) {\n  if (writer.encode) {\n    return await writer.encode(data, options);\n  }\n  if (writer.encodeSync) {\n    return writer.encodeSync(data, options);\n  }\n  // TODO - Use encodeToBatches?\n  throw new Error('Writer could not encode data');\n}\n\nexport function encodeSync(data, writer, options, url) {\n  if (writer.encodeSync) {\n    return writer.encodeSync(data, options);\n  }\n  throw new Error('Writer could not synchronously encode data');\n}\n\nexport function encodeInBatches(data, writer, options, url) {\n  if (writer.encodeInBatches) {\n    return writer.encodeInBatches(data, options);\n  }\n  // TODO -fall back to atomic encode?\n  throw new Error('Writer could not encode data in batches');\n}\n"]},"metadata":{},"sourceType":"module"}