{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport assert from '../utils/assert';\nexport function isImage(image) {\n  return Boolean(getImageTypeOrNull(image));\n}\nexport function deleteImage(image) {\n  switch (getImageType(image)) {\n    case 'imagebitmap':\n      image.close();\n      break;\n\n    default:\n  }\n}\nexport function getImageType(image) {\n  var format = getImageTypeOrNull(image);\n\n  if (!format) {\n    throw new Error('Not an image');\n  }\n\n  return format;\n}\nexport function getImageData(image) {\n  switch (getImageType(image)) {\n    case 'data':\n      return image;\n\n    case 'image':\n    case 'imagebitmap':\n      var canvas = document.createElement('canvas');\n      var context = canvas.getContext('2d');\n      canvas.width = image.width;\n      canvas.height = image.height;\n      context.drawImage(image, 0, 0);\n      var imageData = context.getImageData(0, 0, image.width, image.height);\n      return imageData;\n\n    default:\n      return assert(false);\n  }\n}\nexport { getImageData as getImageSize };\n\nfunction getImageTypeOrNull(image) {\n  if (typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n    return 'imagebitmap';\n  }\n\n  if (typeof Image !== 'undefined' && image instanceof Image) {\n    return 'image';\n  }\n\n  if (image && _typeof(image) === 'object' && image.data && image.width && image.height) {\n    return 'data';\n  }\n\n  return null;\n}","map":{"version":3,"sources":["../../../../src/lib/parsed-image-api/parsed-image-api.js"],"names":["Boolean","getImageTypeOrNull","getImageType","image","format","canvas","document","context","imageData","assert","getImageData"],"mappings":";AACA,OAAA,MAAA,MAAA,iBAAA;AAEA,OAAO,SAAA,OAAA,CAAA,KAAA,EAAwB;AAC7B,SAAOA,OAAO,CAACC,kBAAkB,CAAjC,KAAiC,CAAnB,CAAd;AACD;AAED,OAAO,SAAA,WAAA,CAAA,KAAA,EAA4B;AACjC,UAAQC,YAAY,CAApB,KAAoB,CAApB;AACE,SAAA,aAAA;AACEC,MAAAA,KAAK,CAALA,KAAAA;AACA;;AACF;AAJF;AAOD;AAED,OAAO,SAAA,YAAA,CAAA,KAAA,EAA6B;AAClC,MAAMC,MAAM,GAAGH,kBAAkB,CAAjC,KAAiC,CAAjC;;AACA,MAAI,CAAJ,MAAA,EAAa;AACX,UAAM,IAAA,KAAA,CAAN,cAAM,CAAN;AACD;;AACD,SAAA,MAAA;AACD;AAED,OAAO,SAAA,YAAA,CAAA,KAAA,EAA6B;AAClC,UAAQC,YAAY,CAApB,KAAoB,CAApB;AACE,SAAA,MAAA;AACE,aAAA,KAAA;;AAEF,SAAA,OAAA;AACA,SAAA,aAAA;AAGE,UAAMG,MAAM,GAAGC,QAAQ,CAARA,aAAAA,CAAf,QAAeA,CAAf;AAEA,UAAMC,OAAO,GAAGF,MAAM,CAANA,UAAAA,CAAhB,IAAgBA,CAAhB;AACAA,MAAAA,MAAM,CAANA,KAAAA,GAAeF,KAAK,CAApBE,KAAAA;AACAA,MAAAA,MAAM,CAANA,MAAAA,GAAgBF,KAAK,CAArBE,MAAAA;AACAE,MAAAA,OAAO,CAAPA,SAAAA,CAAAA,KAAAA,EAAAA,CAAAA,EAAAA,CAAAA;AACA,UAAMC,SAAS,GAAGD,OAAO,CAAPA,YAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAA2BJ,KAAK,CAAhCI,KAAAA,EAAwCJ,KAAK,CAA/D,MAAkBI,CAAlB;AACA,aAAA,SAAA;;AACF;AACE,aAAOE,MAAM,CAAb,KAAa,CAAb;AAjBJ;AAmBD;AAGD,SAAQC,YAAY,IAApB,YAAA;;AAKA,SAAA,kBAAA,CAAA,KAAA,EAAmC;AACjC,MAAI,OAAA,WAAA,KAAA,WAAA,IAAsCP,KAAK,YAA/C,WAAA,EAAwE;AACtE,WAAA,aAAA;AACD;;AACD,MAAI,OAAA,KAAA,KAAA,WAAA,IAAgCA,KAAK,YAAzC,KAAA,EAA4D;AAC1D,WAAA,OAAA;AACD;;AACD,MAAIA,KAAK,IAAI,OAAA,CAAA,KAAA,CAAA,KAATA,QAAAA,IAAsCA,KAAK,CAA3CA,IAAAA,IAAoDA,KAAK,CAAzDA,KAAAA,IAAmEA,KAAK,CAA5E,MAAA,EAAqF;AACnF,WAAA,MAAA;AACD;;AACD,SAAA,IAAA;AACD","sourcesContent":["/* global Image, ImageBitmap */\nimport assert from '../utils/assert';\n\nexport function isImage(image) {\n  return Boolean(getImageTypeOrNull(image));\n}\n\nexport function deleteImage(image) {\n  switch (getImageType(image)) {\n    case 'imagebitmap':\n      image.close();\n      break;\n    default:\n    // Nothing to do for images and image data objects\n  }\n}\n\nexport function getImageType(image) {\n  const format = getImageTypeOrNull(image);\n  if (!format) {\n    throw new Error('Not an image');\n  }\n  return format;\n}\n\nexport function getImageData(image) {\n  switch (getImageType(image)) {\n    case 'data':\n      return image;\n\n    case 'image':\n    case 'imagebitmap':\n      // Extract the image data from the image via a canvas\n      /* global document */\n      const canvas = document.createElement('canvas');\n      // TODO - reuse the canvas?\n      const context = canvas.getContext('2d');\n      canvas.width = image.width;\n      canvas.height = image.height;\n      context.drawImage(image, 0, 0);\n      const imageData = context.getImageData(0, 0, image.width, image.height);\n      return imageData;\n    default:\n      return assert(false);\n  }\n}\n\n// TODO DEPRECATED not needed (use getImageData)\nexport {getImageData as getImageSize};\n\n// PRIVATE\n\n// eslint-disable-next-line complexity\nfunction getImageTypeOrNull(image) {\n  if (typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n    return 'imagebitmap';\n  }\n  if (typeof Image !== 'undefined' && image instanceof Image) {\n    return 'image';\n  }\n  if (image && typeof image === 'object' && image.data && image.width && image.height) {\n    return 'data';\n  }\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}