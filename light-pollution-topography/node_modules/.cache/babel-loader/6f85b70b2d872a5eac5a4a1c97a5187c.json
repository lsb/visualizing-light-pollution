{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { h3SetToMultiPolygon } from 'h3-js';\nimport { CompositeLayer, createIterable } from '@deck.gl/core';\nimport { PolygonLayer } from '@deck.gl/layers';\nvar defaultProps = Object.assign({\n  getHexagons: {\n    type: 'accessor',\n    value: function value(d) {\n      return d.hexagons;\n    }\n  }\n}, PolygonLayer.defaultProps);\n\nvar H3ClusterLayer = function (_CompositeLayer) {\n  _inherits(H3ClusterLayer, _CompositeLayer);\n\n  function H3ClusterLayer() {\n    _classCallCheck(this, H3ClusterLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(H3ClusterLayer).apply(this, arguments));\n  }\n\n  _createClass(H3ClusterLayer, [{\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n          oldProps = _ref.oldProps,\n          changeFlags = _ref.changeFlags;\n\n      if (changeFlags.dataChanged || changeFlags.updateTriggers && changeFlags.updateTriggers.getHexagons) {\n        var data = props.data,\n            getHexagons = props.getHexagons;\n        var polygons = [];\n\n        var _createIterable = createIterable(data),\n            iterable = _createIterable.iterable,\n            objectInfo = _createIterable.objectInfo;\n\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = iterable[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var object = _step.value;\n            objectInfo.index++;\n            var hexagons = getHexagons(object, objectInfo);\n            var multiPolygon = h3SetToMultiPolygon(hexagons, true);\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n              for (var _iterator2 = multiPolygon[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var polygon = _step2.value;\n                polygons.push(this.getSubLayerRow({\n                  polygon: polygon\n                }, object, objectInfo.index));\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n                  _iterator2[\"return\"]();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n              _iterator[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        this.setState({\n          polygons: polygons\n        });\n      }\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this$props = this.props,\n          elevationScale = _this$props.elevationScale,\n          extruded = _this$props.extruded,\n          wireframe = _this$props.wireframe,\n          filled = _this$props.filled,\n          stroked = _this$props.stroked,\n          lineWidthScale = _this$props.lineWidthScale,\n          lineWidthMinPixels = _this$props.lineWidthMinPixels,\n          lineWidthMaxPixels = _this$props.lineWidthMaxPixels,\n          lineJointRounded = _this$props.lineJointRounded,\n          lineMiterLimit = _this$props.lineMiterLimit,\n          lineDashJustified = _this$props.lineDashJustified,\n          material = _this$props.material,\n          getFillColor = _this$props.getFillColor,\n          getLineColor = _this$props.getLineColor,\n          getLineWidth = _this$props.getLineWidth,\n          getLineDashArray = _this$props.getLineDashArray,\n          getElevation = _this$props.getElevation,\n          updateTriggers = _this$props.updateTriggers;\n      var SubLayerClass = this.getSubLayerClass('cluster-region', PolygonLayer);\n      return new SubLayerClass({\n        filled: filled,\n        wireframe: wireframe,\n        extruded: extruded,\n        elevationScale: elevationScale,\n        stroked: stroked,\n        lineWidthScale: lineWidthScale,\n        lineWidthMinPixels: lineWidthMinPixels,\n        lineWidthMaxPixels: lineWidthMaxPixels,\n        lineJointRounded: lineJointRounded,\n        lineMiterLimit: lineMiterLimit,\n        lineDashJustified: lineDashJustified,\n        material: material,\n        getFillColor: this.getSubLayerAccessor(getFillColor),\n        getLineColor: this.getSubLayerAccessor(getLineColor),\n        getLineWidth: this.getSubLayerAccessor(getLineWidth),\n        getLineDashArray: this.getSubLayerAccessor(getLineDashArray),\n        getElevation: this.getSubLayerAccessor(getElevation)\n      }, this.getSubLayerProps({\n        id: 'cluster-region',\n        updateTriggers: updateTriggers\n      }), {\n        data: this.state.polygons,\n        getPolygon: function getPolygon(d) {\n          return d.polygon;\n        }\n      });\n    }\n  }]);\n\n  return H3ClusterLayer;\n}(CompositeLayer);\n\nexport { H3ClusterLayer as default };\nH3ClusterLayer.defaultProps = defaultProps;\nH3ClusterLayer.layerName = 'H3ClusterLayer';","map":{"version":3,"sources":["../../../src/h3-layers/h3-cluster-layer.js"],"names":["defaultProps","getHexagons","type","value","d","PolygonLayer","H3ClusterLayer","CompositeLayer","props","oldProps","changeFlags","data","polygons","iterable","objectInfo","createIterable","object","hexagons","multiPolygon","h3SetToMultiPolygon","polygon","elevationScale","extruded","wireframe","filled","stroked","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","lineJointRounded","lineMiterLimit","lineDashJustified","material","getFillColor","getLineColor","getLineWidth","getLineDashArray","getElevation","updateTriggers","SubLayerClass","id","getPolygon"],"mappings":";;;;;AAAA,SAAA,mBAAA,QAAA,OAAA;AAEA,SAAA,cAAA,EAAA,cAAA,QAAA,eAAA;AACA,SAAA,YAAA,QAAA,iBAAA;AAEA,IAAMA,YAAY,GAAG,MAAM,CAAN,MAAA,CACnB;AACEC,EAAAA,WAAW,EAAE;AAACC,IAAAA,IAAI,EAAL,UAAA;AAAmBC,IAAAA,KAAK,EAAE,SAAA,KAAA,CAAA,CAAA,EAAC;AAAA,aAAIC,CAAC,CAAL,QAAA;AAAA;AAA3B;AADf,CADmB,EAInBC,YAAY,CAJd,YAAqB,CAArB;;IAOqBC,c;;;;;;;;;;;sCACyB;AAAA,UAA/BE,KAA+B,GAAA,IAAA,CAA/BA,KAA+B;AAAA,UAAxBC,QAAwB,GAAA,IAAA,CAAxBA,QAAwB;AAAA,UAAdC,WAAc,GAAA,IAAA,CAAdA,WAAc;;AAC1C,UACEA,WAAW,CAAXA,WAAAA,IACCA,WAAW,CAAXA,cAAAA,IAA8BA,WAAW,CAAXA,cAAAA,CAFjC,WAAA,EAGE;AAAA,YACOC,IADP,GAC4BH,KAD5B,CAAA,IAAA;AAAA,YACaP,WADb,GAC4BO,KAD5B,CAAA,WAAA;AAEA,YAAMI,QAAQ,GAAd,EAAA;;AAFA,YAAA,eAAA,GAI+BG,cAAc,CAJ7C,IAI6C,CAJ7C;AAAA,YAIOF,QAJP,GAAA,eAAA,CAAA,QAAA;AAAA,YAIiBC,UAJjB,GAAA,eAAA,CAAA,UAAA;;AAAA,YAAA,yBAAA,GAAA,IAAA;AAAA,YAAA,iBAAA,GAAA,KAAA;AAAA,YAAA,cAAA,GAAA,SAAA;;AAAA,YAAA;AAKA,eAAA,IAAA,SAAA,GAAqBD,QAArB,CAAA,MAAA,CAAA,QAAA,CAAqBA,EAArB,EAAA,KAAA,EAAA,EAAA,yBAAA,GAAA,CAAA,KAAA,GAAA,SAAA,CAAA,IAAA,EAAA,EAAA,IAAA,CAAA,EAAA,yBAAA,GAAA,IAAA,EAA+B;AAAA,gBAApBG,MAAoB,GAAA,KAAA,CAAA,KAAA;AAC7BF,YAAAA,UAAU,CAAVA,KAAAA;AACA,gBAAMG,QAAQ,GAAGhB,WAAW,CAAA,MAAA,EAA5B,UAA4B,CAA5B;AACA,gBAAMiB,YAAY,GAAGC,mBAAmB,CAAA,QAAA,EAAxC,IAAwC,CAAxC;AAH6B,gBAAA,0BAAA,GAAA,IAAA;AAAA,gBAAA,kBAAA,GAAA,KAAA;AAAA,gBAAA,eAAA,GAAA,SAAA;;AAAA,gBAAA;AAK7B,mBAAA,IAAA,UAAA,GAAsBD,YAAtB,CAAA,MAAA,CAAA,QAAA,CAAsBA,EAAtB,EAAA,MAAA,EAAA,EAAA,0BAAA,GAAA,CAAA,MAAA,GAAA,UAAA,CAAA,IAAA,EAAA,EAAA,IAAA,CAAA,EAAA,0BAAA,GAAA,IAAA,EAAoC;AAAA,oBAAzBE,OAAyB,GAAA,MAAA,CAAA,KAAA;AAClCR,gBAAAA,QAAQ,CAARA,IAAAA,CAAc,KAAA,cAAA,CAAoB;AAACQ,kBAAAA,OAAO,EAAPA;AAAD,iBAApB,EAAA,MAAA,EAAuCN,UAAU,CAA/DF,KAAc,CAAdA;AACD;AAP4B,aAAA,CAAA,OAAA,GAAA,EAAA;AAAA,cAAA,kBAAA,GAAA,IAAA;AAAA,cAAA,eAAA,GAAA,GAAA;AAAA,aAAA,SAAA;AAAA,kBAAA;AAAA,oBAAA,CAAA,0BAAA,IAAA,UAAA,CAAA,QAAA,CAAA,IAAA,IAAA,EAAA;AAAA,kBAAA,UAAA,CAAA,QAAA,CAAA;AAAA;AAAA,eAAA,SAAA;AAAA,oBAAA,kBAAA,EAAA;AAAA,wBAAA,eAAA;AAAA;AAAA;AAAA;AAQ9B;AAbD,SAAA,CAAA,OAAA,GAAA,EAAA;AAAA,UAAA,iBAAA,GAAA,IAAA;AAAA,UAAA,cAAA,GAAA,GAAA;AAAA,SAAA,SAAA;AAAA,cAAA;AAAA,gBAAA,CAAA,yBAAA,IAAA,SAAA,CAAA,QAAA,CAAA,IAAA,IAAA,EAAA;AAAA,cAAA,SAAA,CAAA,QAAA,CAAA;AAAA;AAAA,WAAA,SAAA;AAAA,gBAAA,iBAAA,EAAA;AAAA,oBAAA,cAAA;AAAA;AAAA;AAAA;;AAeA,aAAA,QAAA,CAAc;AAACA,UAAAA,QAAQ,EAARA;AAAD,SAAd;AACD;AACF;;;mCAEc;AAAA,UAAA,WAAA,GAqBT,KArBS,KAAA;AAAA,UAEXS,cAFW,GAAA,WAAA,CAAA,cAAA;AAAA,UAGXC,QAHW,GAAA,WAAA,CAAA,QAAA;AAAA,UAIXC,SAJW,GAAA,WAAA,CAAA,SAAA;AAAA,UAKXC,MALW,GAAA,WAAA,CAAA,MAAA;AAAA,UAMXC,OANW,GAAA,WAAA,CAAA,OAAA;AAAA,UAOXC,cAPW,GAAA,WAAA,CAAA,cAAA;AAAA,UAQXC,kBARW,GAAA,WAAA,CAAA,kBAAA;AAAA,UASXC,kBATW,GAAA,WAAA,CAAA,kBAAA;AAAA,UAUXC,gBAVW,GAAA,WAAA,CAAA,gBAAA;AAAA,UAWXC,cAXW,GAAA,WAAA,CAAA,cAAA;AAAA,UAYXC,iBAZW,GAAA,WAAA,CAAA,iBAAA;AAAA,UAaXC,QAbW,GAAA,WAAA,CAAA,QAAA;AAAA,UAeXC,YAfW,GAAA,WAAA,CAAA,YAAA;AAAA,UAgBXC,YAhBW,GAAA,WAAA,CAAA,YAAA;AAAA,UAiBXC,YAjBW,GAAA,WAAA,CAAA,YAAA;AAAA,UAkBXC,gBAlBW,GAAA,WAAA,CAAA,gBAAA;AAAA,UAmBXC,YAnBW,GAAA,WAAA,CAAA,YAAA;AAAA,UAoBXC,cApBW,GAAA,WAAA,CAAA,cAAA;AAuBb,UAAMC,aAAa,GAAG,KAAA,gBAAA,CAAA,gBAAA,EAAtB,YAAsB,CAAtB;AAEA,aAAO,IAAA,aAAA,CACL;AACEf,QAAAA,MAAM,EADR,MAAA;AAEED,QAAAA,SAAS,EAFX,SAAA;AAIED,QAAAA,QAAQ,EAJV,QAAA;AAKED,QAAAA,cAAc,EALhB,cAAA;AAOEI,QAAAA,OAAO,EAPT,OAAA;AAQEC,QAAAA,cAAc,EARhB,cAAA;AASEC,QAAAA,kBAAkB,EATpB,kBAAA;AAUEC,QAAAA,kBAAkB,EAVpB,kBAAA;AAWEC,QAAAA,gBAAgB,EAXlB,gBAAA;AAYEC,QAAAA,cAAc,EAZhB,cAAA;AAaEC,QAAAA,iBAAiB,EAbnB,iBAAA;AAeEC,QAAAA,QAAQ,EAfV,QAAA;AAiBEC,QAAAA,YAAY,EAAE,KAAA,mBAAA,CAjBhB,YAiBgB,CAjBhB;AAkBEC,QAAAA,YAAY,EAAE,KAAA,mBAAA,CAlBhB,YAkBgB,CAlBhB;AAmBEC,QAAAA,YAAY,EAAE,KAAA,mBAAA,CAnBhB,YAmBgB,CAnBhB;AAoBEC,QAAAA,gBAAgB,EAAE,KAAA,mBAAA,CApBpB,gBAoBoB,CApBpB;AAqBEC,QAAAA,YAAY,EAAE,KAAA,mBAAA,CAAA,YAAA;AArBhB,OADK,EAwBL,KAAA,gBAAA,CAAsB;AACpBG,QAAAA,EAAE,EADkB,gBAAA;AAEpBF,QAAAA,cAAc,EAAdA;AAFoB,OAAtB,CAxBK,EA4BL;AACE3B,QAAAA,IAAI,EAAE,KAAA,KAAA,CADR,QAAA;AAEE8B,QAAAA,UAAU,EAAE,SAAA,UAAA,CAAA,CAAA,EAAC;AAAA,iBAAIrC,CAAC,CAAL,OAAA;AAAA;AAFf,OA5BK,CAAP;AAiCD;;;;EAlFyCG,c;;SAAvBD,c;AAqFrBA,cAAc,CAAdA,YAAAA,GAAAA,YAAAA;AACAA,cAAc,CAAdA,SAAAA,GAAAA,gBAAAA","sourcesContent":["import {h3SetToMultiPolygon} from 'h3-js';\n\nimport {CompositeLayer, createIterable} from '@deck.gl/core';\nimport {PolygonLayer} from '@deck.gl/layers';\n\nconst defaultProps = Object.assign(\n  {\n    getHexagons: {type: 'accessor', value: d => d.hexagons}\n  },\n  PolygonLayer.defaultProps\n);\n\nexport default class H3ClusterLayer extends CompositeLayer {\n  updateState({props, oldProps, changeFlags}) {\n    if (\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggers && changeFlags.updateTriggers.getHexagons)\n    ) {\n      const {data, getHexagons} = props;\n      const polygons = [];\n\n      const {iterable, objectInfo} = createIterable(data);\n      for (const object of iterable) {\n        objectInfo.index++;\n        const hexagons = getHexagons(object, objectInfo);\n        const multiPolygon = h3SetToMultiPolygon(hexagons, true);\n\n        for (const polygon of multiPolygon) {\n          polygons.push(this.getSubLayerRow({polygon}, object, objectInfo.index));\n        }\n      }\n\n      this.setState({polygons});\n    }\n  }\n\n  renderLayers() {\n    const {\n      elevationScale,\n      extruded,\n      wireframe,\n      filled,\n      stroked,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified,\n      material,\n\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      updateTriggers\n    } = this.props;\n\n    const SubLayerClass = this.getSubLayerClass('cluster-region', PolygonLayer);\n\n    return new SubLayerClass(\n      {\n        filled,\n        wireframe,\n\n        extruded,\n        elevationScale,\n\n        stroked,\n        lineWidthScale,\n        lineWidthMinPixels,\n        lineWidthMaxPixels,\n        lineJointRounded,\n        lineMiterLimit,\n        lineDashJustified,\n\n        material,\n\n        getFillColor: this.getSubLayerAccessor(getFillColor),\n        getLineColor: this.getSubLayerAccessor(getLineColor),\n        getLineWidth: this.getSubLayerAccessor(getLineWidth),\n        getLineDashArray: this.getSubLayerAccessor(getLineDashArray),\n        getElevation: this.getSubLayerAccessor(getElevation)\n      },\n      this.getSubLayerProps({\n        id: 'cluster-region',\n        updateTriggers\n      }),\n      {\n        data: this.state.polygons,\n        getPolygon: d => d.polygon\n      }\n    );\n  }\n}\n\nH3ClusterLayer.defaultProps = defaultProps;\nH3ClusterLayer.layerName = 'H3ClusterLayer';\n"]},"metadata":{},"sourceType":"module"}