{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { CompositeLayer } from '@deck.gl/core';\nimport { SimpleMeshLayer } from '@deck.gl/mesh-layers';\nimport { WebMercatorViewport, COORDINATE_SYSTEM } from '@deck.gl/core';\nimport { load } from '@loaders.gl/core';\nimport { TerrainLoader } from '@loaders.gl/terrain';\nimport TileLayer from '../tile-layer/tile-layer';\nimport { urlType, getURLFromTemplate } from '../tile-layer/utils';\nvar DUMMY_DATA = [1];\n\nvar defaultProps = _objectSpread({}, TileLayer.defaultProps, {\n  elevationData: urlType,\n  texture: urlType,\n  meshMaxError: {\n    type: 'number',\n    value: 4.0\n  },\n  bounds: {\n    type: 'array',\n    value: null,\n    optional: true,\n    compare: true\n  },\n  color: {\n    type: 'color',\n    value: [255, 255, 255]\n  },\n  elevationDecoder: {\n    type: 'object',\n    value: {\n      rScaler: 1,\n      gScaler: 0,\n      bScaler: 0,\n      offset: 0\n    }\n  },\n  workerUrl: {\n    type: 'string',\n    value: null\n  },\n  wireframe: false,\n  material: true\n});\n\nfunction urlTemplateToUpdateTrigger(template) {\n  if (Array.isArray(template)) {\n    return template.join(';');\n  }\n\n  return template;\n}\n\nvar TerrainLayer = function (_CompositeLayer) {\n  _inherits(TerrainLayer, _CompositeLayer);\n\n  function TerrainLayer() {\n    _classCallCheck(this, TerrainLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TerrainLayer).apply(this, arguments));\n  }\n\n  _createClass(TerrainLayer, [{\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n          oldProps = _ref.oldProps;\n      var elevationDataChanged = props.elevationData !== oldProps.elevationData;\n\n      if (elevationDataChanged) {\n        var elevationData = props.elevationData;\n        var isTiled = elevationData && (Array.isArray(elevationData) || elevationData.includes('{x}') && elevationData.includes('{y}'));\n        this.setState({\n          isTiled: isTiled\n        });\n      }\n\n      var shouldReload = elevationDataChanged || props.meshMaxError !== oldProps.meshMaxError || props.elevationDecoder !== oldProps.elevationDecoder || props.bounds !== oldProps.bounds;\n\n      if (!this.state.isTiled && shouldReload) {\n        var terrain = this.loadTerrain(props);\n        this.setState({\n          terrain: terrain\n        });\n      }\n    }\n  }, {\n    key: \"loadTerrain\",\n    value: function loadTerrain(_ref2) {\n      var elevationData = _ref2.elevationData,\n          bounds = _ref2.bounds,\n          elevationDecoder = _ref2.elevationDecoder,\n          meshMaxError = _ref2.meshMaxError,\n          workerUrl = _ref2.workerUrl;\n\n      if (!elevationData) {\n        return null;\n      }\n\n      var options = {\n        terrain: {\n          bounds: bounds,\n          meshMaxError: meshMaxError,\n          elevationDecoder: elevationDecoder\n        }\n      };\n\n      if (workerUrl !== null) {\n        options.terrain.workerUrl = workerUrl;\n      }\n\n      return load(elevationData, TerrainLoader, options);\n    }\n  }, {\n    key: \"getTiledTerrainData\",\n    value: function getTiledTerrainData(tile) {\n      var _this$props = this.props,\n          elevationData = _this$props.elevationData,\n          texture = _this$props.texture,\n          elevationDecoder = _this$props.elevationDecoder,\n          meshMaxError = _this$props.meshMaxError,\n          workerUrl = _this$props.workerUrl;\n      var dataUrl = getURLFromTemplate(elevationData, tile);\n      var textureUrl = getURLFromTemplate(texture, tile);\n      var bbox = tile.bbox,\n          z = tile.z;\n      var viewport = new WebMercatorViewport({\n        longitude: (bbox.west + bbox.east) / 2,\n        latitude: (bbox.north + bbox.south) / 2,\n        zoom: z\n      });\n      var bottomLeft = viewport.projectFlat([bbox.west, bbox.south]);\n      var topRight = viewport.projectFlat([bbox.east, bbox.north]);\n      var bounds = [bottomLeft[0], bottomLeft[1], topRight[0], topRight[1]];\n      var terrain = this.loadTerrain({\n        elevationData: dataUrl,\n        bounds: bounds,\n        elevationDecoder: elevationDecoder,\n        meshMaxError: meshMaxError,\n        workerUrl: workerUrl\n      });\n      var surface = textureUrl ? load(textureUrl)[\"catch\"](function (_) {\n        return null;\n      }) : Promise.resolve(null);\n      return Promise.all([terrain, surface]);\n    }\n  }, {\n    key: \"renderSubLayers\",\n    value: function renderSubLayers(props) {\n      var SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n      var data = props.data,\n          color = props.color;\n      var mesh = null;\n      var texture = null;\n\n      if (Array.isArray(data)) {\n        mesh = data[0];\n        texture = data[1];\n      } else if (data) {\n        mesh = data.then(function (result) {\n          return result && result[0];\n        });\n        texture = data.then(function (result) {\n          return result && result[1];\n        });\n      }\n\n      return new SubLayerClass(props, {\n        data: DUMMY_DATA,\n        mesh: mesh,\n        texture: texture,\n        coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n        getPosition: function getPosition(d) {\n          return [0, 0, 0];\n        },\n        getColor: color\n      });\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this$props2 = this.props,\n          color = _this$props2.color,\n          material = _this$props2.material,\n          elevationData = _this$props2.elevationData,\n          texture = _this$props2.texture,\n          wireframe = _this$props2.wireframe,\n          meshMaxError = _this$props2.meshMaxError,\n          elevationDecoder = _this$props2.elevationDecoder;\n\n      if (this.state.isTiled) {\n        return new TileLayer(this.getSubLayerProps({\n          id: 'tiles'\n        }), {\n          wireframe: wireframe,\n          color: color,\n          material: material,\n          getTileData: this.getTiledTerrainData.bind(this),\n          renderSubLayers: this.renderSubLayers.bind(this),\n          updateTriggers: {\n            getTileData: {\n              elevationData: urlTemplateToUpdateTrigger(elevationData),\n              texture: urlTemplateToUpdateTrigger(texture),\n              meshMaxError: meshMaxError,\n              elevationDecoder: elevationDecoder\n            }\n          }\n        });\n      }\n\n      var SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n      return new SubLayerClass(this.getSubLayerProps({\n        id: 'mesh'\n      }), {\n        data: DUMMY_DATA,\n        mesh: this.state.terrain,\n        texture: texture,\n        _instanced: false,\n        getPosition: function getPosition(d) {\n          return [0, 0, 0];\n        },\n        getColor: color,\n        material: material,\n        wireframe: wireframe\n      });\n    }\n  }]);\n\n  return TerrainLayer;\n}(CompositeLayer);\n\nexport { TerrainLayer as default };\nTerrainLayer.layerName = 'TerrainLayer';\nTerrainLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/terrain-layer/terrain-layer.js"],"names":["DUMMY_DATA","defaultProps","TileLayer","elevationData","texture","meshMaxError","type","value","bounds","optional","compare","color","elevationDecoder","rScaler","gScaler","bScaler","offset","workerUrl","wireframe","material","Array","template","TerrainLayer","CompositeLayer","props","oldProps","elevationDataChanged","isTiled","shouldReload","terrain","options","load","tile","dataUrl","getURLFromTemplate","textureUrl","bbox","z","viewport","longitude","latitude","zoom","bottomLeft","topRight","surface","Promise","SubLayerClass","data","mesh","result","coordinateSystem","COORDINATE_SYSTEM","getPosition","getColor","id","getTileData","renderSubLayers","updateTriggers","urlTemplateToUpdateTrigger","_instanced"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer} from '@deck.gl/core';\nimport {SimpleMeshLayer} from '@deck.gl/mesh-layers';\nimport {WebMercatorViewport, COORDINATE_SYSTEM} from '@deck.gl/core';\nimport {load} from '@loaders.gl/core';\nimport {TerrainLoader} from '@loaders.gl/terrain';\nimport TileLayer from '../tile-layer/tile-layer';\nimport {urlType, getURLFromTemplate} from '../tile-layer/utils';\n\nconst DUMMY_DATA = [1];\n\nconst defaultProps = {\n  ...TileLayer.defaultProps,\n  // Image url that encodes height data\n  elevationData: urlType,\n  // Image url to use as texture\n  texture: urlType,\n  // Martini error tolerance in meters, smaller number -> more detailed mesh\n  meshMaxError: {type: 'number', value: 4.0},\n  // Bounding box of the terrain image, [minX, minY, maxX, maxY] in world coordinates\n  bounds: {type: 'array', value: null, optional: true, compare: true},\n  // Color to use if texture is unavailable\n  color: {type: 'color', value: [255, 255, 255]},\n  // Object to decode height data, from (r, g, b) to height in meters\n  elevationDecoder: {\n    type: 'object',\n    value: {\n      rScaler: 1,\n      gScaler: 0,\n      bScaler: 0,\n      offset: 0\n    }\n  },\n  // Supply url to local terrain worker bundle. Only required if running offline and cannot access CDN.\n  workerUrl: {type: 'string', value: null},\n  // Same as SimpleMeshLayer wireframe\n  wireframe: false,\n  material: true\n};\n\n// Turns array of templates into a single string to work around shallow change\nfunction urlTemplateToUpdateTrigger(template) {\n  if (Array.isArray(template)) {\n    return template.join(';');\n  }\n  return template;\n}\n\n/**\n * state: {\n *   isTiled: True renders TileLayer of many SimpleMeshLayers, false renders one SimpleMeshLayer\n *   terrain: Mesh object. Only defined when isTiled is false.\n * }\n */\nexport default class TerrainLayer extends CompositeLayer {\n  updateState({props, oldProps}) {\n    const elevationDataChanged = props.elevationData !== oldProps.elevationData;\n    if (elevationDataChanged) {\n      const {elevationData} = props;\n      const isTiled =\n        elevationData &&\n        (Array.isArray(elevationData) ||\n          (elevationData.includes('{x}') && elevationData.includes('{y}')));\n      this.setState({isTiled});\n    }\n\n    // Reloading for single terrain mesh\n    const shouldReload =\n      elevationDataChanged ||\n      props.meshMaxError !== oldProps.meshMaxError ||\n      props.elevationDecoder !== oldProps.elevationDecoder ||\n      props.bounds !== oldProps.bounds;\n\n    if (!this.state.isTiled && shouldReload) {\n      const terrain = this.loadTerrain(props);\n      this.setState({terrain});\n    }\n  }\n\n  loadTerrain({elevationData, bounds, elevationDecoder, meshMaxError, workerUrl}) {\n    if (!elevationData) {\n      return null;\n    }\n    const options = {\n      terrain: {\n        bounds,\n        meshMaxError,\n        elevationDecoder\n      }\n    };\n    if (workerUrl !== null) {\n      options.terrain.workerUrl = workerUrl;\n    }\n    return load(elevationData, TerrainLoader, options);\n  }\n\n  getTiledTerrainData(tile) {\n    const {elevationData, texture, elevationDecoder, meshMaxError, workerUrl} = this.props;\n    const dataUrl = getURLFromTemplate(elevationData, tile);\n    const textureUrl = getURLFromTemplate(texture, tile);\n\n    const {bbox, z} = tile;\n    const viewport = new WebMercatorViewport({\n      longitude: (bbox.west + bbox.east) / 2,\n      latitude: (bbox.north + bbox.south) / 2,\n      zoom: z\n    });\n    const bottomLeft = viewport.projectFlat([bbox.west, bbox.south]);\n    const topRight = viewport.projectFlat([bbox.east, bbox.north]);\n    const bounds = [bottomLeft[0], bottomLeft[1], topRight[0], topRight[1]];\n\n    const terrain = this.loadTerrain({\n      elevationData: dataUrl,\n      bounds,\n      elevationDecoder,\n      meshMaxError,\n      workerUrl\n    });\n    const surface = textureUrl\n      ? // If surface image fails to load, the tile should still be displayed\n        load(textureUrl).catch(_ => null)\n      : Promise.resolve(null);\n\n    return Promise.all([terrain, surface]);\n  }\n\n  renderSubLayers(props) {\n    const SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n    const {data, color} = props;\n    let mesh = null;\n    let texture = null;\n\n    if (Array.isArray(data)) {\n      mesh = data[0];\n      texture = data[1];\n    } else if (data) {\n      mesh = data.then(result => result && result[0]);\n      texture = data.then(result => result && result[1]);\n    }\n\n    return new SubLayerClass(props, {\n      data: DUMMY_DATA,\n      mesh,\n      texture,\n      coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n      getPosition: d => [0, 0, 0],\n      getColor: color\n    });\n  }\n\n  renderLayers() {\n    const {\n      color,\n      material,\n      elevationData,\n      texture,\n      wireframe,\n      meshMaxError,\n      elevationDecoder\n    } = this.props;\n\n    if (this.state.isTiled) {\n      return new TileLayer(\n        this.getSubLayerProps({\n          id: 'tiles'\n        }),\n        {\n          wireframe,\n          color,\n          material,\n          getTileData: this.getTiledTerrainData.bind(this),\n          renderSubLayers: this.renderSubLayers.bind(this),\n          updateTriggers: {\n            getTileData: {\n              elevationData: urlTemplateToUpdateTrigger(elevationData),\n              texture: urlTemplateToUpdateTrigger(texture),\n              meshMaxError,\n              elevationDecoder\n            }\n          }\n        }\n      );\n    }\n\n    const SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n    return new SubLayerClass(\n      this.getSubLayerProps({\n        id: 'mesh'\n      }),\n      {\n        data: DUMMY_DATA,\n        mesh: this.state.terrain,\n        texture,\n        _instanced: false,\n        getPosition: d => [0, 0, 0],\n        getColor: color,\n        material,\n        wireframe\n      }\n    );\n  }\n}\n\nTerrainLayer.layerName = 'TerrainLayer';\nTerrainLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}