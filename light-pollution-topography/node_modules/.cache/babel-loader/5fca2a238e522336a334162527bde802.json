{"ast":null,"code":"var _jsxFileName = \"/home/lsb/wikidatageo/dark-sky-vacations/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport DeckGL from '@deck.gl/react';\nimport { TerrainLayer, TileLayer } from '@deck.gl/geo-layers';\nimport { BitmapLayer, ScatterplotLayer, TextLayer } from '@deck.gl/layers';\nimport { Table } from 'apache-arrow';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      initialViewState: {\n        longitude: -122.4,\n        latitude: 37.7,\n        zoom: 5,\n        pitch: 30,\n        bearing: 0,\n        maxZoom: 8\n      }\n    };\n  }\n\n  render() {\n    const light = new TileLayer({\n      data: './tiles/texture-{z}-{x}-{y}.png',\n      id: 'light',\n      tileSize: 256,\n      maxZoom: 8,\n      wrapLongitude: true,\n      pickable: true,\n      onHover: h => console.log({\n        lightpicking: h\n      }),\n      renderSubLayers: props => new BitmapLayer(props, {\n        data: null,\n        image: props.data,\n        bounds: [props.tile.bbox.west, props.tile.bbox.south, props.tile.bbox.east, props.tile.bbox.north]\n      })\n    });\n    const lumaTopo = new TerrainLayer({\n      elevationDecoder: {\n        rScaler: 1024,\n        gScaler: 0,\n        bScaler: 0,\n        offset: 0\n      },\n      meshMaxError: 1,\n      elevationData: './tiles/light-{z}-{x}-{y}.png',\n      maxZoom: 8,\n      wrapLongitude: true,\n      texture: './tiles/texture-{z}-{x}-{y}.png',\n      material: {\n        ambient: 0.2,\n        diffuse: 1,\n        shininess: 128,\n        specularColor: [255, 192, 64]\n      }\n    });\n    const dataTilesPointText = new TileLayer({\n      data: './data-tiles/geo-tile-{z}-{x}-{y}-light-0.arrow',\n      id: 'geo-tile',\n      maxZoom: 6,\n      wrapLongitude: true,\n      pickable: true,\n      onHover: h => !console.log({\n        dataTileHover: h\n      }),\n      getTileData: ({\n        url\n      }) => fetch(url).then(data => Table.from(data)),\n      renderSubLayers: ({\n        tile: {\n          bbox: {\n            north,\n            south,\n            east,\n            west\n          }\n        },\n        data\n      }) => {\n        // data.then(thendata => console.log({thendata}));\n        const points = new ScatterplotLayer({\n          id: `points-${north}-${south}-${east}-${west}`,\n          data,\n          pickable: true,\n          onHover: h => console.log({\n            scatterHover: h\n          }),\n          onClick: h => console.log({\n            hiIGotClicked: h\n          }),\n          //  ({object, picked}) => this.setState({\n          //   pointpick: logAndReturn(picked) ? data.get(index) : null}),\n          radiusMinPixels: 10,\n          radiusMaxPixels: 40,\n          lineWidthUnits: 'pixels',\n          getRadius: 40,\n          wrapLongitude: true,\n          getPosition: ({\n            gt_lon,\n            gt_lat\n          }, {\n            index,\n            target\n          }) => [gt_lon, gt_lat],\n          getFillColor: [0, 128, 255],\n          getLineColor: [0, 0, 0]\n        });\n        return [points];\n      }\n    });\n    const dTPTSLP = new TileLayer({\n      data: './data-tiles/geo-tile-{z}-{x}-{y}-light-0.arrow',\n      maxZoom: 6,\n      wrapLongitude: true,\n      pickable: true,\n      getTileData: ({\n        url\n      }) => fetch(url).then(data => Table.from(data)),\n      onHover: ({\n        index,\n        picked,\n        sourceLayer: {\n          props: {\n            data,\n            onHover\n          }\n        }\n      }) => console.log({\n        data,\n        index,\n        picked,\n        dGI: picked ? data.get(index) : \"not picked lol\",\n        h: onHover({\n          data,\n          index\n        })\n      }),\n      renderSubLayers: ({\n        tile: {\n          bbox: {\n            north,\n            south,\n            east,\n            west\n          }\n        },\n        data\n      }) => [new ScatterplotLayer({\n        id: `points-${north}-${south}-${east}-${west}`,\n        data,\n        pickable: true,\n        onHover: h => console.log({\n          dTPTSLP: h\n        }),\n        lineWidthUnits: 'pixels',\n        getRadius: 40,\n        wrapLongitude: true,\n        getPosition: ({\n          gt_lon,\n          gt_lat\n        }) => [gt_lon, gt_lat],\n        getFillColor: [0, 128, 255],\n        getLineColor: [0, 0, 0]\n      })]\n    });\n    console.log({\n      state: this.state\n    });\n    const textPick = !this.state.pointpick ? null : new TextLayer({\n      id: `title-${this.state.pointpick.item_id}`,\n      data: [this.state.pointpick.site_page],\n      pickable: false,\n      characterSet: this.state.pointpick.site_page.split(''),\n      backgroundColor: [255, 255, 255],\n      getText: d => `   ${d}   `,\n      getSize: 20,\n      sizeUnits: 'pixels',\n      wrapLongitude: true,\n      getPosition: [this.state.pointpick.gt_lon, this.state.pointpick.gt_lat]\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(DeckGL, {\n      initialViewState: this.state.initialViewState,\n      controller: true,\n      layers: [light, dataTilesPointText, null && lumaTopo, textPick],\n      id: \"maincanvas\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/lsb/wikidatageo/dark-sky-vacations/src/App.js"],"names":["React","DeckGL","TerrainLayer","TileLayer","BitmapLayer","ScatterplotLayer","TextLayer","Table","App","Component","constructor","props","state","initialViewState","longitude","latitude","zoom","pitch","bearing","maxZoom","render","light","data","id","tileSize","wrapLongitude","pickable","onHover","h","console","log","lightpicking","renderSubLayers","image","bounds","tile","bbox","west","south","east","north","lumaTopo","elevationDecoder","rScaler","gScaler","bScaler","offset","meshMaxError","elevationData","texture","material","ambient","diffuse","shininess","specularColor","dataTilesPointText","dataTileHover","getTileData","url","fetch","then","from","points","scatterHover","onClick","hiIGotClicked","radiusMinPixels","radiusMaxPixels","lineWidthUnits","getRadius","getPosition","gt_lon","gt_lat","index","target","getFillColor","getLineColor","dTPTSLP","picked","sourceLayer","dGI","get","textPick","pointpick","item_id","site_page","characterSet","split","backgroundColor","getText","d","getSize","sizeUnits"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\n\nimport DeckGL from '@deck.gl/react';\nimport { TerrainLayer, TileLayer } from '@deck.gl/geo-layers';\nimport { BitmapLayer, ScatterplotLayer, TextLayer } from '@deck.gl/layers';\nimport { Table } from 'apache-arrow';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {initialViewState: {longitude: -122.4, latitude: 37.7, zoom: 5, pitch: 30, bearing: 0, maxZoom: 8}}\n  }\n  render() {\n    const light = new TileLayer({\n      data: './tiles/texture-{z}-{x}-{y}.png',\n      id: 'light',\n      tileSize: 256,\n      maxZoom: 8,\n      wrapLongitude: true,\n      pickable: true,\n      onHover: h => console.log({lightpicking: h}),\n      renderSubLayers: props => (\n        new BitmapLayer((props), {\n          data: null,\n          image: props.data,\n          bounds: [props.tile.bbox.west, props.tile.bbox.south, props.tile.bbox.east, props.tile.bbox.north],\n        })\n      )\n    })\n    const lumaTopo = new TerrainLayer({\n      elevationDecoder: {\n        rScaler: 1024,\n        gScaler: 0,\n        bScaler: 0,\n        offset: 0,\n      },\n      meshMaxError: 1,\n      elevationData: './tiles/light-{z}-{x}-{y}.png',\n      maxZoom: 8,\n      wrapLongitude: true,\n      texture: './tiles/texture-{z}-{x}-{y}.png',\n      material: {\n        ambient: 0.2,\n        diffuse: 1,\n        shininess: 128,\n        specularColor: [255, 192, 64]\n      }\n    });\n    const dataTilesPointText = new TileLayer({\n      data: './data-tiles/geo-tile-{z}-{x}-{y}-light-0.arrow',\n      id: 'geo-tile',\n      maxZoom: 6,\n      wrapLongitude: true,\n      pickable: true,\n      onHover: h => !console.log({dataTileHover: h}),\n      getTileData: ({url}) => fetch(url).then(data => Table.from(data)),\n      renderSubLayers: ({tile: {bbox: {north, south, east, west}}, data}) => {\n        // data.then(thendata => console.log({thendata}));\n        const points = new ScatterplotLayer({\n          id: `points-${north}-${south}-${east}-${west}`,\n          data,\n          pickable: true,\n          onHover: h => console.log({scatterHover: h}),\n          onClick: h => console.log({hiIGotClicked: h}),\n          //  ({object, picked}) => this.setState({\n          //   pointpick: logAndReturn(picked) ? data.get(index) : null}),\n          radiusMinPixels: 10,\n          radiusMaxPixels: 40,\n          lineWidthUnits: 'pixels',\n          getRadius: 40,\n          wrapLongitude: true,\n          getPosition: ({gt_lon, gt_lat}, {index, target}) => [gt_lon, gt_lat],\n          getFillColor: [0,128,255],\n          getLineColor: [0,0,0],  \n        });\n        return [points];\n      }\n    });\n    const dTPTSLP = new TileLayer({\n      data: './data-tiles/geo-tile-{z}-{x}-{y}-light-0.arrow',\n      maxZoom: 6,\n      wrapLongitude: true,\n      pickable: true,\n      getTileData: ({url}) => fetch(url).then(data => Table.from(data)),\n      onHover: ({index, picked, sourceLayer: {props: {data, onHover}}}) => (console.log({data, index, picked, dGI: picked ? data.get(index) : \"not picked lol\", h: onHover({data,index})})),\n      renderSubLayers: ({tile: {bbox: {north, south, east, west}}, data}) => [\n        new ScatterplotLayer({\n          id: `points-${north}-${south}-${east}-${west}`,\n          data,\n          pickable: true,\n          onHover: h => console.log({dTPTSLP: h}),\n          lineWidthUnits: 'pixels',\n          getRadius: 40,\n          wrapLongitude: true,\n          getPosition: ({gt_lon, gt_lat}) => [gt_lon, gt_lat],\n          getFillColor: [0,128,255],\n          getLineColor: [0,0,0],\n        })\n      ]\n    })\n    console.log({state: this.state});\n    const textPick = !this.state.pointpick ? null : new TextLayer({\n      id: `title-${this.state.pointpick.item_id}`,\n      data: [this.state.pointpick.site_page],\n      pickable: false,\n      characterSet: this.state.pointpick.site_page.split(''),\n      backgroundColor: [255,255,255],\n      getText: (d) => `   ${d}   `,\n      getSize: 20,\n      sizeUnits: 'pixels',\n      wrapLongitude: true,\n      getPosition: [this.state.pointpick.gt_lon, this.state.pointpick.gt_lat],\n    });\n    return (\n      <div>\n        <div>\n          <DeckGL initialViewState={this.state.initialViewState} controller={true} layers={[light, dataTilesPointText, null && lumaTopo, textPick]} id={\"maincanvas\"} />\n        </div>\n        {/* <div id=\"colophon\">© Lee Butterman 2020. Made in Oakland, California.</div>\n        <div>\n          \n        </div> */}\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}