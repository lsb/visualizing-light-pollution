{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { CompositeLayer, _flatten as flatten } from '@deck.gl/core';\nimport { GeoJsonLayer } from '@deck.gl/layers';\nimport Tileset2D, { STRATEGY_DEFAULT } from './tileset-2d';\nimport { urlType, getURLFromTemplate } from './utils';\nvar defaultProps = {\n  data: [],\n  dataComparator: urlType.equals,\n  renderSubLayers: {\n    type: 'function',\n    value: function value(props) {\n      return new GeoJsonLayer(props);\n    },\n    compare: false\n  },\n  getTileData: {\n    type: 'function',\n    optional: true,\n    value: null,\n    compare: false\n  },\n  onViewportLoad: {\n    type: 'function',\n    optional: true,\n    value: null,\n    compare: false\n  },\n  onTileLoad: {\n    type: 'function',\n    value: function value(tile) {},\n    compare: false\n  },\n  onTileError: {\n    type: 'function',\n    value: function value(err) {\n      return console.error(err);\n    },\n    compare: false\n  },\n  tileSize: 512,\n  maxZoom: null,\n  minZoom: 0,\n  maxCacheSize: null,\n  maxCacheByteSize: null,\n  refinementStrategy: STRATEGY_DEFAULT\n};\n\nvar TileLayer = function (_CompositeLayer) {\n  _inherits(TileLayer, _CompositeLayer);\n\n  function TileLayer() {\n    _classCallCheck(this, TileLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TileLayer).apply(this, arguments));\n  }\n\n  _createClass(TileLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      this.state = {\n        tiles: [],\n        isLoaded: false\n      };\n    }\n  }, {\n    key: \"shouldUpdateState\",\n    value: function shouldUpdateState(_ref) {\n      var changeFlags = _ref.changeFlags;\n      return changeFlags.somethingChanged;\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref2) {\n      var props = _ref2.props,\n          oldProps = _ref2.oldProps,\n          context = _ref2.context,\n          changeFlags = _ref2.changeFlags;\n      var tileset = this.state.tileset;\n      var createTileCache = !tileset || changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getTileData);\n\n      if (createTileCache) {\n        var maxZoom = props.maxZoom,\n            minZoom = props.minZoom,\n            tileSize = props.tileSize,\n            maxCacheSize = props.maxCacheSize,\n            maxCacheByteSize = props.maxCacheByteSize,\n            refinementStrategy = props.refinementStrategy;\n        tileset = new Tileset2D({\n          getTileData: this.getTileData.bind(this),\n          maxCacheSize: maxCacheSize,\n          maxCacheByteSize: maxCacheByteSize,\n          maxZoom: maxZoom,\n          minZoom: minZoom,\n          tileSize: tileSize,\n          refinementStrategy: refinementStrategy,\n          onTileLoad: this._onTileLoad.bind(this),\n          onTileError: this._onTileError.bind(this)\n        });\n        this.setState({\n          tileset: tileset\n        });\n      } else if (changeFlags.propsChanged) {\n        tileset.setOptions(props);\n        this.state.tileset.tiles.forEach(function (tile) {\n          tile.layers = null;\n        });\n      }\n\n      if (createTileCache || changeFlags.viewportChanged) {\n        this._updateTileset();\n      }\n    }\n  }, {\n    key: \"_updateTileset\",\n    value: function _updateTileset() {\n      var tileset = this.state.tileset;\n      var onViewportLoad = this.props.onViewportLoad;\n      var frameNumber = tileset.update(this.context.viewport);\n      var isLoaded = tileset.isLoaded;\n      var loadingStateChanged = this.state.isLoaded !== isLoaded;\n      var tilesetChanged = this.state.frameNumber !== frameNumber;\n\n      if (isLoaded && onViewportLoad && (loadingStateChanged || tilesetChanged)) {\n        onViewportLoad(tileset.selectedTiles.map(function (tile) {\n          return tile.data;\n        }));\n      }\n\n      if (tilesetChanged) {\n        this.setState({\n          frameNumber: frameNumber\n        });\n      }\n\n      this.state.isLoaded = isLoaded;\n    }\n  }, {\n    key: \"_onTileLoad\",\n    value: function _onTileLoad(tile) {\n      var layer = this.getCurrentLayer();\n      layer.props.onTileLoad(tile);\n\n      layer._updateTileset();\n    }\n  }, {\n    key: \"_onTileError\",\n    value: function _onTileError(error) {\n      var layer = this.getCurrentLayer();\n      layer.props.onTileError(error);\n\n      layer._updateTileset();\n    }\n  }, {\n    key: \"getTileData\",\n    value: function getTileData(tile) {\n      var _this$props = this.props,\n          getTileData = _this$props.getTileData,\n          fetch = _this$props.fetch,\n          data = _this$props.data;\n      tile.url = getURLFromTemplate(data, tile);\n\n      if (getTileData) {\n        return getTileData(tile);\n      }\n\n      if (tile.url) {\n        return fetch(tile.url, {\n          layer: this\n        });\n      }\n\n      return null;\n    }\n  }, {\n    key: \"renderSubLayers\",\n    value: function renderSubLayers(props) {\n      return this.props.renderSubLayers(props);\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(_ref3) {\n      var info = _ref3.info,\n          sourceLayer = _ref3.sourceLayer;\n      info.sourceLayer = sourceLayer;\n      info.tile = sourceLayer.props.tile;\n      return info;\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this = this;\n\n      var visible = this.props.visible;\n      return this.state.tileset.tiles.map(function (tile) {\n        var isVisible = visible && tile.isVisible;\n\n        if (!tile.layers) {\n          var layers = _this.renderSubLayers(Object.assign({}, _this.props, {\n            id: \"\".concat(_this.id, \"-\").concat(tile.x, \"-\").concat(tile.y, \"-\").concat(tile.z),\n            data: tile.data,\n            visible: isVisible,\n            _offset: 0,\n            tile: tile\n          }));\n\n          tile.layers = flatten(layers, Boolean);\n        } else if (tile.layers[0] && tile.layers[0].props.visible !== isVisible) {\n          tile.layers = tile.layers.map(function (layer) {\n            return layer.clone({\n              visible: isVisible\n            });\n          });\n        }\n\n        return tile.layers;\n      });\n    }\n  }, {\n    key: \"isLoaded\",\n    get: function get() {\n      var tileset = this.state.tileset;\n      return tileset.selectedTiles.every(function (tile) {\n        return tile.layers && tile.layers.every(function (layer) {\n          return layer.isLoaded;\n        });\n      });\n    }\n  }]);\n\n  return TileLayer;\n}(CompositeLayer);\n\nexport { TileLayer as default };\nTileLayer.layerName = 'TileLayer';\nTileLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/tile-layer/tile-layer.js"],"names":["_flatten","defaultProps","data","dataComparator","urlType","renderSubLayers","type","value","compare","getTileData","optional","onViewportLoad","onTileLoad","onTileError","console","tileSize","maxZoom","minZoom","maxCacheSize","maxCacheByteSize","refinementStrategy","STRATEGY_DEFAULT","TileLayer","CompositeLayer","tiles","isLoaded","tileset","tile","layer","changeFlags","props","oldProps","context","createTileCache","frameNumber","loadingStateChanged","tilesetChanged","error","fetch","getURLFromTemplate","info","sourceLayer","visible","isVisible","layers","id","_offset","flatten"],"mappings":"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","sourcesContent":["import {CompositeLayer, _flatten as flatten} from '@deck.gl/core';\nimport {GeoJsonLayer} from '@deck.gl/layers';\n\nimport Tileset2D, {STRATEGY_DEFAULT} from './tileset-2d';\nimport {urlType, getURLFromTemplate} from './utils';\n\nconst defaultProps = {\n  data: [],\n  dataComparator: urlType.equals,\n  renderSubLayers: {type: 'function', value: props => new GeoJsonLayer(props), compare: false},\n  getTileData: {type: 'function', optional: true, value: null, compare: false},\n  // TODO - change to onViewportLoad to align with Tile3DLayer\n  onViewportLoad: {type: 'function', optional: true, value: null, compare: false},\n  onTileLoad: {type: 'function', value: tile => {}, compare: false},\n  // eslint-disable-next-line\n  onTileError: {type: 'function', value: err => console.error(err), compare: false},\n  tileSize: 512,\n  maxZoom: null,\n  minZoom: 0,\n  maxCacheSize: null,\n  maxCacheByteSize: null,\n  refinementStrategy: STRATEGY_DEFAULT\n};\n\nexport default class TileLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      tiles: [],\n      isLoaded: false\n    };\n  }\n\n  get isLoaded() {\n    const {tileset} = this.state;\n    return tileset.selectedTiles.every(\n      tile => tile.layers && tile.layers.every(layer => layer.isLoaded)\n    );\n  }\n\n  shouldUpdateState({changeFlags}) {\n    return changeFlags.somethingChanged;\n  }\n\n  updateState({props, oldProps, context, changeFlags}) {\n    let {tileset} = this.state;\n    const createTileCache =\n      !tileset ||\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getTileData));\n\n    if (createTileCache) {\n      const {\n        maxZoom,\n        minZoom,\n        tileSize,\n        maxCacheSize,\n        maxCacheByteSize,\n        refinementStrategy\n      } = props;\n      tileset = new Tileset2D({\n        getTileData: this.getTileData.bind(this),\n        maxCacheSize,\n        maxCacheByteSize,\n        maxZoom,\n        minZoom,\n        tileSize,\n        refinementStrategy,\n        onTileLoad: this._onTileLoad.bind(this),\n        onTileError: this._onTileError.bind(this)\n      });\n      this.setState({tileset});\n    } else if (changeFlags.propsChanged) {\n      tileset.setOptions(props);\n      // if any props changed, delete the cached layers\n      this.state.tileset.tiles.forEach(tile => {\n        tile.layers = null;\n      });\n    }\n\n    if (createTileCache || changeFlags.viewportChanged) {\n      this._updateTileset();\n    }\n  }\n\n  _updateTileset() {\n    const {tileset} = this.state;\n    const {onViewportLoad} = this.props;\n    const frameNumber = tileset.update(this.context.viewport);\n    const {isLoaded} = tileset;\n\n    const loadingStateChanged = this.state.isLoaded !== isLoaded;\n    const tilesetChanged = this.state.frameNumber !== frameNumber;\n\n    if (isLoaded && onViewportLoad && (loadingStateChanged || tilesetChanged)) {\n      onViewportLoad(tileset.selectedTiles.map(tile => tile.data));\n    }\n\n    if (tilesetChanged) {\n      // Save the tileset frame number - trigger a rerender\n      this.setState({frameNumber});\n    }\n    // Save the loaded state - should not trigger a rerender\n    this.state.isLoaded = isLoaded;\n  }\n\n  _onTileLoad(tile) {\n    const layer = this.getCurrentLayer();\n    layer.props.onTileLoad(tile);\n    layer._updateTileset();\n  }\n\n  _onTileError(error) {\n    const layer = this.getCurrentLayer();\n    layer.props.onTileError(error);\n    // errorred tiles should not block rendering, are considered \"loaded\" with empty data\n    layer._updateTileset();\n  }\n\n  // Methods for subclass to override\n\n  getTileData(tile) {\n    const {getTileData, fetch, data} = this.props;\n\n    tile.url = getURLFromTemplate(data, tile);\n\n    if (getTileData) {\n      return getTileData(tile);\n    }\n    if (tile.url) {\n      return fetch(tile.url, {layer: this});\n    }\n    return null;\n  }\n\n  renderSubLayers(props) {\n    return this.props.renderSubLayers(props);\n  }\n\n  getPickingInfo({info, sourceLayer}) {\n    info.sourceLayer = sourceLayer;\n    info.tile = sourceLayer.props.tile;\n    return info;\n  }\n\n  renderLayers() {\n    const {visible} = this.props;\n    return this.state.tileset.tiles.map(tile => {\n      // For a tile to be visible:\n      // - parent layer must be visible\n      // - tile must be visible in the current viewport\n      const isVisible = visible && tile.isVisible;\n      // cache the rendered layer in the tile\n      if (!tile.layers) {\n        const layers = this.renderSubLayers(\n          Object.assign({}, this.props, {\n            id: `${this.id}-${tile.x}-${tile.y}-${tile.z}`,\n            data: tile.data,\n            visible: isVisible,\n            _offset: 0,\n            tile\n          })\n        );\n        tile.layers = flatten(layers, Boolean);\n      } else if (tile.layers[0] && tile.layers[0].props.visible !== isVisible) {\n        tile.layers = tile.layers.map(layer => layer.clone({visible: isVisible}));\n      }\n      return tile.layers;\n    });\n  }\n}\n\nTileLayer.layerName = 'TileLayer';\nTileLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}