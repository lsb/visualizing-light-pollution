{"ast":null,"code":"export default function transpileShader(source, targetGLSLVersion, isVertex) {\n  switch (targetGLSLVersion) {\n    case 300:\n      return isVertex ? convertVertexShaderTo300(source) : convertFragmentShaderTo300(source);\n\n    case 100:\n      return isVertex ? convertVertexShaderTo100(source) : convertFragmentShaderTo100(source);\n\n    default:\n      throw new Error(\"unknown GLSL version \".concat(targetGLSLVersion));\n  }\n}\nvar FS_OUTPUT_REGEX = /^[ \\t]*out[ \\t]+vec4[ \\t]+(\\w+)[ \\t]*;\\s+/m;\n\nfunction convertVertexShaderTo300(source) {\n  return source.replace(/^(#version[ \\t]+(100|300[ \\t]+es))?[ \\t]*\\n/, '#version 300 es\\n').replace(/^[ \\t]*attribute[ \\t]+(.+;)/gm, 'in $1').replace(/^[ \\t]*varying[ \\t]+(.+;)/gm, 'out $1').replace(/\\btexture2D\\(/g, 'texture(').replace(/\\btextureCube\\(+/g, 'texture(').replace(/\\btexture2DLodEXT\\(/g, 'textureLod(').replace(/\\btextureCubeLodEXT\\(/g, 'textureLod(');\n}\n\nfunction convertFragmentShaderTo300(source) {\n  return source.replace(/^(#version[ \\t]+(100|300[ \\t]+es))?[ \\t]*\\n/, '#version 300 es\\n').replace(/^[ \\t]*varying[ \\t]+(.+;)/gm, 'in $1').replace(/\\btexture2D\\(/g, 'texture(').replace(/\\btextureCube\\(/g, 'texture(').replace(/\\btexture2DLodEXT\\(/g, 'textureLod(').replace(/\\btextureCubeLodEXT\\(/g, 'textureLod(');\n}\n\nfunction convertVertexShaderTo100(source) {\n  return source.replace(/^#version[ \\t]+300[ \\t]+es/, '#version 100').replace(/^[ \\t]*in[ \\t]+(.+;)/gm, 'attribute $1').replace(/^[ \\t]*out[ \\t]+(.+;)/gm, 'varying $1').replace(/\\btexture\\(/g, 'texture2D(').replace(/\\btextureLod\\(/g, 'texture2DLodEXT(');\n}\n\nfunction convertFragmentShaderTo100(source) {\n  source = source.replace(/^#version[ \\t]+300[ \\t]+es/, '#version 100').replace(/^[ \\t]*in[ \\t]+/gm, 'varying ').replace(/\\btexture\\(/g, 'texture2D(').replace(/\\btextureLod\\(/g, 'texture2DLodEXT(');\n  var outputMatch = source.match(FS_OUTPUT_REGEX);\n\n  if (outputMatch) {\n    var outputName = outputMatch[1];\n    source = source.replace(FS_OUTPUT_REGEX, '').replace(new RegExp(\"\\\\b\".concat(outputName, \"\\\\b\"), 'g'), 'gl_FragColor');\n  }\n\n  return source;\n}","map":{"version":3,"sources":["../../../src/lib/transpile-shader.js"],"names":["isVertex","convertVertexShaderTo300","convertFragmentShaderTo300","convertVertexShaderTo100","convertFragmentShaderTo100","FS_OUTPUT_REGEX","source","outputMatch","outputName"],"mappings":"AAGA,eAAe,SAAA,eAAA,CAAA,MAAA,EAAA,iBAAA,EAAA,QAAA,EAA8D;AAC3E,UAAA,iBAAA;AACE,SAAA,GAAA;AACE,aAAOA,QAAQ,GAAGC,wBAAwB,CAA3B,MAA2B,CAA3B,GAAsCC,0BAA0B,CAA/E,MAA+E,CAA/E;;AACF,SAAA,GAAA;AACE,aAAOF,QAAQ,GAAGG,wBAAwB,CAA3B,MAA2B,CAA3B,GAAsCC,0BAA0B,CAA/E,MAA+E,CAA/E;;AACF;AACE,YAAM,IAAA,KAAA,CAAA,wBAAA,MAAA,CAAN,iBAAM,CAAA,CAAN;AANJ;AAQD;AAED,IAAMC,eAAe,GAArB,4CAAA;;AAEA,SAAA,wBAAA,CAAA,MAAA,EAA0C;AACxC,SAAOC,MAAM,CAANA,OAAAA,CAAAA,6CAAAA,EAAAA,mBAAAA,EAAAA,OAAAA,CAAAA,+BAAAA,EAAAA,OAAAA,EAAAA,OAAAA,CAAAA,6BAAAA,EAAAA,QAAAA,EAAAA,OAAAA,CAAAA,gBAAAA,EAAAA,UAAAA,EAAAA,OAAAA,CAAAA,mBAAAA,EAAAA,UAAAA,EAAAA,OAAAA,CAAAA,sBAAAA,EAAAA,aAAAA,EAAAA,OAAAA,CAAAA,wBAAAA,EAAP,aAAOA,CAAP;AAQD;;AAED,SAAA,0BAAA,CAAA,MAAA,EAA4C;AAC1C,SAAOA,MAAM,CAANA,OAAAA,CAAAA,6CAAAA,EAAAA,mBAAAA,EAAAA,OAAAA,CAAAA,6BAAAA,EAAAA,OAAAA,EAAAA,OAAAA,CAAAA,gBAAAA,EAAAA,UAAAA,EAAAA,OAAAA,CAAAA,kBAAAA,EAAAA,UAAAA,EAAAA,OAAAA,CAAAA,sBAAAA,EAAAA,aAAAA,EAAAA,OAAAA,CAAAA,wBAAAA,EAAP,aAAOA,CAAP;AAOD;;AAED,SAAA,wBAAA,CAAA,MAAA,EAA0C;AAExC,SAAOA,MAAM,CAANA,OAAAA,CAAAA,4BAAAA,EAAAA,cAAAA,EAAAA,OAAAA,CAAAA,wBAAAA,EAAAA,cAAAA,EAAAA,OAAAA,CAAAA,yBAAAA,EAAAA,YAAAA,EAAAA,OAAAA,CAAAA,cAAAA,EAAAA,YAAAA,EAAAA,OAAAA,CAAAA,iBAAAA,EAAP,kBAAOA,CAAP;AAMD;;AAED,SAAA,0BAAA,CAAA,MAAA,EAA4C;AAE1CA,EAAAA,MAAM,GAAGA,MAAM,CAANA,OAAAA,CAAAA,4BAAAA,EAAAA,cAAAA,EAAAA,OAAAA,CAAAA,mBAAAA,EAAAA,UAAAA,EAAAA,OAAAA,CAAAA,cAAAA,EAAAA,YAAAA,EAAAA,OAAAA,CAAAA,iBAAAA,EAATA,kBAASA,CAATA;AAMA,MAAMC,WAAW,GAAGD,MAAM,CAANA,KAAAA,CAApB,eAAoBA,CAApB;;AACA,MAAA,WAAA,EAAiB;AACf,QAAME,UAAU,GAAGD,WAAW,CAA9B,CAA8B,CAA9B;AACAD,IAAAA,MAAM,GAAGA,MAAM,CAANA,OAAAA,CAAAA,eAAAA,EAAAA,EAAAA,EAAAA,OAAAA,CAEE,IAAA,MAAA,CAAA,MAAA,MAAA,CAAA,UAAA,EAAA,KAAA,CAAA,EAFFA,GAEE,CAFFA,EAATA,cAASA,CAATA;AAGD;;AAED,SAAA,MAAA;AACD","sourcesContent":["// Transpiles shader source code to target GLSL version\n// Note: We always run transpiler even if same version e.g. 3.00 => 3.00\n// RFC: https://github.com/uber/luma.gl/blob/7.0-release/dev-docs/RFCs/v6.0/portable-glsl-300-rfc.md\nexport default function transpileShader(source, targetGLSLVersion, isVertex) {\n  switch (targetGLSLVersion) {\n    case 300:\n      return isVertex ? convertVertexShaderTo300(source) : convertFragmentShaderTo300(source);\n    case 100:\n      return isVertex ? convertVertexShaderTo100(source) : convertFragmentShaderTo100(source);\n    default:\n      throw new Error(`unknown GLSL version ${targetGLSLVersion}`);\n  }\n}\n\nconst FS_OUTPUT_REGEX = /^[ \\t]*out[ \\t]+vec4[ \\t]+(\\w+)[ \\t]*;\\s+/m;\n\nfunction convertVertexShaderTo300(source) {\n  return source\n    .replace(/^(#version[ \\t]+(100|300[ \\t]+es))?[ \\t]*\\n/, '#version 300 es\\n')\n    .replace(/^[ \\t]*attribute[ \\t]+(.+;)/gm, 'in $1')\n    .replace(/^[ \\t]*varying[ \\t]+(.+;)/gm, 'out $1')\n    .replace(/\\btexture2D\\(/g, 'texture(')\n    .replace(/\\btextureCube\\(+/g, 'texture(')\n    .replace(/\\btexture2DLodEXT\\(/g, 'textureLod(')\n    .replace(/\\btextureCubeLodEXT\\(/g, 'textureLod(');\n}\n\nfunction convertFragmentShaderTo300(source) {\n  return source\n    .replace(/^(#version[ \\t]+(100|300[ \\t]+es))?[ \\t]*\\n/, '#version 300 es\\n')\n    .replace(/^[ \\t]*varying[ \\t]+(.+;)/gm, 'in $1')\n    .replace(/\\btexture2D\\(/g, 'texture(')\n    .replace(/\\btextureCube\\(/g, 'texture(')\n    .replace(/\\btexture2DLodEXT\\(/g, 'textureLod(')\n    .replace(/\\btextureCubeLodEXT\\(/g, 'textureLod(');\n}\n\nfunction convertVertexShaderTo100(source) {\n  // /gm - treats each line as a string, so that ^ matches after newlines\n  return source\n    .replace(/^#version[ \\t]+300[ \\t]+es/, '#version 100')\n    .replace(/^[ \\t]*in[ \\t]+(.+;)/gm, 'attribute $1')\n    .replace(/^[ \\t]*out[ \\t]+(.+;)/gm, 'varying $1')\n    .replace(/\\btexture\\(/g, 'texture2D(')\n    .replace(/\\btextureLod\\(/g, 'texture2DLodEXT(');\n}\n\nfunction convertFragmentShaderTo100(source) {\n  // /gm - treats each line as a string, so that ^ matches after newlines\n  source = source\n    .replace(/^#version[ \\t]+300[ \\t]+es/, '#version 100')\n    .replace(/^[ \\t]*in[ \\t]+/gm, 'varying ')\n    .replace(/\\btexture\\(/g, 'texture2D(')\n    .replace(/\\btextureLod\\(/g, 'texture2DLodEXT(');\n\n  const outputMatch = source.match(FS_OUTPUT_REGEX);\n  if (outputMatch) {\n    const outputName = outputMatch[1];\n    source = source\n      .replace(FS_OUTPUT_REGEX, '')\n      .replace(new RegExp(`\\\\b${outputName}\\\\b`, 'g'), 'gl_FragColor');\n  }\n\n  return source;\n}\n"]},"metadata":{},"sourceType":"module"}