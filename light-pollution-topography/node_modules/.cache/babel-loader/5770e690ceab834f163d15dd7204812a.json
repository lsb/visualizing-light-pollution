{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _awaitAsyncGenerator from \"@babel/runtime/helpers/esm/awaitAsyncGenerator\";\nimport _wrapAsyncGenerator from \"@babel/runtime/helpers/esm/wrapAsyncGenerator\";\nimport { isBrowser, nodeVersion } from '@loaders.gl/loader-utils';\nexport function makeStreamIterator(stream) {\n  if (isBrowser || nodeVersion >= 10) {\n    if (typeof stream[Symbol.asyncIterator] === 'function') {\n      return stream;\n    }\n\n    if (typeof stream.getIterator === 'function') {\n      return stream.getIterator();\n    }\n  }\n\n  return isBrowser ? makeBrowserStreamIterator(stream) : makeNodeStreamIterator(stream);\n}\n\nfunction makeBrowserStreamIterator(_x) {\n  return _makeBrowserStreamIterator.apply(this, arguments);\n}\n\nfunction _makeBrowserStreamIterator() {\n  _makeBrowserStreamIterator = _wrapAsyncGenerator(_regeneratorRuntime.mark(function _callee(stream) {\n    var reader, _ref, done, value;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            reader = stream.getReader();\n            _context.prev = 1;\n\n          case 2:\n            if (!true) {\n              _context.next = 14;\n              break;\n            }\n\n            _context.next = 5;\n            return _awaitAsyncGenerator(reader.read());\n\n          case 5:\n            _ref = _context.sent;\n            done = _ref.done;\n            value = _ref.value;\n\n            if (!done) {\n              _context.next = 10;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 10:\n            _context.next = 12;\n            return value;\n\n          case 12:\n            _context.next = 2;\n            break;\n\n          case 14:\n            _context.next = 19;\n            break;\n\n          case 16:\n            _context.prev = 16;\n            _context.t0 = _context[\"catch\"](1);\n            reader.releaseLock();\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 16]]);\n  }));\n  return _makeBrowserStreamIterator.apply(this, arguments);\n}\n\nfunction makeNodeStreamIterator(_x2) {\n  return _makeNodeStreamIterator.apply(this, arguments);\n}\n\nfunction _makeNodeStreamIterator() {\n  _makeNodeStreamIterator = _wrapAsyncGenerator(_regeneratorRuntime.mark(function _callee2(stream) {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _awaitAsyncGenerator(stream);\n\n          case 2:\n            stream = _context2.sent;\n\n          case 3:\n            if (!true) {\n              _context2.next = 15;\n              break;\n            }\n\n            data = stream.read();\n\n            if (!(data !== null)) {\n              _context2.next = 9;\n              break;\n            }\n\n            _context2.next = 8;\n            return data;\n\n          case 8:\n            return _context2.abrupt(\"continue\", 3);\n\n          case 9:\n            if (!stream._readableState.ended) {\n              _context2.next = 11;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 11:\n            _context2.next = 13;\n            return _awaitAsyncGenerator(onceReadable(stream));\n\n          case 13:\n            _context2.next = 3;\n            break;\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _makeNodeStreamIterator.apply(this, arguments);\n}\n\nfunction onceReadable(_x3) {\n  return _onceReadable.apply(this, arguments);\n}\n\nfunction _onceReadable() {\n  _onceReadable = _asyncToGenerator(_regeneratorRuntime.mark(function _callee3(stream) {\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            return _context3.abrupt(\"return\", new Promise(function (resolve) {\n              stream.once('readable', resolve);\n            }));\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _onceReadable.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../src/iterator-utils/stream-iteration.js"],"names":["isBrowser","nodeVersion","stream","Symbol","makeBrowserStreamIterator","makeNodeStreamIterator","reader","done","value","data","onceReadable"],"mappings":"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","sourcesContent":["import {isBrowser, nodeVersion} from '@loaders.gl/loader-utils';\n\nexport function makeStreamIterator(stream) {\n  // Hacky test for node version to ensure we don't call bad polyfills\n  if (isBrowser || nodeVersion >= 10) {\n    // NODE 10+: stream is an asyncIterator\n    if (typeof stream[Symbol.asyncIterator] === 'function') {\n      return stream;\n    }\n\n    // WhatWG: stream is supposed to have a `getIterator` method\n    if (typeof stream.getIterator === 'function') {\n      return stream.getIterator();\n    }\n  }\n\n  return isBrowser ? makeBrowserStreamIterator(stream) : makeNodeStreamIterator(stream);\n}\n\n// BROWSER IMPLEMENTATION\n// See https://jakearchibald.com/2017/async-iterators-and-generators/#making-streams-iterate\n\nasync function* makeBrowserStreamIterator(stream) {\n  // In the brower, we first need to get a lock on the stream\n  const reader = stream.getReader();\n\n  try {\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      // Read from the stream\n      const {done, value} = await reader.read();\n      // Exit if we're done\n      if (done) {\n        return;\n      }\n      // Else yield the chunk\n      yield value;\n    }\n  } catch (error) {\n    // TODO - examples makes it look like this should always be called,\n    // but that generates exceptions so only call it if we do not reach the end\n    reader.releaseLock();\n  }\n}\n\n// NODE <10 IMPLEMENTATION\n// See https://github.com/bustle/streaming-iterables, MIT license\n\nasync function* makeNodeStreamIterator(stream) {\n  // Node createStream will return promises to handle http requests\n  stream = await stream;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const data = stream.read();\n    if (data !== null) {\n      yield data;\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n    if (stream._readableState.ended) {\n      return;\n    }\n    await onceReadable(stream);\n  }\n}\n\nasync function onceReadable(stream) {\n  return new Promise(resolve => {\n    stream.once('readable', resolve);\n  });\n}\n\n// TODO - we could add our own polyfill\n// const {Readable} = require('stream');\n// if (typeof Readable !== 'undefined' && !Readable.prototype[Symbol.asyncIterator]) {\n//   Readable.prototype[Symbol.asyncIterator] = function () {\n//     return makeNodeStreamIterator(this);\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}