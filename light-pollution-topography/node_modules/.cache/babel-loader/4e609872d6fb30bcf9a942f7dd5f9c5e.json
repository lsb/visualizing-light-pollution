{"ast":null,"code":"/* istanbul ignore file */\nimport { Visitor } from '../visitor';\nimport { TimeUnit } from '../enum';\n/** @ignore */\n\nconst sum = (x, y) => x + y;\n/** @ignore */\n\n\nconst variableWidthColumnErrorMessage = type => `Cannot compute the byte width of variable-width column ${type}`;\n/** @ignore */\n\n\nexport class ByteWidthVisitor extends Visitor {\n  visitNull(____) {\n    return 0;\n  }\n\n  visitInt(type) {\n    return type.bitWidth / 8;\n  }\n\n  visitFloat(type) {\n    return type.ArrayType.BYTES_PER_ELEMENT;\n  }\n\n  visitBinary(type) {\n    throw new Error(variableWidthColumnErrorMessage(type));\n  }\n\n  visitUtf8(type) {\n    throw new Error(variableWidthColumnErrorMessage(type));\n  }\n\n  visitBool(____) {\n    return 1 / 8;\n  }\n\n  visitDecimal(____) {\n    return 16;\n  }\n\n  visitDate(type) {\n    return (type.unit + 1) * 4;\n  }\n\n  visitTime(type) {\n    return type.bitWidth / 8;\n  }\n\n  visitTimestamp(type) {\n    return type.unit === TimeUnit.SECOND ? 4 : 8;\n  }\n\n  visitInterval(type) {\n    return (type.unit + 1) * 4;\n  }\n\n  visitList(type) {\n    throw new Error(variableWidthColumnErrorMessage(type));\n  }\n\n  visitStruct(type) {\n    return this.visitFields(type.children).reduce(sum, 0);\n  }\n\n  visitUnion(type) {\n    return this.visitFields(type.children).reduce(sum, 0);\n  }\n\n  visitFixedSizeBinary(type) {\n    return type.byteWidth;\n  }\n\n  visitFixedSizeList(type) {\n    return type.listSize * this.visitFields(type.children).reduce(sum, 0);\n  }\n\n  visitMap(type) {\n    return this.visitFields(type.children).reduce(sum, 0);\n  }\n\n  visitDictionary(type) {\n    return this.visit(type.indices);\n  }\n\n  visitFields(fields) {\n    return (fields || []).map(field => this.visit(field.type));\n  }\n\n  visitSchema(schema) {\n    return this.visitFields(schema.fields).reduce(sum, 0);\n  }\n\n}\n/** @ignore */\n\nexport const instance = new ByteWidthVisitor();","map":{"version":3,"sources":["visitor/bytewidth.ts"],"names":[],"mappings":"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","sourcesContent":["/* istanbul ignore file */\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { Type, TimeUnit } from '../enum';\nimport { Schema, Field } from '../schema';\nimport {\n    DataType, Dictionary,\n    Float, Int, Date_, Interval, Time, Timestamp,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n} from '../type';\n\n/** @ignore */ const sum = (x: number, y: number) => x + y;\n/** @ignore */ const variableWidthColumnErrorMessage = (type: DataType) => `Cannot compute the byte width of variable-width column ${type}`;\n\n/** @ignore */\nexport interface ByteWidthVisitor extends Visitor {\n    visit<T extends DataType>(node: T): number;\n    visitMany<T extends DataType>(nodes: T[]): number[];\n    getVisitFn<T extends Type>    (node: T): (type: DataType<T>) => number;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (type: T) => number;\n}\n\n/** @ignore */\nexport class ByteWidthVisitor extends Visitor {\n    public visitNull            (____: Null            ) { return 0; }\n    public visitInt             (type: Int             ) { return type.bitWidth / 8; }\n    public visitFloat           (type: Float           ) { return type.ArrayType.BYTES_PER_ELEMENT; }\n    public visitBinary          (type: Binary          ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitUtf8            (type: Utf8            ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitBool            (____: Bool            ) { return 1 / 8; }\n    public visitDecimal         (____: Decimal         ) { return 16; }\n    public visitDate            (type: Date_           ) { return (type.unit + 1) * 4; }\n    public visitTime            (type: Time            ) { return type.bitWidth / 8; }\n    public visitTimestamp       (type: Timestamp       ) { return type.unit === TimeUnit.SECOND ? 4 : 8; }\n    public visitInterval        (type: Interval        ) { return (type.unit + 1) * 4; }\n    public visitList            (type: List            ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitStruct          (type: Struct          ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitUnion           (type: Union           ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitFixedSizeBinary (type: FixedSizeBinary ) { return type.byteWidth; }\n    public visitFixedSizeList   (type: FixedSizeList   ) { return type.listSize * this.visitFields(type.children).reduce(sum, 0); }\n    public visitMap             (type: Map_            ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitDictionary      (type: Dictionary      ) { return this.visit(type.indices); }\n    public visitFields          (fields: Field[]       ) { return (fields || []).map((field) => this.visit(field.type)); }\n    public visitSchema          (schema: Schema        ) { return this.visitFields(schema.fields).reduce(sum, 0); }\n}\n\n/** @ignore */\nexport const instance = new ByteWidthVisitor();\n"]},"metadata":{},"sourceType":"module"}