{"ast":null,"code":"var EMPTY_ARRAY = [];\nvar placeholderArray = [];\nexport function createIterable(data) {\n  var startRow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var endRow = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;\n  var iterable = EMPTY_ARRAY;\n  var objectInfo = {\n    index: -1,\n    data: data,\n    target: []\n  };\n\n  if (!data) {\n    iterable = EMPTY_ARRAY;\n  } else if (typeof data[Symbol.iterator] === 'function') {\n    iterable = data;\n  } else if (data.length > 0) {\n    placeholderArray.length = data.length;\n    iterable = placeholderArray;\n  }\n\n  if (startRow > 0 || Number.isFinite(endRow)) {\n    iterable = (Array.isArray(iterable) ? iterable : Array.from(iterable)).slice(startRow, endRow);\n    objectInfo.index = startRow - 1;\n  }\n\n  return {\n    iterable: iterable,\n    objectInfo: objectInfo\n  };\n}\nexport function isAsyncIterable(data) {\n  return data && data[Symbol.asyncIterator];\n}\nexport function getAccessorFromBuffer(typedArray, _ref) {\n  var size = _ref.size,\n      stride = _ref.stride,\n      offset = _ref.offset,\n      startIndices = _ref.startIndices,\n      nested = _ref.nested;\n  var bytesPerElement = typedArray.BYTES_PER_ELEMENT;\n  var elementStride = stride ? stride / bytesPerElement : size;\n  var elementOffset = offset ? offset / bytesPerElement : 0;\n  var vertexCount = Math.floor((typedArray.length - elementOffset) / elementStride);\n  return function (_, _ref2) {\n    var index = _ref2.index,\n        target = _ref2.target;\n\n    if (!startIndices) {\n      var sourceIndex = index * elementStride + elementOffset;\n\n      for (var j = 0; j < size; j++) {\n        target[j] = typedArray[sourceIndex + j];\n      }\n\n      return target;\n    }\n\n    var startIndex = startIndices[index];\n    var endIndex = startIndices[index + 1] || vertexCount;\n    var result;\n\n    if (nested) {\n      result = new Array(endIndex - startIndex);\n\n      for (var i = startIndex; i < endIndex; i++) {\n        var _sourceIndex = i * elementStride + elementOffset;\n\n        target = new Array(size);\n\n        for (var _j = 0; _j < size; _j++) {\n          target[_j] = typedArray[_sourceIndex + _j];\n        }\n\n        result[i - startIndex] = target;\n      }\n    } else if (elementStride === size) {\n      result = typedArray.subarray(startIndex * size + elementOffset, endIndex * size + elementOffset);\n    } else {\n      result = new typedArray.constructor((endIndex - startIndex) * size);\n      var targetIndex = 0;\n\n      for (var _i = startIndex; _i < endIndex; _i++) {\n        var _sourceIndex2 = _i * elementStride + elementOffset;\n\n        for (var _j2 = 0; _j2 < size; _j2++) {\n          result[targetIndex++] = typedArray[_sourceIndex2 + _j2];\n        }\n      }\n    }\n\n    return result;\n  };\n}","map":{"version":3,"sources":["../../../src/utils/iterable-utils.js"],"names":["EMPTY_ARRAY","placeholderArray","startRow","endRow","Infinity","iterable","objectInfo","index","data","target","Symbol","Number","Array","size","stride","offset","startIndices","nested","bytesPerElement","typedArray","elementStride","elementOffset","vertexCount","Math","sourceIndex","j","startIndex","endIndex","result","i","targetIndex"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nconst EMPTY_ARRAY = [];\nconst placeholderArray = [];\n\n/*\n * Create an Iterable\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\n * and a \"context\" tracker from the given data\n */\nexport function createIterable(data, startRow = 0, endRow = Infinity) {\n  let iterable = EMPTY_ARRAY;\n\n  const objectInfo = {\n    index: -1,\n    data,\n    // visitor can optionally utilize this to avoid constructing a new array for every object\n    target: []\n  };\n\n  if (!data) {\n    iterable = EMPTY_ARRAY;\n  } else if (typeof data[Symbol.iterator] === 'function') {\n    // data is already an iterable\n    iterable = data;\n  } else if (data.length > 0) {\n    placeholderArray.length = data.length;\n    iterable = placeholderArray;\n  }\n\n  if (startRow > 0 || Number.isFinite(endRow)) {\n    iterable = (Array.isArray(iterable) ? iterable : Array.from(iterable)).slice(startRow, endRow);\n    objectInfo.index = startRow - 1;\n  }\n\n  return {iterable, objectInfo};\n}\n\n/*\n * Returns true if data is an async iterable object\n */\nexport function isAsyncIterable(data) {\n  return data && data[Symbol.asyncIterator];\n}\n\n/*\n * Create an accessor function from a flat buffer that yields the value at each object index\n */\nexport function getAccessorFromBuffer(typedArray, {size, stride, offset, startIndices, nested}) {\n  const bytesPerElement = typedArray.BYTES_PER_ELEMENT;\n  const elementStride = stride ? stride / bytesPerElement : size;\n  const elementOffset = offset ? offset / bytesPerElement : 0;\n  const vertexCount = Math.floor((typedArray.length - elementOffset) / elementStride);\n\n  return (_, {index, target}) => {\n    if (!startIndices) {\n      const sourceIndex = index * elementStride + elementOffset;\n      for (let j = 0; j < size; j++) {\n        target[j] = typedArray[sourceIndex + j];\n      }\n      return target;\n    }\n    const startIndex = startIndices[index];\n    const endIndex = startIndices[index + 1] || vertexCount;\n    let result;\n\n    if (nested) {\n      result = new Array(endIndex - startIndex);\n      for (let i = startIndex; i < endIndex; i++) {\n        const sourceIndex = i * elementStride + elementOffset;\n        target = new Array(size);\n        for (let j = 0; j < size; j++) {\n          target[j] = typedArray[sourceIndex + j];\n        }\n        result[i - startIndex] = target;\n      }\n    } else if (elementStride === size) {\n      result = typedArray.subarray(\n        startIndex * size + elementOffset,\n        endIndex * size + elementOffset\n      );\n    } else {\n      result = new typedArray.constructor((endIndex - startIndex) * size);\n      let targetIndex = 0;\n      for (let i = startIndex; i < endIndex; i++) {\n        const sourceIndex = i * elementStride + elementOffset;\n        for (let j = 0; j < size; j++) {\n          result[targetIndex++] = typedArray[sourceIndex + j];\n        }\n      }\n    }\n\n    return result;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}