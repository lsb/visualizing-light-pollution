{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { encodeUtf8 } from '../util/utf8';\nimport { float64ToUint16 } from '../util/math';\nimport { toArrayBufferView } from '../util/buffer';\nimport { UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\n/** @ignore */\n\nexport class SetVisitor extends Visitor {}\n/** @ignore */\n\nconst setEpochMsToDays = (data, index, epochMs) => {\n  data[index] = epochMs / 86400000 | 0;\n};\n/** @ignore */\n\n\nconst setEpochMsToMillisecondsLong = (data, index, epochMs) => {\n  data[index] = epochMs % 4294967296 | 0;\n  data[index + 1] = epochMs / 4294967296 | 0;\n};\n/** @ignore */\n\n\nconst setEpochMsToMicrosecondsLong = (data, index, epochMs) => {\n  data[index] = epochMs * 1000 % 4294967296 | 0;\n  data[index + 1] = epochMs * 1000 / 4294967296 | 0;\n};\n/** @ignore */\n\n\nconst setEpochMsToNanosecondsLong = (data, index, epochMs) => {\n  data[index] = epochMs * 1000000 % 4294967296 | 0;\n  data[index + 1] = epochMs * 1000000 / 4294967296 | 0;\n};\n/** @ignore */\n\n\nconst setVariableWidthBytes = (values, valueOffsets, index, value) => {\n  const {\n    [index]: x,\n    [index + 1]: y\n  } = valueOffsets;\n\n  if (x != null && y != null) {\n    values.set(value.subarray(0, y - x), x);\n  }\n};\n/** @ignore */\n\n\nconst setBool = ({\n  offset,\n  values\n}, index, val) => {\n  const idx = offset + index;\n  val ? values[idx >> 3] |= 1 << idx % 8 : // true\n  values[idx >> 3] &= ~(1 << idx % 8); // false\n};\n/** @ignore */\n\n\nconst setDateDay = ({\n  values\n}, index, value) => {\n  setEpochMsToDays(values, index, value.valueOf());\n};\n/** @ignore */\n\n\nconst setDateMillisecond = ({\n  values\n}, index, value) => {\n  setEpochMsToMillisecondsLong(values, index * 2, value.valueOf());\n};\n/** @ignore */\n\n\nconst setNumeric = ({\n  stride,\n  values\n}, index, value) => {\n  values[stride * index] = value;\n};\n/** @ignore */\n\n\nconst setFloat16 = ({\n  stride,\n  values\n}, index, value) => {\n  values[stride * index] = float64ToUint16(value);\n};\n/** @ignore */\n\n\nconst setNumericX2 = (vector, index, value) => {\n  switch (typeof value) {\n    case 'bigint':\n      vector.values64[index] = value;\n      break;\n\n    case 'number':\n      vector.values[index * vector.stride] = value;\n      break;\n\n    default:\n      const val = value;\n      const {\n        stride,\n        ArrayType\n      } = vector;\n      const long = toArrayBufferView(ArrayType, val);\n      vector.values.set(long.subarray(0, stride), stride * index);\n  }\n};\n/** @ignore */\n\n\nconst setFixedSizeBinary = ({\n  stride,\n  values\n}, index, value) => {\n  values.set(value.subarray(0, stride), stride * index);\n};\n/** @ignore */\n\n\nconst setBinary = ({\n  values,\n  valueOffsets\n}, index, value) => setVariableWidthBytes(values, valueOffsets, index, value);\n/** @ignore */\n\n\nconst setUtf8 = ({\n  values,\n  valueOffsets\n}, index, value) => {\n  setVariableWidthBytes(values, valueOffsets, index, encodeUtf8(value));\n};\n/* istanbul ignore next */\n\n/** @ignore */\n\n\nconst setInt = (vector, index, value) => {\n  vector.type.bitWidth < 64 ? setNumeric(vector, index, value) : setNumericX2(vector, index, value);\n};\n/* istanbul ignore next */\n\n/** @ignore */\n\n\nconst setFloat = (vector, index, value) => {\n  vector.type.precision !== Precision.HALF ? setNumeric(vector, index, value) : setFloat16(vector, index, value);\n};\n/* istanbul ignore next */\n\n\nconst setDate = (vector, index, value) => {\n  vector.type.unit === DateUnit.DAY ? setDateDay(vector, index, value) : setDateMillisecond(vector, index, value);\n};\n/** @ignore */\n\n\nconst setTimestampSecond = ({\n  values\n}, index, value) => setEpochMsToMillisecondsLong(values, index * 2, value / 1000);\n/** @ignore */\n\n\nconst setTimestampMillisecond = ({\n  values\n}, index, value) => setEpochMsToMillisecondsLong(values, index * 2, value);\n/** @ignore */\n\n\nconst setTimestampMicrosecond = ({\n  values\n}, index, value) => setEpochMsToMicrosecondsLong(values, index * 2, value);\n/** @ignore */\n\n\nconst setTimestampNanosecond = ({\n  values\n}, index, value) => setEpochMsToNanosecondsLong(values, index * 2, value);\n/* istanbul ignore next */\n\n/** @ignore */\n\n\nconst setTimestamp = (vector, index, value) => {\n  switch (vector.type.unit) {\n    case TimeUnit.SECOND:\n      return setTimestampSecond(vector, index, value);\n\n    case TimeUnit.MILLISECOND:\n      return setTimestampMillisecond(vector, index, value);\n\n    case TimeUnit.MICROSECOND:\n      return setTimestampMicrosecond(vector, index, value);\n\n    case TimeUnit.NANOSECOND:\n      return setTimestampNanosecond(vector, index, value);\n  }\n};\n/** @ignore */\n\n\nconst setTimeSecond = ({\n  values,\n  stride\n}, index, value) => {\n  values[stride * index] = value;\n};\n/** @ignore */\n\n\nconst setTimeMillisecond = ({\n  values,\n  stride\n}, index, value) => {\n  values[stride * index] = value;\n};\n/** @ignore */\n\n\nconst setTimeMicrosecond = ({\n  values\n}, index, value) => {\n  values.set(value.subarray(0, 2), 2 * index);\n};\n/** @ignore */\n\n\nconst setTimeNanosecond = ({\n  values\n}, index, value) => {\n  values.set(value.subarray(0, 2), 2 * index);\n};\n/* istanbul ignore next */\n\n/** @ignore */\n\n\nconst setTime = (vector, index, value) => {\n  switch (vector.type.unit) {\n    case TimeUnit.SECOND:\n      return setTimeSecond(vector, index, value);\n\n    case TimeUnit.MILLISECOND:\n      return setTimeMillisecond(vector, index, value);\n\n    case TimeUnit.MICROSECOND:\n      return setTimeMicrosecond(vector, index, value);\n\n    case TimeUnit.NANOSECOND:\n      return setTimeNanosecond(vector, index, value);\n  }\n};\n/** @ignore */\n\n\nconst setDecimal = ({\n  values\n}, index, value) => {\n  values.set(value.subarray(0, 4), 4 * index);\n};\n/** @ignore */\n\n\nconst setList = (vector, index, value) => {\n  const values = vector.getChildAt(0),\n        valueOffsets = vector.valueOffsets;\n\n  for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n    values.set(itr++, value.get(++idx));\n  }\n};\n/** @ignore */\n\n\nconst setMap = (vector, index, value) => {\n  const values = vector.getChildAt(0),\n        valueOffsets = vector.valueOffsets;\n  const entries = value instanceof Map ? [...value] : Object.entries(value);\n\n  for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n    values.set(itr++, entries[++idx]);\n  }\n};\n/** @ignore */\n\n\nconst _setStructArrayValue = (o, v) => (c, _, i) => c && c.set(o, v[i]);\n/** @ignore */\n\n\nconst _setStructVectorValue = (o, v) => (c, _, i) => c && c.set(o, v.get(i));\n/** @ignore */\n\n\nconst _setStructMapValue = (o, v) => (c, f, _) => c && c.set(o, v.get(f.name));\n/** @ignore */\n\n\nconst _setStructObjectValue = (o, v) => (c, f, _) => c && c.set(o, v[f.name]);\n/** @ignore */\n\n\nconst setStruct = (vector, index, value) => {\n  const setValue = value instanceof Map ? _setStructMapValue(index, value) : value instanceof Vector ? _setStructVectorValue(index, value) : Array.isArray(value) ? _setStructArrayValue(index, value) : _setStructObjectValue(index, value);\n  vector.type.children.forEach((f, i) => setValue(vector.getChildAt(i), f, i));\n};\n/* istanbul ignore next */\n\n/** @ignore */\n\n\nconst setUnion = (vector, index, value) => {\n  vector.type.mode === UnionMode.Dense ? setDenseUnion(vector, index, value) : setSparseUnion(vector, index, value);\n};\n/** @ignore */\n\n\nconst setDenseUnion = (vector, index, value) => {\n  const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n  const child = vector.getChildAt(childIndex);\n  child && child.set(vector.valueOffsets[index], value);\n};\n/** @ignore */\n\n\nconst setSparseUnion = (vector, index, value) => {\n  const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n  const child = vector.getChildAt(childIndex);\n  child && child.set(index, value);\n};\n/** @ignore */\n\n\nconst setDictionary = (vector, index, value) => {\n  const key = vector.getKey(index);\n\n  if (key !== null) {\n    vector.setValue(key, value);\n  }\n};\n/* istanbul ignore next */\n\n/** @ignore */\n\n\nconst setIntervalValue = (vector, index, value) => {\n  vector.type.unit === IntervalUnit.DAY_TIME ? setIntervalDayTime(vector, index, value) : setIntervalYearMonth(vector, index, value);\n};\n/** @ignore */\n\n\nconst setIntervalDayTime = ({\n  values\n}, index, value) => {\n  values.set(value.subarray(0, 2), 2 * index);\n};\n/** @ignore */\n\n\nconst setIntervalYearMonth = ({\n  values\n}, index, value) => {\n  values[index] = value[0] * 12 + value[1] % 12;\n};\n/** @ignore */\n\n\nconst setFixedSizeList = (vector, index, value) => {\n  const child = vector.getChildAt(0),\n        {\n    stride\n  } = vector;\n\n  for (let idx = -1, offset = index * stride; ++idx < stride;) {\n    child.set(offset + idx, value.get(idx));\n  }\n};\n\nSetVisitor.prototype.visitBool = setBool;\nSetVisitor.prototype.visitInt = setInt;\nSetVisitor.prototype.visitInt8 = setNumeric;\nSetVisitor.prototype.visitInt16 = setNumeric;\nSetVisitor.prototype.visitInt32 = setNumeric;\nSetVisitor.prototype.visitInt64 = setNumericX2;\nSetVisitor.prototype.visitUint8 = setNumeric;\nSetVisitor.prototype.visitUint16 = setNumeric;\nSetVisitor.prototype.visitUint32 = setNumeric;\nSetVisitor.prototype.visitUint64 = setNumericX2;\nSetVisitor.prototype.visitFloat = setFloat;\nSetVisitor.prototype.visitFloat16 = setFloat16;\nSetVisitor.prototype.visitFloat32 = setNumeric;\nSetVisitor.prototype.visitFloat64 = setNumeric;\nSetVisitor.prototype.visitUtf8 = setUtf8;\nSetVisitor.prototype.visitBinary = setBinary;\nSetVisitor.prototype.visitFixedSizeBinary = setFixedSizeBinary;\nSetVisitor.prototype.visitDate = setDate;\nSetVisitor.prototype.visitDateDay = setDateDay;\nSetVisitor.prototype.visitDateMillisecond = setDateMillisecond;\nSetVisitor.prototype.visitTimestamp = setTimestamp;\nSetVisitor.prototype.visitTimestampSecond = setTimestampSecond;\nSetVisitor.prototype.visitTimestampMillisecond = setTimestampMillisecond;\nSetVisitor.prototype.visitTimestampMicrosecond = setTimestampMicrosecond;\nSetVisitor.prototype.visitTimestampNanosecond = setTimestampNanosecond;\nSetVisitor.prototype.visitTime = setTime;\nSetVisitor.prototype.visitTimeSecond = setTimeSecond;\nSetVisitor.prototype.visitTimeMillisecond = setTimeMillisecond;\nSetVisitor.prototype.visitTimeMicrosecond = setTimeMicrosecond;\nSetVisitor.prototype.visitTimeNanosecond = setTimeNanosecond;\nSetVisitor.prototype.visitDecimal = setDecimal;\nSetVisitor.prototype.visitList = setList;\nSetVisitor.prototype.visitStruct = setStruct;\nSetVisitor.prototype.visitUnion = setUnion;\nSetVisitor.prototype.visitDenseUnion = setDenseUnion;\nSetVisitor.prototype.visitSparseUnion = setSparseUnion;\nSetVisitor.prototype.visitDictionary = setDictionary;\nSetVisitor.prototype.visitInterval = setIntervalValue;\nSetVisitor.prototype.visitIntervalDayTime = setIntervalDayTime;\nSetVisitor.prototype.visitIntervalYearMonth = setIntervalYearMonth;\nSetVisitor.prototype.visitFixedSizeList = setFixedSizeList;\nSetVisitor.prototype.visitMap = setMap;\n/** @ignore */\n\nexport const instance = new SetVisitor();","map":{"version":3,"sources":["visitor/set.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { encodeUtf8 } from '../util/utf8';\nimport { VectorType } from '../interfaces';\nimport { float64ToUint16 } from '../util/math';\nimport { toArrayBufferView } from '../util/buffer';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface SetVisitor extends Visitor {\n    visit<T extends VectorType>(node: T, index: number, value: T['TValue']): void;\n    visitMany<T extends VectorType>(nodes: T[], indices: number[], values: T['TValue'][]): void[];\n    getVisitFn<T extends Type>(node: T): (vector: VectorType<T>, index: number, value: VectorType<T>['TValue']) => void;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, index: number, value: VectorType<T>['TValue']) => void;\n    visitNull                 <T extends Null>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitBool                 <T extends Bool>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt                  <T extends Int>                 (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt8                 <T extends Int8>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt16                <T extends Int16>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt32                <T extends Int32>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt64                <T extends Int64>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint8                <T extends Uint8>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint16               <T extends Uint16>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint32               <T extends Uint32>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint64               <T extends Uint64>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat                <T extends Float>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat16              <T extends Float16>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat32              <T extends Float32>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat64              <T extends Float64>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUtf8                 <T extends Utf8>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitBinary               <T extends Binary>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDate                 <T extends Date_>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDateDay              <T extends DateDay>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDateMillisecond      <T extends DateMillisecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestamp            <T extends Timestamp>           (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampSecond      <T extends TimestampSecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampMillisecond <T extends TimestampMillisecond>(vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond>(vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampNanosecond  <T extends TimestampNanosecond> (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTime                 <T extends Time>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeSecond           <T extends TimeSecond>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeMillisecond      <T extends TimeMillisecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeNanosecond       <T extends TimeNanosecond>      (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDecimal              <T extends Decimal>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitList                 <T extends List>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitStruct               <T extends Struct>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUnion                <T extends Union>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDenseUnion           <T extends DenseUnion>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitSparseUnion          <T extends SparseUnion>         (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDictionary           <T extends Dictionary>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInterval             <T extends Interval>            (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitIntervalDayTime      <T extends IntervalDayTime>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>   (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeList        <T extends FixedSizeList>       (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitMap                  <T extends Map_>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n}\n\n/** @ignore */\nexport class SetVisitor extends Visitor {}\n\n/** @ignore */\nconst setEpochMsToDays = (data: Int32Array, index: number, epochMs: number) => { data[index] = (epochMs / 86400000) | 0; };\n/** @ignore */\nconst setEpochMsToMillisecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = (epochMs % 4294967296) | 0;\n    data[index + 1] = (epochMs / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToMicrosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs * 1000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000) / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToNanosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs * 1000000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000000) / 4294967296) | 0;\n};\n\n/** @ignore */\nconst setVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number, value: Uint8Array) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    if (x != null && y != null) {\n        values.set(value.subarray(0, y - x), x);\n    }\n};\n\n/** @ignore */\nconst setBool = <T extends Bool>({ offset, values }: VectorType<T>, index: number, val: boolean) => {\n    const idx = offset + index;\n    val ? (values[idx >> 3] |=  (1 << (idx % 8)))  // true\n        : (values[idx >> 3] &= ~(1 << (idx % 8))); // false\n\n};\n\n/** @ignore */ type Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\n/** @ignore */ type Numeric2X = Int64 | Uint64;\n\n/** @ignore */\nconst setDateDay         = <T extends DateDay>        ({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { setEpochMsToDays(values, index, value.valueOf()); };\n/** @ignore */\nconst setDateMillisecond = <T extends DateMillisecond>({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { setEpochMsToMillisecondsLong(values, index * 2, value.valueOf()); };\n/** @ignore */\nconst setNumeric         = <T extends Numeric1X>      ({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setFloat16         = <T extends Float16>        ({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = float64ToUint16(value); };\n/** @ignore */\nconst setNumericX2       = <T extends Numeric2X>      (vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (typeof value) {\n        case 'bigint': vector.values64[index] = value; break;\n        case 'number': vector.values[index * vector.stride] = value; break;\n        default:\n            const val = value as T['TArray'];\n            const { stride, ArrayType } = vector;\n            const long = toArrayBufferView<T['TArray']>(ArrayType, val);\n            vector.values.set(long.subarray(0, stride), stride * index);\n    }\n};\n/** @ignore */\nconst setFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, stride), stride * index); };\n\n/** @ignore */\nconst setBinary = <T extends Binary>({ values, valueOffsets }: VectorType<T>, index: number, value: T['TValue']) => setVariableWidthBytes(values, valueOffsets, index, value);\n/** @ignore */\nconst setUtf8 = <T extends Utf8>({ values, valueOffsets }: VectorType<T>, index: number, value: T['TValue']) => {\n    setVariableWidthBytes(values, valueOffsets, index, encodeUtf8(value));\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setInt = <T extends Int>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.bitWidth < 64\n        ? setNumeric(vector as VectorType<Numeric1X>, index, value as Numeric1X['TValue'])\n        : setNumericX2(vector as VectorType<Numeric2X>, index, value as Numeric2X['TValue']);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setFloat = <T extends Float>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.precision !== Precision.HALF\n        ? setNumeric(vector as VectorType<Numeric1X>, index, value)\n        : setFloat16(vector as VectorType<Float16>, index, value);\n};\n\n/* istanbul ignore next */\nconst setDate = <T extends Date_> (vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.unit === DateUnit.DAY\n        ? setDateDay(vector as VectorType<DateDay>, index, value)\n        : setDateMillisecond(vector as VectorType<DateMillisecond>, index, value);\n};\n\n/** @ignore */\nconst setTimestampSecond      = <T extends TimestampSecond>     ({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value / 1000);\n/** @ignore */\nconst setTimestampMillisecond = <T extends TimestampMillisecond>({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMicrosecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToNanosecondsLong(values, index * 2, value);\n/* istanbul ignore next */\n/** @ignore */\nconst setTimestamp            = <T extends Timestamp>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimestampSecond(vector as VectorType<TimestampSecond>, index, value);\n        case TimeUnit.MILLISECOND: return setTimestampMillisecond(vector as VectorType<TimestampMillisecond>, index, value);\n        case TimeUnit.MICROSECOND: return setTimestampMicrosecond(vector as VectorType<TimestampMicrosecond>, index, value);\n        case TimeUnit.NANOSECOND:  return  setTimestampNanosecond(vector as VectorType<TimestampNanosecond>, index, value);\n    }\n};\n\n/** @ignore */\nconst setTimeSecond      = <T extends TimeSecond>     ({ values, stride }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/* istanbul ignore next */\n/** @ignore */\nconst setTime            = <T extends Time>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimeSecond(vector as VectorType<TimeSecond>, index, value as TimeSecond['TValue']);\n        case TimeUnit.MILLISECOND: return setTimeMillisecond(vector as VectorType<TimeMillisecond>, index, value as TimeMillisecond['TValue']);\n        case TimeUnit.MICROSECOND: return setTimeMicrosecond(vector as VectorType<TimeMicrosecond>, index, value as TimeMicrosecond['TValue']);\n        case TimeUnit.NANOSECOND:  return  setTimeNanosecond(vector as VectorType<TimeNanosecond>, index, value as TimeNanosecond['TValue']);\n    }\n};\n\n/** @ignore */\nconst setDecimal = <T extends Decimal>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 4), 4 * index); };\n\n/** @ignore */\nconst setList = <T extends List>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const values = vector.getChildAt(0)!, valueOffsets = vector.valueOffsets;\n    for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n        values.set(itr++, value.get(++idx));\n    }\n};\n\n/** @ignore */\nconst setMap = <T extends Map_>(vector: VectorType<T>, index: number, value: T['TValue']) => {\n    const values = vector.getChildAt(0)!, valueOffsets = vector.valueOffsets;\n    const entries = value instanceof Map ? [...value] : Object.entries(value);\n    for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n        values.set(itr++, entries[++idx]);\n    }\n};\n\n/** @ignore */ const _setStructArrayValue = (o: number, v: any[]) => (c: Vector | null, _: Field, i: number) => c && c.set(o, v[i]);\n/** @ignore */ const _setStructVectorValue = (o: number, v: Vector) => (c: Vector | null, _: Field, i: number) => c && c.set(o, v.get(i));\n/** @ignore */ const _setStructMapValue = (o: number, v: Map<string, any>) => (c: Vector | null, f: Field, _: number) => c && c.set(o, v.get(f.name));\n/** @ignore */ const _setStructObjectValue = (o: number, v: { [key: string]: any }) => (c: Vector | null, f: Field, _: number) => c && c.set(o, v[f.name]);\n/** @ignore */\nconst setStruct = <T extends Struct>(vector: VectorType<T>, index: number, value: T['TValue']) => {\n\n    const setValue = value instanceof Map    ? _setStructMapValue(index, value)    :\n                     value instanceof Vector ? _setStructVectorValue(index, value) :\n                     Array.isArray(value)    ? _setStructArrayValue(index, value)  :\n                                               _setStructObjectValue(index, value) ;\n\n    vector.type.children.forEach((f: Field, i: number) => setValue(vector.getChildAt(i), f, i));\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setUnion = <\n    V extends VectorType<Union> | VectorType<DenseUnion> | VectorType<SparseUnion>\n>(vector: V, index: number, value: V['TValue']) => {\n    vector.type.mode === UnionMode.Dense ?\n        setDenseUnion(vector as VectorType<DenseUnion>, index, value) :\n        setSparseUnion(vector as VectorType<SparseUnion>, index, value);\n};\n\n/** @ignore */\nconst setDenseUnion = <T extends DenseUnion>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    child && child.set(vector.valueOffsets[index], value);\n};\n\n/** @ignore */\nconst setSparseUnion = <T extends SparseUnion>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    child && child.set(index, value);\n};\n\n/** @ignore */\nconst setDictionary = <T extends Dictionary>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const key = vector.getKey(index);\n    if (key !== null) {\n        vector.setValue(key, value);\n    }\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setIntervalValue = <T extends Interval>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? setIntervalDayTime(vector as VectorType<IntervalDayTime>, index, value)\n        : setIntervalYearMonth(vector as VectorType<IntervalYearMonth>, index, value);\n};\n\n/** @ignore */\nconst setIntervalDayTime = <T extends IntervalDayTime>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setIntervalYearMonth = <T extends IntervalYearMonth>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values[index] = (value[0] * 12) + (value[1] % 12); };\n\n/** @ignore */\nconst setFixedSizeList = <T extends FixedSizeList>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    for (let idx = -1, offset = index * stride; ++idx < stride;) {\n        child.set(offset + idx, value.get(idx));\n    }\n};\n\nSetVisitor.prototype.visitBool                 =                 setBool;\nSetVisitor.prototype.visitInt                  =                  setInt;\nSetVisitor.prototype.visitInt8                 =              setNumeric;\nSetVisitor.prototype.visitInt16                =              setNumeric;\nSetVisitor.prototype.visitInt32                =              setNumeric;\nSetVisitor.prototype.visitInt64                =            setNumericX2;\nSetVisitor.prototype.visitUint8                =              setNumeric;\nSetVisitor.prototype.visitUint16               =              setNumeric;\nSetVisitor.prototype.visitUint32               =              setNumeric;\nSetVisitor.prototype.visitUint64               =            setNumericX2;\nSetVisitor.prototype.visitFloat                =                setFloat;\nSetVisitor.prototype.visitFloat16              =              setFloat16;\nSetVisitor.prototype.visitFloat32              =              setNumeric;\nSetVisitor.prototype.visitFloat64              =              setNumeric;\nSetVisitor.prototype.visitUtf8                 =                 setUtf8;\nSetVisitor.prototype.visitBinary               =               setBinary;\nSetVisitor.prototype.visitFixedSizeBinary      =      setFixedSizeBinary;\nSetVisitor.prototype.visitDate                 =                 setDate;\nSetVisitor.prototype.visitDateDay              =              setDateDay;\nSetVisitor.prototype.visitDateMillisecond      =      setDateMillisecond;\nSetVisitor.prototype.visitTimestamp            =            setTimestamp;\nSetVisitor.prototype.visitTimestampSecond      =      setTimestampSecond;\nSetVisitor.prototype.visitTimestampMillisecond = setTimestampMillisecond;\nSetVisitor.prototype.visitTimestampMicrosecond = setTimestampMicrosecond;\nSetVisitor.prototype.visitTimestampNanosecond  =  setTimestampNanosecond;\nSetVisitor.prototype.visitTime                 =                 setTime;\nSetVisitor.prototype.visitTimeSecond           =           setTimeSecond;\nSetVisitor.prototype.visitTimeMillisecond      =      setTimeMillisecond;\nSetVisitor.prototype.visitTimeMicrosecond      =      setTimeMicrosecond;\nSetVisitor.prototype.visitTimeNanosecond       =       setTimeNanosecond;\nSetVisitor.prototype.visitDecimal              =              setDecimal;\nSetVisitor.prototype.visitList                 =                 setList;\nSetVisitor.prototype.visitStruct               =               setStruct;\nSetVisitor.prototype.visitUnion                =                setUnion;\nSetVisitor.prototype.visitDenseUnion           =           setDenseUnion;\nSetVisitor.prototype.visitSparseUnion          =          setSparseUnion;\nSetVisitor.prototype.visitDictionary           =           setDictionary;\nSetVisitor.prototype.visitInterval             =        setIntervalValue;\nSetVisitor.prototype.visitIntervalDayTime      =      setIntervalDayTime;\nSetVisitor.prototype.visitIntervalYearMonth    =    setIntervalYearMonth;\nSetVisitor.prototype.visitFixedSizeList        =        setFixedSizeList;\nSetVisitor.prototype.visitMap                  =                  setMap;\n\n/** @ignore */\nexport const instance = new SetVisitor();\n"]},"metadata":{},"sourceType":"module"}