{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { isWebGL2, withParameters } from '@luma.gl/gltools';\nimport { assertWebGL2Context } from '../webgl-utils';\nimport Texture from './texture';\nimport { DATA_FORMAT_CHANNELS, TYPE_SIZES } from './texture-formats';\nimport Buffer from './buffer';\n\nvar Texture3D = function (_Texture) {\n  _inherits(Texture3D, _Texture);\n\n  _createClass(Texture3D, null, [{\n    key: \"isSupported\",\n    value: function isSupported(gl) {\n      return isWebGL2(gl);\n    }\n  }]);\n\n  function Texture3D(gl) {\n    var _this;\n\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Texture3D);\n\n    assertWebGL2Context(gl);\n    props = Object.assign({\n      depth: 1\n    }, props, {\n      target: 32879,\n      unpackFlipY: false\n    });\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Texture3D).call(this, gl, props));\n\n    _this.initialize(props);\n\n    Object.seal(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Texture3D, [{\n    key: \"setImageData\",\n    value: function setImageData(_ref) {\n      var _this2 = this;\n\n      var _ref$level = _ref.level,\n          level = _ref$level === void 0 ? 0 : _ref$level,\n          _ref$dataFormat = _ref.dataFormat,\n          dataFormat = _ref$dataFormat === void 0 ? 6408 : _ref$dataFormat,\n          width = _ref.width,\n          height = _ref.height,\n          _ref$depth = _ref.depth,\n          depth = _ref$depth === void 0 ? 1 : _ref$depth,\n          _ref$border = _ref.border,\n          border = _ref$border === void 0 ? 0 : _ref$border,\n          format = _ref.format,\n          _ref$type = _ref.type,\n          type = _ref$type === void 0 ? 5121 : _ref$type,\n          _ref$offset = _ref.offset,\n          offset = _ref$offset === void 0 ? 0 : _ref$offset,\n          data = _ref.data,\n          _ref$parameters = _ref.parameters,\n          parameters = _ref$parameters === void 0 ? {} : _ref$parameters;\n\n      this._trackDeallocatedMemory('Texture');\n\n      this.gl.bindTexture(this.target, this.handle);\n      withParameters(this.gl, parameters, function () {\n        if (ArrayBuffer.isView(data)) {\n          _this2.gl.texImage3D(_this2.target, level, dataFormat, width, height, depth, border, format, type, data);\n        }\n\n        if (data instanceof Buffer) {\n          _this2.gl.bindBuffer(35052, data.handle);\n\n          _this2.gl.texImage3D(_this2.target, level, dataFormat, width, height, depth, border, format, type, offset);\n        }\n      });\n\n      if (data && data.byteLength) {\n        this._trackAllocatedMemory(data.byteLength, 'Texture');\n      } else {\n        var channels = DATA_FORMAT_CHANNELS[this.dataFormat] || 4;\n        var channelSize = TYPE_SIZES[this.type] || 1;\n\n        this._trackAllocatedMemory(this.width * this.height * this.depth * channels * channelSize, 'Texture');\n      }\n\n      this.loaded = true;\n      return this;\n    }\n  }]);\n\n  return Texture3D;\n}(Texture);\n\nexport { Texture3D as default };","map":{"version":3,"sources":["../../../src/classes/texture-3d.js"],"names":["Texture3D","Texture","gl","isWebGL2","props","assertWebGL2Context","depth","target","unpackFlipY","Object","level","dataFormat","width","height","border","format","type","offset","data","parameters","withParameters","ArrayBuffer","channels","DATA_FORMAT_CHANNELS","channelSize","TYPE_SIZES"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {isWebGL2, withParameters} from '@luma.gl/gltools';\nimport {assertWebGL2Context} from '../webgl-utils';\nimport Texture from './texture';\nimport {DATA_FORMAT_CHANNELS, TYPE_SIZES} from './texture-formats';\nimport Buffer from './buffer';\n\nexport default class Texture3D extends Texture {\n  static isSupported(gl) {\n    return isWebGL2(gl);\n  }\n\n  constructor(gl, props = {}) {\n    assertWebGL2Context(gl);\n    props = Object.assign({depth: 1}, props, {target: GL.TEXTURE_3D, unpackFlipY: false});\n    super(gl, props);\n    this.initialize(props);\n\n    Object.seal(this);\n  }\n\n  // Image 3D copies from Typed Array or WebGLBuffer\n  setImageData({\n    level = 0,\n    dataFormat = GL.RGBA,\n    width,\n    height,\n    depth = 1,\n    border = 0,\n    format,\n    type = GL.UNSIGNED_BYTE,\n    offset = 0,\n    data,\n    parameters = {}\n  }) {\n    this._trackDeallocatedMemory('Texture');\n\n    this.gl.bindTexture(this.target, this.handle);\n\n    withParameters(this.gl, parameters, () => {\n      if (ArrayBuffer.isView(data)) {\n        this.gl.texImage3D(\n          this.target,\n          level,\n          dataFormat,\n          width,\n          height,\n          depth,\n          border,\n          format,\n          type,\n          data\n        );\n      }\n\n      if (data instanceof Buffer) {\n        this.gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data.handle);\n        this.gl.texImage3D(\n          this.target,\n          level,\n          dataFormat,\n          width,\n          height,\n          depth,\n          border,\n          format,\n          type,\n          offset\n        );\n      }\n    });\n\n    if (data && data.byteLength) {\n      this._trackAllocatedMemory(data.byteLength, 'Texture');\n    } else {\n      // NOTE(Tarek): Default to RGBA bytes\n      const channels = DATA_FORMAT_CHANNELS[this.dataFormat] || 4;\n      const channelSize = TYPE_SIZES[this.type] || 1;\n\n      this._trackAllocatedMemory(\n        this.width * this.height * this.depth * channels * channelSize,\n        'Texture'\n      );\n    }\n\n    this.loaded = true;\n\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}