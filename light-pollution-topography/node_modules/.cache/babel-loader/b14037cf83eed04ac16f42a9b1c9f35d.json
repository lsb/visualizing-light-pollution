{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar VERSION = typeof \"2.1.2\" !== 'undefined' ? \"2.1.2\" : 'latest';\nimport { path } from '@loaders.gl/loader-utils';\nimport { TILESET_TYPE, LOD_METRIC_TYPE } from '@loaders.gl/tiles';\nimport { parse3DTile } from './lib/parsers/parse-3d-tile';\nimport { normalizeTileHeaders } from './lib/parsers/parse-3d-tile-header';\n\nfunction getBaseUri(tileset) {\n  return path.dirname(tileset.url);\n}\n\nfunction parseTile(_x, _x2, _x3) {\n  return _parseTile.apply(this, arguments);\n}\n\nfunction _parseTile() {\n  _parseTile = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(arrayBuffer, options, context) {\n    var tile, byteOffset;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            tile = {};\n            tile.content = tile.content || {};\n            byteOffset = 0;\n            _context.next = 5;\n            return parse3DTile(arrayBuffer, byteOffset, options, context, tile.content);\n\n          case 5:\n            return _context.abrupt(\"return\", tile.content);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parseTile.apply(this, arguments);\n}\n\nfunction parseTileset(_x4, _x5, _x6) {\n  return _parseTileset.apply(this, arguments);\n}\n\nfunction _parseTileset() {\n  _parseTileset = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(data, options, context) {\n    var tilesetJson;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            tilesetJson = JSON.parse(new TextDecoder().decode(data));\n            tilesetJson.loader = options.loader || Tiles3DLoader;\n            tilesetJson.url = context.url;\n            tilesetJson.basePath = getBaseUri(tilesetJson);\n            tilesetJson.root = normalizeTileHeaders(tilesetJson);\n            tilesetJson.type = TILESET_TYPE.TILES3D;\n            tilesetJson.lodMetricType = LOD_METRIC_TYPE.GEOMETRIC_ERROR;\n            tilesetJson.lodMetricValue = tilesetJson.root.lodMetricValue;\n            return _context2.abrupt(\"return\", tilesetJson);\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _parseTileset.apply(this, arguments);\n}\n\nfunction parse(_x7, _x8, _x9, _x10) {\n  return _parse.apply(this, arguments);\n}\n\nfunction _parse() {\n  _parse = _asyncToGenerator(_regeneratorRuntime.mark(function _callee3(data, options, context, loader) {\n    var loaderOptions, isTileset;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            loaderOptions = options['3d-tiles'] || {};\n\n            if ('isTileset' in loaderOptions) {\n              isTileset = options.isTileset;\n            } else {\n              isTileset = context.url && context.url.indexOf('.json') !== -1;\n            }\n\n            if (!isTileset) {\n              _context3.next = 8;\n              break;\n            }\n\n            _context3.next = 5;\n            return parseTileset(data, options, context, loader);\n\n          case 5:\n            data = _context3.sent;\n            _context3.next = 11;\n            break;\n\n          case 8:\n            _context3.next = 10;\n            return parseTile(data, options, context);\n\n          case 10:\n            data = _context3.sent;\n\n          case 11:\n            return _context3.abrupt(\"return\", data);\n\n          case 12:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _parse.apply(this, arguments);\n}\n\nvar Tiles3DLoader = {\n  id: '3d-tiles',\n  name: '3D Tiles',\n  version: VERSION,\n  extensions: ['json', 'cmpt', 'pnts', 'b3dm', 'i3dm'],\n  mimeType: 'application/octet-stream',\n  test: ['json', 'cmpt', 'pnts', 'b3dm', 'i3dm'],\n  parse: parse,\n  options: {\n    '3d-tiles': {\n      loadGLTF: true,\n      decodeQuantizedPositions: false\n    }\n  }\n};\nexport default Tiles3DLoader;","map":{"version":3,"sources":["../../src/tiles-3d-loader.js"],"names":["VERSION","path","tileset","parseTile","tile","byteOffset","parse3DTile","parseTileset","tilesetJson","JSON","options","context","getBaseUri","normalizeTileHeaders","TILESET_TYPE","LOD_METRIC_TYPE","parse","loaderOptions","isTileset","data","Tiles3DLoader","id","name","version","extensions","mimeType","test","loadGLTF","decodeQuantizedPositions"],"mappings":"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","sourcesContent":["/* global TextDecoder,  __VERSION__ */ // __VERSION__ is injected by babel-plugin-version-inline\n\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n\nimport {path} from '@loaders.gl/loader-utils';\nimport {TILESET_TYPE, LOD_METRIC_TYPE} from '@loaders.gl/tiles';\n\nimport {parse3DTile} from './lib/parsers/parse-3d-tile';\nimport {normalizeTileHeaders} from './lib/parsers/parse-3d-tile-header';\n\nfunction getBaseUri(tileset) {\n  return path.dirname(tileset.url);\n}\n\nasync function parseTile(arrayBuffer, options, context) {\n  const tile = {};\n  tile.content = tile.content || {};\n  const byteOffset = 0;\n  await parse3DTile(arrayBuffer, byteOffset, options, context, tile.content);\n  return tile.content;\n}\n\nasync function parseTileset(data, options, context) {\n  const tilesetJson = JSON.parse(new TextDecoder().decode(data));\n  // eslint-disable-next-line no-use-before-define\n  tilesetJson.loader = options.loader || Tiles3DLoader;\n  tilesetJson.url = context.url;\n  // base path that non-absolute paths in tileset are relative to.\n  tilesetJson.basePath = getBaseUri(tilesetJson);\n  tilesetJson.root = normalizeTileHeaders(tilesetJson);\n  tilesetJson.type = TILESET_TYPE.TILES3D;\n\n  tilesetJson.lodMetricType = LOD_METRIC_TYPE.GEOMETRIC_ERROR;\n  tilesetJson.lodMetricValue = tilesetJson.root.lodMetricValue;\n\n  return tilesetJson;\n}\n\nasync function parse(data, options, context, loader) {\n  // auto detect file type\n  const loaderOptions = options['3d-tiles'] || {};\n  let isTileset;\n  if ('isTileset' in loaderOptions) {\n    isTileset = options.isTileset;\n  } else {\n    isTileset = context.url && context.url.indexOf('.json') !== -1;\n  }\n\n  if (isTileset) {\n    data = await parseTileset(data, options, context, loader);\n  } else {\n    data = await parseTile(data, options, context);\n  }\n\n  return data;\n}\n\n// Tiles3DLoader\nconst Tiles3DLoader = {\n  id: '3d-tiles',\n  name: '3D Tiles',\n  version: VERSION,\n  extensions: ['json', 'cmpt', 'pnts', 'b3dm', 'i3dm'],\n  mimeType: 'application/octet-stream',\n  test: ['json', 'cmpt', 'pnts', 'b3dm', 'i3dm'],\n  parse,\n  options: {\n    '3d-tiles': {\n      loadGLTF: true,\n      decodeQuantizedPositions: false\n    }\n  }\n};\n\nexport default Tiles3DLoader;\n"]},"metadata":{},"sourceType":"module"}