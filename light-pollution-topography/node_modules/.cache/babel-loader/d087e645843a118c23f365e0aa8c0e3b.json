{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _COMPOSITE_GL_TYPES;\n\nimport { assert } from '../utils';\nvar GL_BYTE = 0x1400;\nvar GL_UNSIGNED_BYTE = 0x1401;\nvar GL_SHORT = 0x1402;\nvar GL_UNSIGNED_SHORT = 0x1403;\nvar GL_POINTS = 0x0;\nvar GL_LINES = 0x1;\nvar GL_LINE_LOOP = 0x2;\nvar GL_LINE_STRIP = 0x3;\nvar GL_TRIANGLES = 0x4;\nvar GL_TRIANGLE_STRIP = 0x5;\nvar GL_TRIANGLE_FAN = 0x6;\nvar GL_FLOAT = 0x1406;\nvar GL_FLOAT_VEC2 = 0x8b50;\nvar GL_FLOAT_VEC3 = 0x8b51;\nvar GL_FLOAT_VEC4 = 0x8b52;\nvar GL_INT = 0x1404;\nvar GL_INT_VEC2 = 0x8b53;\nvar GL_INT_VEC3 = 0x8b54;\nvar GL_INT_VEC4 = 0x8b55;\nvar GL_UNSIGNED_INT = 0x1405;\nvar GL_UNSIGNED_INT_VEC2 = 0x8dc6;\nvar GL_UNSIGNED_INT_VEC3 = 0x8dc7;\nvar GL_UNSIGNED_INT_VEC4 = 0x8dc8;\nvar GL_BOOL = 0x8b56;\nvar GL_BOOL_VEC2 = 0x8b57;\nvar GL_BOOL_VEC3 = 0x8b58;\nvar GL_BOOL_VEC4 = 0x8b59;\nvar GL_FLOAT_MAT2 = 0x8b5a;\nvar GL_FLOAT_MAT3 = 0x8b5b;\nvar GL_FLOAT_MAT4 = 0x8b5c;\nvar GL_FLOAT_MAT2x3 = 0x8b65;\nvar GL_FLOAT_MAT2x4 = 0x8b66;\nvar GL_FLOAT_MAT3x2 = 0x8b67;\nvar GL_FLOAT_MAT3x4 = 0x8b68;\nvar GL_FLOAT_MAT4x2 = 0x8b69;\nvar GL_FLOAT_MAT4x3 = 0x8b6a;\nvar COMPOSITE_GL_TYPES = (_COMPOSITE_GL_TYPES = {}, _defineProperty(_COMPOSITE_GL_TYPES, GL_FLOAT, [GL_FLOAT, 1, 'float']), _defineProperty(_COMPOSITE_GL_TYPES, GL_FLOAT_VEC2, [GL_FLOAT, 2, 'vec2']), _defineProperty(_COMPOSITE_GL_TYPES, GL_FLOAT_VEC3, [GL_FLOAT, 3, 'vec3']), _defineProperty(_COMPOSITE_GL_TYPES, GL_FLOAT_VEC4, [GL_FLOAT, 4, 'vec4']), _defineProperty(_COMPOSITE_GL_TYPES, GL_INT, [GL_INT, 1, 'int']), _defineProperty(_COMPOSITE_GL_TYPES, GL_INT_VEC2, [GL_INT, 2, 'ivec2']), _defineProperty(_COMPOSITE_GL_TYPES, GL_INT_VEC3, [GL_INT, 3, 'ivec3']), _defineProperty(_COMPOSITE_GL_TYPES, GL_INT_VEC4, [GL_INT, 4, 'ivec4']), _defineProperty(_COMPOSITE_GL_TYPES, GL_UNSIGNED_INT, [GL_UNSIGNED_INT, 1, 'uint']), _defineProperty(_COMPOSITE_GL_TYPES, GL_UNSIGNED_INT_VEC2, [GL_UNSIGNED_INT, 2, 'uvec2']), _defineProperty(_COMPOSITE_GL_TYPES, GL_UNSIGNED_INT_VEC3, [GL_UNSIGNED_INT, 3, 'uvec3']), _defineProperty(_COMPOSITE_GL_TYPES, GL_UNSIGNED_INT_VEC4, [GL_UNSIGNED_INT, 4, 'uvec4']), _defineProperty(_COMPOSITE_GL_TYPES, GL_BOOL, [GL_FLOAT, 1, 'bool']), _defineProperty(_COMPOSITE_GL_TYPES, GL_BOOL_VEC2, [GL_FLOAT, 2, 'bvec2']), _defineProperty(_COMPOSITE_GL_TYPES, GL_BOOL_VEC3, [GL_FLOAT, 3, 'bvec3']), _defineProperty(_COMPOSITE_GL_TYPES, GL_BOOL_VEC4, [GL_FLOAT, 4, 'bvec4']), _defineProperty(_COMPOSITE_GL_TYPES, GL_FLOAT_MAT2, [GL_FLOAT, 8, 'mat2']), _defineProperty(_COMPOSITE_GL_TYPES, GL_FLOAT_MAT2x3, [GL_FLOAT, 8, 'mat2x3']), _defineProperty(_COMPOSITE_GL_TYPES, GL_FLOAT_MAT2x4, [GL_FLOAT, 8, 'mat2x4']), _defineProperty(_COMPOSITE_GL_TYPES, GL_FLOAT_MAT3, [GL_FLOAT, 12, 'mat3']), _defineProperty(_COMPOSITE_GL_TYPES, GL_FLOAT_MAT3x2, [GL_FLOAT, 12, 'mat3x2']), _defineProperty(_COMPOSITE_GL_TYPES, GL_FLOAT_MAT3x4, [GL_FLOAT, 12, 'mat3x4']), _defineProperty(_COMPOSITE_GL_TYPES, GL_FLOAT_MAT4, [GL_FLOAT, 16, 'mat4']), _defineProperty(_COMPOSITE_GL_TYPES, GL_FLOAT_MAT4x2, [GL_FLOAT, 16, 'mat4x2']), _defineProperty(_COMPOSITE_GL_TYPES, GL_FLOAT_MAT4x3, [GL_FLOAT, 16, 'mat4x3']), _COMPOSITE_GL_TYPES);\nexport function getPrimitiveDrawMode(drawMode) {\n  switch (drawMode) {\n    case GL_POINTS:\n      return GL_POINTS;\n\n    case GL_LINES:\n      return GL_LINES;\n\n    case GL_LINE_STRIP:\n      return GL_LINES;\n\n    case GL_LINE_LOOP:\n      return GL_LINES;\n\n    case GL_TRIANGLES:\n      return GL_TRIANGLES;\n\n    case GL_TRIANGLE_STRIP:\n      return GL_TRIANGLES;\n\n    case GL_TRIANGLE_FAN:\n      return GL_TRIANGLES;\n\n    default:\n      assert(false);\n      return 0;\n  }\n}\nexport function getPrimitiveCount(_ref) {\n  var drawMode = _ref.drawMode,\n      vertexCount = _ref.vertexCount;\n\n  switch (drawMode) {\n    case GL_POINTS:\n    case GL_LINE_LOOP:\n      return vertexCount;\n\n    case GL_LINES:\n      return vertexCount / 2;\n\n    case GL_LINE_STRIP:\n      return vertexCount - 1;\n\n    case GL_TRIANGLES:\n      return vertexCount / 3;\n\n    case GL_TRIANGLE_STRIP:\n    case GL_TRIANGLE_FAN:\n      return vertexCount - 2;\n\n    default:\n      assert(false);\n      return 0;\n  }\n}\nexport function getVertexCount(_ref2) {\n  var drawMode = _ref2.drawMode,\n      vertexCount = _ref2.vertexCount;\n  var primitiveCount = getPrimitiveCount({\n    drawMode: drawMode,\n    vertexCount: vertexCount\n  });\n\n  switch (getPrimitiveDrawMode(drawMode)) {\n    case GL_POINTS:\n      return primitiveCount;\n\n    case GL_LINES:\n      return primitiveCount * 2;\n\n    case GL_TRIANGLES:\n      return primitiveCount * 3;\n\n    default:\n      assert(false);\n      return 0;\n  }\n}\nexport function decomposeCompositeGLType(compositeGLType) {\n  var typeAndSize = COMPOSITE_GL_TYPES[compositeGLType];\n\n  if (!typeAndSize) {\n    return null;\n  }\n\n  var _typeAndSize = _slicedToArray(typeAndSize, 2),\n      type = _typeAndSize[0],\n      components = _typeAndSize[1];\n\n  return {\n    type: type,\n    components: components\n  };\n}\nexport function getCompositeGLType(type, components) {\n  switch (type) {\n    case GL_BYTE:\n    case GL_UNSIGNED_BYTE:\n    case GL_SHORT:\n    case GL_UNSIGNED_SHORT:\n      type = GL_FLOAT;\n      break;\n\n    default:\n  }\n\n  for (var glType in COMPOSITE_GL_TYPES) {\n    var _COMPOSITE_GL_TYPES$g = _slicedToArray(COMPOSITE_GL_TYPES[glType], 3),\n        compType = _COMPOSITE_GL_TYPES$g[0],\n        compComponents = _COMPOSITE_GL_TYPES$g[1],\n        name = _COMPOSITE_GL_TYPES$g[2];\n\n    if (compType === type && compComponents === components) {\n      return {\n        glType: glType,\n        name: name\n      };\n    }\n  }\n\n  return null;\n}","map":{"version":3,"sources":["../../../src/webgl-utils/attribute-utils.js"],"names":["GL_BYTE","GL_UNSIGNED_BYTE","GL_SHORT","GL_UNSIGNED_SHORT","GL_POINTS","GL_LINES","GL_LINE_LOOP","GL_LINE_STRIP","GL_TRIANGLES","GL_TRIANGLE_STRIP","GL_TRIANGLE_FAN","GL_FLOAT","GL_FLOAT_VEC2","GL_FLOAT_VEC3","GL_FLOAT_VEC4","GL_INT","GL_INT_VEC2","GL_INT_VEC3","GL_INT_VEC4","GL_UNSIGNED_INT","GL_UNSIGNED_INT_VEC2","GL_UNSIGNED_INT_VEC3","GL_UNSIGNED_INT_VEC4","GL_BOOL","GL_BOOL_VEC2","GL_BOOL_VEC3","GL_BOOL_VEC4","GL_FLOAT_MAT2","GL_FLOAT_MAT3","GL_FLOAT_MAT4","GL_FLOAT_MAT2x3","GL_FLOAT_MAT2x4","GL_FLOAT_MAT3x2","GL_FLOAT_MAT3x4","GL_FLOAT_MAT4x2","GL_FLOAT_MAT4x3","COMPOSITE_GL_TYPES","assert","drawMode","vertexCount","primitiveCount","getPrimitiveCount","getPrimitiveDrawMode","typeAndSize","type","components","compType","compComponents","name","glType"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase */\nimport {assert} from '../utils';\n\nconst GL_BYTE = 0x1400;\nconst GL_UNSIGNED_BYTE = 0x1401;\nconst GL_SHORT = 0x1402;\nconst GL_UNSIGNED_SHORT = 0x1403;\n\nconst GL_POINTS = 0x0;\nconst GL_LINES = 0x1;\nconst GL_LINE_LOOP = 0x2;\nconst GL_LINE_STRIP = 0x3;\nconst GL_TRIANGLES = 0x4;\nconst GL_TRIANGLE_STRIP = 0x5;\nconst GL_TRIANGLE_FAN = 0x6;\n\n// Local constants - these will \"collapse\" during minification\nconst GL_FLOAT = 0x1406;\nconst GL_FLOAT_VEC2 = 0x8b50;\nconst GL_FLOAT_VEC3 = 0x8b51;\nconst GL_FLOAT_VEC4 = 0x8b52;\n\nconst GL_INT = 0x1404;\nconst GL_INT_VEC2 = 0x8b53;\nconst GL_INT_VEC3 = 0x8b54;\nconst GL_INT_VEC4 = 0x8b55;\n\nconst GL_UNSIGNED_INT = 0x1405;\nconst GL_UNSIGNED_INT_VEC2 = 0x8dc6;\nconst GL_UNSIGNED_INT_VEC3 = 0x8dc7;\nconst GL_UNSIGNED_INT_VEC4 = 0x8dc8;\n\nconst GL_BOOL = 0x8b56;\nconst GL_BOOL_VEC2 = 0x8b57;\nconst GL_BOOL_VEC3 = 0x8b58;\nconst GL_BOOL_VEC4 = 0x8b59;\n\nconst GL_FLOAT_MAT2 = 0x8b5a;\nconst GL_FLOAT_MAT3 = 0x8b5b;\nconst GL_FLOAT_MAT4 = 0x8b5c;\n\nconst GL_FLOAT_MAT2x3 = 0x8b65;\nconst GL_FLOAT_MAT2x4 = 0x8b66;\nconst GL_FLOAT_MAT3x2 = 0x8b67;\nconst GL_FLOAT_MAT3x4 = 0x8b68;\nconst GL_FLOAT_MAT4x2 = 0x8b69;\nconst GL_FLOAT_MAT4x3 = 0x8b6a;\n\n// Composite types table\nconst COMPOSITE_GL_TYPES = {\n  [GL_FLOAT]: [GL_FLOAT, 1, 'float'],\n  [GL_FLOAT_VEC2]: [GL_FLOAT, 2, 'vec2'],\n  [GL_FLOAT_VEC3]: [GL_FLOAT, 3, 'vec3'],\n  [GL_FLOAT_VEC4]: [GL_FLOAT, 4, 'vec4'],\n\n  [GL_INT]: [GL_INT, 1, 'int'],\n  [GL_INT_VEC2]: [GL_INT, 2, 'ivec2'],\n  [GL_INT_VEC3]: [GL_INT, 3, 'ivec3'],\n  [GL_INT_VEC4]: [GL_INT, 4, 'ivec4'],\n\n  [GL_UNSIGNED_INT]: [GL_UNSIGNED_INT, 1, 'uint'],\n  [GL_UNSIGNED_INT_VEC2]: [GL_UNSIGNED_INT, 2, 'uvec2'],\n  [GL_UNSIGNED_INT_VEC3]: [GL_UNSIGNED_INT, 3, 'uvec3'],\n  [GL_UNSIGNED_INT_VEC4]: [GL_UNSIGNED_INT, 4, 'uvec4'],\n\n  [GL_BOOL]: [GL_FLOAT, 1, 'bool'],\n  [GL_BOOL_VEC2]: [GL_FLOAT, 2, 'bvec2'],\n  [GL_BOOL_VEC3]: [GL_FLOAT, 3, 'bvec3'],\n  [GL_BOOL_VEC4]: [GL_FLOAT, 4, 'bvec4'],\n\n  [GL_FLOAT_MAT2]: [GL_FLOAT, 8, 'mat2'], // 4\n  [GL_FLOAT_MAT2x3]: [GL_FLOAT, 8, 'mat2x3'], // 6\n  [GL_FLOAT_MAT2x4]: [GL_FLOAT, 8, 'mat2x4'], // 8\n\n  [GL_FLOAT_MAT3]: [GL_FLOAT, 12, 'mat3'], // 9\n  [GL_FLOAT_MAT3x2]: [GL_FLOAT, 12, 'mat3x2'], // 6\n  [GL_FLOAT_MAT3x4]: [GL_FLOAT, 12, 'mat3x4'], // 12\n\n  [GL_FLOAT_MAT4]: [GL_FLOAT, 16, 'mat4'], // 16\n  [GL_FLOAT_MAT4x2]: [GL_FLOAT, 16, 'mat4x2'], // 8\n  [GL_FLOAT_MAT4x3]: [GL_FLOAT, 16, 'mat4x3'] // 12\n};\n\n// Counts the number of complete primitives given a number of vertices and a drawMode\nexport function getPrimitiveDrawMode(drawMode) {\n  switch (drawMode) {\n    case GL_POINTS:\n      return GL_POINTS;\n    case GL_LINES:\n      return GL_LINES;\n    case GL_LINE_STRIP:\n      return GL_LINES;\n    case GL_LINE_LOOP:\n      return GL_LINES;\n    case GL_TRIANGLES:\n      return GL_TRIANGLES;\n    case GL_TRIANGLE_STRIP:\n      return GL_TRIANGLES;\n    case GL_TRIANGLE_FAN:\n      return GL_TRIANGLES;\n    default:\n      assert(false);\n      return 0;\n  }\n}\n\n// Counts the number of complete \"primitives\" given a number of vertices and a drawMode\nexport function getPrimitiveCount({drawMode, vertexCount}) {\n  switch (drawMode) {\n    case GL_POINTS:\n    case GL_LINE_LOOP:\n      return vertexCount;\n    case GL_LINES:\n      return vertexCount / 2;\n    case GL_LINE_STRIP:\n      return vertexCount - 1;\n    case GL_TRIANGLES:\n      return vertexCount / 3;\n    case GL_TRIANGLE_STRIP:\n    case GL_TRIANGLE_FAN:\n      return vertexCount - 2;\n    default:\n      assert(false);\n      return 0;\n  }\n}\n\n// Counts the number of vertices after splitting the vertex stream into separate \"primitives\"\nexport function getVertexCount({drawMode, vertexCount}) {\n  const primitiveCount = getPrimitiveCount({drawMode, vertexCount});\n  switch (getPrimitiveDrawMode(drawMode)) {\n    case GL_POINTS:\n      return primitiveCount;\n    case GL_LINES:\n      return primitiveCount * 2;\n    case GL_TRIANGLES:\n      return primitiveCount * 3;\n    default:\n      assert(false);\n      return 0;\n  }\n}\n\n// Decomposes a composite type GL.VEC3 into a basic type (GL.FLOAT) and components (3)\nexport function decomposeCompositeGLType(compositeGLType) {\n  const typeAndSize = COMPOSITE_GL_TYPES[compositeGLType];\n  if (!typeAndSize) {\n    return null;\n  }\n  const [type, components] = typeAndSize;\n  return {type, components};\n}\n\nexport function getCompositeGLType(type, components) {\n  switch (type) {\n    case GL_BYTE:\n    case GL_UNSIGNED_BYTE:\n    case GL_SHORT:\n    case GL_UNSIGNED_SHORT:\n      type = GL_FLOAT;\n      break;\n    default:\n  }\n\n  for (const glType in COMPOSITE_GL_TYPES) {\n    const [compType, compComponents, name] = COMPOSITE_GL_TYPES[glType];\n    if (compType === type && compComponents === components) {\n      return {glType, name};\n    }\n  }\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}