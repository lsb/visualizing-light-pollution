{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { CompositeLayer, log } from '@deck.gl/core';\nimport ScatterplotLayer from '../scatterplot-layer/scatterplot-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nimport { replaceInRange } from '../utils';\nimport { getGeojsonFeatures, separateGeojsonFeatures } from './geojson';\nvar defaultLineColor = [0, 0, 0, 255];\nvar defaultFillColor = [0, 0, 0, 255];\nvar defaultProps = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  wireframe: false,\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n  elevationScale: 1,\n  pointRadiusScale: 1,\n  pointRadiusMinPixels: 0,\n  pointRadiusMaxPixels: Number.MAX_SAFE_INTEGER,\n  getLineColor: {\n    type: 'accessor',\n    value: defaultLineColor\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: defaultFillColor\n  },\n  getRadius: {\n    type: 'accessor',\n    value: 1\n  },\n  getLineWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  getElevation: {\n    type: 'accessor',\n    value: 1000\n  },\n  material: true\n};\n\nfunction getCoordinates(f) {\n  return f.geometry.coordinates;\n}\n\nvar GeoJsonLayer = function (_CompositeLayer) {\n  _inherits(GeoJsonLayer, _CompositeLayer);\n\n  function GeoJsonLayer() {\n    _classCallCheck(this, GeoJsonLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(GeoJsonLayer).apply(this, arguments));\n  }\n\n  _createClass(GeoJsonLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      this.state = {\n        features: {}\n      };\n\n      if (this.props.getLineDashArray) {\n        log.removed('getLineDashArray', 'PathStyleExtension')();\n      }\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n          changeFlags = _ref.changeFlags;\n\n      if (!changeFlags.dataChanged) {\n        return;\n      }\n\n      var features = getGeojsonFeatures(props.data);\n      var wrapFeature = this.getSubLayerRow.bind(this);\n\n      if (Array.isArray(changeFlags.dataChanged)) {\n        var oldFeatures = this.state.features;\n        var newFeatures = {};\n        var featuresDiff = {};\n\n        for (var key in oldFeatures) {\n          newFeatures[key] = oldFeatures[key].slice();\n          featuresDiff[key] = [];\n        }\n\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = changeFlags.dataChanged[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var dataRange = _step.value;\n            var partialFeatures = separateGeojsonFeatures(features, wrapFeature, dataRange);\n\n            for (var _key in oldFeatures) {\n              featuresDiff[_key].push(replaceInRange({\n                data: newFeatures[_key],\n                getIndex: function getIndex(f) {\n                  return f.__source.index;\n                },\n                dataRange: dataRange,\n                replace: partialFeatures[_key]\n              }));\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n              _iterator[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        this.setState({\n          features: newFeatures,\n          featuresDiff: featuresDiff\n        });\n      } else {\n        this.setState({\n          features: separateGeojsonFeatures(features, wrapFeature),\n          featuresDiff: {}\n        });\n      }\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this$state = this.state,\n          features = _this$state.features,\n          featuresDiff = _this$state.featuresDiff;\n      var pointFeatures = features.pointFeatures,\n          lineFeatures = features.lineFeatures,\n          polygonFeatures = features.polygonFeatures,\n          polygonOutlineFeatures = features.polygonOutlineFeatures;\n      var _this$props = this.props,\n          stroked = _this$props.stroked,\n          filled = _this$props.filled,\n          extruded = _this$props.extruded,\n          wireframe = _this$props.wireframe,\n          material = _this$props.material,\n          transitions = _this$props.transitions;\n      var _this$props2 = this.props,\n          lineWidthUnits = _this$props2.lineWidthUnits,\n          lineWidthScale = _this$props2.lineWidthScale,\n          lineWidthMinPixels = _this$props2.lineWidthMinPixels,\n          lineWidthMaxPixels = _this$props2.lineWidthMaxPixels,\n          lineJointRounded = _this$props2.lineJointRounded,\n          lineMiterLimit = _this$props2.lineMiterLimit,\n          pointRadiusScale = _this$props2.pointRadiusScale,\n          pointRadiusMinPixels = _this$props2.pointRadiusMinPixels,\n          pointRadiusMaxPixels = _this$props2.pointRadiusMaxPixels,\n          elevationScale = _this$props2.elevationScale,\n          lineDashJustified = _this$props2.lineDashJustified;\n      var _this$props3 = this.props,\n          getLineColor = _this$props3.getLineColor,\n          getFillColor = _this$props3.getFillColor,\n          getRadius = _this$props3.getRadius,\n          getLineWidth = _this$props3.getLineWidth,\n          getLineDashArray = _this$props3.getLineDashArray,\n          getElevation = _this$props3.getElevation,\n          updateTriggers = _this$props3.updateTriggers;\n      var PolygonFillLayer = this.getSubLayerClass('polygons-fill', SolidPolygonLayer);\n      var PolygonStrokeLayer = this.getSubLayerClass('polygons-stroke', PathLayer);\n      var LineStringsLayer = this.getSubLayerClass('line-strings', PathLayer);\n      var PointsLayer = this.getSubLayerClass('points', ScatterplotLayer);\n      var polygonFillLayer = this.shouldRenderSubLayer('polygons-fill', polygonFeatures) && new PolygonFillLayer({\n        _dataDiff: featuresDiff.polygonFeatures && function () {\n          return featuresDiff.polygonFeatures;\n        },\n        extruded: extruded,\n        elevationScale: elevationScale,\n        filled: filled,\n        wireframe: wireframe,\n        material: material,\n        getElevation: this.getSubLayerAccessor(getElevation),\n        getFillColor: this.getSubLayerAccessor(getFillColor),\n        getLineColor: this.getSubLayerAccessor(getLineColor),\n        transitions: transitions && {\n          getPolygon: transitions.geometry,\n          getElevation: transitions.getElevation,\n          getFillColor: transitions.getFillColor,\n          getLineColor: transitions.getLineColor\n        }\n      }, this.getSubLayerProps({\n        id: 'polygons-fill',\n        updateTriggers: {\n          getElevation: updateTriggers.getElevation,\n          getFillColor: updateTriggers.getFillColor,\n          getLineColor: updateTriggers.getLineColor\n        }\n      }), {\n        data: polygonFeatures,\n        getPolygon: getCoordinates,\n        highlightedObjectIndex: this._getHighlightedIndex(polygonFeatures)\n      });\n      var polygonLineLayer = !extruded && stroked && this.shouldRenderSubLayer('polygons-stroke', polygonOutlineFeatures) && new PolygonStrokeLayer({\n        _dataDiff: featuresDiff.polygonOutlineFeatures && function () {\n          return featuresDiff.polygonOutlineFeatures;\n        },\n        widthUnits: lineWidthUnits,\n        widthScale: lineWidthScale,\n        widthMinPixels: lineWidthMinPixels,\n        widthMaxPixels: lineWidthMaxPixels,\n        rounded: lineJointRounded,\n        miterLimit: lineMiterLimit,\n        dashJustified: lineDashJustified,\n        getColor: this.getSubLayerAccessor(getLineColor),\n        getWidth: this.getSubLayerAccessor(getLineWidth),\n        getDashArray: this.getSubLayerAccessor(getLineDashArray),\n        transitions: transitions && {\n          getPath: transitions.geometry,\n          getColor: transitions.getLineColor,\n          getWidth: transitions.getLineWidth\n        }\n      }, this.getSubLayerProps({\n        id: 'polygons-stroke',\n        updateTriggers: {\n          getColor: updateTriggers.getLineColor,\n          getWidth: updateTriggers.getLineWidth,\n          getDashArray: updateTriggers.getLineDashArray\n        }\n      }), {\n        data: polygonOutlineFeatures,\n        getPath: getCoordinates,\n        highlightedObjectIndex: this._getHighlightedIndex(polygonOutlineFeatures)\n      });\n      var pathLayer = this.shouldRenderSubLayer('linestrings', lineFeatures) && new LineStringsLayer({\n        _dataDiff: featuresDiff.lineFeatures && function () {\n          return featuresDiff.lineFeatures;\n        },\n        widthUnits: lineWidthUnits,\n        widthScale: lineWidthScale,\n        widthMinPixels: lineWidthMinPixels,\n        widthMaxPixels: lineWidthMaxPixels,\n        rounded: lineJointRounded,\n        miterLimit: lineMiterLimit,\n        dashJustified: lineDashJustified,\n        getColor: this.getSubLayerAccessor(getLineColor),\n        getWidth: this.getSubLayerAccessor(getLineWidth),\n        getDashArray: this.getSubLayerAccessor(getLineDashArray),\n        transitions: transitions && {\n          getPath: transitions.geometry,\n          getColor: transitions.getLineColor,\n          getWidth: transitions.getLineWidth\n        }\n      }, this.getSubLayerProps({\n        id: 'line-strings',\n        updateTriggers: {\n          getColor: updateTriggers.getLineColor,\n          getWidth: updateTriggers.getLineWidth,\n          getDashArray: updateTriggers.getLineDashArray\n        }\n      }), {\n        data: lineFeatures,\n        getPath: getCoordinates,\n        highlightedObjectIndex: this._getHighlightedIndex(lineFeatures)\n      });\n      var pointLayer = this.shouldRenderSubLayer('points', pointFeatures) && new PointsLayer({\n        _dataDiff: featuresDiff.pointFeatures && function () {\n          return featuresDiff.pointFeatures;\n        },\n        stroked: stroked,\n        filled: filled,\n        radiusScale: pointRadiusScale,\n        radiusMinPixels: pointRadiusMinPixels,\n        radiusMaxPixels: pointRadiusMaxPixels,\n        lineWidthUnits: lineWidthUnits,\n        lineWidthScale: lineWidthScale,\n        lineWidthMinPixels: lineWidthMinPixels,\n        lineWidthMaxPixels: lineWidthMaxPixels,\n        getFillColor: this.getSubLayerAccessor(getFillColor),\n        getLineColor: this.getSubLayerAccessor(getLineColor),\n        getRadius: this.getSubLayerAccessor(getRadius),\n        getLineWidth: this.getSubLayerAccessor(getLineWidth),\n        transitions: transitions && {\n          getPosition: transitions.geometry,\n          getFillColor: transitions.getFillColor,\n          getLineColor: transitions.getLineColor,\n          getRadius: transitions.getRadius,\n          getLineWidth: transitions.getLineWidth\n        }\n      }, this.getSubLayerProps({\n        id: 'points',\n        updateTriggers: {\n          getFillColor: updateTriggers.getFillColor,\n          getLineColor: updateTriggers.getLineColor,\n          getRadius: updateTriggers.getRadius,\n          getLineWidth: updateTriggers.getLineWidth\n        }\n      }), {\n        data: pointFeatures,\n        getPosition: getCoordinates,\n        highlightedObjectIndex: this._getHighlightedIndex(pointFeatures)\n      });\n      return [!extruded && polygonFillLayer, polygonLineLayer, pathLayer, pointLayer, extruded && polygonFillLayer];\n    }\n  }, {\n    key: \"_getHighlightedIndex\",\n    value: function _getHighlightedIndex(data) {\n      var highlightedObjectIndex = this.props.highlightedObjectIndex;\n      return Number.isFinite(highlightedObjectIndex) ? data.findIndex(function (d) {\n        return d.__source.index === highlightedObjectIndex;\n      }) : null;\n    }\n  }]);\n\n  return GeoJsonLayer;\n}(CompositeLayer);\n\nexport { GeoJsonLayer as default };\nGeoJsonLayer.layerName = 'GeoJsonLayer';\nGeoJsonLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/geojson-layer/geojson-layer.js"],"names":["defaultLineColor","defaultFillColor","defaultProps","stroked","filled","extruded","wireframe","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","lineJointRounded","lineMiterLimit","elevationScale","pointRadiusScale","pointRadiusMinPixels","pointRadiusMaxPixels","getLineColor","type","value","getFillColor","getRadius","getLineWidth","getElevation","material","f","GeoJsonLayer","CompositeLayer","features","log","props","changeFlags","getGeojsonFeatures","wrapFeature","Array","oldFeatures","newFeatures","featuresDiff","dataRange","partialFeatures","separateGeojsonFeatures","replaceInRange","data","getIndex","replace","pointFeatures","lineFeatures","polygonFeatures","polygonOutlineFeatures","transitions","lineDashJustified","getLineDashArray","updateTriggers","PolygonFillLayer","PolygonStrokeLayer","LineStringsLayer","PointsLayer","polygonFillLayer","_dataDiff","getPolygon","id","highlightedObjectIndex","polygonLineLayer","widthUnits","widthScale","widthMinPixels","widthMaxPixels","rounded","miterLimit","dashJustified","getColor","getWidth","getDashArray","getPath","pathLayer","pointLayer","radiusScale","radiusMinPixels","radiusMaxPixels","getPosition","d"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer, log} from '@deck.gl/core';\nimport ScatterplotLayer from '../scatterplot-layer/scatterplot-layer';\nimport PathLayer from '../path-layer/path-layer';\n// Use primitive layer to avoid \"Composite Composite\" layers for now\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nimport {replaceInRange} from '../utils';\n\nimport {getGeojsonFeatures, separateGeojsonFeatures} from './geojson';\n\nconst defaultLineColor = [0, 0, 0, 255];\nconst defaultFillColor = [0, 0, 0, 255];\n\nconst defaultProps = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  wireframe: false,\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n\n  elevationScale: 1,\n\n  pointRadiusScale: 1,\n  pointRadiusMinPixels: 0, //  min point radius in pixels\n  pointRadiusMaxPixels: Number.MAX_SAFE_INTEGER, // max point radius in pixels\n\n  // Line and polygon outline color\n  getLineColor: {type: 'accessor', value: defaultLineColor},\n  // Point and polygon fill color\n  getFillColor: {type: 'accessor', value: defaultFillColor},\n  // Point radius\n  getRadius: {type: 'accessor', value: 1},\n  // Line and polygon outline accessors\n  getLineWidth: {type: 'accessor', value: 1},\n  // Polygon extrusion accessor\n  getElevation: {type: 'accessor', value: 1000},\n  // Optional material for 'lighting' shader module\n  material: true\n};\n\nfunction getCoordinates(f) {\n  return f.geometry.coordinates;\n}\n\nexport default class GeoJsonLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      features: {}\n    };\n\n    if (this.props.getLineDashArray) {\n      log.removed('getLineDashArray', 'PathStyleExtension')();\n    }\n  }\n\n  updateState({props, changeFlags}) {\n    if (!changeFlags.dataChanged) {\n      return;\n    }\n    const features = getGeojsonFeatures(props.data);\n    const wrapFeature = this.getSubLayerRow.bind(this);\n\n    if (Array.isArray(changeFlags.dataChanged)) {\n      const oldFeatures = this.state.features;\n      const newFeatures = {};\n      const featuresDiff = {};\n      for (const key in oldFeatures) {\n        newFeatures[key] = oldFeatures[key].slice();\n        featuresDiff[key] = [];\n      }\n\n      for (const dataRange of changeFlags.dataChanged) {\n        const partialFeatures = separateGeojsonFeatures(features, wrapFeature, dataRange);\n        for (const key in oldFeatures) {\n          featuresDiff[key].push(\n            replaceInRange({\n              data: newFeatures[key],\n              getIndex: f => f.__source.index,\n              dataRange,\n              replace: partialFeatures[key]\n            })\n          );\n        }\n      }\n      this.setState({features: newFeatures, featuresDiff});\n    } else {\n      this.setState({\n        features: separateGeojsonFeatures(features, wrapFeature),\n        featuresDiff: {}\n      });\n    }\n  }\n\n  /* eslint-disable complexity */\n  renderLayers() {\n    const {features, featuresDiff} = this.state;\n    const {pointFeatures, lineFeatures, polygonFeatures, polygonOutlineFeatures} = features;\n\n    // Layer composition props\n    const {stroked, filled, extruded, wireframe, material, transitions} = this.props;\n\n    // Rendering props underlying layer\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      pointRadiusScale,\n      pointRadiusMinPixels,\n      pointRadiusMaxPixels,\n      elevationScale,\n      lineDashJustified\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {\n      getLineColor,\n      getFillColor,\n      getRadius,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      updateTriggers\n    } = this.props;\n\n    const PolygonFillLayer = this.getSubLayerClass('polygons-fill', SolidPolygonLayer);\n    const PolygonStrokeLayer = this.getSubLayerClass('polygons-stroke', PathLayer);\n    const LineStringsLayer = this.getSubLayerClass('line-strings', PathLayer);\n    const PointsLayer = this.getSubLayerClass('points', ScatterplotLayer);\n\n    // Filled Polygon Layer\n    const polygonFillLayer =\n      this.shouldRenderSubLayer('polygons-fill', polygonFeatures) &&\n      new PolygonFillLayer(\n        {\n          _dataDiff: featuresDiff.polygonFeatures && (() => featuresDiff.polygonFeatures),\n\n          extruded,\n          elevationScale,\n          filled,\n          wireframe,\n          material,\n          getElevation: this.getSubLayerAccessor(getElevation),\n          getFillColor: this.getSubLayerAccessor(getFillColor),\n          getLineColor: this.getSubLayerAccessor(getLineColor),\n\n          transitions: transitions && {\n            getPolygon: transitions.geometry,\n            getElevation: transitions.getElevation,\n            getFillColor: transitions.getFillColor,\n            getLineColor: transitions.getLineColor\n          }\n        },\n        this.getSubLayerProps({\n          id: 'polygons-fill',\n          updateTriggers: {\n            getElevation: updateTriggers.getElevation,\n            getFillColor: updateTriggers.getFillColor,\n            getLineColor: updateTriggers.getLineColor\n          }\n        }),\n        {\n          data: polygonFeatures,\n          getPolygon: getCoordinates,\n          highlightedObjectIndex: this._getHighlightedIndex(polygonFeatures)\n        }\n      );\n\n    const polygonLineLayer =\n      !extruded &&\n      stroked &&\n      this.shouldRenderSubLayer('polygons-stroke', polygonOutlineFeatures) &&\n      new PolygonStrokeLayer(\n        {\n          _dataDiff:\n            featuresDiff.polygonOutlineFeatures && (() => featuresDiff.polygonOutlineFeatures),\n\n          widthUnits: lineWidthUnits,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          rounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          getColor: this.getSubLayerAccessor(getLineColor),\n          getWidth: this.getSubLayerAccessor(getLineWidth),\n          getDashArray: this.getSubLayerAccessor(getLineDashArray),\n\n          transitions: transitions && {\n            getPath: transitions.geometry,\n            getColor: transitions.getLineColor,\n            getWidth: transitions.getLineWidth\n          }\n        },\n        this.getSubLayerProps({\n          id: 'polygons-stroke',\n          updateTriggers: {\n            getColor: updateTriggers.getLineColor,\n            getWidth: updateTriggers.getLineWidth,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        {\n          data: polygonOutlineFeatures,\n          getPath: getCoordinates,\n          highlightedObjectIndex: this._getHighlightedIndex(polygonOutlineFeatures)\n        }\n      );\n\n    const pathLayer =\n      this.shouldRenderSubLayer('linestrings', lineFeatures) &&\n      new LineStringsLayer(\n        {\n          _dataDiff: featuresDiff.lineFeatures && (() => featuresDiff.lineFeatures),\n\n          widthUnits: lineWidthUnits,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          rounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          getColor: this.getSubLayerAccessor(getLineColor),\n          getWidth: this.getSubLayerAccessor(getLineWidth),\n          getDashArray: this.getSubLayerAccessor(getLineDashArray),\n\n          transitions: transitions && {\n            getPath: transitions.geometry,\n            getColor: transitions.getLineColor,\n            getWidth: transitions.getLineWidth\n          }\n        },\n        this.getSubLayerProps({\n          id: 'line-strings',\n          updateTriggers: {\n            getColor: updateTriggers.getLineColor,\n            getWidth: updateTriggers.getLineWidth,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        {\n          data: lineFeatures,\n          getPath: getCoordinates,\n          highlightedObjectIndex: this._getHighlightedIndex(lineFeatures)\n        }\n      );\n\n    const pointLayer =\n      this.shouldRenderSubLayer('points', pointFeatures) &&\n      new PointsLayer(\n        {\n          _dataDiff: featuresDiff.pointFeatures && (() => featuresDiff.pointFeatures),\n\n          stroked,\n          filled,\n          radiusScale: pointRadiusScale,\n          radiusMinPixels: pointRadiusMinPixels,\n          radiusMaxPixels: pointRadiusMaxPixels,\n          lineWidthUnits,\n          lineWidthScale,\n          lineWidthMinPixels,\n          lineWidthMaxPixels,\n\n          getFillColor: this.getSubLayerAccessor(getFillColor),\n          getLineColor: this.getSubLayerAccessor(getLineColor),\n          getRadius: this.getSubLayerAccessor(getRadius),\n          getLineWidth: this.getSubLayerAccessor(getLineWidth),\n\n          transitions: transitions && {\n            getPosition: transitions.geometry,\n            getFillColor: transitions.getFillColor,\n            getLineColor: transitions.getLineColor,\n            getRadius: transitions.getRadius,\n            getLineWidth: transitions.getLineWidth\n          }\n        },\n        this.getSubLayerProps({\n          id: 'points',\n          updateTriggers: {\n            getFillColor: updateTriggers.getFillColor,\n            getLineColor: updateTriggers.getLineColor,\n            getRadius: updateTriggers.getRadius,\n            getLineWidth: updateTriggers.getLineWidth\n          }\n        }),\n        {\n          data: pointFeatures,\n          getPosition: getCoordinates,\n          highlightedObjectIndex: this._getHighlightedIndex(pointFeatures)\n        }\n      );\n\n    return [\n      // If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonFillLayer,\n      polygonLineLayer,\n      pathLayer,\n      pointLayer,\n      // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonFillLayer\n    ];\n  }\n  /* eslint-enable complexity */\n\n  _getHighlightedIndex(data) {\n    const {highlightedObjectIndex} = this.props;\n    return Number.isFinite(highlightedObjectIndex)\n      ? data.findIndex(d => d.__source.index === highlightedObjectIndex)\n      : null;\n  }\n}\n\nGeoJsonLayer.layerName = 'GeoJsonLayer';\nGeoJsonLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}