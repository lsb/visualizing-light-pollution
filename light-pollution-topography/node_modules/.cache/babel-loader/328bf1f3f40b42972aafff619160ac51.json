{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport TransitionManager from './transition-manager';\nimport log from '../utils/log';\nimport assert from '../utils/assert';\nvar NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\nvar ZOOM_ACCEL = 0.01;\nvar EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend'],\n  DOUBLE_TAP: ['doubletap'],\n  KEYBOARD: ['keydown']\n};\n\nvar Controller = function () {\n  function Controller(ControllerState) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Controller);\n\n    assert(ControllerState);\n    this.ControllerState = ControllerState;\n    this.controllerState = null;\n    this.controllerStateProps = null;\n    this.eventManager = null;\n    this.transitionManager = new TransitionManager(ControllerState, options);\n    this._events = null;\n    this._state = {\n      isDragging: false\n    };\n    this._customEvents = [];\n    this.onViewStateChange = null;\n    this.onStateChange = null;\n    this.invertPan = false;\n    this.handleEvent = this.handleEvent.bind(this);\n    this.setProps(options);\n  }\n\n  _createClass(Controller, [{\n    key: \"finalize\",\n    value: function finalize() {\n      for (var eventName in this._events) {\n        if (this._events[eventName]) {\n          this.eventManager.off(eventName, this.handleEvent);\n        }\n      }\n\n      this.transitionManager.finalize();\n    }\n  }, {\n    key: \"handleEvent\",\n    value: function handleEvent(event) {\n      var ControllerState = this.ControllerState;\n      this.controllerState = new ControllerState(Object.assign({}, this.controllerStateProps, this._state));\n\n      switch (event.type) {\n        case 'panstart':\n          return this._onPanStart(event);\n\n        case 'panmove':\n          return this._onPan(event);\n\n        case 'panend':\n          return this._onPanEnd(event);\n\n        case 'pinchstart':\n          return this._onPinchStart(event);\n\n        case 'pinchmove':\n          return this._onPinch(event);\n\n        case 'pinchend':\n          return this._onPinchEnd(event);\n\n        case 'doubletap':\n          return this._onDoubleTap(event);\n\n        case 'wheel':\n          return this._onWheel(event);\n\n        case 'keydown':\n          return this._onKeyDown(event);\n\n        default:\n          return false;\n      }\n    }\n  }, {\n    key: \"getCenter\",\n    value: function getCenter(event) {\n      var _this$controllerState = this.controllerStateProps,\n          x = _this$controllerState.x,\n          y = _this$controllerState.y;\n      var offsetCenter = event.offsetCenter;\n      return [offsetCenter.x - x, offsetCenter.y - y];\n    }\n  }, {\n    key: \"isPointInBounds\",\n    value: function isPointInBounds(pos, event) {\n      var _this$controllerState2 = this.controllerStateProps,\n          width = _this$controllerState2.width,\n          height = _this$controllerState2.height;\n\n      if (event && event.handled) {\n        return false;\n      }\n\n      var inside = pos[0] >= 0 && pos[0] <= width && pos[1] >= 0 && pos[1] <= height;\n\n      if (inside && event) {\n        event.stopPropagation();\n      }\n\n      return inside;\n    }\n  }, {\n    key: \"isFunctionKeyPressed\",\n    value: function isFunctionKeyPressed(event) {\n      var srcEvent = event.srcEvent;\n      return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n    }\n  }, {\n    key: \"isDragging\",\n    value: function isDragging() {\n      return this._state.isDragging;\n    }\n  }, {\n    key: \"setProps\",\n    value: function setProps(props) {\n      if ('onViewportChange' in props) {\n        log.removed('onViewportChange')();\n      }\n\n      if ('onViewStateChange' in props) {\n        this.onViewStateChange = props.onViewStateChange;\n      }\n\n      if ('onStateChange' in props) {\n        this.onStateChange = props.onStateChange;\n      }\n\n      this.controllerStateProps = props;\n\n      if ('eventManager' in props && this.eventManager !== props.eventManager) {\n        this.eventManager = props.eventManager;\n        this._events = {};\n        this.toggleEvents(this._customEvents, true);\n      }\n\n      this.transitionManager.processViewStateChange(this.controllerStateProps);\n      var _props$scrollZoom = props.scrollZoom,\n          scrollZoom = _props$scrollZoom === void 0 ? true : _props$scrollZoom,\n          _props$dragPan = props.dragPan,\n          dragPan = _props$dragPan === void 0 ? true : _props$dragPan,\n          _props$dragRotate = props.dragRotate,\n          dragRotate = _props$dragRotate === void 0 ? true : _props$dragRotate,\n          _props$doubleClickZoo = props.doubleClickZoom,\n          doubleClickZoom = _props$doubleClickZoo === void 0 ? true : _props$doubleClickZoo,\n          _props$touchZoom = props.touchZoom,\n          touchZoom = _props$touchZoom === void 0 ? true : _props$touchZoom,\n          _props$touchRotate = props.touchRotate,\n          touchRotate = _props$touchRotate === void 0 ? false : _props$touchRotate,\n          _props$keyboard = props.keyboard,\n          keyboard = _props$keyboard === void 0 ? true : _props$keyboard;\n      var isInteractive = Boolean(this.onViewStateChange);\n      this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom);\n      this.toggleEvents(EVENT_TYPES.PAN, isInteractive && (dragPan || dragRotate));\n      this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && (touchZoom || touchRotate));\n      this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && doubleClickZoom);\n      this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard);\n      this.scrollZoom = scrollZoom;\n      this.dragPan = dragPan;\n      this.dragRotate = dragRotate;\n      this.doubleClickZoom = doubleClickZoom;\n      this.touchZoom = touchZoom;\n      this.touchRotate = touchRotate;\n      this.keyboard = keyboard;\n    }\n  }, {\n    key: \"updateTransition\",\n    value: function updateTransition() {\n      this.transitionManager.updateTransition();\n    }\n  }, {\n    key: \"toggleEvents\",\n    value: function toggleEvents(eventNames, enabled) {\n      var _this = this;\n\n      if (this.eventManager) {\n        eventNames.forEach(function (eventName) {\n          if (_this._events[eventName] !== enabled) {\n            _this._events[eventName] = enabled;\n\n            if (enabled) {\n              _this.eventManager.on(eventName, _this.handleEvent);\n            } else {\n              _this.eventManager.off(eventName, _this.handleEvent);\n            }\n          }\n        });\n      }\n    }\n  }, {\n    key: \"updateViewport\",\n    value: function updateViewport(newControllerState) {\n      var extraProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var interactionState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var viewState = Object.assign({}, newControllerState.getViewportProps(), extraProps);\n      var changed = this.controllerState !== newControllerState;\n\n      if (changed) {\n        var oldViewState = this.controllerState ? this.controllerState.getViewportProps() : null;\n\n        if (this.onViewStateChange) {\n          this.onViewStateChange({\n            viewState: viewState,\n            interactionState: interactionState,\n            oldViewState: oldViewState\n          });\n        }\n      }\n\n      Object.assign(this._state, newControllerState.getInteractiveState(), interactionState);\n\n      if (this.onStateChange) {\n        this.onStateChange(this._state);\n      }\n    }\n  }, {\n    key: \"_onPanStart\",\n    value: function _onPanStart(event) {\n      var pos = this.getCenter(event);\n\n      if (!this.isPointInBounds(pos, event)) {\n        return false;\n      }\n\n      var newControllerState = this.controllerState.panStart({\n        pos: pos\n      }).rotateStart({\n        pos: pos\n      });\n      this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n        isDragging: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPan\",\n    value: function _onPan(event) {\n      if (!this.isDragging()) {\n        return false;\n      }\n\n      var alternateMode = this.isFunctionKeyPressed(event) || event.rightButton;\n      alternateMode = this.invertPan ? !alternateMode : alternateMode;\n      return alternateMode ? this._onPanMove(event) : this._onPanRotate(event);\n    }\n  }, {\n    key: \"_onPanEnd\",\n    value: function _onPanEnd(event) {\n      var newControllerState = this.controllerState.panEnd().rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isPanning: false,\n        isRotating: false\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPanMove\",\n    value: function _onPanMove(event) {\n      if (!this.dragPan) {\n        return false;\n      }\n\n      var pos = this.getCenter(event);\n      var newControllerState = this.controllerState.pan({\n        pos: pos\n      });\n      this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n        isDragging: true,\n        isPanning: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPanRotate\",\n    value: function _onPanRotate(event) {\n      if (!this.dragRotate) {\n        return false;\n      }\n\n      var deltaX = event.deltaX,\n          deltaY = event.deltaY;\n\n      var _this$controllerState3 = this.controllerState.getViewportProps(),\n          width = _this$controllerState3.width,\n          height = _this$controllerState3.height;\n\n      var deltaScaleX = deltaX / width;\n      var deltaScaleY = deltaY / height;\n      var newControllerState = this.controllerState.rotate({\n        deltaScaleX: deltaScaleX,\n        deltaScaleY: deltaScaleY\n      });\n      this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n        isDragging: true,\n        isRotating: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onWheel\",\n    value: function _onWheel(event) {\n      if (!this.scrollZoom) {\n        return false;\n      }\n\n      event.preventDefault();\n      var pos = this.getCenter(event);\n\n      if (!this.isPointInBounds(pos, event)) {\n        return false;\n      }\n\n      var delta = event.delta;\n      var scale = 2 / (1 + Math.exp(-Math.abs(delta * ZOOM_ACCEL)));\n\n      if (delta < 0 && scale !== 0) {\n        scale = 1 / scale;\n      }\n\n      var newControllerState = this.controllerState.zoom({\n        pos: pos,\n        scale: scale\n      });\n      this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n        isZooming: true,\n        isPanning: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPinchStart\",\n    value: function _onPinchStart(event) {\n      var pos = this.getCenter(event);\n\n      if (!this.isPointInBounds(pos, event)) {\n        return false;\n      }\n\n      var newControllerState = this.controllerState.zoomStart({\n        pos: pos\n      }).rotateStart({\n        pos: pos\n      });\n      this._state.startPinchRotation = event.rotation;\n      this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n        isDragging: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPinch\",\n    value: function _onPinch(event) {\n      if (!this.touchZoom && !this.touchRotate) {\n        return false;\n      }\n\n      if (!this.isDragging()) {\n        return false;\n      }\n\n      var newControllerState = this.controllerState;\n\n      if (this.touchZoom) {\n        var scale = event.scale;\n        var pos = this.getCenter(event);\n        newControllerState = newControllerState.zoom({\n          pos: pos,\n          scale: scale\n        });\n      }\n\n      if (this.touchRotate) {\n        var rotation = event.rotation;\n        var startPinchRotation = this._state.startPinchRotation;\n        newControllerState = newControllerState.rotate({\n          deltaScaleX: -(rotation - startPinchRotation) / 180\n        });\n      }\n\n      this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n        isDragging: true,\n        isPanning: this.touchZoom,\n        isZooming: this.touchZoom,\n        isRotating: this.touchRotate\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPinchEnd\",\n    value: function _onPinchEnd(event) {\n      var newControllerState = this.controllerState.zoomEnd().rotateEnd();\n      this._state.startPinchRotation = 0;\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isPanning: false,\n        isZooming: false,\n        isRotating: false\n      });\n      return true;\n    }\n  }, {\n    key: \"_onDoubleTap\",\n    value: function _onDoubleTap(event) {\n      if (!this.doubleClickZoom) {\n        return false;\n      }\n\n      var pos = this.getCenter(event);\n\n      if (!this.isPointInBounds(pos, event)) {\n        return false;\n      }\n\n      var isZoomOut = this.isFunctionKeyPressed(event);\n      var newControllerState = this.controllerState.zoom({\n        pos: pos,\n        scale: isZoomOut ? 0.5 : 2\n      });\n      this.updateViewport(newControllerState, this._getTransitionProps(), {\n        isZooming: true,\n        isPanning: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onKeyDown\",\n    value: function _onKeyDown(event) {\n      if (!this.keyboard) {\n        return false;\n      }\n\n      var funcKey = this.isFunctionKeyPressed(event);\n      var controllerState = this.controllerState;\n      var newControllerState;\n      var interactionState = {};\n\n      switch (event.srcEvent.keyCode) {\n        case 189:\n          newControllerState = funcKey ? controllerState.zoomOut().zoomOut() : controllerState.zoomOut();\n          interactionState.isZooming = true;\n          break;\n\n        case 187:\n          newControllerState = funcKey ? controllerState.zoomIn().zoomIn() : controllerState.zoomIn();\n          interactionState.isZooming = true;\n          break;\n\n        case 37:\n          if (funcKey) {\n            newControllerState = controllerState.rotateLeft();\n            interactionState.isRotating = true;\n          } else {\n            newControllerState = controllerState.moveLeft();\n            interactionState.isPanning = true;\n          }\n\n          break;\n\n        case 39:\n          if (funcKey) {\n            newControllerState = controllerState.rotateRight();\n            interactionState.isRotating = true;\n          } else {\n            newControllerState = controllerState.moveRight();\n            interactionState.isPanning = true;\n          }\n\n          break;\n\n        case 38:\n          if (funcKey) {\n            newControllerState = controllerState.rotateUp();\n            interactionState.isRotating = true;\n          } else {\n            newControllerState = controllerState.moveUp();\n            interactionState.isPanning = true;\n          }\n\n          break;\n\n        case 40:\n          if (funcKey) {\n            newControllerState = controllerState.rotateDown();\n            interactionState.isRotating = true;\n          } else {\n            newControllerState = controllerState.moveDown();\n            interactionState.isPanning = true;\n          }\n\n          break;\n\n        default:\n          return false;\n      }\n\n      this.updateViewport(newControllerState, this._getTransitionProps(), interactionState);\n      return true;\n    }\n  }, {\n    key: \"_getTransitionProps\",\n    value: function _getTransitionProps() {\n      return NO_TRANSITION_PROPS;\n    }\n  }, {\n    key: \"events\",\n    set: function set(customEvents) {\n      this.toggleEvents(this._customEvents, false);\n      this.toggleEvents(customEvents, true);\n      this._customEvents = customEvents;\n      this.setProps(this.controllerStateProps);\n    }\n  }]);\n\n  return Controller;\n}();\n\nexport { Controller as default };","map":{"version":3,"sources":["../../../src/controllers/controller.js"],"names":["NO_TRANSITION_PROPS","transitionDuration","ZOOM_ACCEL","EVENT_TYPES","WHEEL","PAN","PINCH","DOUBLE_TAP","KEYBOARD","Controller","options","assert","isDragging","customEvents","event","ControllerState","Object","x","y","offsetCenter","pos","width","height","inside","srcEvent","Boolean","props","log","scrollZoom","dragPan","dragRotate","doubleClickZoom","touchZoom","touchRotate","keyboard","isInteractive","eventNames","enabled","newControllerState","extraProps","interactionState","viewState","changed","oldViewState","alternateMode","isPanning","isRotating","deltaX","deltaY","deltaScaleX","deltaScaleY","delta","scale","Math","isZooming","rotation","startPinchRotation","isZoomOut","funcKey","controllerState"],"mappings":";;AAoBA,OAAA,iBAAA,MAAA,sBAAA;AACA,OAAA,GAAA,MAAA,cAAA;AACA,OAAA,MAAA,MAAA,iBAAA;AAEA,IAAMA,mBAAmB,GAAG;AAC1BC,EAAAA,kBAAkB,EAAE;AADM,CAA5B;AAKA,IAAMC,UAAU,GAAhB,IAAA;AAEA,IAAMC,WAAW,GAAG;AAClBC,EAAAA,KAAK,EAAE,CADW,OACX,CADW;AAElBC,EAAAA,GAAG,EAAE,CAAA,UAAA,EAAA,SAAA,EAFa,QAEb,CAFa;AAGlBC,EAAAA,KAAK,EAAE,CAAA,YAAA,EAAA,WAAA,EAHW,UAGX,CAHW;AAIlBC,EAAAA,UAAU,EAAE,CAJM,WAIN,CAJM;AAKlBC,EAAAA,QAAQ,EAAE,CAAA,SAAA;AALQ,CAApB;;IAQqBC,U;AACnB,WAAA,UAAA,CAAA,eAAA,EAA2C;AAAA,QAAdC,OAAc,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,CAAA;;AACzCC,IAAAA,MAAM,CAANA,eAAM,CAANA;AACA,SAAA,eAAA,GAAA,eAAA;AACA,SAAA,eAAA,GAAA,IAAA;AACA,SAAA,oBAAA,GAAA,IAAA;AACA,SAAA,YAAA,GAAA,IAAA;AACA,SAAA,iBAAA,GAAyB,IAAA,iBAAA,CAAA,eAAA,EAAzB,OAAyB,CAAzB;AACA,SAAA,OAAA,GAAA,IAAA;AACA,SAAA,MAAA,GAAc;AACZC,MAAAA,UAAU,EAAE;AADA,KAAd;AAGA,SAAA,aAAA,GAAA,EAAA;AACA,SAAA,iBAAA,GAAA,IAAA;AACA,SAAA,aAAA,GAAA,IAAA;AACA,SAAA,SAAA,GAAA,KAAA;AAEA,SAAA,WAAA,GAAmB,KAAA,WAAA,CAAA,IAAA,CAAnB,IAAmB,CAAnB;AAEA,SAAA,QAAA,CAAA,OAAA;AACD;;;;+BAUU;AACT,WAAK,IAAL,SAAA,IAAwB,KAAxB,OAAA,EAAsC;AACpC,YAAI,KAAA,OAAA,CAAJ,SAAI,CAAJ,EAA6B;AAC3B,eAAA,YAAA,CAAA,GAAA,CAAA,SAAA,EAAiC,KAAjC,WAAA;AACD;AACF;;AACD,WAAA,iBAAA,CAAA,QAAA;AACD;;;gCAMWE,K,EAAO;AAAA,UACVC,eADU,GAAA,KAAA,eAAA;AAEjB,WAAA,eAAA,GAAuB,IAAA,eAAA,CACrBC,MAAM,CAANA,MAAAA,CAAAA,EAAAA,EAAkB,KAAlBA,oBAAAA,EAA6C,KAD/C,MACEA,CADqB,CAAvB;;AAIA,cAAQF,KAAK,CAAb,IAAA;AACE,aAAA,UAAA;AACE,iBAAO,KAAA,WAAA,CAAP,KAAO,CAAP;;AACF,aAAA,SAAA;AACE,iBAAO,KAAA,MAAA,CAAP,KAAO,CAAP;;AACF,aAAA,QAAA;AACE,iBAAO,KAAA,SAAA,CAAP,KAAO,CAAP;;AACF,aAAA,YAAA;AACE,iBAAO,KAAA,aAAA,CAAP,KAAO,CAAP;;AACF,aAAA,WAAA;AACE,iBAAO,KAAA,QAAA,CAAP,KAAO,CAAP;;AACF,aAAA,UAAA;AACE,iBAAO,KAAA,WAAA,CAAP,KAAO,CAAP;;AACF,aAAA,WAAA;AACE,iBAAO,KAAA,YAAA,CAAP,KAAO,CAAP;;AACF,aAAA,OAAA;AACE,iBAAO,KAAA,QAAA,CAAP,KAAO,CAAP;;AACF,aAAA,SAAA;AACE,iBAAO,KAAA,UAAA,CAAP,KAAO,CAAP;;AACF;AACE,iBAAA,KAAA;AApBJ;AAsBD;;;8BAISA,K,EAAO;AAAA,UAAA,qBAAA,GACA,KADA,oBAAA;AAAA,UACRG,CADQ,GAAA,qBAAA,CAAA,CAAA;AAAA,UACLC,CADK,GAAA,qBAAA,CAAA,CAAA;AAAA,UAERC,YAFQ,GAEQL,KAFR,CAAA,YAAA;AAGf,aAAO,CAACK,YAAY,CAAZA,CAAAA,GAAD,CAAA,EAAqBA,YAAY,CAAZA,CAAAA,GAA5B,CAAO,CAAP;AACD;;;oCAEeC,G,EAAKN,K,EAAO;AAAA,UAAA,sBAAA,GACF,KADE,oBAAA;AAAA,UACnBO,KADmB,GAAA,sBAAA,CAAA,KAAA;AAAA,UACZC,MADY,GAAA,sBAAA,CAAA,MAAA;;AAE1B,UAAIR,KAAK,IAAIA,KAAK,CAAlB,OAAA,EAA4B;AAC1B,eAAA,KAAA;AACD;;AAED,UAAMS,MAAM,GAAGH,GAAG,CAAHA,CAAG,CAAHA,IAAAA,CAAAA,IAAeA,GAAG,CAAHA,CAAG,CAAHA,IAAfA,KAAAA,IAAkCA,GAAG,CAAHA,CAAG,CAAHA,IAAlCA,CAAAA,IAAiDA,GAAG,CAAHA,CAAG,CAAHA,IAAhE,MAAA;;AACA,UAAIG,MAAM,IAAV,KAAA,EAAqB;AACnBT,QAAAA,KAAK,CAALA,eAAAA;AACD;;AACD,aAAA,MAAA;AACD;;;yCAEoBA,K,EAAO;AAAA,UACnBU,QADmB,GACPV,KADO,CAAA,QAAA;AAE1B,aAAOW,OAAO,CAACD,QAAQ,CAARA,OAAAA,IAAoBA,QAAQ,CAA5BA,MAAAA,IAAuCA,QAAQ,CAA/CA,OAAAA,IAA2DA,QAAQ,CAAlF,QAAc,CAAd;AACD;;;iCAEY;AACX,aAAO,KAAA,MAAA,CAAP,UAAA;AACD;;;6BAMQE,K,EAAO;AACd,UAAI,sBAAJ,KAAA,EAAiC;AAC/BC,QAAAA,GAAG,CAAHA,OAAAA,CAAAA,kBAAAA;AACD;;AACD,UAAI,uBAAJ,KAAA,EAAkC;AAChC,aAAA,iBAAA,GAAyBD,KAAK,CAA9B,iBAAA;AACD;;AACD,UAAI,mBAAJ,KAAA,EAA8B;AAC5B,aAAA,aAAA,GAAqBA,KAAK,CAA1B,aAAA;AACD;;AACD,WAAA,oBAAA,GAAA,KAAA;;AAEA,UAAI,kBAAA,KAAA,IAA2B,KAAA,YAAA,KAAsBA,KAAK,CAA1D,YAAA,EAAyE;AAEvE,aAAA,YAAA,GAAoBA,KAAK,CAAzB,YAAA;AACA,aAAA,OAAA,GAAA,EAAA;AACA,aAAA,YAAA,CAAkB,KAAlB,aAAA,EAAA,IAAA;AACD;;AAED,WAAA,iBAAA,CAAA,sBAAA,CAA8C,KAA9C,oBAAA;AAnBc,UAAA,iBAAA,GA8BVA,KA9BU,CAAA,UAAA;AAAA,UAuBZE,UAvBY,GAAA,iBAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,iBAAA;AAAA,UAAA,cAAA,GA8BVF,KA9BU,CAAA,OAAA;AAAA,UAwBZG,OAxBY,GAAA,cAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,cAAA;AAAA,UAAA,iBAAA,GA8BVH,KA9BU,CAAA,UAAA;AAAA,UAyBZI,UAzBY,GAAA,iBAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,iBAAA;AAAA,UAAA,qBAAA,GA8BVJ,KA9BU,CAAA,eAAA;AAAA,UA0BZK,eA1BY,GAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,qBAAA;AAAA,UAAA,gBAAA,GA8BVL,KA9BU,CAAA,SAAA;AAAA,UA2BZM,SA3BY,GAAA,gBAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,gBAAA;AAAA,UAAA,kBAAA,GA8BVN,KA9BU,CAAA,WAAA;AAAA,UA4BZO,WA5BY,GAAA,kBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,GAAA,kBAAA;AAAA,UAAA,eAAA,GA8BVP,KA9BU,CAAA,QAAA;AAAA,UA6BZQ,QA7BY,GAAA,eAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,eAAA;AAiCd,UAAMC,aAAa,GAAGV,OAAO,CAAC,KAA9B,iBAA6B,CAA7B;AACA,WAAA,YAAA,CAAkBtB,WAAW,CAA7B,KAAA,EAAqCgC,aAAa,IAAlD,UAAA;AACA,WAAA,YAAA,CAAkBhC,WAAW,CAA7B,GAAA,EAAmCgC,aAAa,KAAKN,OAAO,IAA5D,UAAgD,CAAhD;AACA,WAAA,YAAA,CAAkB1B,WAAW,CAA7B,KAAA,EAAqCgC,aAAa,KAAKH,SAAS,IAAhE,WAAkD,CAAlD;AACA,WAAA,YAAA,CAAkB7B,WAAW,CAA7B,UAAA,EAA0CgC,aAAa,IAAvD,eAAA;AACA,WAAA,YAAA,CAAkBhC,WAAW,CAA7B,QAAA,EAAwCgC,aAAa,IAArD,QAAA;AAGA,WAAA,UAAA,GAAA,UAAA;AACA,WAAA,OAAA,GAAA,OAAA;AACA,WAAA,UAAA,GAAA,UAAA;AACA,WAAA,eAAA,GAAA,eAAA;AACA,WAAA,SAAA,GAAA,SAAA;AACA,WAAA,WAAA,GAAA,WAAA;AACA,WAAA,QAAA,GAAA,QAAA;AACD;;;uCAGkB;AACjB,WAAA,iBAAA,CAAA,gBAAA;AACD;;;iCAEYC,U,EAAYC,O,EAAS;AAAA,UAAA,KAAA,GAAA,IAAA;;AAChC,UAAI,KAAJ,YAAA,EAAuB;AACrBD,QAAAA,UAAU,CAAVA,OAAAA,CAAmB,UAAA,SAAA,EAAa;AAC9B,cAAI,KAAI,CAAJ,OAAA,CAAA,SAAA,MAAJ,OAAA,EAAyC;AACvC,YAAA,KAAI,CAAJ,OAAA,CAAA,SAAA,IAAA,OAAA;;AACA,gBAAA,OAAA,EAAa;AACX,cAAA,KAAI,CAAJ,YAAA,CAAA,EAAA,CAAA,SAAA,EAAgC,KAAI,CAApC,WAAA;AADF,aAAA,MAEO;AACL,cAAA,KAAI,CAAJ,YAAA,CAAA,GAAA,CAAA,SAAA,EAAiC,KAAI,CAArC,WAAA;AACD;AACF;AARHA,SAAAA;AAUD;AACF;;;mCAMcE,kB,EAA4D;AAAA,UAAxCC,UAAwC,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAA3B,EAA2B;AAAA,UAAvBC,gBAAuB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;AACzE,UAAMC,SAAS,GAAGzB,MAAM,CAANA,MAAAA,CAAAA,EAAAA,EAAkBsB,kBAAkB,CAApCtB,gBAAkBsB,EAAlBtB,EAAlB,UAAkBA,CAAlB;AAGA,UAAM0B,OAAO,GAAG,KAAA,eAAA,KAAhB,kBAAA;;AAIA,UAAA,OAAA,EAAa;AACX,YAAMC,YAAY,GAAG,KAAA,eAAA,GAAuB,KAAA,eAAA,CAAvB,gBAAuB,EAAvB,GAArB,IAAA;;AACA,YAAI,KAAJ,iBAAA,EAA4B;AAC1B,eAAA,iBAAA,CAAuB;AAACF,YAAAA,SAAS,EAAV,SAAA;AAAYD,YAAAA,gBAAgB,EAA5B,gBAAA;AAA8BG,YAAAA,YAAY,EAAZA;AAA9B,WAAvB;AACD;AACF;;AAED3B,MAAAA,MAAM,CAANA,MAAAA,CAAc,KAAdA,MAAAA,EAA2BsB,kBAAkB,CAA7CtB,mBAA2BsB,EAA3BtB,EAAAA,gBAAAA;;AAEA,UAAI,KAAJ,aAAA,EAAwB;AACtB,aAAA,aAAA,CAAmB,KAAnB,MAAA;AACD;AACF;;;gCAIWF,K,EAAO;AACjB,UAAMM,GAAG,GAAG,KAAA,SAAA,CAAZ,KAAY,CAAZ;;AACA,UAAI,CAAC,KAAA,eAAA,CAAA,GAAA,EAAL,KAAK,CAAL,EAAuC;AACrC,eAAA,KAAA;AACD;;AACD,UAAMkB,kBAAkB,GAAG,KAAA,eAAA,CAAA,QAAA,CAA8B;AAAClB,QAAAA,GAAG,EAAHA;AAAD,OAA9B,EAAA,WAAA,CAAiD;AAACA,QAAAA,GAAG,EAAHA;AAAD,OAAjD,CAA3B;AACA,WAAA,cAAA,CAAA,kBAAA,EAAA,mBAAA,EAA6D;AAACR,QAAAA,UAAU,EAAE;AAAb,OAA7D;AACA,aAAA,IAAA;AACD;;;2BAGME,K,EAAO;AACZ,UAAI,CAAC,KAAL,UAAK,EAAL,EAAwB;AACtB,eAAA,KAAA;AACD;;AACD,UAAI8B,aAAa,GAAG,KAAA,oBAAA,CAAA,KAAA,KAAoC9B,KAAK,CAA7D,WAAA;AACA8B,MAAAA,aAAa,GAAG,KAAA,SAAA,GAAiB,CAAjB,aAAA,GAAhBA,aAAAA;AACA,aAAOA,aAAa,GAAG,KAAA,UAAA,CAAH,KAAG,CAAH,GAA4B,KAAA,YAAA,CAAhD,KAAgD,CAAhD;AACD;;;8BAGS9B,K,EAAO;AACf,UAAMwB,kBAAkB,GAAG,KAAA,eAAA,CAAA,MAAA,GAA3B,SAA2B,EAA3B;AACA,WAAA,cAAA,CAAA,kBAAA,EAAA,IAAA,EAA8C;AAC5C1B,QAAAA,UAAU,EADkC,KAAA;AAE5CiC,QAAAA,SAAS,EAFmC,KAAA;AAG5CC,QAAAA,UAAU,EAAE;AAHgC,OAA9C;AAKA,aAAA,IAAA;AACD;;;+BAIUhC,K,EAAO;AAChB,UAAI,CAAC,KAAL,OAAA,EAAmB;AACjB,eAAA,KAAA;AACD;;AACD,UAAMM,GAAG,GAAG,KAAA,SAAA,CAAZ,KAAY,CAAZ;AACA,UAAMkB,kBAAkB,GAAG,KAAA,eAAA,CAAA,GAAA,CAAyB;AAAClB,QAAAA,GAAG,EAAHA;AAAD,OAAzB,CAA3B;AACA,WAAA,cAAA,CAAA,kBAAA,EAAA,mBAAA,EAA6D;AAC3DR,QAAAA,UAAU,EADiD,IAAA;AAE3DiC,QAAAA,SAAS,EAAE;AAFgD,OAA7D;AAIA,aAAA,IAAA;AACD;;;iCAIY/B,K,EAAO;AAClB,UAAI,CAAC,KAAL,UAAA,EAAsB;AACpB,eAAA,KAAA;AACD;;AAHiB,UAKXiC,MALW,GAKOjC,KALP,CAAA,MAAA;AAAA,UAKHkC,MALG,GAKOlC,KALP,CAAA,MAAA;;AAAA,UAAA,sBAAA,GAMM,KAAA,eAAA,CANN,gBAMM,EANN;AAAA,UAMXO,KANW,GAAA,sBAAA,CAAA,KAAA;AAAA,UAMJC,MANI,GAAA,sBAAA,CAAA,MAAA;;AAQlB,UAAM2B,WAAW,GAAGF,MAAM,GAA1B,KAAA;AACA,UAAMG,WAAW,GAAGF,MAAM,GAA1B,MAAA;AAEA,UAAMV,kBAAkB,GAAG,KAAA,eAAA,CAAA,MAAA,CAA4B;AAACW,QAAAA,WAAW,EAAZ,WAAA;AAAcC,QAAAA,WAAW,EAAXA;AAAd,OAA5B,CAA3B;AACA,WAAA,cAAA,CAAA,kBAAA,EAAA,mBAAA,EAA6D;AAC3DtC,QAAAA,UAAU,EADiD,IAAA;AAE3DkC,QAAAA,UAAU,EAAE;AAF+C,OAA7D;AAIA,aAAA,IAAA;AACD;;;6BAGQhC,K,EAAO;AACd,UAAI,CAAC,KAAL,UAAA,EAAsB;AACpB,eAAA,KAAA;AACD;;AACDA,MAAAA,KAAK,CAALA,cAAAA;AAEA,UAAMM,GAAG,GAAG,KAAA,SAAA,CAAZ,KAAY,CAAZ;;AACA,UAAI,CAAC,KAAA,eAAA,CAAA,GAAA,EAAL,KAAK,CAAL,EAAuC;AACrC,eAAA,KAAA;AACD;;AATa,UAWP+B,KAXO,GAWErC,KAXF,CAAA,KAAA;AAcd,UAAIsC,KAAK,GAAG,KAAK,IAAIC,IAAI,CAAJA,GAAAA,CAAS,CAACA,IAAI,CAAJA,GAAAA,CAASF,KAAK,GAA7C,UAA+BE,CAAVA,CAAT,CAAZ;;AACA,UAAIF,KAAK,GAALA,CAAAA,IAAaC,KAAK,KAAtB,CAAA,EAA8B;AAC5BA,QAAAA,KAAK,GAAG,IAARA,KAAAA;AACD;;AAED,UAAMd,kBAAkB,GAAG,KAAA,eAAA,CAAA,IAAA,CAA0B;AAAClB,QAAAA,GAAG,EAAJ,GAAA;AAAMgC,QAAAA,KAAK,EAALA;AAAN,OAA1B,CAA3B;AACA,WAAA,cAAA,CAAA,kBAAA,EAAA,mBAAA,EAA6D;AAC3DE,QAAAA,SAAS,EADkD,IAAA;AAE3DT,QAAAA,SAAS,EAAE;AAFgD,OAA7D;AAIA,aAAA,IAAA;AACD;;;kCAGa/B,K,EAAO;AACnB,UAAMM,GAAG,GAAG,KAAA,SAAA,CAAZ,KAAY,CAAZ;;AACA,UAAI,CAAC,KAAA,eAAA,CAAA,GAAA,EAAL,KAAK,CAAL,EAAuC;AACrC,eAAA,KAAA;AACD;;AAED,UAAMkB,kBAAkB,GAAG,KAAA,eAAA,CAAA,SAAA,CAA+B;AAAClB,QAAAA,GAAG,EAAHA;AAAD,OAA/B,EAAA,WAAA,CAAkD;AAACA,QAAAA,GAAG,EAAHA;AAAD,OAAlD,CAA3B;AAEA,WAAA,MAAA,CAAA,kBAAA,GAAiCN,KAAK,CAAtC,QAAA;AACA,WAAA,cAAA,CAAA,kBAAA,EAAA,mBAAA,EAA6D;AAACF,QAAAA,UAAU,EAAE;AAAb,OAA7D;AACA,aAAA,IAAA;AACD;;;6BAGQE,K,EAAO;AACd,UAAI,CAAC,KAAD,SAAA,IAAmB,CAAC,KAAxB,WAAA,EAA0C;AACxC,eAAA,KAAA;AACD;;AACD,UAAI,CAAC,KAAL,UAAK,EAAL,EAAwB;AACtB,eAAA,KAAA;AACD;;AAED,UAAIwB,kBAAkB,GAAG,KAAzB,eAAA;;AACA,UAAI,KAAJ,SAAA,EAAoB;AAAA,YACXc,KADW,GACFtC,KADE,CAAA,KAAA;AAElB,YAAMM,GAAG,GAAG,KAAA,SAAA,CAAZ,KAAY,CAAZ;AACAkB,QAAAA,kBAAkB,GAAG,kBAAkB,CAAlB,IAAA,CAAwB;AAAClB,UAAAA,GAAG,EAAJ,GAAA;AAAMgC,UAAAA,KAAK,EAALA;AAAN,SAAxB,CAArBd;AACD;;AACD,UAAI,KAAJ,WAAA,EAAsB;AAAA,YACbiB,QADa,GACDzC,KADC,CAAA,QAAA;AAAA,YAEb0C,kBAFa,GAES,KAFT,MAES,CAFT,kBAAA;AAGpBlB,QAAAA,kBAAkB,GAAG,kBAAkB,CAAlB,MAAA,CAA0B;AAC7CW,UAAAA,WAAW,EAAE,EAAEM,QAAQ,GAAV,kBAAA,IAAmC;AADH,SAA1B,CAArBjB;AAGD;;AAED,WAAA,cAAA,CAAA,kBAAA,EAAA,mBAAA,EAA6D;AAC3D1B,QAAAA,UAAU,EADiD,IAAA;AAE3DiC,QAAAA,SAAS,EAAE,KAFgD,SAAA;AAG3DS,QAAAA,SAAS,EAAE,KAHgD,SAAA;AAI3DR,QAAAA,UAAU,EAAE,KAAKb;AAJ0C,OAA7D;AAMA,aAAA,IAAA;AACD;;;gCAGWnB,K,EAAO;AACjB,UAAMwB,kBAAkB,GAAG,KAAA,eAAA,CAAA,OAAA,GAA3B,SAA2B,EAA3B;AACA,WAAA,MAAA,CAAA,kBAAA,GAAA,CAAA;AACA,WAAA,cAAA,CAAA,kBAAA,EAAA,IAAA,EAA8C;AAC5C1B,QAAAA,UAAU,EADkC,KAAA;AAE5CiC,QAAAA,SAAS,EAFmC,KAAA;AAG5CS,QAAAA,SAAS,EAHmC,KAAA;AAI5CR,QAAAA,UAAU,EAAE;AAJgC,OAA9C;AAMA,aAAA,IAAA;AACD;;;iCAGYhC,K,EAAO;AAClB,UAAI,CAAC,KAAL,eAAA,EAA2B;AACzB,eAAA,KAAA;AACD;;AACD,UAAMM,GAAG,GAAG,KAAA,SAAA,CAAZ,KAAY,CAAZ;;AACA,UAAI,CAAC,KAAA,eAAA,CAAA,GAAA,EAAL,KAAK,CAAL,EAAuC;AACrC,eAAA,KAAA;AACD;;AAED,UAAMqC,SAAS,GAAG,KAAA,oBAAA,CAAlB,KAAkB,CAAlB;AAEA,UAAMnB,kBAAkB,GAAG,KAAA,eAAA,CAAA,IAAA,CAA0B;AAAClB,QAAAA,GAAG,EAAJ,GAAA;AAAMgC,QAAAA,KAAK,EAAEK,SAAS,GAAA,GAAA,GAAS;AAA/B,OAA1B,CAA3B;AACA,WAAA,cAAA,CAAA,kBAAA,EAAwC,KAAxC,mBAAwC,EAAxC,EAAoE;AAClEH,QAAAA,SAAS,EADyD,IAAA;AAElET,QAAAA,SAAS,EAAE;AAFuD,OAApE;AAIA,aAAA,IAAA;AACD;;;+BAIU/B,K,EAAO;AAChB,UAAI,CAAC,KAAL,QAAA,EAAoB;AAClB,eAAA,KAAA;AACD;;AACD,UAAM4C,OAAO,GAAG,KAAA,oBAAA,CAAhB,KAAgB,CAAhB;AAJgB,UAKTC,eALS,GAAA,KAAA,eAAA;AAMhB,UAAA,kBAAA;AACA,UAAMnB,gBAAgB,GAAtB,EAAA;;AAEA,cAAQ1B,KAAK,CAALA,QAAAA,CAAR,OAAA;AACE,aAAA,GAAA;AACEwB,UAAAA,kBAAkB,GAAGoB,OAAO,GACxBC,eAAe,CAAfA,OAAAA,GADwB,OACxBA,EADwB,GAExBA,eAAe,CAFnBrB,OAEIqB,EAFJrB;AAGAE,UAAAA,gBAAgB,CAAhBA,SAAAA,GAAAA,IAAAA;AACA;;AACF,aAAA,GAAA;AACEF,UAAAA,kBAAkB,GAAGoB,OAAO,GAAGC,eAAe,CAAfA,MAAAA,GAAH,MAAGA,EAAH,GAAuCA,eAAe,CAAlFrB,MAAmEqB,EAAnErB;AACAE,UAAAA,gBAAgB,CAAhBA,SAAAA,GAAAA,IAAAA;AACA;;AACF,aAAA,EAAA;AACE,cAAA,OAAA,EAAa;AACXF,YAAAA,kBAAkB,GAAGqB,eAAe,CAApCrB,UAAqBqB,EAArBrB;AACAE,YAAAA,gBAAgB,CAAhBA,UAAAA,GAAAA,IAAAA;AAFF,WAAA,MAGO;AACLF,YAAAA,kBAAkB,GAAGqB,eAAe,CAApCrB,QAAqBqB,EAArBrB;AACAE,YAAAA,gBAAgB,CAAhBA,SAAAA,GAAAA,IAAAA;AACD;;AACD;;AACF,aAAA,EAAA;AACE,cAAA,OAAA,EAAa;AACXF,YAAAA,kBAAkB,GAAGqB,eAAe,CAApCrB,WAAqBqB,EAArBrB;AACAE,YAAAA,gBAAgB,CAAhBA,UAAAA,GAAAA,IAAAA;AAFF,WAAA,MAGO;AACLF,YAAAA,kBAAkB,GAAGqB,eAAe,CAApCrB,SAAqBqB,EAArBrB;AACAE,YAAAA,gBAAgB,CAAhBA,SAAAA,GAAAA,IAAAA;AACD;;AACD;;AACF,aAAA,EAAA;AACE,cAAA,OAAA,EAAa;AACXF,YAAAA,kBAAkB,GAAGqB,eAAe,CAApCrB,QAAqBqB,EAArBrB;AACAE,YAAAA,gBAAgB,CAAhBA,UAAAA,GAAAA,IAAAA;AAFF,WAAA,MAGO;AACLF,YAAAA,kBAAkB,GAAGqB,eAAe,CAApCrB,MAAqBqB,EAArBrB;AACAE,YAAAA,gBAAgB,CAAhBA,SAAAA,GAAAA,IAAAA;AACD;;AACD;;AACF,aAAA,EAAA;AACE,cAAA,OAAA,EAAa;AACXF,YAAAA,kBAAkB,GAAGqB,eAAe,CAApCrB,UAAqBqB,EAArBrB;AACAE,YAAAA,gBAAgB,CAAhBA,UAAAA,GAAAA,IAAAA;AAFF,WAAA,MAGO;AACLF,YAAAA,kBAAkB,GAAGqB,eAAe,CAApCrB,QAAqBqB,EAArBrB;AACAE,YAAAA,gBAAgB,CAAhBA,SAAAA,GAAAA,IAAAA;AACD;;AACD;;AACF;AACE,iBAAA,KAAA;AAhDJ;;AAkDA,WAAA,cAAA,CAAA,kBAAA,EAAwC,KAAxC,mBAAwC,EAAxC,EAAA,gBAAA;AACA,aAAA,IAAA;AACD;;;0CAGqB;AAEpB,aAAA,mBAAA;AACD;;;sBA1aU3B,Y,EAAc;AACvB,WAAA,YAAA,CAAkB,KAAlB,aAAA,EAAA,KAAA;AACA,WAAA,YAAA,CAAA,YAAA,EAAA,IAAA;AACA,WAAA,aAAA,GAAA,YAAA;AAEA,WAAA,QAAA,CAAc,KAAd,oBAAA;AACD;;;;;;SA5BkBJ,U","sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport TransitionManager from './transition-manager';\nimport log from '../utils/log';\nimport assert from '../utils/assert';\n\nconst NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\n\n// EVENT HANDLING PARAMETERS\nconst ZOOM_ACCEL = 0.01;\n\nconst EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend'],\n  DOUBLE_TAP: ['doubletap'],\n  KEYBOARD: ['keydown']\n};\n\nexport default class Controller {\n  constructor(ControllerState, options = {}) {\n    assert(ControllerState);\n    this.ControllerState = ControllerState;\n    this.controllerState = null;\n    this.controllerStateProps = null;\n    this.eventManager = null;\n    this.transitionManager = new TransitionManager(ControllerState, options);\n    this._events = null;\n    this._state = {\n      isDragging: false\n    };\n    this._customEvents = [];\n    this.onViewStateChange = null;\n    this.onStateChange = null;\n    this.invertPan = false;\n\n    this.handleEvent = this.handleEvent.bind(this);\n\n    this.setProps(options);\n  }\n\n  set events(customEvents) {\n    this.toggleEvents(this._customEvents, false);\n    this.toggleEvents(customEvents, true);\n    this._customEvents = customEvents;\n    // Make sure default events are not overwritten\n    this.setProps(this.controllerStateProps);\n  }\n\n  finalize() {\n    for (const eventName in this._events) {\n      if (this._events[eventName]) {\n        this.eventManager.off(eventName, this.handleEvent);\n      }\n    }\n    this.transitionManager.finalize();\n  }\n\n  /**\n   * Callback for events\n   * @param {hammer.Event} event\n   */\n  handleEvent(event) {\n    const {ControllerState} = this;\n    this.controllerState = new ControllerState(\n      Object.assign({}, this.controllerStateProps, this._state)\n    );\n\n    switch (event.type) {\n      case 'panstart':\n        return this._onPanStart(event);\n      case 'panmove':\n        return this._onPan(event);\n      case 'panend':\n        return this._onPanEnd(event);\n      case 'pinchstart':\n        return this._onPinchStart(event);\n      case 'pinchmove':\n        return this._onPinch(event);\n      case 'pinchend':\n        return this._onPinchEnd(event);\n      case 'doubletap':\n        return this._onDoubleTap(event);\n      case 'wheel':\n        return this._onWheel(event);\n      case 'keydown':\n        return this._onKeyDown(event);\n      default:\n        return false;\n    }\n  }\n\n  /* Event utils */\n  // Event object: http://hammerjs.github.io/api/#event-object\n  getCenter(event) {\n    const {x, y} = this.controllerStateProps;\n    const {offsetCenter} = event;\n    return [offsetCenter.x - x, offsetCenter.y - y];\n  }\n\n  isPointInBounds(pos, event) {\n    const {width, height} = this.controllerStateProps;\n    if (event && event.handled) {\n      return false;\n    }\n\n    const inside = pos[0] >= 0 && pos[0] <= width && pos[1] >= 0 && pos[1] <= height;\n    if (inside && event) {\n      event.stopPropagation();\n    }\n    return inside;\n  }\n\n  isFunctionKeyPressed(event) {\n    const {srcEvent} = event;\n    return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n  }\n\n  isDragging() {\n    return this._state.isDragging;\n  }\n\n  /**\n   * Extract interactivity options\n   */\n  /* eslint-disable complexity, max-statements */\n  setProps(props) {\n    if ('onViewportChange' in props) {\n      log.removed('onViewportChange')();\n    }\n    if ('onViewStateChange' in props) {\n      this.onViewStateChange = props.onViewStateChange;\n    }\n    if ('onStateChange' in props) {\n      this.onStateChange = props.onStateChange;\n    }\n    this.controllerStateProps = props;\n\n    if ('eventManager' in props && this.eventManager !== props.eventManager) {\n      // EventManager has changed\n      this.eventManager = props.eventManager;\n      this._events = {};\n      this.toggleEvents(this._customEvents, true);\n    }\n\n    this.transitionManager.processViewStateChange(this.controllerStateProps);\n\n    // TODO - make sure these are not reset on every setProps\n    const {\n      scrollZoom = true,\n      dragPan = true,\n      dragRotate = true,\n      doubleClickZoom = true,\n      touchZoom = true,\n      touchRotate = false,\n      keyboard = true\n    } = props;\n\n    // Register/unregister events\n    const isInteractive = Boolean(this.onViewStateChange);\n    this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom);\n    this.toggleEvents(EVENT_TYPES.PAN, isInteractive && (dragPan || dragRotate));\n    this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && (touchZoom || touchRotate));\n    this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && doubleClickZoom);\n    this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard);\n\n    // Interaction toggles\n    this.scrollZoom = scrollZoom;\n    this.dragPan = dragPan;\n    this.dragRotate = dragRotate;\n    this.doubleClickZoom = doubleClickZoom;\n    this.touchZoom = touchZoom;\n    this.touchRotate = touchRotate;\n    this.keyboard = keyboard;\n  }\n  /* eslint-enable complexity, max-statements */\n\n  updateTransition() {\n    this.transitionManager.updateTransition();\n  }\n\n  toggleEvents(eventNames, enabled) {\n    if (this.eventManager) {\n      eventNames.forEach(eventName => {\n        if (this._events[eventName] !== enabled) {\n          this._events[eventName] = enabled;\n          if (enabled) {\n            this.eventManager.on(eventName, this.handleEvent);\n          } else {\n            this.eventManager.off(eventName, this.handleEvent);\n          }\n        }\n      });\n    }\n  }\n\n  // Private Methods\n\n  /* Callback util */\n  // formats map state and invokes callback function\n  updateViewport(newControllerState, extraProps = {}, interactionState = {}) {\n    const viewState = Object.assign({}, newControllerState.getViewportProps(), extraProps);\n\n    // TODO - to restore diffing, we need to include interactionState\n    const changed = this.controllerState !== newControllerState;\n    // const oldViewState = this.controllerState.getViewportProps();\n    // const changed = Object.keys(viewState).some(key => oldViewState[key] !== viewState[key]);\n\n    if (changed) {\n      const oldViewState = this.controllerState ? this.controllerState.getViewportProps() : null;\n      if (this.onViewStateChange) {\n        this.onViewStateChange({viewState, interactionState, oldViewState});\n      }\n    }\n\n    Object.assign(this._state, newControllerState.getInteractiveState(), interactionState);\n\n    if (this.onStateChange) {\n      this.onStateChange(this._state);\n    }\n  }\n\n  /* Event handlers */\n  // Default handler for the `panstart` event.\n  _onPanStart(event) {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n    const newControllerState = this.controllerState.panStart({pos}).rotateStart({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `panmove` event.\n  _onPan(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    let alternateMode = this.isFunctionKeyPressed(event) || event.rightButton;\n    alternateMode = this.invertPan ? !alternateMode : alternateMode;\n    return alternateMode ? this._onPanMove(event) : this._onPanRotate(event);\n  }\n\n  // Default handler for the `panend` event.\n  _onPanEnd(event) {\n    const newControllerState = this.controllerState.panEnd().rotateEnd();\n    this.updateViewport(newControllerState, null, {\n      isDragging: false,\n      isPanning: false,\n      isRotating: false\n    });\n    return true;\n  }\n\n  // Default handler for panning to move.\n  // Called by `_onPan` when panning without function key pressed.\n  _onPanMove(event) {\n    if (!this.dragPan) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    const newControllerState = this.controllerState.pan({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: true\n    });\n    return true;\n  }\n\n  // Default handler for panning to rotate.\n  // Called by `_onPan` when panning with function key pressed.\n  _onPanRotate(event) {\n    if (!this.dragRotate) {\n      return false;\n    }\n\n    const {deltaX, deltaY} = event;\n    const {width, height} = this.controllerState.getViewportProps();\n\n    const deltaScaleX = deltaX / width;\n    const deltaScaleY = deltaY / height;\n\n    const newControllerState = this.controllerState.rotate({deltaScaleX, deltaScaleY});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isRotating: true\n    });\n    return true;\n  }\n\n  // Default handler for the `wheel` event.\n  _onWheel(event) {\n    if (!this.scrollZoom) {\n      return false;\n    }\n    event.preventDefault();\n\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const {delta} = event;\n\n    // Map wheel delta to relative scale\n    let scale = 2 / (1 + Math.exp(-Math.abs(delta * ZOOM_ACCEL)));\n    if (delta < 0 && scale !== 0) {\n      scale = 1 / scale;\n    }\n\n    const newControllerState = this.controllerState.zoom({pos, scale});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isZooming: true,\n      isPanning: true\n    });\n    return true;\n  }\n\n  // Default handler for the `pinchstart` event.\n  _onPinchStart(event) {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const newControllerState = this.controllerState.zoomStart({pos}).rotateStart({pos});\n    // hack - hammer's `rotation` field doesn't seem to produce the correct angle\n    this._state.startPinchRotation = event.rotation;\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `pinch` event.\n  _onPinch(event) {\n    if (!this.touchZoom && !this.touchRotate) {\n      return false;\n    }\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    let newControllerState = this.controllerState;\n    if (this.touchZoom) {\n      const {scale} = event;\n      const pos = this.getCenter(event);\n      newControllerState = newControllerState.zoom({pos, scale});\n    }\n    if (this.touchRotate) {\n      const {rotation} = event;\n      const {startPinchRotation} = this._state;\n      newControllerState = newControllerState.rotate({\n        deltaScaleX: -(rotation - startPinchRotation) / 180\n      });\n    }\n\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: this.touchZoom,\n      isZooming: this.touchZoom,\n      isRotating: this.touchRotate\n    });\n    return true;\n  }\n\n  // Default handler for the `pinchend` event.\n  _onPinchEnd(event) {\n    const newControllerState = this.controllerState.zoomEnd().rotateEnd();\n    this._state.startPinchRotation = 0;\n    this.updateViewport(newControllerState, null, {\n      isDragging: false,\n      isPanning: false,\n      isZooming: false,\n      isRotating: false\n    });\n    return true;\n  }\n\n  // Default handler for the `doubletap` event.\n  _onDoubleTap(event) {\n    if (!this.doubleClickZoom) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const isZoomOut = this.isFunctionKeyPressed(event);\n\n    const newControllerState = this.controllerState.zoom({pos, scale: isZoomOut ? 0.5 : 2});\n    this.updateViewport(newControllerState, this._getTransitionProps(), {\n      isZooming: true,\n      isPanning: true\n    });\n    return true;\n  }\n\n  /* eslint-disable complexity, max-statements */\n  // Default handler for the `keydown` event\n  _onKeyDown(event) {\n    if (!this.keyboard) {\n      return false;\n    }\n    const funcKey = this.isFunctionKeyPressed(event);\n    const {controllerState} = this;\n    let newControllerState;\n    const interactionState = {};\n\n    switch (event.srcEvent.keyCode) {\n      case 189: // -\n        newControllerState = funcKey\n          ? controllerState.zoomOut().zoomOut()\n          : controllerState.zoomOut();\n        interactionState.isZooming = true;\n        break;\n      case 187: // +\n        newControllerState = funcKey ? controllerState.zoomIn().zoomIn() : controllerState.zoomIn();\n        interactionState.isZooming = true;\n        break;\n      case 37: // left\n        if (funcKey) {\n          newControllerState = controllerState.rotateLeft();\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveLeft();\n          interactionState.isPanning = true;\n        }\n        break;\n      case 39: // right\n        if (funcKey) {\n          newControllerState = controllerState.rotateRight();\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveRight();\n          interactionState.isPanning = true;\n        }\n        break;\n      case 38: // up\n        if (funcKey) {\n          newControllerState = controllerState.rotateUp();\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveUp();\n          interactionState.isPanning = true;\n        }\n        break;\n      case 40: // down\n        if (funcKey) {\n          newControllerState = controllerState.rotateDown();\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveDown();\n          interactionState.isPanning = true;\n        }\n        break;\n      default:\n        return false;\n    }\n    this.updateViewport(newControllerState, this._getTransitionProps(), interactionState);\n    return true;\n  }\n  /* eslint-enable complexity */\n\n  _getTransitionProps() {\n    // Transitions on double-tap and key-down are only supported by MapController\n    return NO_TRANSITION_PROPS;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}