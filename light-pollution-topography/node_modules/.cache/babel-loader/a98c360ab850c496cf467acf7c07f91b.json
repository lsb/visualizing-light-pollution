{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport { Layer, project32, picking, log } from '@deck.gl/core';\nimport { isWebGL2 } from '@luma.gl/core';\nimport { pbr } from '@luma.gl/shadertools';\nimport { ScenegraphNode, createGLTFObjects } from '@luma.gl/experimental';\nimport { waitForGLTFAssets } from './gltf-utils';\nimport { MATRIX_ATTRIBUTES, shouldComposeModelMatrix } from '../utils/matrix';\nimport vs from './scenegraph-layer-vertex.glsl';\nimport fs from './scenegraph-layer-fragment.glsl';\nvar DEFAULT_COLOR = [255, 255, 255, 255];\nvar defaultProps = {\n  scenegraph: {\n    type: 'object',\n    value: null,\n    async: true\n  },\n  getScene: function getScene(gltf) {\n    if (gltf && gltf.scenes) {\n      return _typeof(gltf.scene) === 'object' ? gltf.scene : gltf.scenes[gltf.scene || 0];\n    }\n\n    return gltf;\n  },\n  getAnimator: function getAnimator(scenegraph) {\n    return scenegraph && scenegraph.animator;\n  },\n  _animations: null,\n  sizeScale: {\n    type: 'number',\n    value: 1,\n    min: 0\n  },\n  sizeMinPixels: {\n    type: 'number',\n    min: 0,\n    value: 0\n  },\n  sizeMaxPixels: {\n    type: 'number',\n    min: 0,\n    value: Number.MAX_SAFE_INTEGER\n  },\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  _lighting: 'flat',\n  _imageBasedLightingEnvironment: null,\n  getOrientation: {\n    type: 'accessor',\n    value: [0, 0, 0]\n  },\n  getScale: {\n    type: 'accessor',\n    value: [1, 1, 1]\n  },\n  getTranslation: {\n    type: 'accessor',\n    value: [0, 0, 0]\n  },\n  getTransformMatrix: {\n    type: 'accessor',\n    value: []\n  }\n};\n\nvar ScenegraphLayer = function (_Layer) {\n  _inherits(ScenegraphLayer, _Layer);\n\n  function ScenegraphLayer() {\n    _classCallCheck(this, ScenegraphLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ScenegraphLayer).apply(this, arguments));\n  }\n\n  _createClass(ScenegraphLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      var attributeManager = this.getAttributeManager();\n      attributeManager.addInstanced({\n        instancePositions: {\n          size: 3,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          accessor: 'getPosition',\n          transition: true\n        },\n        instanceColors: {\n          type: 5121,\n          size: this.props.colorFormat.length,\n          accessor: 'getColor',\n          normalized: true,\n          defaultValue: DEFAULT_COLOR,\n          transition: true\n        },\n        instanceModelMatrix: MATRIX_ATTRIBUTES\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(params) {\n      _get(_getPrototypeOf(ScenegraphLayer.prototype), \"updateState\", this).call(this, params);\n\n      var props = params.props,\n          oldProps = params.oldProps;\n\n      if (props.scenegraph !== oldProps.scenegraph) {\n        this._updateScenegraph(props);\n      } else if (props._animations !== oldProps._animations) {\n        this._applyAnimationsProp(this.state.scenegraph, this.state.animator, props._animations);\n      }\n    }\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState() {\n      _get(_getPrototypeOf(ScenegraphLayer.prototype), \"finalizeState\", this).call(this);\n\n      this._deleteScenegraph();\n    }\n  }, {\n    key: \"_updateScenegraph\",\n    value: function _updateScenegraph(props) {\n      var _this = this;\n\n      var gl = this.context.gl;\n      var scenegraphData;\n\n      if (props.scenegraph instanceof ScenegraphNode) {\n        scenegraphData = {\n          scenes: [props.scenegraph]\n        };\n      } else if (props.scenegraph && !props.scenegraph.gltf) {\n        var gltf = props.scenegraph;\n        var gltfObjects = createGLTFObjects(gl, gltf, this.getLoadOptions());\n        scenegraphData = Object.assign({\n          gltf: gltf\n        }, gltfObjects);\n        waitForGLTFAssets(gltfObjects).then(function () {\n          return _this.setNeedsRedraw();\n        });\n      } else {\n        log.deprecated('ScenegraphLayer.props.scenegraph', 'Use GLTFLoader instead of GLTFScenegraphLoader')();\n        scenegraphData = props.scenegraph;\n      }\n\n      var options = {\n        layer: this,\n        gl: gl\n      };\n      var scenegraph = props.getScene(scenegraphData, options);\n      var animator = props.getAnimator(scenegraphData, options);\n\n      if (scenegraph instanceof ScenegraphNode) {\n        this._deleteScenegraph();\n\n        this._applyAllAttributes(scenegraph);\n\n        this._applyAnimationsProp(scenegraph, animator, props._animations);\n\n        this.setState({\n          scenegraph: scenegraph,\n          animator: animator\n        });\n      } else if (scenegraph !== null) {\n        log.warn('invalid scenegraph:', scenegraph)();\n      }\n    }\n  }, {\n    key: \"_applyAllAttributes\",\n    value: function _applyAllAttributes(scenegraph) {\n      var _this2 = this;\n\n      if (this.state.attributesAvailable) {\n        var allAttributes = this.getAttributeManager().getAttributes();\n        scenegraph.traverse(function (model) {\n          _this2._setModelAttributes(model.model, allAttributes);\n        });\n      }\n    }\n  }, {\n    key: \"_applyAnimationsProp\",\n    value: function _applyAnimationsProp(scenegraph, animator, animationsProp) {\n      if (!scenegraph || !animator || !animationsProp) {\n        return;\n      }\n\n      var animations = animator.getAnimations();\n      Object.keys(animationsProp).sort().forEach(function (key) {\n        var value = animationsProp[key];\n\n        if (key === '*') {\n          animations.forEach(function (animation) {\n            Object.assign(animation, value);\n          });\n        } else if (Number.isFinite(Number(key))) {\n          var number = Number(key);\n\n          if (number >= 0 && number < animations.length) {\n            Object.assign(animations[number], value);\n          } else {\n            log.warn(\"animation \".concat(key, \" not found\"))();\n          }\n        } else {\n          var findResult = animations.find(function (_ref) {\n            var name = _ref.name;\n            return name === key;\n          });\n\n          if (findResult) {\n            Object.assign(findResult, value);\n          } else {\n            log.warn(\"animation \".concat(key, \" not found\"))();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"_deleteScenegraph\",\n    value: function _deleteScenegraph() {\n      var scenegraph = this.state.scenegraph;\n\n      if (scenegraph instanceof ScenegraphNode) {\n        scenegraph[\"delete\"]();\n      }\n    }\n  }, {\n    key: \"getLoadOptions\",\n    value: function getLoadOptions() {\n      var modules = [project32, picking];\n      var _this$props = this.props,\n          _lighting = _this$props._lighting,\n          _imageBasedLightingEnvironment = _this$props._imageBasedLightingEnvironment;\n\n      if (_lighting === 'pbr') {\n        modules.push(pbr);\n      }\n\n      var env = null;\n\n      if (_imageBasedLightingEnvironment) {\n        if (typeof _imageBasedLightingEnvironment === 'function') {\n          env = _imageBasedLightingEnvironment({\n            gl: this.context.gl,\n            layer: this\n          });\n        } else {\n          env = _imageBasedLightingEnvironment;\n        }\n      }\n\n      return {\n        gl: this.context.gl,\n        waitForFullLoad: true,\n        imageBasedLightingEnvironment: env,\n        modelOptions: {\n          vs: vs,\n          fs: fs,\n          modules: modules,\n          isInstanced: true,\n          transpileToGLSL100: !isWebGL2(this.context.gl)\n        },\n        useTangents: false\n      };\n    }\n  }, {\n    key: \"updateAttributes\",\n    value: function updateAttributes(changedAttributes) {\n      var _this3 = this;\n\n      this.setState({\n        attributesAvailable: true\n      });\n      if (!this.state.scenegraph) return;\n      this.state.scenegraph.traverse(function (model) {\n        _this3._setModelAttributes(model.model, changedAttributes);\n      });\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref2) {\n      var _ref2$moduleParameter = _ref2.moduleParameters,\n          moduleParameters = _ref2$moduleParameter === void 0 ? null : _ref2$moduleParameter,\n          _ref2$parameters = _ref2.parameters,\n          parameters = _ref2$parameters === void 0 ? {} : _ref2$parameters,\n          context = _ref2.context;\n      if (!this.state.scenegraph) return;\n\n      if (this.props._animations && this.state.animator) {\n        this.state.animator.animate(context.animationProps.time);\n      }\n\n      var viewport = this.context.viewport;\n      var _this$props2 = this.props,\n          sizeScale = _this$props2.sizeScale,\n          sizeMinPixels = _this$props2.sizeMinPixels,\n          sizeMaxPixels = _this$props2.sizeMaxPixels,\n          opacity = _this$props2.opacity,\n          coordinateSystem = _this$props2.coordinateSystem;\n      var numInstances = this.getNumInstances();\n      this.state.scenegraph.traverse(function (model, _ref3) {\n        var worldMatrix = _ref3.worldMatrix;\n        model.model.setInstanceCount(numInstances);\n        model.updateModuleSettings(moduleParameters);\n        model.draw({\n          parameters: parameters,\n          uniforms: {\n            sizeScale: sizeScale,\n            opacity: opacity,\n            sizeMinPixels: sizeMinPixels,\n            sizeMaxPixels: sizeMaxPixels,\n            composeModelMatrix: shouldComposeModelMatrix(viewport, coordinateSystem),\n            sceneModelMatrix: worldMatrix,\n            u_Camera: model.model.getUniforms().project_uCameraPosition\n          }\n        });\n      });\n    }\n  }]);\n\n  return ScenegraphLayer;\n}(Layer);\n\nexport { ScenegraphLayer as default };\nScenegraphLayer.layerName = 'ScenegraphLayer';\nScenegraphLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/scenegraph-layer/scenegraph-layer.js"],"names":["DEFAULT_COLOR","defaultProps","scenegraph","type","value","async","getScene","gltf","getAnimator","_animations","sizeScale","min","sizeMinPixels","sizeMaxPixels","Number","MAX_SAFE_INTEGER","getPosition","x","getColor","_lighting","_imageBasedLightingEnvironment","getOrientation","getScale","getTranslation","getTransformMatrix","ScenegraphLayer","Layer","attributeManager","instancePositions","size","fp64","accessor","transition","instanceColors","normalized","defaultValue","instanceModelMatrix","MATRIX_ATTRIBUTES","params","props","oldProps","gl","scenegraphData","scenes","gltfObjects","createGLTFObjects","waitForGLTFAssets","log","options","layer","animator","allAttributes","model","animationsProp","animations","Object","key","number","findResult","name","modules","env","waitForFullLoad","imageBasedLightingEnvironment","modelOptions","vs","fs","isInstanced","transpileToGLSL100","isWebGL2","useTangents","changedAttributes","attributesAvailable","moduleParameters","parameters","context","viewport","opacity","coordinateSystem","numInstances","worldMatrix","uniforms","composeModelMatrix","shouldComposeModelMatrix","sceneModelMatrix","u_Camera","project_uCameraPosition"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, picking, log} from '@deck.gl/core';\nimport {isWebGL2} from '@luma.gl/core';\nimport {pbr} from '@luma.gl/shadertools';\nimport {ScenegraphNode, createGLTFObjects} from '@luma.gl/experimental';\nimport GL from '@luma.gl/constants';\nimport {waitForGLTFAssets} from './gltf-utils';\n\nimport {MATRIX_ATTRIBUTES, shouldComposeModelMatrix} from '../utils/matrix';\n\nimport vs from './scenegraph-layer-vertex.glsl';\nimport fs from './scenegraph-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [255, 255, 255, 255];\n\nconst defaultProps = {\n  scenegraph: {type: 'object', value: null, async: true},\n  getScene: gltf => {\n    if (gltf && gltf.scenes) {\n      // gltf post processor replaces `gltf.scene` number with the scene `object`\n      return typeof gltf.scene === 'object' ? gltf.scene : gltf.scenes[gltf.scene || 0];\n    }\n    return gltf;\n  },\n  getAnimator: scenegraph => scenegraph && scenegraph.animator,\n  _animations: null,\n\n  sizeScale: {type: 'number', value: 1, min: 0},\n  sizeMinPixels: {type: 'number', min: 0, value: 0},\n  sizeMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER},\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  // flat or pbr\n  _lighting: 'flat',\n  // _lighting must be pbr for this to work\n  _imageBasedLightingEnvironment: null,\n\n  // yaw, pitch and roll are in degrees\n  // https://en.wikipedia.org/wiki/Euler_angles\n  // [pitch, yaw, roll]\n  getOrientation: {type: 'accessor', value: [0, 0, 0]},\n  getScale: {type: 'accessor', value: [1, 1, 1]},\n  getTranslation: {type: 'accessor', value: [0, 0, 0]},\n  // 4x4 matrix\n  getTransformMatrix: {type: 'accessor', value: []}\n};\n\nexport default class ScenegraphLayer extends Layer {\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        accessor: 'getPosition',\n        transition: true\n      },\n      instanceColors: {\n        type: GL.UNSIGNED_BYTE,\n        size: this.props.colorFormat.length,\n        accessor: 'getColor',\n        normalized: true,\n        defaultValue: DEFAULT_COLOR,\n        transition: true\n      },\n      instanceModelMatrix: MATRIX_ATTRIBUTES\n    });\n  }\n\n  updateState(params) {\n    super.updateState(params);\n    const {props, oldProps} = params;\n\n    if (props.scenegraph !== oldProps.scenegraph) {\n      this._updateScenegraph(props);\n    } else if (props._animations !== oldProps._animations) {\n      this._applyAnimationsProp(this.state.scenegraph, this.state.animator, props._animations);\n    }\n  }\n\n  finalizeState() {\n    super.finalizeState();\n    this._deleteScenegraph();\n  }\n\n  _updateScenegraph(props) {\n    const {gl} = this.context;\n    let scenegraphData;\n    if (props.scenegraph instanceof ScenegraphNode) {\n      // Signature 1: props.scenegraph is a proper luma.gl Scenegraph\n      scenegraphData = {scenes: [props.scenegraph]};\n    } else if (props.scenegraph && !props.scenegraph.gltf) {\n      // Converts loaders.gl gltf to luma.gl scenegraph using the undocumented @luma.gl/experimental function\n      const gltf = props.scenegraph;\n      const gltfObjects = createGLTFObjects(gl, gltf, this.getLoadOptions());\n      scenegraphData = Object.assign({gltf}, gltfObjects);\n\n      waitForGLTFAssets(gltfObjects).then(() => this.setNeedsRedraw());\n    } else {\n      // DEPRECATED PATH: Assumes this data was loaded through GLTFScenegraphLoader\n      log.deprecated(\n        'ScenegraphLayer.props.scenegraph',\n        'Use GLTFLoader instead of GLTFScenegraphLoader'\n      )();\n      scenegraphData = props.scenegraph;\n    }\n\n    const options = {layer: this, gl};\n    const scenegraph = props.getScene(scenegraphData, options);\n    const animator = props.getAnimator(scenegraphData, options);\n\n    if (scenegraph instanceof ScenegraphNode) {\n      this._deleteScenegraph();\n      this._applyAllAttributes(scenegraph);\n      this._applyAnimationsProp(scenegraph, animator, props._animations);\n      this.setState({scenegraph, animator});\n    } else if (scenegraph !== null) {\n      log.warn('invalid scenegraph:', scenegraph)();\n    }\n  }\n\n  _applyAllAttributes(scenegraph) {\n    if (this.state.attributesAvailable) {\n      const allAttributes = this.getAttributeManager().getAttributes();\n      scenegraph.traverse(model => {\n        this._setModelAttributes(model.model, allAttributes);\n      });\n    }\n  }\n\n  _applyAnimationsProp(scenegraph, animator, animationsProp) {\n    if (!scenegraph || !animator || !animationsProp) {\n      return;\n    }\n\n    const animations = animator.getAnimations();\n\n    // sort() to ensure '*' comes first so that other values can override\n    Object.keys(animationsProp)\n      .sort()\n      .forEach(key => {\n        // Key can be:\n        //  - number for index number\n        //  - name for animation name\n        //  - * to affect all animations\n        const value = animationsProp[key];\n\n        if (key === '*') {\n          animations.forEach(animation => {\n            Object.assign(animation, value);\n          });\n        } else if (Number.isFinite(Number(key))) {\n          const number = Number(key);\n          if (number >= 0 && number < animations.length) {\n            Object.assign(animations[number], value);\n          } else {\n            log.warn(`animation ${key} not found`)();\n          }\n        } else {\n          const findResult = animations.find(({name}) => name === key);\n          if (findResult) {\n            Object.assign(findResult, value);\n          } else {\n            log.warn(`animation ${key} not found`)();\n          }\n        }\n      });\n  }\n\n  _deleteScenegraph() {\n    const {scenegraph} = this.state;\n    if (scenegraph instanceof ScenegraphNode) {\n      scenegraph.delete();\n    }\n  }\n\n  getLoadOptions() {\n    const modules = [project32, picking];\n    const {_lighting, _imageBasedLightingEnvironment} = this.props;\n\n    if (_lighting === 'pbr') {\n      modules.push(pbr);\n    }\n\n    let env = null;\n    if (_imageBasedLightingEnvironment) {\n      if (typeof _imageBasedLightingEnvironment === 'function') {\n        env = _imageBasedLightingEnvironment({gl: this.context.gl, layer: this});\n      } else {\n        env = _imageBasedLightingEnvironment;\n      }\n    }\n\n    return {\n      gl: this.context.gl,\n      waitForFullLoad: true,\n      imageBasedLightingEnvironment: env,\n      modelOptions: {\n        vs,\n        fs,\n        modules,\n        isInstanced: true,\n        transpileToGLSL100: !isWebGL2(this.context.gl)\n      },\n      // tangents are not supported\n      useTangents: false\n    };\n  }\n\n  updateAttributes(changedAttributes) {\n    this.setState({attributesAvailable: true});\n    if (!this.state.scenegraph) return;\n\n    this.state.scenegraph.traverse(model => {\n      this._setModelAttributes(model.model, changedAttributes);\n    });\n  }\n\n  draw({moduleParameters = null, parameters = {}, context}) {\n    if (!this.state.scenegraph) return;\n\n    if (this.props._animations && this.state.animator) {\n      this.state.animator.animate(context.animationProps.time);\n    }\n\n    const {viewport} = this.context;\n    const {sizeScale, sizeMinPixels, sizeMaxPixels, opacity, coordinateSystem} = this.props;\n    const numInstances = this.getNumInstances();\n    this.state.scenegraph.traverse((model, {worldMatrix}) => {\n      model.model.setInstanceCount(numInstances);\n      model.updateModuleSettings(moduleParameters);\n      model.draw({\n        parameters,\n        uniforms: {\n          sizeScale,\n          opacity,\n          sizeMinPixels,\n          sizeMaxPixels,\n          composeModelMatrix: shouldComposeModelMatrix(viewport, coordinateSystem),\n          sceneModelMatrix: worldMatrix,\n          // Needed for PBR (TODO: find better way to get it)\n          u_Camera: model.model.getUniforms().project_uCameraPosition\n        }\n      });\n    });\n  }\n}\n\nScenegraphLayer.layerName = 'ScenegraphLayer';\nScenegraphLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}