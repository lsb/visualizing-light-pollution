{"ast":null,"code":"import _regeneratorRuntime from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _construct from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/construct\";\nimport _slicedToArray from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _createSuper from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _inherits from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _asyncIterator from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncIterator\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Column } from './column';\nimport { Schema } from './schema';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from './recordbatch';\nimport { RecordBatchReader } from './ipc/reader';\nimport { Struct } from './type';\nimport { selectColumnArgs, selectArgs } from './util/args';\nimport { isPromise, isIterable, isAsyncIterable } from './util/compat';\nimport { RecordBatchFileWriter, RecordBatchStreamWriter } from './ipc/writer';\nimport { distributeColumnsIntoRecordBatches, distributeVectorsIntoRecordBatches } from './util/recordbatch';\nimport { Chunked, StructVector } from './vector/index';\nexport var Table = /*#__PURE__*/function (_Chunked) {\n  _inherits(Table, _Chunked);\n\n  var _super = _createSuper(Table);\n\n  function Table() {\n    var _this;\n\n    _classCallCheck(this, Table);\n\n    var schema = null;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (args[0] instanceof Schema) {\n      schema = args.shift();\n    }\n\n    var chunks = selectArgs(RecordBatch, args);\n\n    if (!schema && !(schema = chunks[0] && chunks[0].schema)) {\n      throw new TypeError('Table must be initialized with a Schema or at least one RecordBatch');\n    }\n\n    chunks[0] || (chunks[0] = new _InternalEmptyPlaceholderRecordBatch(schema));\n    _this = _super.call(this, new Struct(schema.fields), chunks);\n    _this._schema = schema;\n    _this._chunks = chunks;\n    return _this;\n  }\n  /** @nocollapse */\n\n\n  _createClass(Table, [{\n    key: \"clone\",\n    value: function clone() {\n      var chunks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._chunks;\n      return new Table(this._schema, chunks);\n    }\n  }, {\n    key: \"getColumn\",\n    value: function getColumn(name) {\n      return this.getColumnAt(this.getColumnIndex(name));\n    }\n  }, {\n    key: \"getColumnAt\",\n    value: function getColumnAt(index) {\n      return this.getChildAt(index);\n    }\n  }, {\n    key: \"getColumnIndex\",\n    value: function getColumnIndex(name) {\n      return this._schema.fields.findIndex(function (f) {\n        return f.name === name;\n      });\n    }\n  }, {\n    key: \"getChildAt\",\n    value: function getChildAt(index) {\n      if (index < 0 || index >= this.numChildren) {\n        return null;\n      }\n\n      var field, child;\n      var fields = this._schema.fields;\n      var columns = this._children || (this._children = []);\n\n      if (child = columns[index]) {\n        return child;\n      }\n\n      if (field = fields[index]) {\n        var chunks = this._chunks.map(function (chunk) {\n          return chunk.getChildAt(index);\n        }).filter(function (vec) {\n          return vec != null;\n        });\n\n        if (chunks.length > 0) {\n          return columns[index] = new Column(field, chunks);\n        }\n      }\n\n      return null;\n    } // @ts-ignore\n\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      var encoding = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'binary';\n      var stream = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var Writer = !stream ? RecordBatchFileWriter : RecordBatchStreamWriter;\n      return Writer.writeAll(this).toUint8Array(true);\n    }\n  }, {\n    key: \"count\",\n    value: function count() {\n      return this._length;\n    }\n  }, {\n    key: \"select\",\n    value: function select() {\n      var nameToIndex = this._schema.fields.reduce(function (m, f, i) {\n        return m.set(f.name, i);\n      }, new Map());\n\n      for (var _len2 = arguments.length, columnNames = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        columnNames[_key2] = arguments[_key2];\n      }\n\n      return this.selectAt.apply(this, _toConsumableArray(columnNames.map(function (columnName) {\n        return nameToIndex.get(columnName);\n      }).filter(function (x) {\n        return x > -1;\n      })));\n    }\n  }, {\n    key: \"selectAt\",\n    value: function selectAt() {\n      var _this$_schema;\n\n      for (var _len3 = arguments.length, columnIndices = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        columnIndices[_key3] = arguments[_key3];\n      }\n\n      var schema = (_this$_schema = this._schema).selectAt.apply(_this$_schema, columnIndices);\n\n      return new Table(schema, this._chunks.map(function (_ref) {\n        var length = _ref.length,\n            childData = _ref.data.childData;\n        return new RecordBatch(schema, length, columnIndices.map(function (i) {\n          return childData[i];\n        }).filter(Boolean));\n      }));\n    }\n  }, {\n    key: \"assign\",\n    value: function assign(other) {\n      var _this2 = this;\n\n      var fields = this._schema.fields;\n\n      var _other$schema$fields$ = other.schema.fields.reduce(function (memo, f2, newIdx) {\n        var _memo = _slicedToArray(memo, 2),\n            indices = _memo[0],\n            oldToNew = _memo[1];\n\n        var i = fields.findIndex(function (f) {\n          return f.name === f2.name;\n        });\n        ~i ? oldToNew[i] = newIdx : indices.push(newIdx);\n        return memo;\n      }, [[], []]),\n          _other$schema$fields$2 = _slicedToArray(_other$schema$fields$, 2),\n          indices = _other$schema$fields$2[0],\n          oldToNew = _other$schema$fields$2[1];\n\n      var schema = this._schema.assign(other.schema);\n\n      var columns = [].concat(_toConsumableArray(fields.map(function (_f, i, _fs) {\n        var j = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : oldToNew[i];\n        return j === undefined ? _this2.getColumnAt(i) : other.getColumnAt(j);\n      })), _toConsumableArray(indices.map(function (i) {\n        return other.getColumnAt(i);\n      }))).filter(Boolean);\n      return _construct(Table, _toConsumableArray(distributeVectorsIntoRecordBatches(schema, columns)));\n    }\n  }, {\n    key: \"schema\",\n    get: function get() {\n      return this._schema;\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this._length;\n    }\n  }, {\n    key: \"chunks\",\n    get: function get() {\n      return this._chunks;\n    }\n  }, {\n    key: \"numCols\",\n    get: function get() {\n      return this._numChildren;\n    }\n  }], [{\n    key: \"empty\",\n    value: function empty() {\n      var schema = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Schema([]);\n      return new Table(schema, []);\n    }\n    /** @nocollapse */\n\n  }, {\n    key: \"from\",\n    value: function from(input) {\n      if (!input) {\n        return Table.empty();\n      }\n\n      if (typeof input === 'object') {\n        var table = isIterable(input['values']) ? tableFromIterable(input) : isAsyncIterable(input['values']) ? tableFromAsyncIterable(input) : null;\n\n        if (table !== null) {\n          return table;\n        }\n      }\n\n      var reader = RecordBatchReader.from(input);\n\n      if (isPromise(reader)) {\n        return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.t0 = Table;\n                  _context.next = 3;\n                  return reader;\n\n                case 3:\n                  _context.t1 = _context.sent;\n                  _context.next = 6;\n                  return _context.t0.from.call(_context.t0, _context.t1);\n\n                case 6:\n                  return _context.abrupt(\"return\", _context.sent);\n\n                case 7:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }))();\n      }\n\n      if (reader.isSync() && (reader = reader.open())) {\n        return !reader.schema ? Table.empty() : new Table(reader.schema, _toConsumableArray(reader));\n      }\n\n      return function () {\n        var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(opening) {\n          var reader, schema, batches, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, batch;\n\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return opening;\n\n                case 2:\n                  reader = _context2.sent;\n                  schema = reader.schema;\n                  batches = [];\n\n                  if (!schema) {\n                    _context2.next = 40;\n                    break;\n                  }\n\n                  _iteratorNormalCompletion = true;\n                  _didIteratorError = false;\n                  _context2.prev = 8;\n                  _iterator = _asyncIterator(reader);\n\n                case 10:\n                  _context2.next = 12;\n                  return _iterator.next();\n\n                case 12:\n                  _step = _context2.sent;\n                  _iteratorNormalCompletion = _step.done;\n                  _context2.next = 16;\n                  return _step.value;\n\n                case 16:\n                  _value = _context2.sent;\n\n                  if (_iteratorNormalCompletion) {\n                    _context2.next = 23;\n                    break;\n                  }\n\n                  batch = _value;\n                  batches.push(batch);\n\n                case 20:\n                  _iteratorNormalCompletion = true;\n                  _context2.next = 10;\n                  break;\n\n                case 23:\n                  _context2.next = 29;\n                  break;\n\n                case 25:\n                  _context2.prev = 25;\n                  _context2.t0 = _context2[\"catch\"](8);\n                  _didIteratorError = true;\n                  _iteratorError = _context2.t0;\n\n                case 29:\n                  _context2.prev = 29;\n                  _context2.prev = 30;\n\n                  if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                    _context2.next = 34;\n                    break;\n                  }\n\n                  _context2.next = 34;\n                  return _iterator.return();\n\n                case 34:\n                  _context2.prev = 34;\n\n                  if (!_didIteratorError) {\n                    _context2.next = 37;\n                    break;\n                  }\n\n                  throw _iteratorError;\n\n                case 37:\n                  return _context2.finish(34);\n\n                case 38:\n                  return _context2.finish(29);\n\n                case 39:\n                  return _context2.abrupt(\"return\", new Table(schema, batches));\n\n                case 40:\n                  return _context2.abrupt(\"return\", Table.empty());\n\n                case 41:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, null, [[8, 25, 29, 39], [30,, 34, 38]]);\n        }));\n\n        return function (_x) {\n          return _ref3.apply(this, arguments);\n        };\n      }()(reader.open());\n    }\n    /** @nocollapse */\n\n  }, {\n    key: \"fromAsync\",\n    value: function () {\n      var _fromAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(source) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return Table.from(source);\n\n              case 2:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function fromAsync(_x2) {\n        return _fromAsync.apply(this, arguments);\n      }\n\n      return fromAsync;\n    }()\n    /** @nocollapse */\n\n  }, {\n    key: \"fromStruct\",\n    value: function fromStruct(vector) {\n      return Table.new(vector.data.childData, vector.type.children);\n    }\n    /** @nocollapse */\n\n  }, {\n    key: \"new\",\n    value: function _new() {\n      for (var _len4 = arguments.length, cols = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        cols[_key4] = arguments[_key4];\n      }\n\n      return _construct(Table, _toConsumableArray(distributeColumnsIntoRecordBatches(selectColumnArgs(cols))));\n    }\n  }]);\n\n  return Table;\n}(Chunked);\n\nfunction tableFromIterable(input) {\n  var type = input.type;\n\n  if (type instanceof Struct) {\n    return Table.fromStruct(StructVector.from(input));\n  }\n\n  return null;\n}\n\nfunction tableFromAsyncIterable(input) {\n  var type = input.type;\n\n  if (type instanceof Struct) {\n    return StructVector.from(input).then(function (vector) {\n      return Table.fromStruct(vector);\n    });\n  }\n\n  return null;\n}","map":{"version":3,"sources":["table.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Column } from './column';\nimport { Schema, Field } from './schema';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from './recordbatch';\nimport { DataFrame } from './compute/dataframe';\nimport { RecordBatchReader } from './ipc/reader';\nimport { DataType, RowLike, Struct } from './type';\nimport { selectColumnArgs, selectArgs } from './util/args';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { isPromise, isIterable, isAsyncIterable } from './util/compat';\nimport { RecordBatchFileWriter, RecordBatchStreamWriter } from './ipc/writer';\nimport { distributeColumnsIntoRecordBatches, distributeVectorsIntoRecordBatches } from './util/recordbatch';\nimport { Vector, Chunked, StructVector, VectorBuilderOptions, VectorBuilderOptionsAsync } from './vector/index';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = Data<T[keyof T]>[] | Vector<T[keyof T]>[];\ntype Columns<T extends { [key: string]: DataType }> = Column<T[keyof T]>[] | Column<T[keyof T]>[][];\n\nexport interface Table<T extends { [key: string]: DataType } = any> {\n\n    get(index: number): Struct<T>['TValue'];\n    [Symbol.iterator](): IterableIterator<RowLike<T>>;\n\n    slice(begin?: number, end?: number): Table<T>;\n    concat(...others: Vector<Struct<T>>[]): Table<T>;\n    clone(chunks?: RecordBatch<T>[], offsets?: Uint32Array): Table<T>;\n\n    scan(next: import('./compute/dataframe').NextFunc, bind?: import('./compute/dataframe').BindFunc): void;\n    scanReverse(next: import('./compute/dataframe').NextFunc, bind?: import('./compute/dataframe').BindFunc): void;\n    countBy(name: import('./compute/predicate').Col | string): import('./compute/dataframe').CountByResult;\n    filter(predicate: import('./compute/predicate').Predicate): import('./compute/dataframe').FilteredDataFrame<T>;\n}\n\nexport class Table<T extends { [key: string]: DataType } = any>\n    extends Chunked<Struct<T>>\n    implements DataFrame<T>,\n               Clonable<Table<T>>,\n               Sliceable<Table<T>>,\n               Applicative<Struct<T>, Table<T>> {\n\n    /** @nocollapse */\n    public static empty<T extends { [key: string]: DataType } = {}>(schema = new Schema<T>([])) { return new Table<T>(schema, []); }\n\n    public static from(): Table<{}>;\n    public static from<T extends { [key: string]: DataType } = any>(source: RecordBatchReader<T>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg0): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg2): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg1): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg3): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg4): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg5): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: PromiseLike<RecordBatchReader<T>>): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptionsAsync<Struct<T>, TNull>): Promise<Table<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(input?: any) {\n\n        if (!input) { return Table.empty(); }\n\n        if (typeof input === 'object') {\n            let table = isIterable(input['values']) ? tableFromIterable<T, TNull>(input)\n                 : isAsyncIterable(input['values']) ? tableFromAsyncIterable<T, TNull>(input)\n                                                    : null;\n            if (table !== null) { return table; }\n        }\n\n        let reader = RecordBatchReader.from<T>(input) as RecordBatchReader<T> | Promise<RecordBatchReader<T>>;\n\n        if (isPromise<RecordBatchReader<T>>(reader)) {\n            return (async () => await Table.from(await reader))();\n        }\n        if (reader.isSync() && (reader = reader.open())) {\n            return !reader.schema ? Table.empty() : new Table<T>(reader.schema, [...reader]);\n        }\n        return (async (opening) => {\n            const reader = await opening;\n            const schema = reader.schema;\n            const batches: RecordBatch[] = [];\n            if (schema) {\n                for await (let batch of reader) {\n                    batches.push(batch);\n                }\n                return new Table<T>(schema, batches);\n            }\n            return Table.empty();\n        })(reader.open());\n    }\n\n    /** @nocollapse */\n    public static async fromAsync<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArgs): Promise<Table<T>> {\n        return await Table.from<T>(source as any);\n    }\n\n    /** @nocollapse */\n    public static fromStruct<T extends { [key: string]: DataType } = any>(vector: Vector<Struct<T>>) {\n        return Table.new<T>(vector.data.childData as Data<T[keyof T]>[], vector.type.children);\n    }\n\n    /**\n     * @summary Create a new Table from a collection of Columns or Vectors,\n     * with an optional list of names or Fields.\n     *\n     *\n     * `Table.new` accepts an Object of\n     * Columns or Vectors, where the keys will be used as the field names\n     * for the Schema:\n     * ```ts\n     * const i32s = Int32Vector.from([1, 2, 3]);\n     * const f32s = Float32Vector.from([.1, .2, .3]);\n     * const table = Table.new({ i32: i32s, f32: f32s });\n     * assert(table.schema.fields[0].name === 'i32');\n     * ```\n     *\n     * It also accepts a a list of Vectors with an optional list of names or\n     * Fields for the resulting Schema. If the list is omitted or a name is\n     * missing, the numeric index of each Vector will be used as the name:\n     * ```ts\n     * const i32s = Int32Vector.from([1, 2, 3]);\n     * const f32s = Float32Vector.from([.1, .2, .3]);\n     * const table = Table.new([i32s, f32s], ['i32']);\n     * assert(table.schema.fields[0].name === 'i32');\n     * assert(table.schema.fields[1].name === '1');\n     * ```\n     *\n     * If the supplied arguments are Columns, `Table.new` will infer the Schema\n     * from the Columns:\n     * ```ts\n     * const i32s = Column.new('i32', Int32Vector.from([1, 2, 3]));\n     * const f32s = Column.new('f32', Float32Vector.from([.1, .2, .3]));\n     * const table = Table.new(i32s, f32s);\n     * assert(table.schema.fields[0].name === 'i32');\n     * assert(table.schema.fields[1].name === 'f32');\n     * ```\n     *\n     * If the supplied Vector or Column lengths are unequal, `Table.new` will\n     * extend the lengths of the shorter Columns, allocating additional bytes\n     * to represent the additional null slots. The memory required to allocate\n     * these additional bitmaps can be computed as:\n     * ```ts\n     * let additionalBytes = 0;\n     * for (let vec in shorter_vectors) {\n     *     additionalBytes += (((longestLength - vec.length) + 63) & ~63) >> 3;\n     * }\n     * ```\n     *\n     * For example, an additional null bitmap for one million null values would require\n     * 125,000 bytes (`((1e6 + 63) & ~63) >> 3`), or approx. `0.11MiB`\n     */\n    public static new<T extends { [key: string]: DataType } = any>(...columns: Columns<T>): Table<T>;\n    public static new<T extends VectorMap = any>(children: T): Table<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Table<T>;\n    /** @nocollapse */\n    public static new(...cols: any[]) {\n        return new Table(...distributeColumnsIntoRecordBatches(selectColumnArgs(cols)));\n    }\n\n    constructor(batches: RecordBatch<T>[]);\n    constructor(...batches: RecordBatch<T>[]);\n    constructor(schema: Schema<T>, batches: RecordBatch<T>[]);\n    constructor(schema: Schema<T>, ...batches: RecordBatch<T>[]);\n    constructor(...args: any[]) {\n\n        let schema: Schema<T> = null!;\n\n        if (args[0] instanceof Schema) { schema = args.shift(); }\n\n        let chunks = selectArgs<RecordBatch<T>>(RecordBatch, args);\n\n        if (!schema && !(schema = chunks[0] && chunks[0].schema)) {\n            throw new TypeError('Table must be initialized with a Schema or at least one RecordBatch');\n        }\n\n        chunks[0] || (chunks[0] = new _InternalEmptyPlaceholderRecordBatch(schema));\n\n        super(new Struct(schema.fields), chunks);\n\n        this._schema = schema;\n        this._chunks = chunks;\n    }\n\n    protected _schema: Schema<T>;\n    // List of inner RecordBatches\n    protected _chunks: RecordBatch<T>[];\n    protected _children?: Column<T[keyof T]>[];\n\n    public get schema() { return this._schema; }\n    public get length() { return this._length; }\n    public get chunks() { return this._chunks; }\n    public get numCols() { return this._numChildren; }\n\n    public clone(chunks = this._chunks) {\n        return new Table<T>(this._schema, chunks);\n    }\n\n    public getColumn<R extends keyof T>(name: R): Column<T[R]> {\n        return this.getColumnAt(this.getColumnIndex(name)) as Column<T[R]>;\n    }\n    public getColumnAt<R extends DataType = any>(index: number): Column<R> | null {\n        return this.getChildAt(index);\n    }\n    public getColumnIndex<R extends keyof T>(name: R) {\n        return this._schema.fields.findIndex((f) => f.name === name);\n    }\n    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\n        if (index < 0 || index >= this.numChildren) { return null; }\n        let field: Field<R>, child: Column<R>;\n        const fields = (this._schema as Schema<any>).fields;\n        const columns = this._children || (this._children = []) as Column[];\n        if (child = columns[index]) { return child as Column<R>; }\n        if (field = fields[index]) {\n            const chunks = this._chunks\n                .map((chunk) => chunk.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column<R>(field, chunks));\n            }\n        }\n        return null;\n    }\n\n    // @ts-ignore\n    public serialize(encoding = 'binary', stream = true) {\n        const Writer = !stream\n            ? RecordBatchFileWriter\n            : RecordBatchStreamWriter;\n        return Writer.writeAll(this).toUint8Array(true);\n    }\n    public count(): number {\n        return this._length;\n    }\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const nameToIndex = this._schema.fields.reduce((m, f, i) => m.set(f.name as K, i), new Map<K, number>());\n        return this.selectAt(...columnNames.map((columnName) => nameToIndex.get(columnName)!).filter((x) => x > -1));\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        const schema = this._schema.selectAt<K>(...columnIndices);\n        return new Table(schema, this._chunks.map(({ length, data: { childData } }) => {\n            return new RecordBatch(schema, length, columnIndices.map((i) => childData[i]).filter(Boolean));\n        }));\n    }\n    public assign<R extends { [key: string]: DataType } = any>(other: Table<R>) {\n\n        const fields = this._schema.fields;\n        const [indices, oldToNew] = other.schema.fields.reduce((memo, f2, newIdx) => {\n            const [indices, oldToNew] = memo;\n            const i = fields.findIndex((f) => f.name === f2.name);\n            ~i ? (oldToNew[i] = newIdx) : indices.push(newIdx);\n            return memo;\n        }, [[], []] as number[][]);\n\n        const schema = this._schema.assign(other.schema);\n        const columns = [\n            ...fields.map((_f, i, _fs, j = oldToNew[i]) =>\n                (j === undefined ? this.getColumnAt(i) : other.getColumnAt(j))!),\n            ...indices.map((i) => other.getColumnAt(i)!)\n        ].filter(Boolean) as Column<(T & R)[keyof T | keyof R]>[];\n\n        return new Table<T & R>(...distributeVectorsIntoRecordBatches<any>(schema, columns));\n    }\n}\n\nfunction tableFromIterable<T extends { [key: string]: DataType } = any, TNull = any>(input: VectorBuilderOptions<Struct<T>, TNull>) {\n    const { type } = input;\n    if (type instanceof Struct) {\n        return Table.fromStruct(StructVector.from(input as VectorBuilderOptions<Struct<T>, TNull>));\n    }\n    return null;\n}\n\nfunction tableFromAsyncIterable<T extends { [key: string]: DataType } = any, TNull = any>(input: VectorBuilderOptionsAsync<Struct<T>, TNull>) {\n    const { type } = input;\n    if (type instanceof Struct) {\n        return StructVector.from(input as VectorBuilderOptionsAsync<Struct<T>, TNull>).then((vector) => Table.fromStruct(vector));\n    }\n    return null;\n}\n"]},"metadata":{},"sourceType":"module"}