{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Visitor } from '../visitor';\nimport { BinaryVector } from '../vector/binary';\nimport { BoolVector } from '../vector/bool';\nimport { DateVector, DateDayVector, DateMillisecondVector } from '../vector/date';\nimport { DecimalVector } from '../vector/decimal';\nimport { DictionaryVector } from '../vector/dictionary';\nimport { FixedSizeBinaryVector } from '../vector/fixedsizebinary';\nimport { FixedSizeListVector } from '../vector/fixedsizelist';\nimport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from '../vector/float';\nimport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from '../vector/interval';\nimport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from '../vector/int';\nimport { ListVector } from '../vector/list';\nimport { MapVector } from '../vector/map';\nimport { NullVector } from '../vector/null';\nimport { StructVector } from '../vector/struct';\nimport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from '../vector/timestamp';\nimport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from '../vector/time';\nimport { UnionVector, DenseUnionVector, SparseUnionVector } from '../vector/union';\nimport { Utf8Vector } from '../vector/utf8';\n/** @ignore */\n\nexport class GetVectorConstructor extends Visitor {\n  visitNull() {\n    return NullVector;\n  }\n\n  visitBool() {\n    return BoolVector;\n  }\n\n  visitInt() {\n    return IntVector;\n  }\n\n  visitInt8() {\n    return Int8Vector;\n  }\n\n  visitInt16() {\n    return Int16Vector;\n  }\n\n  visitInt32() {\n    return Int32Vector;\n  }\n\n  visitInt64() {\n    return Int64Vector;\n  }\n\n  visitUint8() {\n    return Uint8Vector;\n  }\n\n  visitUint16() {\n    return Uint16Vector;\n  }\n\n  visitUint32() {\n    return Uint32Vector;\n  }\n\n  visitUint64() {\n    return Uint64Vector;\n  }\n\n  visitFloat() {\n    return FloatVector;\n  }\n\n  visitFloat16() {\n    return Float16Vector;\n  }\n\n  visitFloat32() {\n    return Float32Vector;\n  }\n\n  visitFloat64() {\n    return Float64Vector;\n  }\n\n  visitUtf8() {\n    return Utf8Vector;\n  }\n\n  visitBinary() {\n    return BinaryVector;\n  }\n\n  visitFixedSizeBinary() {\n    return FixedSizeBinaryVector;\n  }\n\n  visitDate() {\n    return DateVector;\n  }\n\n  visitDateDay() {\n    return DateDayVector;\n  }\n\n  visitDateMillisecond() {\n    return DateMillisecondVector;\n  }\n\n  visitTimestamp() {\n    return TimestampVector;\n  }\n\n  visitTimestampSecond() {\n    return TimestampSecondVector;\n  }\n\n  visitTimestampMillisecond() {\n    return TimestampMillisecondVector;\n  }\n\n  visitTimestampMicrosecond() {\n    return TimestampMicrosecondVector;\n  }\n\n  visitTimestampNanosecond() {\n    return TimestampNanosecondVector;\n  }\n\n  visitTime() {\n    return TimeVector;\n  }\n\n  visitTimeSecond() {\n    return TimeSecondVector;\n  }\n\n  visitTimeMillisecond() {\n    return TimeMillisecondVector;\n  }\n\n  visitTimeMicrosecond() {\n    return TimeMicrosecondVector;\n  }\n\n  visitTimeNanosecond() {\n    return TimeNanosecondVector;\n  }\n\n  visitDecimal() {\n    return DecimalVector;\n  }\n\n  visitList() {\n    return ListVector;\n  }\n\n  visitStruct() {\n    return StructVector;\n  }\n\n  visitUnion() {\n    return UnionVector;\n  }\n\n  visitDenseUnion() {\n    return DenseUnionVector;\n  }\n\n  visitSparseUnion() {\n    return SparseUnionVector;\n  }\n\n  visitDictionary() {\n    return DictionaryVector;\n  }\n\n  visitInterval() {\n    return IntervalVector;\n  }\n\n  visitIntervalDayTime() {\n    return IntervalDayTimeVector;\n  }\n\n  visitIntervalYearMonth() {\n    return IntervalYearMonthVector;\n  }\n\n  visitFixedSizeList() {\n    return FixedSizeListVector;\n  }\n\n  visitMap() {\n    return MapVector;\n  }\n\n}\n/** @ignore */\n\nexport const instance = new GetVectorConstructor();","map":{"version":3,"sources":["visitor/vectorctor.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { VectorType, VectorCtor } from '../interfaces';\n\nimport { BinaryVector } from '../vector/binary';\nimport { BoolVector } from '../vector/bool';\nimport { DateVector, DateDayVector, DateMillisecondVector } from '../vector/date';\nimport { DecimalVector } from '../vector/decimal';\nimport { DictionaryVector } from '../vector/dictionary';\nimport { FixedSizeBinaryVector } from '../vector/fixedsizebinary';\nimport { FixedSizeListVector } from '../vector/fixedsizelist';\nimport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from '../vector/float';\nimport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from '../vector/interval';\nimport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from '../vector/int';\nimport { ListVector } from '../vector/list';\nimport { MapVector } from '../vector/map';\nimport { NullVector } from '../vector/null';\nimport { StructVector } from '../vector/struct';\nimport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from '../vector/timestamp';\nimport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from '../vector/time';\nimport { UnionVector, DenseUnionVector, SparseUnionVector } from '../vector/union';\nimport { Utf8Vector } from '../vector/utf8';\n\n/** @ignore */\nexport interface GetVectorConstructor extends Visitor {\n    visit<T extends Type>(node: T): VectorCtor<T>;\n    visitMany <T extends Type>(nodes: T[]): VectorCtor<T>[];\n    getVisitFn<T extends Type>(node: T): () => VectorCtor<T>;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): () => VectorCtor<T>;\n}\n\n/** @ignore */\nexport class GetVectorConstructor extends Visitor {\n    public visitNull                 () { return NullVector; }\n    public visitBool                 () { return BoolVector; }\n    public visitInt                  () { return IntVector; }\n    public visitInt8                 () { return Int8Vector; }\n    public visitInt16                () { return Int16Vector; }\n    public visitInt32                () { return Int32Vector; }\n    public visitInt64                () { return Int64Vector; }\n    public visitUint8                () { return Uint8Vector; }\n    public visitUint16               () { return Uint16Vector; }\n    public visitUint32               () { return Uint32Vector; }\n    public visitUint64               () { return Uint64Vector; }\n    public visitFloat                () { return FloatVector; }\n    public visitFloat16              () { return Float16Vector; }\n    public visitFloat32              () { return Float32Vector; }\n    public visitFloat64              () { return Float64Vector; }\n    public visitUtf8                 () { return Utf8Vector; }\n    public visitBinary               () { return BinaryVector; }\n    public visitFixedSizeBinary      () { return FixedSizeBinaryVector; }\n    public visitDate                 () { return DateVector; }\n    public visitDateDay              () { return DateDayVector; }\n    public visitDateMillisecond      () { return DateMillisecondVector; }\n    public visitTimestamp            () { return TimestampVector; }\n    public visitTimestampSecond      () { return TimestampSecondVector; }\n    public visitTimestampMillisecond () { return TimestampMillisecondVector; }\n    public visitTimestampMicrosecond () { return TimestampMicrosecondVector; }\n    public visitTimestampNanosecond  () { return TimestampNanosecondVector; }\n    public visitTime                 () { return TimeVector; }\n    public visitTimeSecond           () { return TimeSecondVector; }\n    public visitTimeMillisecond      () { return TimeMillisecondVector; }\n    public visitTimeMicrosecond      () { return TimeMicrosecondVector; }\n    public visitTimeNanosecond       () { return TimeNanosecondVector; }\n    public visitDecimal              () { return DecimalVector; }\n    public visitList                 () { return ListVector; }\n    public visitStruct               () { return StructVector; }\n    public visitUnion                () { return UnionVector; }\n    public visitDenseUnion           () { return DenseUnionVector; }\n    public visitSparseUnion          () { return SparseUnionVector; }\n    public visitDictionary           () { return DictionaryVector; }\n    public visitInterval             () { return IntervalVector; }\n    public visitIntervalDayTime      () { return IntervalDayTimeVector; }\n    public visitIntervalYearMonth    () { return IntervalYearMonthVector; }\n    public visitFixedSizeList        () { return FixedSizeListVector; }\n    public visitMap                  () { return MapVector; }\n}\n\n/** @ignore */\nexport const instance = new GetVectorConstructor();\n"]},"metadata":{},"sourceType":"module"}