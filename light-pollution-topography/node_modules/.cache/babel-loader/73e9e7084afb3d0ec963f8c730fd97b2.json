{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { global, isBrowser, isWorker } from '../env-utils/globals';\nimport { requireFromFile, requireFromString } from './require-utils.node';\nimport assert from '../env-utils/assert';\nvar LATEST = 'beta';\nvar VERSION = typeof \"2.1.2\" !== 'undefined' ? \"2.1.2\" : LATEST;\nvar loadLibraryPromises = {};\nexport function loadLibrary(_x) {\n  return _loadLibrary.apply(this, arguments);\n}\n\nfunction _loadLibrary() {\n  _loadLibrary = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(libraryUrl) {\n    var moduleName,\n        options,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            moduleName = _args.length > 1 && _args[1] !== undefined ? _args[1] : null;\n            options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n\n            if (moduleName) {\n              libraryUrl = getLibraryUrl(libraryUrl, moduleName, options);\n            }\n\n            loadLibraryPromises[libraryUrl] = loadLibraryPromises[libraryUrl] || loadLibraryFromFile(libraryUrl);\n            _context.next = 6;\n            return loadLibraryPromises[libraryUrl];\n\n          case 6:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _loadLibrary.apply(this, arguments);\n}\n\nexport function getLibraryUrl(library, moduleName, options) {\n  var modules = options.modules || {};\n\n  if (modules[library]) {\n    return modules[library];\n  }\n\n  if (!isBrowser) {\n    return \"modules/\".concat(moduleName, \"/dist/libs/\").concat(library);\n  }\n\n  if (options.CDN) {\n    assert(options.CDN.startsWith('http'));\n    return \"\".concat(options.CDN, \"/\").concat(moduleName, \"@\").concat(VERSION, \"/dist/libs/\").concat(library);\n  }\n\n  if (isWorker) {\n    return \"../src/libs/\".concat(library);\n  }\n\n  return \"modules/\".concat(moduleName, \"/src/libs/\").concat(library);\n}\n\nfunction loadLibraryFromFile(_x2) {\n  return _loadLibraryFromFile.apply(this, arguments);\n}\n\nfunction _loadLibraryFromFile() {\n  _loadLibraryFromFile = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(libraryUrl) {\n    var _response, response, scriptSource;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!libraryUrl.endsWith('wasm')) {\n              _context2.next = 7;\n              break;\n            }\n\n            _context2.next = 3;\n            return fetch(libraryUrl);\n\n          case 3:\n            _response = _context2.sent;\n            _context2.next = 6;\n            return _response.arrayBuffer();\n\n          case 6:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 7:\n            if (isBrowser) {\n              _context2.next = 9;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", requireFromFile(libraryUrl));\n\n          case 9:\n            if (!isWorker) {\n              _context2.next = 11;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", importScripts(libraryUrl));\n\n          case 11:\n            _context2.next = 13;\n            return fetch(libraryUrl);\n\n          case 13:\n            response = _context2.sent;\n            _context2.next = 16;\n            return response.text();\n\n          case 16:\n            scriptSource = _context2.sent;\n            return _context2.abrupt(\"return\", loadLibraryFromString(scriptSource, libraryUrl));\n\n          case 18:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _loadLibraryFromFile.apply(this, arguments);\n}\n\nfunction loadLibraryFromString(scriptSource, id) {\n  if (!isBrowser) {\n    return requireFromString(scriptSource, id);\n  }\n\n  if (isWorker) {\n    eval.call(global, scriptSource);\n    return null;\n  }\n\n  var script = document.createElement('script');\n  script.id = id;\n\n  try {\n    script.appendChild(document.createTextNode(scriptSource));\n  } catch (e) {\n    script.text = scriptSource;\n  }\n\n  document.body.appendChild(script);\n  return null;\n}","map":{"version":3,"sources":["../../../../src/lib/library-utils/library-utils.js"],"names":["LATEST","VERSION","loadLibraryPromises","moduleName","options","libraryUrl","getLibraryUrl","loadLibraryFromFile","modules","assert","response","fetch","requireFromFile","importScripts","scriptSource","loadLibraryFromString","requireFromString","eval","script","document"],"mappings":"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","sourcesContent":["// __VERSION__ is injected by babel-plugin-version-inline\n/* global __VERSION__ */\n/* global fetch, document */\nimport {global, isBrowser, isWorker} from '../env-utils/globals';\nimport {requireFromFile, requireFromString} from './require-utils.node';\nimport assert from '../env-utils/assert';\n\n// TODO - unpkg.com doesn't seem to have a `latest` specifier for alpha releases...\nconst LATEST = 'beta';\n\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : LATEST;\n\nconst loadLibraryPromises = {}; // promises\n\n// Dynamically loads a library (\"module\")\n// wasm library: Array buffer is returned\n// js library: Parse JS is returned\n//  browser - script element is created and installed on document\n//  worker - eval is called on global context\n//  node - file is required\nexport async function loadLibrary(libraryUrl, moduleName = null, options = {}) {\n  if (moduleName) {\n    libraryUrl = getLibraryUrl(libraryUrl, moduleName, options);\n  }\n\n  // Ensure libraries are only loaded once\n  loadLibraryPromises[libraryUrl] =\n    loadLibraryPromises[libraryUrl] || loadLibraryFromFile(libraryUrl);\n  return await loadLibraryPromises[libraryUrl];\n}\n\n// TODO - sort out how to resolve paths for main/worker and dev/prod\nexport function getLibraryUrl(library, moduleName, options) {\n  // Allow application to import and supply libraries through `options.modules`\n  const modules = options.modules || {};\n  if (modules[library]) {\n    return modules[library];\n  }\n\n  // Load from local files, not from CDN scripts in Node.js\n  // TODO - needs to locate the modules directory when installed!\n  if (!isBrowser) {\n    return `modules/${moduleName}/dist/libs/${library}`;\n  }\n\n  // In browser, load from external scripts\n  if (options.CDN) {\n    assert(options.CDN.startsWith('http'));\n    return `${options.CDN}/${moduleName}@${VERSION}/dist/libs/${library}`;\n  }\n\n  // TODO - loading inside workers requires paths relative to worker script location...\n  if (isWorker) {\n    return `../src/libs/${library}`;\n  }\n\n  return `modules/${moduleName}/src/libs/${library}`;\n}\n\nasync function loadLibraryFromFile(libraryUrl) {\n  if (libraryUrl.endsWith('wasm')) {\n    const response = await fetch(libraryUrl);\n    return await response.arrayBuffer();\n  }\n\n  if (!isBrowser) {\n    return requireFromFile(libraryUrl);\n  }\n  if (isWorker) {\n    /* global importScripts */\n    return importScripts(libraryUrl);\n  }\n  // TODO - fix - should be more secure than string parsing since observes CORS\n  // if (isBrowser) {\n  //   return await loadScriptFromFile(libraryUrl);\n  // }\n\n  const response = await fetch(libraryUrl);\n  const scriptSource = await response.text();\n  return loadLibraryFromString(scriptSource, libraryUrl);\n}\n\n/*\nasync function loadScriptFromFile(libraryUrl) {\n  const script = document.createElement('script');\n  script.src = libraryUrl;\n  return await new Promise((resolve, reject) => {\n    script.onload = data => {\n      resolve(data);\n    };\n    script.onerror = reject;\n  });\n}\n*/\n\n// TODO - Needs security audit...\n//  - Raw eval call\n//  - Potentially bypasses CORS\n// Upside is that this separates fetching and parsing\n// we could create a`LibraryLoader` or`ModuleLoader`\nfunction loadLibraryFromString(scriptSource, id) {\n  if (!isBrowser) {\n    return requireFromString(scriptSource, id);\n  }\n\n  if (isWorker) {\n    // Use lvalue trick to make eval run in global scope\n    eval.call(global, scriptSource); // eslint-disable-line no-eval\n    // https://stackoverflow.com/questions/9107240/1-evalthis-vs-evalthis-in-javascript\n    // http://perfectionkills.com/global-eval-what-are-the-options/\n    return null;\n  }\n\n  const script = document.createElement('script');\n  script.id = id;\n  // most browsers like a separate text node but some throw an error. The second method covers those.\n  try {\n    script.appendChild(document.createTextNode(scriptSource));\n  } catch (e) {\n    script.text = scriptSource;\n  }\n  document.body.appendChild(script);\n  return null;\n}\n\n// TODO - technique for module injection into worker, from THREE.DracoLoader...\n/*\nfunction combineWorkerWithLibrary(worker, jsContent) {\n  var fn = wWorker.toString();\n  var body = [\n    '// injected',\n    jsContent,\n    '',\n    '// worker',\n    fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))\n  ].join('\\n');\n  this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n}\n*/\n"]},"metadata":{},"sourceType":"module"}