{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Type } from '../enum';\nimport { Chunked } from './chunked';\nimport { clampRange } from '../util/vector';\nimport { AbstractVector, Vector } from '../vector';\n/** @ignore */\n\nexport class BaseVector extends AbstractVector {\n  constructor(data, children) {\n    super();\n    this._children = children;\n    this.numChildren = data.childData.length;\n\n    this._bindDataAccessors(this.data = data);\n  }\n\n  get type() {\n    return this.data.type;\n  }\n\n  get typeId() {\n    return this.data.typeId;\n  }\n\n  get length() {\n    return this.data.length;\n  }\n\n  get offset() {\n    return this.data.offset;\n  }\n\n  get stride() {\n    return this.data.stride;\n  }\n\n  get nullCount() {\n    return this.data.nullCount;\n  }\n\n  get byteLength() {\n    return this.data.byteLength;\n  }\n\n  get VectorName() {\n    return `${Type[this.typeId]}Vector`;\n  }\n\n  get ArrayType() {\n    return this.type.ArrayType;\n  }\n\n  get values() {\n    return this.data.values;\n  }\n\n  get typeIds() {\n    return this.data.typeIds;\n  }\n\n  get nullBitmap() {\n    return this.data.nullBitmap;\n  }\n\n  get valueOffsets() {\n    return this.data.valueOffsets;\n  }\n\n  get [Symbol.toStringTag]() {\n    return `${this.VectorName}<${this.type[Symbol.toStringTag]}>`;\n  }\n\n  clone(data, children = this._children) {\n    return Vector.new(data, children);\n  }\n\n  concat(...others) {\n    return Chunked.concat(this, ...others);\n  }\n\n  slice(begin, end) {\n    // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n    // clamp between 0 and length, and wrap around on negative indices, e.g.\n    // slice(-1, 5) or slice(5, -1)\n    return clampRange(this, begin, end, this._sliceInternal);\n  }\n\n  isValid(index) {\n    if (this.nullCount > 0) {\n      const idx = this.offset + index;\n      const val = this.nullBitmap[idx >> 3];\n      const mask = val & 1 << idx % 8;\n      return mask !== 0;\n    }\n\n    return true;\n  }\n\n  getChildAt(index) {\n    return index < 0 || index >= this.numChildren ? null : (this._children || (this._children = []))[index] || (this._children[index] = Vector.new(this.data.childData[index]));\n  }\n\n  toJSON() {\n    return [...this];\n  }\n\n  _sliceInternal(self, begin, end) {\n    return self.clone(self.data.slice(begin, end - begin), null);\n  } // @ts-ignore\n\n\n  _bindDataAccessors(data) {// Implementation in src/vectors/index.ts due to circular dependency/packaging shenanigans\n  }\n\n}\nBaseVector.prototype[Symbol.isConcatSpreadable] = true;","map":{"version":3,"sources":["vector/base.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Chunked } from './chunked';\nimport { clampRange } from '../util/vector';\nimport { VectorType as V } from '../interfaces';\nimport { AbstractVector, Vector, Clonable, Sliceable, Applicative } from '../vector';\n\n/** @ignore */\nexport interface BaseVector<T extends DataType = any> extends Clonable<V<T>>, Sliceable<V<T>>, Applicative<T, Chunked<T>> {\n    slice(begin?: number, end?: number): V<T>;\n    concat(...others: Vector<T>[]): Chunked<T>;\n    clone<R extends DataType = T>(data: Data<R>, children?: Vector<R>[]): V<R>;\n}\n\n/** @ignore */\nexport abstract class BaseVector<T extends DataType = any> extends AbstractVector<T>\n    implements Clonable<V<T>>, Sliceable<V<T>>, Applicative<T, Chunked<T>> {\n\n    protected _children?: Vector[];\n\n    constructor(data: Data<T>, children?: Vector[]) {\n        super();\n        this._children = children;\n        this.numChildren = data.childData.length;\n        this._bindDataAccessors(this.data = data);\n    }\n\n    public readonly data: Data<T>;\n    public readonly numChildren: number;\n\n    public get type() { return this.data.type; }\n    public get typeId() { return this.data.typeId; }\n    public get length() { return this.data.length; }\n    public get offset() { return this.data.offset; }\n    public get stride() { return this.data.stride; }\n    public get nullCount() { return this.data.nullCount; }\n    public get byteLength() { return this.data.byteLength; }\n    public get VectorName() { return `${Type[this.typeId]}Vector`; }\n\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n\n    public get values() { return this.data.values; }\n    public get typeIds() { return this.data.typeIds; }\n    public get nullBitmap() { return this.data.nullBitmap; }\n    public get valueOffsets() { return this.data.valueOffsets; }\n\n    public get [Symbol.toStringTag]() { return `${this.VectorName}<${this.type[Symbol.toStringTag]}>`; }\n\n    public clone<R extends DataType = T>(data: Data<R>, children = this._children) {\n        return Vector.new<R>(data, children) as any;\n    }\n\n    public concat(...others: Vector<T>[]) {\n        return Chunked.concat<T>(this, ...others);\n    }\n\n    public slice(begin?: number, end?: number) {\n        // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n        // clamp between 0 and length, and wrap around on negative indices, e.g.\n        // slice(-1, 5) or slice(5, -1)\n        return clampRange(this, begin, end, this._sliceInternal);\n    }\n\n    public isValid(index: number): boolean {\n        if (this.nullCount > 0) {\n            const idx = this.offset + index;\n            const val = this.nullBitmap[idx >> 3];\n            const mask = (val & (1 << (idx % 8)));\n            return mask !== 0;\n        }\n        return true;\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Vector<R> | null {\n        return index < 0 || index >= this.numChildren ? null : (\n            (this._children || (this._children = []))[index] ||\n            (this._children[index] = Vector.new<R>(this.data.childData[index] as Data<R>))\n        ) as Vector<R>;\n    }\n\n    public toJSON(): any { return [...this]; }\n\n    protected _sliceInternal(self: this, begin: number, end: number) {\n        return self.clone(self.data.slice(begin, end - begin), null!);\n    }\n\n    // @ts-ignore\n    protected _bindDataAccessors(data: Data<T>) {\n        // Implementation in src/vectors/index.ts due to circular dependency/packaging shenanigans\n    }\n}\n\n(BaseVector.prototype as any)[Symbol.isConcatSpreadable] = true;\n"]},"metadata":{},"sourceType":"module"}