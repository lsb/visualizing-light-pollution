{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { DEFAULT_LOADER_OPTIONS } from '../constants';\nimport { NullLog } from './loggers';\n\nvar isPureObject = function isPureObject(value) {\n  return value && _typeof(value) === 'object' && value.constructor === {}.constructor;\n};\n\nvar globalOptions = _objectSpread({}, DEFAULT_LOADER_OPTIONS);\n\nexport function setGlobalOptions(options) {\n  globalOptions = mergeOptions(globalOptions, options);\n}\nexport function mergeOptions(loader, options, url) {\n  var loaderDefaultOptions = loader && (loader.DEFAULT_LOADER_OPTIONS || loader.defaultOptions || loader.options || {});\n\n  var mergedOptions = _objectSpread({}, loaderDefaultOptions);\n\n  addUrlOptions(mergedOptions, url);\n\n  if (mergedOptions.log === null) {\n    mergedOptions.log = new NullLog();\n  }\n\n  mergeNestedFields(mergedOptions, globalOptions);\n  mergeNestedFields(mergedOptions, options);\n  return mergedOptions;\n}\n\nfunction mergeNestedFields(mergedOptions, options) {\n  for (var key in options) {\n    if (key in options) {\n      var value = options[key];\n\n      if (isPureObject(value) && isPureObject(mergedOptions[key])) {\n        mergedOptions[key] = _objectSpread({}, mergedOptions[key], {}, options[key]);\n      } else {\n        mergedOptions[key] = options[key];\n      }\n    }\n  }\n}\n\nfunction addUrlOptions(options, url) {\n  if (url && !('baseUri' in options)) {\n    options.baseUri = url;\n  }\n}","map":{"version":3,"sources":["../../../../src/lib/loader-utils/merge-options.js"],"names":["isPureObject","value","globalOptions","mergeOptions","loaderDefaultOptions","loader","mergedOptions","addUrlOptions","mergeNestedFields","key","options","url"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,sBAAA,QAAA,cAAA;AACA,SAAA,OAAA,QAAA,WAAA;;AAEA,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAAA,KAAA,EAAK;AAAA,SACxBC,KAAK,IAAI,OAAA,CAAA,KAAA,CAAA,KAATA,QAAAA,IAAsCA,KAAK,CAALA,WAAAA,KAAsB,GADpC,WAAA;AAA1B,CAAA;;AAGA,IAAIC,aAAa,GAAA,aAAA,CAAA,EAAA,EAAjB,sBAAiB,CAAjB;;AAGA,OAAO,SAAA,gBAAA,CAAA,OAAA,EAAmC;AACxCA,EAAAA,aAAa,GAAGC,YAAY,CAAA,aAAA,EAA5BD,OAA4B,CAA5BA;AACD;AAGD,OAAO,SAAA,YAAA,CAAA,MAAA,EAAA,OAAA,EAAA,GAAA,EAA4C;AACjD,MAAME,oBAAoB,GACxBC,MAAM,KAAKA,MAAM,CAANA,sBAAAA,IAAiCA,MAAM,CAAvCA,cAAAA,IAA0DA,MAAM,CAAhEA,OAAAA,IADb,EACQ,CADR;;AAGA,MAAMC,aAAa,GAAA,aAAA,CAAA,EAAA,EAAnB,oBAAmB,CAAnB;;AAEAC,EAAAA,aAAa,CAAA,aAAA,EAAbA,GAAa,CAAbA;;AAGA,MAAID,aAAa,CAAbA,GAAAA,KAAJ,IAAA,EAAgC;AAC9BA,IAAAA,aAAa,CAAbA,GAAAA,GAAoB,IAApBA,OAAoB,EAApBA;AACD;;AAEDE,EAAAA,iBAAiB,CAAA,aAAA,EAAjBA,aAAiB,CAAjBA;AACAA,EAAAA,iBAAiB,CAAA,aAAA,EAAjBA,OAAiB,CAAjBA;AAEA,SAAA,aAAA;AACD;;AAGD,SAAA,iBAAA,CAAA,aAAA,EAAA,OAAA,EAAmD;AACjD,OAAK,IAAL,GAAA,IAAA,OAAA,EAA2B;AAGzB,QAAIC,GAAG,IAAP,OAAA,EAAoB;AAClB,UAAMR,KAAK,GAAGS,OAAO,CAArB,GAAqB,CAArB;;AACA,UAAIV,YAAY,CAAZA,KAAY,CAAZA,IAAuBA,YAAY,CAACM,aAAa,CAArD,GAAqD,CAAd,CAAvC,EAA6D;AAC3DA,QAAAA,aAAa,CAAbA,GAAa,CAAbA,GAAAA,aAAAA,CAAAA,EAAAA,EACKA,aAAa,CADlBA,GACkB,CADlBA,EAAAA,EAAAA,EAEKI,OAAO,CAFZJ,GAEY,CAFZA,CAAAA;AADF,OAAA,MAKO;AACLA,QAAAA,aAAa,CAAbA,GAAa,CAAbA,GAAqBI,OAAO,CAA5BJ,GAA4B,CAA5BA;AACD;AACF;AAEF;AACF;;AAOD,SAAA,aAAA,CAAA,OAAA,EAAA,GAAA,EAAqC;AACnC,MAAIK,GAAG,IAAI,EAAE,aAAb,OAAW,CAAX,EAAoC;AAClCD,IAAAA,OAAO,CAAPA,OAAAA,GAAAA,GAAAA;AACD;AACF","sourcesContent":["import {DEFAULT_LOADER_OPTIONS} from '../constants';\nimport {NullLog} from './loggers';\n\nconst isPureObject = value =>\n  value && typeof value === 'object' && value.constructor === {}.constructor;\n\nlet globalOptions = {...DEFAULT_LOADER_OPTIONS};\n\n// Set global loader options\nexport function setGlobalOptions(options) {\n  globalOptions = mergeOptions(globalOptions, options);\n}\n\n// Merges options with global opts and loader defaults, also injects baseUri\nexport function mergeOptions(loader, options, url) {\n  const loaderDefaultOptions =\n    loader && (loader.DEFAULT_LOADER_OPTIONS || loader.defaultOptions || loader.options || {});\n\n  const mergedOptions = {...loaderDefaultOptions};\n\n  addUrlOptions(mergedOptions, url);\n\n  // LOGGING: options.log can be set to `null` to defeat logging\n  if (mergedOptions.log === null) {\n    mergedOptions.log = new NullLog();\n  }\n\n  mergeNestedFields(mergedOptions, globalOptions);\n  mergeNestedFields(mergedOptions, options);\n\n  return mergedOptions;\n}\n\n// Merge nested options objects\nfunction mergeNestedFields(mergedOptions, options) {\n  for (const key in options) {\n    // Check for nested options\n    // object in options => either no key in defaultOptions or object in defaultOptions\n    if (key in options) {\n      const value = options[key];\n      if (isPureObject(value) && isPureObject(mergedOptions[key])) {\n        mergedOptions[key] = {\n          ...mergedOptions[key],\n          ...options[key]\n        };\n      } else {\n        mergedOptions[key] = options[key];\n      }\n    }\n    // else: No need to merge nested opts, and the initial merge already copied over the nested options\n  }\n}\n\n// Harvest information from the url\n// TODO - baseUri should be a directory, i.e. remove file component from baseUri\n// TODO - extract extension?\n// TODO - extract query parameters?\n// TODO - should these be injected on context instead of options?\nfunction addUrlOptions(options, url) {\n  if (url && !('baseUri' in options)) {\n    options.baseUri = url;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}