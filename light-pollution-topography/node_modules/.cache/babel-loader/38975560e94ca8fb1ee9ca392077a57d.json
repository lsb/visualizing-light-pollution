{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport MathArray from './math-array';\nimport { checkNumber } from '../../lib/validators';\nimport { config } from '../../lib/common';\n\nvar Matrix = function (_MathArray) {\n  _inherits(Matrix, _MathArray);\n\n  function Matrix() {\n    _classCallCheck(this, Matrix);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Matrix).apply(this, arguments));\n  }\n\n  _createClass(Matrix, [{\n    key: \"toString\",\n    value: function toString() {\n      var string = '[';\n\n      if (config.printRowMajor) {\n        string += 'row-major:';\n\n        for (var row = 0; row < this.RANK; ++row) {\n          for (var col = 0; col < this.RANK; ++col) {\n            string += \" \".concat(this[col * this.RANK + row]);\n          }\n        }\n      } else {\n        string += 'column-major:';\n\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          string += \" \".concat(this[i]);\n        }\n      }\n\n      string += ']';\n      return string;\n    }\n  }, {\n    key: \"getElementIndex\",\n    value: function getElementIndex(row, col) {\n      return col * this.RANK + row;\n    }\n  }, {\n    key: \"getElement\",\n    value: function getElement(row, col) {\n      return this[col * this.RANK + row];\n    }\n  }, {\n    key: \"setElement\",\n    value: function setElement(row, col, value) {\n      this[col * this.RANK + row] = checkNumber(value);\n      return this;\n    }\n  }, {\n    key: \"getColumn\",\n    value: function getColumn(columnIndex) {\n      var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Array(this.RANK).fill(-0);\n      var firstIndex = columnIndex * this.RANK;\n\n      for (var i = 0; i < this.RANK; ++i) {\n        result[i] = this[firstIndex + i];\n      }\n\n      return result;\n    }\n  }, {\n    key: \"setColumn\",\n    value: function setColumn(columnIndex, columnVector) {\n      var firstIndex = columnIndex * this.RANK;\n\n      for (var i = 0; i < this.RANK; ++i) {\n        this[firstIndex + i] = columnVector[i];\n      }\n\n      return this;\n    }\n  }]);\n\n  return Matrix;\n}(MathArray);\n\nexport { Matrix as default };","map":{"version":3,"sources":["../../../../src/classes/base/matrix.js"],"names":["Matrix","MathArray","string","config","row","col","i","value","checkNumber","columnIndex","result","firstIndex","columnVector"],"mappings":";;;;;AAAA,OAAA,SAAA,MAAA,cAAA;AACA,SAAA,WAAA,QAAA,sBAAA;AACA,SAAA,MAAA,QAAA,kBAAA;;IAEqBA,M;;;;;;;;;;;+BAYR;AACT,UAAIE,MAAM,GAAV,GAAA;;AACA,UAAIC,MAAM,CAAV,aAAA,EAA0B;AACxBD,QAAAA,MAAM,IAANA,YAAAA;;AACA,aAAK,IAAIE,GAAG,GAAZ,CAAA,EAAkBA,GAAG,GAAG,KAAxB,IAAA,EAAmC,EAAnC,GAAA,EAA0C;AACxC,eAAK,IAAIC,GAAG,GAAZ,CAAA,EAAkBA,GAAG,GAAG,KAAxB,IAAA,EAAmC,EAAnC,GAAA,EAA0C;AACxCH,YAAAA,MAAM,IAAA,IAAA,MAAA,CAAQ,KAAKG,GAAG,GAAG,KAANA,IAAAA,GAAnBH,GAAc,CAAR,CAANA;AACD;AACF;AANH,OAAA,MAOO;AACLA,QAAAA,MAAM,IAANA,eAAAA;;AACA,aAAK,IAAII,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAG,KAApB,QAAA,EAAmC,EAAnC,CAAA,EAAwC;AACtCJ,UAAAA,MAAM,IAAA,IAAA,MAAA,CAAQ,KAAdA,CAAc,CAAR,CAANA;AACD;AACF;;AACDA,MAAAA,MAAM,IAANA,GAAAA;AACA,aAAA,MAAA;AACD;;;oCAEeE,G,EAAKC,G,EAAK;AACxB,aAAOA,GAAG,GAAG,KAANA,IAAAA,GAAP,GAAA;AACD;;;+BAGUD,G,EAAKC,G,EAAK;AACnB,aAAO,KAAKA,GAAG,GAAG,KAANA,IAAAA,GAAZ,GAAO,CAAP;AACD;;;+BAGUD,G,EAAKC,G,EAAKE,K,EAAO;AAC1B,WAAKF,GAAG,GAAG,KAANA,IAAAA,GAAL,GAAA,IAA8BG,WAAW,CAAzC,KAAyC,CAAzC;AACA,aAAA,IAAA;AACD;;;8BAESC,W,EAAqD;AAAA,UAAxCC,MAAwC,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAA/B,IAAA,KAAA,CAAU,KAAV,IAAA,EAAA,IAAA,CAA0B,CAA1B,CAAA,CAA+B;AAC7D,UAAMC,UAAU,GAAGF,WAAW,GAAG,KAAjC,IAAA;;AACA,WAAK,IAAIH,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAG,KAApB,IAAA,EAA+B,EAA/B,CAAA,EAAoC;AAClCI,QAAAA,MAAM,CAANA,CAAM,CAANA,GAAY,KAAKC,UAAU,GAA3BD,CAAY,CAAZA;AACD;;AACD,aAAA,MAAA;AACD;;;8BAESD,W,EAAaG,Y,EAAc;AACnC,UAAMD,UAAU,GAAGF,WAAW,GAAG,KAAjC,IAAA;;AACA,WAAK,IAAIH,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAG,KAApB,IAAA,EAA+B,EAA/B,CAAA,EAAoC;AAClC,aAAKK,UAAU,GAAf,CAAA,IAAuBC,YAAY,CAAnC,CAAmC,CAAnC;AACD;;AACD,aAAA,IAAA;AACD;;;;EA5DiCX,S;;SAAfD,M","sourcesContent":["import MathArray from './math-array';\nimport {checkNumber} from '../../lib/validators';\nimport {config} from '../../lib/common';\n\nexport default class Matrix extends MathArray {\n  // fromObject(object) {\n  //   const array = object.elements;\n  //   return this.fromRowMajor(array);\n  // }\n\n  // toObject(object) {\n  //   const array = object.elements;\n  //   this.toRowMajor(array);\n  //   return object;\n  // }\n\n  toString() {\n    let string = '[';\n    if (config.printRowMajor) {\n      string += 'row-major:';\n      for (let row = 0; row < this.RANK; ++row) {\n        for (let col = 0; col < this.RANK; ++col) {\n          string += ` ${this[col * this.RANK + row]}`;\n        }\n      }\n    } else {\n      string += 'column-major:';\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        string += ` ${this[i]}`;\n      }\n    }\n    string += ']';\n    return string;\n  }\n\n  getElementIndex(row, col) {\n    return col * this.RANK + row;\n  }\n\n  // By default assumes row major indices\n  getElement(row, col) {\n    return this[col * this.RANK + row];\n  }\n\n  // By default assumes row major indices\n  setElement(row, col, value) {\n    this[col * this.RANK + row] = checkNumber(value);\n    return this;\n  }\n\n  getColumn(columnIndex, result = new Array(this.RANK).fill(-0)) {\n    const firstIndex = columnIndex * this.RANK;\n    for (let i = 0; i < this.RANK; ++i) {\n      result[i] = this[firstIndex + i];\n    }\n    return result;\n  }\n\n  setColumn(columnIndex, columnVector) {\n    const firstIndex = columnIndex * this.RANK;\n    for (let i = 0; i < this.RANK; ++i) {\n      this[firstIndex + i] = columnVector[i];\n    }\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}