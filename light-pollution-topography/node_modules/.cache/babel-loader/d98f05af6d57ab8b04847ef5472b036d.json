{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from './data';\nimport { Table } from './table';\nimport { Vector } from './vector';\nimport { Visitor } from './visitor';\nimport { Schema } from './schema';\nimport { isIterable } from './util/compat';\nimport { Chunked } from './vector/chunked';\nimport { selectFieldArgs } from './util/args';\nimport { DataType, Struct } from './type';\nimport { ensureSameLengthData } from './util/recordbatch';\nimport { StructVector } from './vector/index';\nexport class RecordBatch extends StructVector {\n  constructor(...args) {\n    let data;\n    let schema = args[0];\n    let children;\n\n    if (args[1] instanceof Data) {\n      [, data, children] = args;\n    } else {\n      const fields = schema.fields;\n      const [, length, childData] = args;\n      data = Data.Struct(new Struct(fields), 0, length, 0, null, childData);\n    }\n\n    super(data, children);\n    this._schema = schema;\n  }\n  /** @nocollapse */\n\n\n  static from(options) {\n    if (isIterable(options['values'])) {\n      return Table.from(options);\n    }\n\n    return Table.from(options);\n  }\n  /** @nocollapse */\n\n\n  static new(...args) {\n    const [fs, xs] = selectFieldArgs(args);\n    const vs = xs.filter(x => x instanceof Vector);\n    return new RecordBatch(...ensureSameLengthData(new Schema(fs), vs.map(x => x.data)));\n  }\n\n  clone(data, children = this._children) {\n    return new RecordBatch(this._schema, data, children);\n  }\n\n  concat(...others) {\n    const schema = this._schema,\n          chunks = Chunked.flatten(this, ...others);\n    return new Table(schema, chunks.map(({\n      data\n    }) => new RecordBatch(schema, data)));\n  }\n\n  get schema() {\n    return this._schema;\n  }\n\n  get numCols() {\n    return this._schema.fields.length;\n  }\n\n  get dictionaries() {\n    return this._dictionaries || (this._dictionaries = DictionaryCollector.collect(this));\n  }\n\n  select(...columnNames) {\n    const nameToIndex = this._schema.fields.reduce((m, f, i) => m.set(f.name, i), new Map());\n\n    return this.selectAt(...columnNames.map(columnName => nameToIndex.get(columnName)).filter(x => x > -1));\n  }\n\n  selectAt(...columnIndices) {\n    const schema = this._schema.selectAt(...columnIndices);\n\n    const childData = columnIndices.map(i => this.data.childData[i]).filter(Boolean);\n    return new RecordBatch(schema, this.length, childData);\n  }\n\n}\n/**\n * An internal class used by the `RecordBatchReader` and `RecordBatchWriter`\n * implementations to differentiate between a stream with valid zero-length\n * RecordBatches, and a stream with a Schema message, but no RecordBatches.\n * @see https://github.com/apache/arrow/pull/4373\n * @ignore\n * @private\n */\n\n/* tslint:disable:class-name */\n\nexport class _InternalEmptyPlaceholderRecordBatch extends RecordBatch {\n  constructor(schema) {\n    super(schema, 0, schema.fields.map(f => Data.new(f.type, 0, 0, 0)));\n  }\n\n}\n/** @ignore */\n\nclass DictionaryCollector extends Visitor {\n  constructor() {\n    super(...arguments);\n    this.dictionaries = new Map();\n  }\n\n  static collect(batch) {\n    return new DictionaryCollector().visit(batch.data, new Struct(batch.schema.fields)).dictionaries;\n  }\n\n  visit(data, type) {\n    if (DataType.isDictionary(type)) {\n      return this.visitDictionary(data, type);\n    } else {\n      data.childData.forEach((child, i) => this.visit(child, type.children[i].type));\n    }\n\n    return this;\n  }\n\n  visitDictionary(data, type) {\n    const dictionary = data.dictionary;\n\n    if (dictionary && dictionary.length > 0) {\n      this.dictionaries.set(type.id, dictionary);\n    }\n\n    return this;\n  }\n\n}","map":{"version":3,"sources":["recordbatch.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Table } from './table';\nimport { Vector } from './vector';\nimport { Visitor } from './visitor';\nimport { Schema, Field } from './schema';\nimport { isIterable } from './util/compat';\nimport { Chunked } from './vector/chunked';\nimport { selectFieldArgs } from './util/args';\nimport { DataType, Struct, Dictionary } from './type';\nimport { ensureSameLengthData } from './util/recordbatch';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { StructVector, VectorBuilderOptions, VectorBuilderOptionsAsync } from './vector/index';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = (Data<T[keyof T]> | Vector<T[keyof T]>)[];\n\nexport interface RecordBatch<T extends { [key: string]: DataType } = any> {\n    concat(...others: Vector<Struct<T>>[]): Table<T>;\n    slice(begin?: number, end?: number): RecordBatch<T>;\n    clone(data: Data<Struct<T>>, children?: Vector[]): RecordBatch<T>;\n}\n\nexport class RecordBatch<T extends { [key: string]: DataType } = any>\n    extends StructVector<T>\n    implements Clonable<RecordBatch<T>>,\n               Sliceable<RecordBatch<T>>,\n               Applicative<Struct<T>, Table<T>> {\n\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptionsAsync<Struct<T>, TNull>): Promise<Table<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull> | VectorBuilderOptionsAsync<Struct<T>, TNull>) {\n        if (isIterable<(Struct<T>)['TValue'] | TNull>(options['values'])) {\n            return Table.from(options as VectorBuilderOptions<Struct<T>, TNull>);\n        }\n        return Table.from(options as VectorBuilderOptionsAsync<Struct<T>, TNull>);\n    }\n\n    public static new<T extends VectorMap = any>(children: T): RecordBatch<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): RecordBatch<T>;\n    /** @nocollapse */\n    public static new<T extends { [key: string]: DataType } = any>(...args: any[]) {\n        const [fs, xs] = selectFieldArgs<T>(args);\n        const vs = xs.filter((x): x is Vector<T[keyof T]> => x instanceof Vector);\n        return new RecordBatch(...ensureSameLengthData(new Schema<T>(fs), vs.map((x) => x.data)));\n    }\n\n    protected _schema: Schema;\n    protected _dictionaries?: Map<number, Vector>;\n\n    constructor(schema: Schema<T>, length: number, children: (Data | Vector)[]);\n    constructor(schema: Schema<T>, data: Data<Struct<T>>, children?: Vector[]);\n    constructor(...args: any[]) {\n        let data: Data<Struct<T>>;\n        let schema = args[0] as Schema<T>;\n        let children: Vector[] | undefined;\n        if (args[1] instanceof Data) {\n            [, data, children] = (args as [any, Data<Struct<T>>, Vector<T[keyof T]>[]?]);\n        } else {\n            const fields = schema.fields as Field<T[keyof T]>[];\n            const [, length, childData] = args as [any, number, Data<T[keyof T]>[]];\n            data = Data.Struct(new Struct<T>(fields), 0, length, 0, null, childData);\n        }\n        super(data, children);\n        this._schema = schema;\n    }\n\n    public clone(data: Data<Struct<T>>, children = this._children) {\n        return new RecordBatch<T>(this._schema, data, children);\n    }\n\n    public concat(...others: Vector<Struct<T>>[]): Table<T> {\n        const schema = this._schema, chunks = Chunked.flatten(this, ...others);\n        return new Table(schema, chunks.map(({ data }) => new RecordBatch(schema, data)));\n    }\n\n    public get schema() { return this._schema; }\n    public get numCols() { return this._schema.fields.length; }\n    public get dictionaries() {\n        return this._dictionaries || (this._dictionaries = DictionaryCollector.collect(this));\n    }\n\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const nameToIndex = this._schema.fields.reduce((m, f, i) => m.set(f.name as K, i), new Map<K, number>());\n        return this.selectAt(...columnNames.map((columnName) => nameToIndex.get(columnName)!).filter((x) => x > -1));\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        const schema = this._schema.selectAt(...columnIndices);\n        const childData = columnIndices.map((i) => this.data.childData[i]).filter(Boolean);\n        return new RecordBatch<{ [key: string]: K }>(schema, this.length, childData);\n    }\n}\n\n/**\n * An internal class used by the `RecordBatchReader` and `RecordBatchWriter`\n * implementations to differentiate between a stream with valid zero-length\n * RecordBatches, and a stream with a Schema message, but no RecordBatches.\n * @see https://github.com/apache/arrow/pull/4373\n * @ignore\n * @private\n */\n/* tslint:disable:class-name */\nexport class _InternalEmptyPlaceholderRecordBatch<T extends { [key: string]: DataType } = any> extends RecordBatch<T> {\n    constructor(schema: Schema<T>) {\n        super(schema, 0, schema.fields.map((f) => Data.new(f.type, 0, 0, 0)));\n    }\n}\n\n/** @ignore */\nclass DictionaryCollector extends Visitor {\n    public dictionaries = new Map<number, Vector>();\n    public static collect<T extends RecordBatch>(batch: T) {\n        return new DictionaryCollector().visit(\n            batch.data, new Struct(batch.schema.fields)\n        ).dictionaries;\n    }\n    public visit(data: Data, type: DataType) {\n        if (DataType.isDictionary(type)) {\n            return this.visitDictionary(data, type);\n        } else {\n            data.childData.forEach((child, i) =>\n                this.visit(child, type.children[i].type));\n        }\n        return this;\n    }\n    public visitDictionary(data: Data, type: Dictionary) {\n        const dictionary = data.dictionary;\n        if (dictionary && dictionary.length > 0) {\n            this.dictionaries.set(type.id, dictionary);\n        }\n        return this;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}