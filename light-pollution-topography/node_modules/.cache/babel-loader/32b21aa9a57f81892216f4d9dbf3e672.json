{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { Layer, project32, picking, log } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport PathTesselator from './path-tesselator';\nimport vs from './path-layer-vertex.glsl';\nimport fs from './path-layer-fragment.glsl';\nvar DEFAULT_COLOR = [0, 0, 0, 255];\nvar defaultProps = {\n  widthUnits: 'meters',\n  widthScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  widthMinPixels: {\n    type: 'number',\n    min: 0,\n    value: 0\n  },\n  widthMaxPixels: {\n    type: 'number',\n    min: 0,\n    value: Number.MAX_SAFE_INTEGER\n  },\n  rounded: false,\n  miterLimit: {\n    type: 'number',\n    min: 0,\n    value: 4\n  },\n  billboard: false,\n  _pathType: null,\n  getPath: {\n    type: 'accessor',\n    value: function value(object) {\n      return object.path;\n    }\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getWidth: {\n    type: 'accessor',\n    value: 1\n  }\n};\nvar ATTRIBUTE_TRANSITION = {\n  enter: function enter(value, chunk) {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\nvar PathLayer = function (_Layer) {\n  _inherits(PathLayer, _Layer);\n\n  function PathLayer() {\n    _classCallCheck(this, PathLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PathLayer).apply(this, arguments));\n  }\n\n  _createClass(PathLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      return _get(_getPrototypeOf(PathLayer.prototype), \"getShaders\", this).call(this, {\n        vs: vs,\n        fs: fs,\n        modules: [project32, picking]\n      });\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      var _this = this;\n\n      var noAlloc = true;\n      var attributeManager = this.getAttributeManager();\n      attributeManager.addInstanced({\n        positions: {\n          size: 3,\n          vertexOffset: 1,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          transition: ATTRIBUTE_TRANSITION,\n          accessor: 'getPath',\n          update: this.calculatePositions,\n          noAlloc: noAlloc,\n          shaderAttributes: {\n            instanceLeftPositions: {\n              vertexOffset: 0\n            },\n            instanceStartPositions: {\n              vertexOffset: 1\n            },\n            instanceEndPositions: {\n              vertexOffset: 2\n            },\n            instanceRightPositions: {\n              vertexOffset: 3\n            }\n          }\n        },\n        instanceTypes: {\n          size: 1,\n          type: 5121,\n          update: this.calculateSegmentTypes,\n          noAlloc: noAlloc\n        },\n        instanceStrokeWidths: {\n          size: 1,\n          accessor: 'getWidth',\n          transition: ATTRIBUTE_TRANSITION,\n          defaultValue: 1\n        },\n        instanceColors: {\n          size: this.props.colorFormat.length,\n          type: 5121,\n          normalized: true,\n          accessor: 'getColor',\n          transition: ATTRIBUTE_TRANSITION,\n          defaultValue: DEFAULT_COLOR\n        },\n        instancePickingColors: {\n          size: 3,\n          type: 5121,\n          accessor: function accessor(object, _ref) {\n            var index = _ref.index,\n                value = _ref.target;\n            return _this.encodePickingColor(index, value);\n          }\n        }\n      });\n      this.setState({\n        pathTesselator: new PathTesselator({\n          fp64: this.use64bitPositions()\n        })\n      });\n\n      if (this.props.getDashArray && !this.props.extensions.length) {\n        log.removed('getDashArray', 'PathStyleExtension')();\n      }\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref2) {\n      var oldProps = _ref2.oldProps,\n          props = _ref2.props,\n          changeFlags = _ref2.changeFlags;\n\n      _get(_getPrototypeOf(PathLayer.prototype), \"updateState\", this).call(this, {\n        props: props,\n        oldProps: oldProps,\n        changeFlags: changeFlags\n      });\n\n      var attributeManager = this.getAttributeManager();\n      var geometryChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPath);\n\n      if (geometryChanged) {\n        var pathTesselator = this.state.pathTesselator;\n        var buffers = props.data.attributes || {};\n        pathTesselator.updateGeometry({\n          data: props.data,\n          geometryBuffer: buffers.getPath,\n          buffers: buffers,\n          normalize: !props._pathType,\n          loop: props._pathType === 'loop',\n          getGeometry: props.getPath,\n          positionFormat: props.positionFormat,\n          dataChanged: changeFlags.dataChanged\n        });\n        this.setState({\n          numInstances: pathTesselator.instanceCount,\n          startIndices: pathTesselator.vertexStarts\n        });\n\n        if (!changeFlags.dataChanged) {\n          attributeManager.invalidateAll();\n        }\n      }\n\n      if (changeFlags.extensionsChanged) {\n        var gl = this.context.gl;\n\n        if (this.state.model) {\n          this.state.model[\"delete\"]();\n        }\n\n        this.setState({\n          model: this._getModel(gl)\n        });\n        attributeManager.invalidateAll();\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref3) {\n      var uniforms = _ref3.uniforms;\n      var viewport = this.context.viewport;\n      var _this$props = this.props,\n          rounded = _this$props.rounded,\n          billboard = _this$props.billboard,\n          miterLimit = _this$props.miterLimit,\n          widthUnits = _this$props.widthUnits,\n          widthScale = _this$props.widthScale,\n          widthMinPixels = _this$props.widthMinPixels,\n          widthMaxPixels = _this$props.widthMaxPixels;\n      var widthMultiplier = widthUnits === 'pixels' ? viewport.metersPerPixel : 1;\n      this.state.model.setUniforms(Object.assign({}, uniforms, {\n        jointType: Number(rounded),\n        billboard: billboard,\n        widthScale: widthScale * widthMultiplier,\n        miterLimit: miterLimit,\n        widthMinPixels: widthMinPixels,\n        widthMaxPixels: widthMaxPixels\n      })).draw();\n    }\n  }, {\n    key: \"_getModel\",\n    value: function _getModel(gl) {\n      var SEGMENT_INDICES = [0, 2, 1, 1, 2, 4, 1, 4, 3, 3, 4, 5];\n      var SEGMENT_POSITIONS = [0, 0, 0, -1, 0, 1, 1, -1, 1, 1, 1, 0];\n      return new Model(gl, Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: 4,\n          attributes: {\n            indices: new Uint16Array(SEGMENT_INDICES),\n            positions: {\n              value: new Float32Array(SEGMENT_POSITIONS),\n              size: 2\n            }\n          }\n        }),\n        isInstanced: true\n      }));\n    }\n  }, {\n    key: \"calculatePositions\",\n    value: function calculatePositions(attribute) {\n      var pathTesselator = this.state.pathTesselator;\n      attribute.startIndices = pathTesselator.vertexStarts;\n      attribute.value = pathTesselator.get('positions');\n    }\n  }, {\n    key: \"calculateSegmentTypes\",\n    value: function calculateSegmentTypes(attribute) {\n      var pathTesselator = this.state.pathTesselator;\n      attribute.startIndices = pathTesselator.vertexStarts;\n      attribute.value = pathTesselator.get('segmentTypes');\n    }\n  }]);\n\n  return PathLayer;\n}(Layer);\n\nexport { PathLayer as default };\nPathLayer.layerName = 'PathLayer';\nPathLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/path-layer/path-layer.js"],"names":["DEFAULT_COLOR","defaultProps","widthUnits","widthScale","type","min","value","widthMinPixels","widthMaxPixels","Number","MAX_SAFE_INTEGER","rounded","miterLimit","billboard","_pathType","getPath","object","getColor","getWidth","ATTRIBUTE_TRANSITION","enter","chunk","PathLayer","Layer","vs","fs","modules","noAlloc","attributeManager","positions","size","vertexOffset","fp64","transition","accessor","update","shaderAttributes","instanceLeftPositions","instanceStartPositions","instanceEndPositions","instanceRightPositions","instanceTypes","instanceStrokeWidths","defaultValue","instanceColors","normalized","instancePickingColors","index","pathTesselator","log","oldProps","props","changeFlags","geometryChanged","buffers","data","geometryBuffer","normalize","loop","getGeometry","positionFormat","dataChanged","numInstances","startIndices","vertexStarts","gl","model","uniforms","viewport","widthMultiplier","jointType","SEGMENT_INDICES","SEGMENT_POSITIONS","id","geometry","drawMode","attributes","indices","isInstanced","attribute"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, picking, log} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport PathTesselator from './path-tesselator';\n\nimport vs from './path-layer-vertex.glsl';\nimport fs from './path-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  widthUnits: 'meters',\n  widthScale: {type: 'number', min: 0, value: 1}, // stroke width in meters\n  widthMinPixels: {type: 'number', min: 0, value: 0}, //  min stroke width in pixels\n  widthMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER}, // max stroke width in pixels\n  rounded: false,\n  miterLimit: {type: 'number', min: 0, value: 4},\n  billboard: false,\n  // `loop` or `open`\n  _pathType: null,\n\n  getPath: {type: 'accessor', value: object => object.path},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getWidth: {type: 'accessor', value: 1}\n};\n\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\nexport default class PathLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]}); // 'project' module added by default.\n  }\n\n  initializeState() {\n    const noAlloc = true;\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      positions: {\n        size: 3,\n        // Start filling buffer from 1 vertex in\n        vertexOffset: 1,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPath',\n        update: this.calculatePositions,\n        noAlloc,\n        shaderAttributes: {\n          instanceLeftPositions: {\n            vertexOffset: 0\n          },\n          instanceStartPositions: {\n            vertexOffset: 1\n          },\n          instanceEndPositions: {\n            vertexOffset: 2\n          },\n          instanceRightPositions: {\n            vertexOffset: 3\n          }\n        }\n      },\n      instanceTypes: {\n        size: 1,\n        type: GL.UNSIGNED_BYTE,\n        update: this.calculateSegmentTypes,\n        noAlloc\n      },\n      instanceStrokeWidths: {\n        size: 1,\n        accessor: 'getWidth',\n        transition: ATTRIBUTE_TRANSITION,\n        defaultValue: 1\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        accessor: 'getColor',\n        transition: ATTRIBUTE_TRANSITION,\n        defaultValue: DEFAULT_COLOR\n      },\n      instancePickingColors: {\n        size: 3,\n        type: GL.UNSIGNED_BYTE,\n        accessor: (object, {index, target: value}) => this.encodePickingColor(index, value)\n      }\n    });\n    /* eslint-enable max-len */\n\n    this.setState({\n      pathTesselator: new PathTesselator({\n        fp64: this.use64bitPositions()\n      })\n    });\n\n    if (this.props.getDashArray && !this.props.extensions.length) {\n      log.removed('getDashArray', 'PathStyleExtension')();\n    }\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    const attributeManager = this.getAttributeManager();\n\n    const geometryChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPath));\n\n    if (geometryChanged) {\n      const {pathTesselator} = this.state;\n      const buffers = props.data.attributes || {};\n      pathTesselator.updateGeometry({\n        data: props.data,\n        geometryBuffer: buffers.getPath,\n        buffers,\n        normalize: !props._pathType,\n        loop: props._pathType === 'loop',\n        getGeometry: props.getPath,\n        positionFormat: props.positionFormat,\n        dataChanged: changeFlags.dataChanged\n      });\n      this.setState({\n        numInstances: pathTesselator.instanceCount,\n        startIndices: pathTesselator.vertexStarts\n      });\n      if (!changeFlags.dataChanged) {\n        // Base `layer.updateState` only invalidates all attributes on data change\n        // Cover the rest of the scenarios here\n        attributeManager.invalidateAll();\n      }\n    }\n\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      attributeManager.invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {viewport} = this.context;\n    const {\n      rounded,\n      billboard,\n      miterLimit,\n      widthUnits,\n      widthScale,\n      widthMinPixels,\n      widthMaxPixels\n    } = this.props;\n\n    const widthMultiplier = widthUnits === 'pixels' ? viewport.metersPerPixel : 1;\n\n    this.state.model\n      .setUniforms(\n        Object.assign({}, uniforms, {\n          jointType: Number(rounded),\n          billboard,\n          widthScale: widthScale * widthMultiplier,\n          miterLimit,\n          widthMinPixels,\n          widthMaxPixels\n        })\n      )\n      .draw();\n  }\n\n  _getModel(gl) {\n    /*\n     *       _\n     *        \"-_ 1                   3                       5\n     *     _     \"o---------------------o-------------------_-o\n     *       -   / \"\"--..__              '.             _.-' /\n     *   _     \"@- - - - - \"\"--..__- - - - x - - - -_.@'    /\n     *    \"-_  /                   \"\"--..__ '.  _,-` :     /\n     *       \"o----------------------------\"\"-o'    :     /\n     *      0,2                            4 / '.  :     /\n     *                                      /   '.:     /\n     *                                     /     :'.   /\n     *                                    /     :  ', /\n     *                                   /     :     o\n     */\n\n    const SEGMENT_INDICES = [\n      // start corner\n      0,\n      2,\n      1,\n      // body\n      1,\n      2,\n      4,\n      1,\n      4,\n      3,\n      // end corner\n      3,\n      4,\n      5\n    ];\n\n    // [0] position on segment - 0: start, 1: end\n    // [1] side of path - -1: left, 0: center (joint), 1: right\n    const SEGMENT_POSITIONS = [\n      // bevel start corner\n      0,\n      0,\n      // start inner corner\n      0,\n      -1,\n      // start outer corner\n      0,\n      1,\n      // end inner corner\n      1,\n      -1,\n      // end outer corner\n      1,\n      1,\n      // bevel end corner\n      1,\n      0\n    ];\n\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLES,\n          attributes: {\n            indices: new Uint16Array(SEGMENT_INDICES),\n            positions: {value: new Float32Array(SEGMENT_POSITIONS), size: 2}\n          }\n        }),\n        isInstanced: true\n      })\n    );\n  }\n\n  calculatePositions(attribute) {\n    const {pathTesselator} = this.state;\n\n    attribute.startIndices = pathTesselator.vertexStarts;\n    attribute.value = pathTesselator.get('positions');\n  }\n\n  calculateSegmentTypes(attribute) {\n    const {pathTesselator} = this.state;\n\n    attribute.startIndices = pathTesselator.vertexStarts;\n    attribute.value = pathTesselator.get('segmentTypes');\n  }\n}\n\nPathLayer.layerName = 'PathLayer';\nPathLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}