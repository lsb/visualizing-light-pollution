{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport View from './view';\nimport Viewport from '../viewports/viewport';\nimport { getMeterZoom } from '@math.gl/web-mercator';\nimport { Matrix4, _SphericalCoordinates as SphericalCoordinates } from 'math.gl';\nimport FirstPersonController from '../controllers/first-person-controller';\n\nfunction getDirectionFromBearingAndPitch(_ref) {\n  var bearing = _ref.bearing,\n      pitch = _ref.pitch;\n  var spherical = new SphericalCoordinates({\n    bearing: bearing,\n    pitch: pitch\n  });\n  var direction = spherical.toVector3().normalize();\n  return direction;\n}\n\nvar FirstPersonView = function (_View) {\n  _inherits(FirstPersonView, _View);\n\n  function FirstPersonView() {\n    _classCallCheck(this, FirstPersonView);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(FirstPersonView).apply(this, arguments));\n  }\n\n  _createClass(FirstPersonView, [{\n    key: \"_getViewport\",\n    value: function _getViewport(props) {\n      var _props$viewState = props.viewState,\n          _props$viewState$mode = _props$viewState.modelMatrix,\n          modelMatrix = _props$viewState$mode === void 0 ? null : _props$viewState$mode,\n          _props$viewState$bear = _props$viewState.bearing,\n          bearing = _props$viewState$bear === void 0 ? 0 : _props$viewState$bear,\n          _props$viewState$pitc = _props$viewState.pitch,\n          pitch = _props$viewState$pitc === void 0 ? 0 : _props$viewState$pitc,\n          _props$viewState$up = _props$viewState.up,\n          up = _props$viewState$up === void 0 ? [0, 0, 1] : _props$viewState$up;\n      var dir = getDirectionFromBearingAndPitch({\n        bearing: bearing,\n        pitch: 90 + pitch\n      });\n      var center = modelMatrix ? modelMatrix.transformDirection(dir) : dir;\n      var zoom = getMeterZoom(props);\n      var scale = Math.pow(2, zoom);\n      var viewMatrix = new Matrix4().lookAt({\n        eye: [0, 0, 0],\n        center: center,\n        up: up\n      }).scale(scale);\n      return new Viewport(Object.assign({}, props, {\n        zoom: zoom,\n        viewMatrix: viewMatrix\n      }));\n    }\n  }, {\n    key: \"controller\",\n    get: function get() {\n      return this._getControllerProps({\n        type: FirstPersonController\n      });\n    }\n  }]);\n\n  return FirstPersonView;\n}(View);\n\nexport { FirstPersonView as default };\nFirstPersonView.displayName = 'FirstPersonView';","map":{"version":3,"sources":["../../../src/views/first-person-view.js"],"names":["_SphericalCoordinates","bearing","pitch","spherical","direction","FirstPersonView","View","type","FirstPersonController","props","modelMatrix","up","dir","getDirectionFromBearingAndPitch","center","zoom","getMeterZoom","scale","Math","viewMatrix","eye"],"mappings":";;;;;AAAA,OAAA,IAAA,MAAA,QAAA;AACA,OAAA,QAAA,MAAA,uBAAA;AACA,SAAA,YAAA,QAAA,uBAAA;AACA,SAAA,OAAA,EAAiBA,qBAAqB,IAAtC,oBAAA,QAAA,SAAA;AACA,OAAA,qBAAA,MAAA,wCAAA;;AAEA,SAAA,+BAAA,CAAA,IAAA,EAA2D;AAAA,MAAjBC,OAAiB,GAAA,IAAA,CAAjBA,OAAiB;AAAA,MAARC,KAAQ,GAAA,IAAA,CAARA,KAAQ;AACzD,MAAMC,SAAS,GAAG,IAAA,oBAAA,CAAyB;AAACF,IAAAA,OAAO,EAAR,OAAA;AAAUC,IAAAA,KAAK,EAALA;AAAV,GAAzB,CAAlB;AACA,MAAME,SAAS,GAAGD,SAAS,CAATA,SAAAA,GAAlB,SAAkBA,EAAlB;AACA,SAAA,SAAA;AACD;;IAEoBE,e;;;;;;;;;;;iCAONI,K,EAAO;AAAA,UAAA,gBAAA,GAQdA,KAAK,CARS,SAAA;AAAA,UAAA,qBAAA,GAAA,gBAAA,CAAA,WAAA;AAAA,UAIhBC,WAJgB,GAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,qBAAA;AAAA,UAAA,qBAAA,GAAA,gBAAA,CAAA,OAAA;AAAA,UAKhBT,OALgB,GAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,CAAA,GAAA,qBAAA;AAAA,UAAA,qBAAA,GAAA,gBAAA,CAAA,KAAA;AAAA,UAMhBC,KANgB,GAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,CAAA,GAAA,qBAAA;AAAA,UAAA,mBAAA,GAAA,gBAAA,CAAA,EAAA;AAAA,UAOhBS,EAPgB,GAAA,mBAAA,KAAA,KAAA,CAAA,GAOX,CAAA,CAAA,EAAA,CAAA,EAPW,CAOX,CAPW,GAAA,mBAAA;AAWlB,UAAMC,GAAG,GAAGC,+BAA+B,CAAC;AAC1CZ,QAAAA,OAAO,EADmC,OAAA;AAE1CC,QAAAA,KAAK,EAAE,KAAKA;AAF8B,OAAD,CAA3C;AAMA,UAAMY,MAAM,GAAGJ,WAAW,GAAGA,WAAW,CAAXA,kBAAAA,CAAH,GAAGA,CAAH,GAA1B,GAAA;AAGA,UAAMK,IAAI,GAAGC,YAAY,CAAzB,KAAyB,CAAzB;AACA,UAAMC,KAAK,GAAGC,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAd,IAAcA,CAAd;AACA,UAAMC,UAAU,GAAG,IAAA,OAAA,GAAA,MAAA,CAAqB;AAACC,QAAAA,GAAG,EAAE,CAAA,CAAA,EAAA,CAAA,EAAN,CAAM,CAAN;AAAiBN,QAAAA,MAAM,EAAvB,MAAA;AAAyBH,QAAAA,EAAE,EAAFA;AAAzB,OAArB,EAAA,KAAA,CAAnB,KAAmB,CAAnB;AAEA,aAAO,IAAA,QAAA,CACL,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,KAAA,EAAyB;AACvBI,QAAAA,IAAI,EADmB,IAAA;AAEvBI,QAAAA,UAAU,EAAVA;AAFuB,OAAzB,CADK,CAAP;AAMD;;;wBApCgB;AACf,aAAO,KAAA,mBAAA,CAAyB;AAC9BZ,QAAAA,IAAI,EAAEC;AADwB,OAAzB,CAAP;AAGD;;;;EAL0CF,I;;SAAxBD,e;AAwCrBA,eAAe,CAAfA,WAAAA,GAAAA,iBAAAA","sourcesContent":["import View from './view';\nimport Viewport from '../viewports/viewport';\nimport {getMeterZoom} from '@math.gl/web-mercator';\nimport {Matrix4, _SphericalCoordinates as SphericalCoordinates} from 'math.gl';\nimport FirstPersonController from '../controllers/first-person-controller';\n\nfunction getDirectionFromBearingAndPitch({bearing, pitch}) {\n  const spherical = new SphericalCoordinates({bearing, pitch});\n  const direction = spherical.toVector3().normalize();\n  return direction;\n}\n\nexport default class FirstPersonView extends View {\n  get controller() {\n    return this._getControllerProps({\n      type: FirstPersonController\n    });\n  }\n\n  _getViewport(props) {\n    // TODO - push direction handling into Matrix4.lookAt\n    const {\n      // view matrix arguments\n      modelMatrix = null,\n      bearing = 0,\n      pitch = 0,\n      up = [0, 0, 1] // Defines up direction, default positive z axis,\n    } = props.viewState;\n\n    // Always calculate direction from bearing and pitch\n    const dir = getDirectionFromBearingAndPitch({\n      bearing,\n      pitch: 90 + pitch\n    });\n\n    // Direction is relative to model coordinates, of course\n    const center = modelMatrix ? modelMatrix.transformDirection(dir) : dir;\n\n    // Just the direction. All the positioning is done in viewport.js\n    const zoom = getMeterZoom(props);\n    const scale = Math.pow(2, zoom);\n    const viewMatrix = new Matrix4().lookAt({eye: [0, 0, 0], center, up}).scale(scale);\n\n    return new Viewport(\n      Object.assign({}, props, {\n        zoom,\n        viewMatrix\n      })\n    );\n  }\n}\n\nFirstPersonView.displayName = 'FirstPersonView';\n"]},"metadata":{},"sourceType":"module"}