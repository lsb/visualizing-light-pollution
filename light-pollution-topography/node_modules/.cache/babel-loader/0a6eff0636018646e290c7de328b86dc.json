{"ast":null,"code":"var fs = \"uniform vec2 center;\\nuniform float angle;\\nuniform float size;\\n\\nfloat pattern(vec2 texSize, vec2 texCoord) {\\n  float scale = 3.1415 / size;\\n\\n  float s = sin(angle), c = cos(angle);\\n  vec2 tex = texCoord * texSize - center * texSize;\\n  vec2 point = vec2(\\n    c * tex.x - s * tex.y,\\n    s * tex.x + c * tex.y\\n  ) * scale;\\n  return (sin(point.x) * sin(point.y)) * 4.0;\\n}\\n\\nvec4 dotScreen_filterColor(vec4 color, vec2 texSize, vec2 texCoord) {\\n  float average = (color.r + color.g + color.b) / 3.0;\\n  return vec4(vec3(average * 10.0 - 5.0 + pattern(texSize, texCoord)), color.a);\\n}\\n\";\nvar uniforms = {\n  center: [0.5, 0.5],\n  angle: {\n    value: 1.1,\n    softMin: 0,\n    softMax: Math.PI / 2\n  },\n  size: {\n    value: 3,\n    min: 1,\n    softMin: 3,\n    softMax: 20\n  }\n};\nexport default {\n  name: 'dotScreen',\n  uniforms: uniforms,\n  fs: fs,\n  passes: [{\n    filter: true\n  }]\n};","map":{"version":3,"sources":["../../../../src/modules/fun-filters/dotscreen.js"],"names":["fs","uniforms","center","angle","value","softMin","softMax","Math","size","min","name","passes","filter"],"mappings":"AASA,IAAMA,EAAE,GAAR,slBAAA;AAuBA,IAAMC,QAAQ,GAAG;AACfC,EAAAA,MAAM,EAAE,CAAA,GAAA,EADO,GACP,CADO;AAEfC,EAAAA,KAAK,EAAE;AAACC,IAAAA,KAAK,EAAN,GAAA;AAAaC,IAAAA,OAAO,EAApB,CAAA;AAAyBC,IAAAA,OAAO,EAAEC,IAAI,CAAJA,EAAAA,GAAU;AAA5C,GAFQ;AAGfC,EAAAA,IAAI,EAAE;AAACJ,IAAAA,KAAK,EAAN,CAAA;AAAWK,IAAAA,GAAG,EAAd,CAAA;AAAmBJ,IAAAA,OAAO,EAA1B,CAAA;AAA+BC,IAAAA,OAAO,EAAE;AAAxC;AAHS,CAAjB;AAMA,eAAe;AACbI,EAAAA,IAAI,EADS,WAAA;AAEbT,EAAAA,QAAQ,EAFK,QAAA;AAGbD,EAAAA,EAAE,EAHW,EAAA;AAKbW,EAAAA,MAAM,EAAE,CAAC;AAACC,IAAAA,MAAM,EAAE;AAAT,GAAD;AALK,CAAf","sourcesContent":["/**\n * @filter        Dot Screen\n * @description   Simulates a black and white halftone rendering of the image by multiplying\n *                pixel values with a rotated 2D sine wave pattern.\n * @param centerX The x coordinate of the pattern origin.\n * @param centerY The y coordinate of the pattern origin.\n * @param angle   The rotation of the pattern in radians.\n * @param size    The diameter of a dot in pixels.\n */\nconst fs = `\\\nuniform vec2 center;\nuniform float angle;\nuniform float size;\n\nfloat pattern(vec2 texSize, vec2 texCoord) {\n  float scale = 3.1415 / size;\n\n  float s = sin(angle), c = cos(angle);\n  vec2 tex = texCoord * texSize - center * texSize;\n  vec2 point = vec2(\n    c * tex.x - s * tex.y,\n    s * tex.x + c * tex.y\n  ) * scale;\n  return (sin(point.x) * sin(point.y)) * 4.0;\n}\n\nvec4 dotScreen_filterColor(vec4 color, vec2 texSize, vec2 texCoord) {\n  float average = (color.r + color.g + color.b) / 3.0;\n  return vec4(vec3(average * 10.0 - 5.0 + pattern(texSize, texCoord)), color.a);\n}\n`;\n\nconst uniforms = {\n  center: [0.5, 0.5],\n  angle: {value: 1.1, softMin: 0, softMax: Math.PI / 2},\n  size: {value: 3, min: 1, softMin: 3, softMax: 20}\n};\n\nexport default {\n  name: 'dotScreen',\n  uniforms,\n  fs,\n\n  passes: [{filter: true}]\n};\n"]},"metadata":{},"sourceType":"module"}