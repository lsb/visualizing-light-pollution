{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport GLTFScenegraph from '../gltf-scenegraph';\nimport { KHR_TECHNIQUES_WEBGL } from '../gltf-constants';\nexport function decode(gltfData, options) {\n  var gltfScenegraph = new GLTFScenegraph(gltfData);\n  var json = gltfScenegraph.json;\n  var extension = gltfScenegraph.getExtension(KHR_TECHNIQUES_WEBGL);\n\n  if (extension) {\n    var techniques = resolveTechniques(extension, gltfScenegraph);\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = (json.materials || [])[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var material = _step.value;\n        var materialExtension = gltfScenegraph.getObjectExtension(material, KHR_TECHNIQUES_WEBGL);\n\n        if (materialExtension) {\n          material.technique = Object.assign({}, materialExtension, techniques[materialExtension.technique]);\n          material.technique.values = resolveValues(material.technique, gltfScenegraph);\n        }\n\n        gltfScenegraph.removeObjectExtension(material, KHR_TECHNIQUES_WEBGL);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n          _iterator[\"return\"]();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    gltfScenegraph.removeExtension(KHR_TECHNIQUES_WEBGL);\n  }\n}\nexport function encode(gltfData, options) {}\n\nfunction resolveTechniques(_ref, gltfScenegraph) {\n  var _ref$programs = _ref.programs,\n      programs = _ref$programs === void 0 ? [] : _ref$programs,\n      _ref$shaders = _ref.shaders,\n      shaders = _ref$shaders === void 0 ? [] : _ref$shaders,\n      _ref$techniques = _ref.techniques,\n      techniques = _ref$techniques === void 0 ? [] : _ref$techniques;\n  var textDecoder = new TextDecoder();\n  shaders.forEach(function (shader) {\n    if (Number.isFinite(shader.bufferView)) {\n      shader.code = textDecoder.decode(gltfScenegraph.getTypedArrayForBufferView(shader.bufferView));\n    } else {\n      throw new Error('KHR_techniques_webgl: no shader code');\n    }\n  });\n  programs.forEach(function (program) {\n    program.fragmentShader = shaders[program.fragmentShader];\n    program.vertexShader = shaders[program.vertexShader];\n  });\n  techniques.forEach(function (technique) {\n    technique.program = programs[technique.program];\n  });\n  return techniques;\n}\n\nfunction resolveValues(technique, gltfScenegraph) {\n  var values = Object.assign({}, technique.values);\n  Object.keys(technique.uniforms || {}).forEach(function (uniform) {\n    if (technique.uniforms[uniform].value && !(uniform in values)) {\n      values[uniform] = technique.uniforms[uniform].value;\n    }\n  });\n  Object.keys(values).forEach(function (uniform) {\n    if (_typeof(values[uniform]) === 'object' && values[uniform].index !== undefined) {\n      values[uniform].texture = gltfScenegraph.getTexture(values[uniform].index);\n    }\n  });\n  return values;\n}","map":{"version":3,"sources":["../../../../src/lib/extensions/KHR_techniques_webgl.js"],"names":["gltfScenegraph","json","extension","techniques","resolveTechniques","material","materialExtension","Object","resolveValues","programs","shaders","textDecoder","Number","shader","program","technique","values","uniform"],"mappings":"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","sourcesContent":["// GLTF EXTENSION: KHR_techniques_webgl\n// https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_techniques_webgl\n/* global TextDecoder */\nimport GLTFScenegraph from '../gltf-scenegraph';\nimport {KHR_TECHNIQUES_WEBGL} from '../gltf-constants';\n\nexport function decode(gltfData, options) {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const {json} = gltfScenegraph;\n\n  const extension = gltfScenegraph.getExtension(KHR_TECHNIQUES_WEBGL);\n  if (extension) {\n    const techniques = resolveTechniques(extension, gltfScenegraph);\n\n    for (const material of json.materials || []) {\n      const materialExtension = gltfScenegraph.getObjectExtension(material, KHR_TECHNIQUES_WEBGL);\n      if (materialExtension) {\n        material.technique = Object.assign(\n          {},\n          materialExtension,\n          techniques[materialExtension.technique]\n        );\n        material.technique.values = resolveValues(material.technique, gltfScenegraph);\n      }\n      gltfScenegraph.removeObjectExtension(material, KHR_TECHNIQUES_WEBGL);\n    }\n\n    gltfScenegraph.removeExtension(KHR_TECHNIQUES_WEBGL);\n  }\n}\n\nexport function encode(gltfData, options) {\n  // TODO\n}\n\nfunction resolveTechniques({programs = [], shaders = [], techniques = []}, gltfScenegraph) {\n  const textDecoder = new TextDecoder();\n\n  shaders.forEach(shader => {\n    if (Number.isFinite(shader.bufferView)) {\n      shader.code = textDecoder.decode(\n        gltfScenegraph.getTypedArrayForBufferView(shader.bufferView)\n      );\n    } else {\n      // TODO: handle URI shader\n      throw new Error('KHR_techniques_webgl: no shader code');\n    }\n  });\n\n  programs.forEach(program => {\n    program.fragmentShader = shaders[program.fragmentShader];\n    program.vertexShader = shaders[program.vertexShader];\n  });\n\n  techniques.forEach(technique => {\n    technique.program = programs[technique.program];\n  });\n\n  return techniques;\n}\n\nfunction resolveValues(technique, gltfScenegraph) {\n  const values = Object.assign({}, technique.values);\n\n  // merge values from uniforms\n  Object.keys(technique.uniforms || {}).forEach(uniform => {\n    if (technique.uniforms[uniform].value && !(uniform in values)) {\n      values[uniform] = technique.uniforms[uniform].value;\n    }\n  });\n\n  // resolve textures\n  Object.keys(values).forEach(uniform => {\n    if (typeof values[uniform] === 'object' && values[uniform].index !== undefined) {\n      // Assume this is a texture\n      // TODO: find if there are any other types that can be referenced\n      values[uniform].texture = gltfScenegraph.getTexture(values[uniform].index);\n    }\n  });\n\n  return values;\n}\n"]},"metadata":{},"sourceType":"module"}