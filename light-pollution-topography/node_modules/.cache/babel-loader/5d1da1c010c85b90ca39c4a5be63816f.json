{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport parseGLBSync from './lib/parse-glb';\nvar VERSION = typeof \"2.1.2\" !== 'undefined' ? \"2.1.2\" : 'latest';\nexport default {\n  id: 'glb',\n  name: 'GLB',\n  version: VERSION,\n  extensions: ['glb'],\n  mimeType: 'model/gltf-binary',\n  binary: true,\n  parse: function () {\n    var _parse = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(arrayBuffer, options) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", parseSync(arrayBuffer, options));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function parse(_x, _x2) {\n      return _parse.apply(this, arguments);\n    }\n\n    return parse;\n  }(),\n  parseSync: parseSync,\n  options: {\n    glb: {\n      strict: false\n    }\n  }\n};\n\nfunction parseSync(arrayBuffer, options) {\n  var _options$byteOffset = options.byteOffset,\n      byteOffset = _options$byteOffset === void 0 ? 0 : _options$byteOffset;\n  var glb = {};\n  parseGLBSync(glb, arrayBuffer, byteOffset, options);\n  return glb;\n}","map":{"version":3,"sources":["../../src/glb-loader.js"],"names":["VERSION","id","name","version","extensions","mimeType","binary","parse","parseSync","options","glb","strict","byteOffset","parseGLBSync"],"mappings":";;AAIA,OAAA,YAAA,MAAA,iBAAA;AAGA,IAAMA,OAAO,GAAG,OAAA,OAAA,KAAA,WAAA,GAAA,OAAA,GAAhB,QAAA;AAEA,eAAe;AACbC,EAAAA,EAAE,EADW,KAAA;AAEbC,EAAAA,IAAI,EAFS,KAAA;AAGbC,EAAAA,OAAO,EAHM,OAAA;AAIbC,EAAAA,UAAU,EAAE,CAJC,KAID,CAJC;AAKbC,EAAAA,QAAQ,EALK,mBAAA;AAMbC,EAAAA,MAAM,EANO,IAAA;AAObC,EAAAA,KAAK,EAAA,YAAA;AAAA,QAAA,MAAA,GAAA,iBAAA,CAAA,mBAAA,CAAA,IAAA,CAAE,SAAA,OAAA,CAAA,WAAA,EAAA,OAAA,EAAA;AAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,eAAA,CAAA,EAAA;AAAA,kBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,iBAAA,CAAA;AAAA,qBAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAAgCC,SAAS,CAAA,WAAA,EAAzC,OAAyC,CAAzC,CAAA;;AAAA,iBAAA,CAAA;AAAA,iBAAA,KAAA;AAAA,qBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,OAAA,EAAA,OAAA,CAAA;AAAF,KAAA,CAAA,CAAA;;AAAA,aAAA,KAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,aAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,WAAA,KAAA;AAPQ,GAOR,EAPQ;AAQbA,EAAAA,SAAS,EARI,SAAA;AASbC,EAAAA,OAAO,EAAE;AACPC,IAAAA,GAAG,EAAE;AACHC,MAAAA,MAAM,EAAE;AADL;AADE;AATI,CAAf;;AAgBA,SAAA,SAAA,CAAA,WAAA,EAAA,OAAA,EAAyC;AAAA,MAAA,mBAAA,GACdF,OADc,CAAA,UAAA;AAAA,MAChCG,UADgC,GAAA,mBAAA,KAAA,KAAA,CAAA,GAAA,CAAA,GAAA,mBAAA;AAEvC,MAAMF,GAAG,GAAT,EAAA;AACAG,EAAAA,YAAY,CAAA,GAAA,EAAA,WAAA,EAAA,UAAA,EAAZA,OAAY,CAAZA;AACA,SAAA,GAAA;AACD","sourcesContent":["// Binary container format for GLB\n\n// __VERSION__ is injected by babel-plugin-version-inline\n/* global __VERSION__ */\nimport parseGLBSync from './lib/parse-glb';\n\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n\nexport default {\n  id: 'glb',\n  name: 'GLB',\n  version: VERSION,\n  extensions: ['glb'],\n  mimeType: 'model/gltf-binary',\n  binary: true,\n  parse: async (arrayBuffer, options) => parseSync(arrayBuffer, options),\n  parseSync,\n  options: {\n    glb: {\n      strict: false // Enables deprecated XVIZ support (illegal CHUNK formats)\n    }\n  }\n};\n\nfunction parseSync(arrayBuffer, options) {\n  const {byteOffset = 0} = options;\n  const glb = {};\n  parseGLBSync(glb, arrayBuffer, byteOffset, options);\n  return glb;\n}\n"]},"metadata":{},"sourceType":"module"}