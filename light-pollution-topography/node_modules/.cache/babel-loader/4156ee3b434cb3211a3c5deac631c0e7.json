{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as KHR_draco_mesh_compression from './KHR_draco_mesh_compression';\nimport * as KHR_lights_punctual from './KHR_lights_punctual';\nimport * as KHR_materials_unlit from './KHR_materials_unlit';\nimport * as KHR_techniques_webgl from './KHR_techniques_webgl';\nexport var EXTENSIONS = {\n  KHR_draco_mesh_compression: KHR_draco_mesh_compression,\n  KHR_lights_punctual: KHR_lights_punctual,\n  KHR_materials_unlit: KHR_materials_unlit,\n  KHR_techniques_webgl: KHR_techniques_webgl\n};\nexport function decodeExtensions(_x) {\n  return _decodeExtensions.apply(this, arguments);\n}\n\nfunction _decodeExtensions() {\n  _decodeExtensions = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(gltf) {\n    var options,\n        context,\n        extensionName,\n        excludes,\n        exclude,\n        extension,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            context = _args.length > 2 ? _args[2] : undefined;\n            options.gltf = options.gltf || {};\n            _context.t0 = _regeneratorRuntime.keys(EXTENSIONS);\n\n          case 4:\n            if ((_context.t1 = _context.t0()).done) {\n              _context.next = 14;\n              break;\n            }\n\n            extensionName = _context.t1.value;\n            excludes = options.gltf.excludeExtensions || {};\n            exclude = extensionName in excludes && !excludes[extensionName];\n\n            if (exclude) {\n              _context.next = 12;\n              break;\n            }\n\n            extension = EXTENSIONS[extensionName];\n            _context.next = 12;\n            return extension.decode(gltf, options, context);\n\n          case 12:\n            _context.next = 4;\n            break;\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _decodeExtensions.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../src/lib/extensions/gltf-extensions.js"],"names":["EXTENSIONS","KHR_draco_mesh_compression","KHR_lights_punctual","KHR_materials_unlit","KHR_techniques_webgl","options","context","extensionName","excludes","exclude","extension"],"mappings":";;AACA,OAAO,KAAP,0BAAA,MAAA,8BAAA;AACA,OAAO,KAAP,mBAAA,MAAA,uBAAA;AACA,OAAO,KAAP,mBAAA,MAAA,uBAAA;AAEA,OAAO,KAAP,oBAAA,MAAA,wBAAA;AAEA,OAAO,IAAMA,UAAU,GAAG;AACxBC,EAAAA,0BAA0B,EADF,0BAAA;AAExBC,EAAAA,mBAAmB,EAFK,mBAAA;AAGxBC,EAAAA,mBAAmB,EAHK,mBAAA;AAIxBC,EAAAA,oBAAoB,EAApBA;AAJwB,CAAnB;AAOP,OAAA,SAAA,gBAAA,CAAA,EAAA,EAAA;AAAA,SAAA,iBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;;iEAAO,SAAA,OAAA,CAAA,IAAA,EAAA;AAAA,QAAA,OAAA;AAAA,QAAA,OAAA;AAAA,QAAA,aAAA;AAAA,QAAA,QAAA;AAAA,QAAA,OAAA;AAAA,QAAA,SAAA;AAAA,QAAA,KAAA,GAAA,SAAA;AAAA,WAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,aAAA,CAAA,EAAA;AAAA,gBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,eAAA,CAAA;AAAsCC,YAAAA,OAAtC,GAAA,KAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,KAAA,CAAA,CAAA,CAAA,GAAA,EAAsCA;AAAcC,YAAAA,OAApD,GAAA,KAAA,CAAA,MAAA,GAAA,CAAA,GAAA,KAAA,CAAA,CAAA,CAAA,GAAA,SAAoDA;AACzDD,YAAAA,OAAO,CAAPA,IAAAA,GAAeA,OAAO,CAAPA,IAAAA,IAAfA,EAAAA;AADK,YAAA,QAAA,CAAA,EAAA,GAAA,mBAAA,CAAA,IAAA,CAAA,UAAA,CAAA;;AAAA,eAAA,CAAA;AAAA,gBAAA,CAAA,QAAA,CAAA,EAAA,GAAA,QAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA;AAAA,cAAA,QAAA,CAAA,IAAA,GAAA,EAAA;AAAA;AAAA;;AAEME,YAAAA,aAFN,GAAA,QAAA,CAAA,EAAA,CAAA,KAEMA;AACHC,YAAAA,QAHH,GAGcH,OAAO,CAAPA,IAAAA,CAAAA,iBAAAA,IAHd,EAGGG;AACAC,YAAAA,OAJH,GAIaF,aAAa,IAAbA,QAAAA,IAA6B,CAACC,QAAQ,CAJnD,aAImD,CAAhDC;;AAJH,gBAAA,OAAA,EAAA;AAAA,cAAA,QAAA,CAAA,IAAA,GAAA,EAAA;AAAA;AAAA;;AAMKC,YAAAA,SANL,GAMiBV,UAAU,CAN3B,aAM2B,CAAtBU;AANL,YAAA,QAAA,CAAA,IAAA,GAAA,EAAA;AAAA,mBASKA,SAAS,CAATA,MAAAA,CAAAA,IAAAA,EAAAA,OAAAA,EATL,OASKA,CATL;;AAAA,eAAA,EAAA;AAAA,YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA;;AAAA,eAAA,EAAA;AAAA,eAAA,KAAA;AAAA,mBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,KAAA,EAAA,OAAA,CAAA","sourcesContent":["/* eslint-disable camelcase */\nimport * as KHR_draco_mesh_compression from './KHR_draco_mesh_compression';\nimport * as KHR_lights_punctual from './KHR_lights_punctual';\nimport * as KHR_materials_unlit from './KHR_materials_unlit';\n// import UBER_POINT_CLOUD_COMPRESSION from './KHR_draco_mesh_compression';\nimport * as KHR_techniques_webgl from './KHR_techniques_webgl';\n\nexport const EXTENSIONS = {\n  KHR_draco_mesh_compression,\n  KHR_lights_punctual,\n  KHR_materials_unlit,\n  KHR_techniques_webgl\n};\n\nexport async function decodeExtensions(gltf, options = {}, context) {\n  options.gltf = options.gltf || {};\n  for (const extensionName in EXTENSIONS) {\n    const excludes = options.gltf.excludeExtensions || {};\n    const exclude = extensionName in excludes && !excludes[extensionName];\n    if (!exclude) {\n      const extension = EXTENSIONS[extensionName];\n      // Note: We decode async extensions sequentially, this might not be necessary\n      // Currently we only have Draco, but when we add Basis we may revisit\n      await extension.decode(gltf, options, context);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}