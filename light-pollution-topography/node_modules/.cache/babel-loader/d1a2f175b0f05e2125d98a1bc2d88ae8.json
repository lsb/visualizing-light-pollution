{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport Matrix from './base/matrix';\nimport { checkVector, deprecated } from '../lib/validators';\nimport { vec4_transformMat3 } from '../lib/gl-matrix-extras';\nimport * as mat3 from 'gl-matrix/mat3';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\nvar IDENTITY = Object.freeze([1, 0, 0, 0, 1, 0, 0, 0, 1]);\nvar ZERO = Object.freeze([0, 0, 0, 0, 0, 0, 0, 0, 0]);\nvar INDICES = Object.freeze({\n  COL0ROW0: 0,\n  COL0ROW1: 1,\n  COL0ROW2: 2,\n  COL1ROW0: 3,\n  COL1ROW1: 4,\n  COL1ROW2: 5,\n  COL2ROW0: 6,\n  COL2ROW1: 7,\n  COL2ROW2: 8\n});\nvar constants = {};\n\nvar Matrix3 = function (_Matrix) {\n  _inherits(Matrix3, _Matrix);\n\n  _createClass(Matrix3, [{\n    key: \"ELEMENTS\",\n    get: function get() {\n      return 9;\n    }\n  }, {\n    key: \"RANK\",\n    get: function get() {\n      return 3;\n    }\n  }, {\n    key: \"INDICES\",\n    get: function get() {\n      return INDICES;\n    }\n  }], [{\n    key: \"IDENTITY\",\n    get: function get() {\n      constants.IDENTITY = constants.IDENTITY || Object.freeze(new Matrix3(IDENTITY));\n      return constants.IDENTITY;\n    }\n  }, {\n    key: \"ZERO\",\n    get: function get() {\n      constants.ZERO = constants.ZERO || Object.freeze(new Matrix3(ZERO));\n      return constants.ZERO;\n    }\n  }]);\n\n  function Matrix3(array) {\n    var _this;\n\n    _classCallCheck(this, Matrix3);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Matrix3).call(this, -0, -0, -0, -0, -0, -0, -0, -0, -0));\n\n    if (arguments.length === 1 && Array.isArray(array)) {\n      _this.copy(array);\n    } else {\n      _this.identity();\n    }\n\n    return _this;\n  }\n\n  _createClass(Matrix3, [{\n    key: \"copy\",\n    value: function copy(array) {\n      this[0] = array[0];\n      this[1] = array[1];\n      this[2] = array[2];\n      this[3] = array[3];\n      this[4] = array[4];\n      this[5] = array[5];\n      this[6] = array[6];\n      this[7] = array[7];\n      this[8] = array[8];\n      return this.check();\n    }\n  }, {\n    key: \"set\",\n    value: function set(m00, m10, m20, m01, m11, m21, m02, m12, m22) {\n      this[0] = m00;\n      this[1] = m10;\n      this[2] = m20;\n      this[3] = m01;\n      this[4] = m11;\n      this[5] = m21;\n      this[6] = m02;\n      this[7] = m12;\n      this[8] = m22;\n      return this.check();\n    }\n  }, {\n    key: \"setRowMajor\",\n    value: function setRowMajor(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n      this[0] = m00;\n      this[1] = m10;\n      this[2] = m20;\n      this[3] = m01;\n      this[4] = m11;\n      this[5] = m21;\n      this[6] = m02;\n      this[7] = m12;\n      this[8] = m22;\n      return this.check();\n    }\n  }, {\n    key: \"determinant\",\n    value: function determinant() {\n      return mat3.determinant(this);\n    }\n  }, {\n    key: \"identity\",\n    value: function identity() {\n      return this.copy(IDENTITY);\n    }\n  }, {\n    key: \"fromQuaternion\",\n    value: function fromQuaternion(q) {\n      mat3.fromQuat(this, q);\n      return this.check();\n    }\n  }, {\n    key: \"transpose\",\n    value: function transpose() {\n      mat3.transpose(this, this);\n      return this.check();\n    }\n  }, {\n    key: \"invert\",\n    value: function invert() {\n      mat3.invert(this, this);\n      return this.check();\n    }\n  }, {\n    key: \"multiplyLeft\",\n    value: function multiplyLeft(a) {\n      mat3.multiply(this, a, this);\n      return this.check();\n    }\n  }, {\n    key: \"multiplyRight\",\n    value: function multiplyRight(a) {\n      mat3.multiply(this, this, a);\n      return this.check();\n    }\n  }, {\n    key: \"rotate\",\n    value: function rotate(radians) {\n      mat3.rotate(this, this, radians);\n      return this.check();\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(factor) {\n      if (Array.isArray(factor)) {\n        mat3.scale(this, this, factor);\n      } else {\n        mat3.scale(this, this, [factor, factor, factor]);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"translate\",\n    value: function translate(vec) {\n      mat3.translate(this, this, vec);\n      return this.check();\n    }\n  }, {\n    key: \"transform\",\n    value: function transform(vector, result) {\n      switch (vector.length) {\n        case 2:\n          result = vec2.transformMat3(result || [-0, -0], vector, this);\n          break;\n\n        case 3:\n          result = vec3.transformMat3(result || [-0, -0, -0], vector, this);\n          break;\n\n        case 4:\n          result = vec4_transformMat3(result || [-0, -0, -0, -0], vector, this);\n          break;\n\n        default:\n          throw new Error('Illegal vector');\n      }\n\n      checkVector(result, vector.length);\n      return result;\n    }\n  }, {\n    key: \"transformVector\",\n    value: function transformVector(vector, result) {\n      deprecated('Matrix3.transformVector');\n      return this.transform(vector, result);\n    }\n  }, {\n    key: \"transformVector2\",\n    value: function transformVector2(vector, result) {\n      deprecated('Matrix3.transformVector');\n      return this.transform(vector, result);\n    }\n  }, {\n    key: \"transformVector3\",\n    value: function transformVector3(vector, result) {\n      deprecated('Matrix3.transformVector');\n      return this.transform(vector, result);\n    }\n  }]);\n\n  return Matrix3;\n}(Matrix);\n\nexport { Matrix3 as default };","map":{"version":3,"sources":["../../../src/classes/matrix3.js"],"names":["IDENTITY","Object","ZERO","INDICES","COL0ROW0","COL0ROW1","COL0ROW2","COL1ROW0","COL1ROW1","COL1ROW2","COL2ROW0","COL2ROW1","COL2ROW2","constants","Matrix3","Matrix","arguments","Array","array","m00","m10","m20","m01","m11","m21","m02","m12","m22","mat3","q","a","radians","factor","vec","vector","result","vec2","vec3","vec4_transformMat3","checkVector","deprecated"],"mappings":"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","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport Matrix from './base/matrix';\nimport {checkVector, deprecated} from '../lib/validators';\nimport {vec4_transformMat3} from '../lib/gl-matrix-extras';\n\nimport * as mat3 from 'gl-matrix/mat3';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\n\nconst IDENTITY = Object.freeze([1, 0, 0, 0, 1, 0, 0, 0, 1]);\nconst ZERO = Object.freeze([0, 0, 0, 0, 0, 0, 0, 0, 0]);\n\nconst INDICES = Object.freeze({\n  COL0ROW0: 0,\n  COL0ROW1: 1,\n  COL0ROW2: 2,\n  COL1ROW0: 3,\n  COL1ROW1: 4,\n  COL1ROW2: 5,\n  COL2ROW0: 6,\n  COL2ROW1: 7,\n  COL2ROW2: 8\n});\n\nconst constants = {};\n\nexport default class Matrix3 extends Matrix {\n  static get IDENTITY() {\n    constants.IDENTITY = constants.IDENTITY || Object.freeze(new Matrix3(IDENTITY));\n    return constants.IDENTITY;\n  }\n\n  static get ZERO() {\n    constants.ZERO = constants.ZERO || Object.freeze(new Matrix3(ZERO));\n    return constants.ZERO;\n  }\n\n  get ELEMENTS() {\n    return 9;\n  }\n\n  get RANK() {\n    return 3;\n  }\n\n  get INDICES() {\n    return INDICES;\n  }\n\n  constructor(array) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(-0, -0, -0, -0, -0, -0, -0, -0, -0);\n    if (arguments.length === 1 && Array.isArray(array)) {\n      this.copy(array);\n    } else {\n      this.identity();\n    }\n  }\n\n  copy(array) {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    this[3] = array[3];\n    this[4] = array[4];\n    this[5] = array[5];\n    this[6] = array[6];\n    this[7] = array[7];\n    this[8] = array[8];\n    return this.check();\n  }\n\n  // accepts column major order, stores in column major order\n  // eslint-disable-next-line max-params\n  set(m00, m10, m20, m01, m11, m21, m02, m12, m22) {\n    this[0] = m00;\n    this[1] = m10;\n    this[2] = m20;\n    this[3] = m01;\n    this[4] = m11;\n    this[5] = m21;\n    this[6] = m02;\n    this[7] = m12;\n    this[8] = m22;\n    return this.check();\n  }\n\n  // accepts row major order, stores as column major\n  // eslint-disable-next-line max-params\n  setRowMajor(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    this[0] = m00;\n    this[1] = m10;\n    this[2] = m20;\n    this[3] = m01;\n    this[4] = m11;\n    this[5] = m21;\n    this[6] = m02;\n    this[7] = m12;\n    this[8] = m22;\n    return this.check();\n  }\n\n  // Accessors\n\n  determinant() {\n    return mat3.determinant(this);\n  }\n\n  // Constructors\n\n  identity() {\n    return this.copy(IDENTITY);\n  }\n\n  // Calculates a 3x3 matrix from the given quaternion\n  // q quat  Quaternion to create matrix from\n  fromQuaternion(q) {\n    mat3.fromQuat(this, q);\n    return this.check();\n  }\n\n  // Modifiers\n\n  transpose() {\n    mat3.transpose(this, this);\n    return this.check();\n  }\n\n  invert() {\n    mat3.invert(this, this);\n    return this.check();\n  }\n\n  // Operations\n\n  multiplyLeft(a) {\n    mat3.multiply(this, a, this);\n    return this.check();\n  }\n\n  multiplyRight(a) {\n    mat3.multiply(this, this, a);\n    return this.check();\n  }\n\n  rotate(radians) {\n    mat3.rotate(this, this, radians);\n    return this.check();\n  }\n\n  scale(factor) {\n    if (Array.isArray(factor)) {\n      mat3.scale(this, this, factor);\n    } else {\n      mat3.scale(this, this, [factor, factor, factor]);\n    }\n\n    return this.check();\n  }\n\n  translate(vec) {\n    mat3.translate(this, this, vec);\n    return this.check();\n  }\n\n  // Transforms\n\n  transform(vector, result) {\n    switch (vector.length) {\n      case 2:\n        result = vec2.transformMat3(result || [-0, -0], vector, this);\n        break;\n      case 3:\n        result = vec3.transformMat3(result || [-0, -0, -0], vector, this);\n        break;\n      case 4:\n        result = vec4_transformMat3(result || [-0, -0, -0, -0], vector, this);\n        break;\n      default:\n        throw new Error('Illegal vector');\n    }\n    checkVector(result, vector.length);\n    return result;\n  }\n\n  // DEPRECATED IN 3.0\n\n  transformVector(vector, result) {\n    deprecated('Matrix3.transformVector');\n    return this.transform(vector, result);\n  }\n\n  transformVector2(vector, result) {\n    deprecated('Matrix3.transformVector');\n    return this.transform(vector, result);\n  }\n\n  transformVector3(vector, result) {\n    deprecated('Matrix3.transformVector');\n    return this.transform(vector, result);\n  }\n\n  // Deprecations in v3.0\n}\n"]},"metadata":{},"sourceType":"module"}