{"ast":null,"code":"import assert from '../utils/assert';\nvar TYPES = ['SCALAR', 'VEC2', 'VEC3', 'VEC4'];\nvar ARRAY_TO_COMPONENT_TYPE = new Map([[Int8Array, 5120], [Uint8Array, 5121], [Int16Array, 5122], [Uint16Array, 5123], [Uint32Array, 5125], [Float32Array, 5126]]);\nexport var ATTRIBUTE_TYPE_TO_COMPONENTS = {\n  SCALAR: 1,\n  VEC2: 2,\n  VEC3: 3,\n  VEC4: 4,\n  MAT2: 4,\n  MAT3: 9,\n  MAT4: 16\n};\nexport var ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE = {\n  5120: 1,\n  5121: 1,\n  5122: 2,\n  5123: 2,\n  5125: 4,\n  5126: 4\n};\nexport var ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY = {\n  5120: Int8Array,\n  5121: Uint8Array,\n  5122: Int16Array,\n  5123: Uint16Array,\n  5125: Uint32Array,\n  5126: Float32Array\n};\nexport function getAccessorTypeFromSize(size) {\n  var type = TYPES[size - 1];\n  return type || TYPES[0];\n}\nexport function getComponentTypeFromArray(typedArray) {\n  var componentType = ARRAY_TO_COMPONENT_TYPE.get(typedArray.constructor);\n\n  if (!componentType) {\n    throw new Error('Illegal typed array');\n  }\n\n  return componentType;\n}\nexport function getAccessorArrayTypeAndLength(accessor, bufferView) {\n  var ArrayType = ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY[accessor.componentType];\n  var components = ATTRIBUTE_TYPE_TO_COMPONENTS[accessor.type];\n  var bytesPerComponent = ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE[accessor.componentType];\n  var length = accessor.count * components;\n  var byteLength = accessor.count * components * bytesPerComponent;\n  assert(byteLength >= 0 && byteLength <= bufferView.byteLength);\n  return {\n    ArrayType: ArrayType,\n    length: length,\n    byteLength: byteLength\n  };\n}","map":{"version":3,"sources":["../../../../src/lib/gltf-utils/gltf-utils.js"],"names":["TYPES","ARRAY_TO_COMPONENT_TYPE","ATTRIBUTE_TYPE_TO_COMPONENTS","SCALAR","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE","ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY","Float32Array","type","size","componentType","typedArray","ArrayType","accessor","components","bytesPerComponent","length","byteLength","assert","bufferView"],"mappings":"AAAA,OAAA,MAAA,MAAA,iBAAA;AAEA,IAAMA,KAAK,GAAG,CAAA,QAAA,EAAA,MAAA,EAAA,MAAA,EAAd,MAAc,CAAd;AAEA,IAAMC,uBAAuB,GAAG,IAAA,GAAA,CAAQ,CACtC,CAAA,SAAA,EADsC,IACtC,CADsC,EAEtC,CAAA,UAAA,EAFsC,IAEtC,CAFsC,EAGtC,CAAA,UAAA,EAHsC,IAGtC,CAHsC,EAItC,CAAA,WAAA,EAJsC,IAItC,CAJsC,EAKtC,CAAA,WAAA,EALsC,IAKtC,CALsC,EAMtC,CAAA,YAAA,EANF,IAME,CANsC,CAAR,CAAhC;AASA,OAAO,IAAMC,4BAA4B,GAAG;AAC1CC,EAAAA,MAAM,EADoC,CAAA;AAE1CC,EAAAA,IAAI,EAFsC,CAAA;AAG1CC,EAAAA,IAAI,EAHsC,CAAA;AAI1CC,EAAAA,IAAI,EAJsC,CAAA;AAK1CC,EAAAA,IAAI,EALsC,CAAA;AAM1CC,EAAAA,IAAI,EANsC,CAAA;AAO1CC,EAAAA,IAAI,EAAE;AAPoC,CAArC;AAUP,OAAO,IAAMC,qCAAqC,GAAG;AACnD,QADmD,CAAA;AAEnD,QAFmD,CAAA;AAGnD,QAHmD,CAAA;AAInD,QAJmD,CAAA;AAKnD,QALmD,CAAA;AAMnD,QAAM;AAN6C,CAA9C;AASP,OAAO,IAAMC,iCAAiC,GAAG;AAC/C,QAD+C,SAAA;AAE/C,QAF+C,UAAA;AAG/C,QAH+C,UAAA;AAI/C,QAJ+C,WAAA;AAK/C,QAL+C,WAAA;AAM/C,QAAMC;AANyC,CAA1C;AASP,OAAO,SAAA,uBAAA,CAAA,IAAA,EAAuC;AAC5C,MAAMC,IAAI,GAAGb,KAAK,CAACc,IAAI,GAAvB,CAAkB,CAAlB;AACA,SAAOD,IAAI,IAAIb,KAAK,CAApB,CAAoB,CAApB;AACD;AAED,OAAO,SAAA,yBAAA,CAAA,UAAA,EAA+C;AACpD,MAAMe,aAAa,GAAGd,uBAAuB,CAAvBA,GAAAA,CAA4Be,UAAU,CAA5D,WAAsBf,CAAtB;;AACA,MAAI,CAAJ,aAAA,EAAoB;AAClB,UAAM,IAAA,KAAA,CAAN,qBAAM,CAAN;AACD;;AACD,SAAA,aAAA;AACD;AAED,OAAO,SAAA,6BAAA,CAAA,QAAA,EAAA,UAAA,EAA6D;AAClE,MAAMgB,SAAS,GAAGN,iCAAiC,CAACO,QAAQ,CAA5D,aAAmD,CAAnD;AACA,MAAMC,UAAU,GAAGjB,4BAA4B,CAACgB,QAAQ,CAAxD,IAA+C,CAA/C;AACA,MAAME,iBAAiB,GAAGV,qCAAqC,CAACQ,QAAQ,CAAxE,aAA+D,CAA/D;AACA,MAAMG,MAAM,GAAGH,QAAQ,CAARA,KAAAA,GAAf,UAAA;AACA,MAAMI,UAAU,GAAGJ,QAAQ,CAARA,KAAAA,GAAAA,UAAAA,GAAnB,iBAAA;AACAK,EAAAA,MAAM,CAACD,UAAU,IAAVA,CAAAA,IAAmBA,UAAU,IAAIE,UAAU,CAAlDD,UAAM,CAANA;AACA,SAAO;AAACN,IAAAA,SAAS,EAAV,SAAA;AAAYI,IAAAA,MAAM,EAAlB,MAAA;AAAoBC,IAAAA,UAAU,EAAVA;AAApB,GAAP;AACD","sourcesContent":["import assert from '../utils/assert';\n\nconst TYPES = ['SCALAR', 'VEC2', 'VEC3', 'VEC4'];\n\nconst ARRAY_TO_COMPONENT_TYPE = new Map([\n  [Int8Array, 5120],\n  [Uint8Array, 5121],\n  [Int16Array, 5122],\n  [Uint16Array, 5123],\n  [Uint32Array, 5125],\n  [Float32Array, 5126]\n]);\n\nexport const ATTRIBUTE_TYPE_TO_COMPONENTS = {\n  SCALAR: 1,\n  VEC2: 2,\n  VEC3: 3,\n  VEC4: 4,\n  MAT2: 4,\n  MAT3: 9,\n  MAT4: 16\n};\n\nexport const ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE = {\n  5120: 1,\n  5121: 1,\n  5122: 2,\n  5123: 2,\n  5125: 4,\n  5126: 4\n};\n\nexport const ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY = {\n  5120: Int8Array,\n  5121: Uint8Array,\n  5122: Int16Array,\n  5123: Uint16Array,\n  5125: Uint32Array,\n  5126: Float32Array\n};\n\nexport function getAccessorTypeFromSize(size) {\n  const type = TYPES[size - 1];\n  return type || TYPES[0];\n}\n\nexport function getComponentTypeFromArray(typedArray) {\n  const componentType = ARRAY_TO_COMPONENT_TYPE.get(typedArray.constructor);\n  if (!componentType) {\n    throw new Error('Illegal typed array');\n  }\n  return componentType;\n}\n\nexport function getAccessorArrayTypeAndLength(accessor, bufferView) {\n  const ArrayType = ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY[accessor.componentType];\n  const components = ATTRIBUTE_TYPE_TO_COMPONENTS[accessor.type];\n  const bytesPerComponent = ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE[accessor.componentType];\n  const length = accessor.count * components;\n  const byteLength = accessor.count * components * bytesPerComponent;\n  assert(byteLength >= 0 && byteLength <= bufferView.byteLength);\n  return {ArrayType, length, byteLength};\n}\n"]},"metadata":{},"sourceType":"module"}