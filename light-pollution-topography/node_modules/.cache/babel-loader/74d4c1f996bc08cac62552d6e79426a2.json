{"ast":null,"code":"import _slicedToArray from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { DataType } from './type';\nimport { selectArgs } from './util/args';\nimport { selectFieldArgs } from './util/args';\nimport { instance as comparer } from './visitor/typecomparator';\nexport var Schema = /*#__PURE__*/function () {\n  function Schema() {\n    var fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var metadata = arguments.length > 1 ? arguments[1] : undefined;\n    var dictionaries = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, Schema);\n\n    this.fields = fields || [];\n    this.metadata = metadata || new Map();\n\n    if (!dictionaries) {\n      dictionaries = generateDictionaryMap(fields);\n    }\n\n    this.dictionaries = dictionaries;\n  }\n  /** @nocollapse */\n\n\n  _createClass(Schema, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"Schema<{ \".concat(this.fields.map(function (f, i) {\n        return \"\".concat(i, \": \").concat(f);\n      }).join(', '), \" }>\");\n    }\n  }, {\n    key: \"compareTo\",\n    value: function compareTo(other) {\n      return comparer.compareSchemas(this, other);\n    }\n  }, {\n    key: \"select\",\n    value: function select() {\n      for (var _len = arguments.length, columnNames = new Array(_len), _key = 0; _key < _len; _key++) {\n        columnNames[_key] = arguments[_key];\n      }\n\n      var names = columnNames.reduce(function (xs, x) {\n        return (xs[x] = true) && xs;\n      }, Object.create(null));\n      return new Schema(this.fields.filter(function (f) {\n        return names[f.name];\n      }), this.metadata);\n    }\n  }, {\n    key: \"selectAt\",\n    value: function selectAt() {\n      var _this = this;\n\n      for (var _len2 = arguments.length, columnIndices = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        columnIndices[_key2] = arguments[_key2];\n      }\n\n      return new Schema(columnIndices.map(function (i) {\n        return _this.fields[i];\n      }).filter(Boolean), this.metadata);\n    }\n  }, {\n    key: \"assign\",\n    value: function assign() {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      var other = args[0] instanceof Schema ? args[0] : new Schema(selectArgs(Field, args));\n\n      var curFields = _toConsumableArray(this.fields);\n\n      var metadata = mergeMaps(mergeMaps(new Map(), this.metadata), other.metadata);\n      var newFields = other.fields.filter(function (f2) {\n        var i = curFields.findIndex(function (f) {\n          return f.name === f2.name;\n        });\n        return ~i ? (curFields[i] = f2.clone({\n          metadata: mergeMaps(mergeMaps(new Map(), curFields[i].metadata), f2.metadata)\n        })) && false : true;\n      });\n      var newDictionaries = generateDictionaryMap(newFields, new Map());\n      return new Schema([].concat(_toConsumableArray(curFields), _toConsumableArray(newFields)), metadata, new Map([].concat(_toConsumableArray(this.dictionaries), _toConsumableArray(newDictionaries))));\n    }\n  }, {\n    key: Symbol.toStringTag,\n    get: function get() {\n      return 'Schema';\n    }\n  }], [{\n    key: \"from\",\n    value: function from() {\n      return Schema.new(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);\n    }\n    /** @nocollapse */\n\n  }, {\n    key: \"new\",\n    value: function _new() {\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      return new Schema(selectFieldArgs(args)[0]);\n    }\n  }]);\n\n  return Schema;\n}();\nexport var Field = /*#__PURE__*/function () {\n  function Field(name, type) {\n    var nullable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var metadata = arguments.length > 3 ? arguments[3] : undefined;\n\n    _classCallCheck(this, Field);\n\n    this.name = name;\n    this.type = type;\n    this.nullable = nullable;\n    this.metadata = metadata || new Map();\n  }\n  /** @nocollapse */\n\n\n  _createClass(Field, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"\".concat(this.name, \": \").concat(this.type);\n    }\n  }, {\n    key: \"compareTo\",\n    value: function compareTo(other) {\n      return comparer.compareField(this, other);\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var _args, _args2, _args2$, _args2$2, _args2$3, _args2$4, _args$, _args$$name, _args$$type, _args$$nullable, _args$$metadata;\n\n      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n\n      var name = args[0],\n          type = args[1],\n          nullable = args[2],\n          metadata = args[3];\n      !args[0] || typeof args[0] !== 'object' ? (_args = args, _args2 = _slicedToArray(_args, 4), _args2$ = _args2[0], name = _args2$ === void 0 ? this.name : _args2$, _args2$2 = _args2[1], type = _args2$2 === void 0 ? this.type : _args2$2, _args2$3 = _args2[2], nullable = _args2$3 === void 0 ? this.nullable : _args2$3, _args2$4 = _args2[3], metadata = _args2$4 === void 0 ? this.metadata : _args2$4, _args) : (_args$ = args[0], _args$$name = _args$.name, name = _args$$name === void 0 ? this.name : _args$$name, _args$$type = _args$.type, type = _args$$type === void 0 ? this.type : _args$$type, _args$$nullable = _args$.nullable, nullable = _args$$nullable === void 0 ? this.nullable : _args$$nullable, _args$$metadata = _args$.metadata, metadata = _args$$metadata === void 0 ? this.metadata : _args$$metadata, _args$);\n      return Field.new(name, type, nullable, metadata);\n    }\n  }, {\n    key: \"typeId\",\n    get: function get() {\n      return this.type.typeId;\n    }\n  }, {\n    key: Symbol.toStringTag,\n    get: function get() {\n      return 'Field';\n    }\n  }], [{\n    key: \"new\",\n    value: function _new() {\n      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n\n      var name = args[0],\n          type = args[1],\n          nullable = args[2],\n          metadata = args[3];\n\n      if (args[0] && typeof args[0] === 'object') {\n        name = args[0].name;\n        type === undefined && (type = args[0].type);\n        nullable === undefined && (nullable = args[0].nullable);\n        metadata === undefined && (metadata = args[0].metadata);\n      }\n\n      return new Field(\"\".concat(name), type, nullable, metadata);\n    }\n  }]);\n\n  return Field;\n}();\n/** @ignore */\n\nfunction mergeMaps(m1, m2) {\n  return new Map([].concat(_toConsumableArray(m1 || new Map()), _toConsumableArray(m2 || new Map())));\n}\n/** @ignore */\n\n\nfunction generateDictionaryMap(fields) {\n  var dictionaries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Map();\n\n  for (var i = -1, n = fields.length; ++i < n;) {\n    var field = fields[i];\n    var type = field.type;\n\n    if (DataType.isDictionary(type)) {\n      if (!dictionaries.has(type.id)) {\n        dictionaries.set(type.id, type.dictionary);\n      } else if (dictionaries.get(type.id) !== type.dictionary) {\n        throw new Error(\"Cannot create Schema containing two different dictionaries with the same Id\");\n      }\n    }\n\n    if (type.children && type.children.length > 0) {\n      generateDictionaryMap(type.children, dictionaries);\n    }\n  }\n\n  return dictionaries;\n} // Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n\n\nSchema.prototype.fields = null;\nSchema.prototype.metadata = null;\nSchema.prototype.dictionaries = null;\nField.prototype.type = null;\nField.prototype.name = null;\nField.prototype.nullable = null;\nField.prototype.metadata = null;","map":{"version":3,"sources":["schema.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { DataType } from './type';\nimport { selectArgs } from './util/args';\nimport { selectFieldArgs } from './util/args';\nimport { instance as comparer } from './visitor/typecomparator';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = T[keyof T][] | Data<T[keyof T]>[] | Vector<T[keyof T]>[];\n\nexport class Schema<T extends { [key: string]: DataType } = any> {\n\n    public static from<T extends { [key: string]: DataType } = any>(children: T): Schema<T>;\n    public static from<T extends VectorMap = any>(children: T): Schema<{ [P in keyof T]: T[P]['type'] }>;\n    public static from<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Schema<T>;\n    /** @nocollapse */\n    public static from(...args: any[]) {\n        return Schema.new(args[0], args[1]);\n    }\n\n    public static new<T extends { [key: string]: DataType } = any>(children: T): Schema<T>;\n    public static new<T extends VectorMap = any>(children: T): Schema<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Schema<T>;\n    /** @nocollapse */\n    public static new(...args: any[]) {\n        return new Schema(selectFieldArgs(args)[0]);\n    }\n\n    public readonly fields: Field<T[keyof T]>[];\n    public readonly metadata: Map<string, string>;\n    public readonly dictionaries: Map<number, DataType>;\n\n    constructor(fields: Field[] = [],\n                metadata?: Map<string, string> | null,\n                dictionaries?: Map<number, DataType> | null) {\n        this.fields = (fields || []) as Field<T[keyof T]>[];\n        this.metadata = metadata || new Map();\n        if (!dictionaries) {\n            dictionaries = generateDictionaryMap(fields);\n        }\n        this.dictionaries = dictionaries;\n    }\n    public get [Symbol.toStringTag]() { return 'Schema'; }\n    public toString() {\n        return `Schema<{ ${this.fields.map((f, i) => `${i}: ${f}`).join(', ')} }>`;\n    }\n\n    public compareTo(other?: Schema | null): other is Schema<T> {\n        return comparer.compareSchemas(this, other);\n    }\n\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const names = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n        return new Schema<{ [P in K]: T[P] }>(this.fields.filter((f) => names[f.name]), this.metadata);\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        return new Schema<{ [key: string]: K }>(columnIndices.map((i) => this.fields[i]).filter(Boolean), this.metadata);\n    }\n\n    public assign<R extends { [key: string]: DataType } = any>(schema: Schema<R>): Schema<T & R>;\n    public assign<R extends { [key: string]: DataType } = any>(...fields: (Field<R[keyof R]> | Field<R[keyof R]>[])[]): Schema<T & R>;\n    public assign<R extends { [key: string]: DataType } = any>(...args: (Schema<R> | Field<R[keyof R]> | Field<R[keyof R]>[])[]) {\n\n        const other = args[0] instanceof Schema ? args[0] as Schema<R>\n            : new Schema<R>(selectArgs<Field<R[keyof R]>>(Field, args));\n\n        const curFields = [...this.fields] as Field[];\n        const metadata = mergeMaps(mergeMaps(new Map(), this.metadata), other.metadata);\n        const newFields = other.fields.filter((f2) => {\n            const i = curFields.findIndex((f) => f.name === f2.name);\n            return ~i ? (curFields[i] = f2.clone({\n                metadata: mergeMaps(mergeMaps(new Map(), curFields[i].metadata), f2.metadata)\n            })) && false : true;\n        }) as Field[];\n\n        const newDictionaries = generateDictionaryMap(newFields, new Map());\n\n        return new Schema<T & R>(\n            [...curFields, ...newFields], metadata,\n            new Map([...this.dictionaries, ...newDictionaries])\n        );\n    }\n}\n\nexport class Field<T extends DataType = any> {\n\n    public static new<T extends DataType = any>(props: { name: string | number, type: T, nullable?: boolean, metadata?: Map<string, string> | null }): Field<T>;\n    public static new<T extends DataType = any>(name: string | number | Field<T>, type: T, nullable?: boolean, metadata?: Map<string, string> | null): Field<T>;\n    /** @nocollapse */\n    public static new<T extends DataType = any>(...args: any[]) {\n        let [name, type, nullable, metadata] = args;\n        if (args[0] && typeof args[0] === 'object') {\n            ({ name } = args[0]);\n            (type === undefined) && (type = args[0].type);\n            (nullable === undefined) && (nullable = args[0].nullable);\n            (metadata === undefined) && (metadata = args[0].metadata);\n        }\n        return new Field<T>(`${name}`, type, nullable, metadata);\n    }\n\n    public readonly type: T;\n    public readonly name: string;\n    public readonly nullable: boolean;\n    public readonly metadata: Map<string, string>;\n\n    constructor(name: string, type: T, nullable = false, metadata?: Map<string, string> | null) {\n        this.name = name;\n        this.type = type;\n        this.nullable = nullable;\n        this.metadata = metadata || new Map();\n    }\n\n    public get typeId() { return this.type.typeId; }\n    public get [Symbol.toStringTag]() { return 'Field'; }\n    public toString() { return `${this.name}: ${this.type}`; }\n    public compareTo(other?: Field | null): other is Field<T> {\n        return comparer.compareField(this, other);\n    }\n    public clone<R extends DataType = T>(props: { name?: string | number, type?: R, nullable?: boolean, metadata?: Map<string, string> | null }): Field<R>;\n    public clone<R extends DataType = T>(name?: string | number | Field<T>, type?: R, nullable?: boolean, metadata?: Map<string, string> | null): Field<R>;\n    public clone<R extends DataType = T>(...args: any[]) {\n        let [name, type, nullable, metadata] = args;\n        (!args[0] || typeof args[0] !== 'object')\n            ? ([name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata] = args)\n            : ({name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata} = args[0]);\n        return Field.new<R>(name, type, nullable, metadata);\n    }\n}\n\n/** @ignore */\nfunction mergeMaps<TKey, TVal>(m1?: Map<TKey, TVal> | null, m2?: Map<TKey, TVal> | null): Map<TKey, TVal> {\n    return new Map([...(m1 || new Map()), ...(m2 || new Map())]);\n}\n\n/** @ignore */\nfunction generateDictionaryMap(fields: Field[], dictionaries = new Map<number, DataType>()): Map<number, DataType> {\n\n    for (let i = -1, n = fields.length; ++i < n;) {\n        const field = fields[i];\n        const type = field.type;\n        if (DataType.isDictionary(type)) {\n            if (!dictionaries.has(type.id)) {\n                dictionaries.set(type.id, type.dictionary);\n            } else if (dictionaries.get(type.id) !== type.dictionary) {\n                throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);\n            }\n        }\n        if (type.children && type.children.length > 0) {\n            generateDictionaryMap(type.children, dictionaries);\n        }\n    }\n\n    return dictionaries;\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Schema.prototype as any).fields = null;\n(Schema.prototype as any).metadata = null;\n(Schema.prototype as any).dictionaries = null;\n\n(Field.prototype as any).type = null;\n(Field.prototype as any).name = null;\n(Field.prototype as any).nullable = null;\n(Field.prototype as any).metadata = null;\n"]},"metadata":{},"sourceType":"module"}