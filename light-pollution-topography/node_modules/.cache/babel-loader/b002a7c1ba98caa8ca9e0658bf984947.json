{"ast":null,"code":"import { GL_PARAMETER_DEFAULTS, GL_PARAMETER_SETTERS, GL_COMPOSITE_PARAMETER_SETTERS, GL_PARAMETER_GETTERS } from './webgl-parameter-tables';\nimport { pushContextState, popContextState } from './track-context-state';\nimport { isObjectEmpty, isWebGL, assert } from '../utils';\nexport function setParameters(gl, values) {\n  assert(isWebGL(gl), 'setParameters requires a WebGL context');\n\n  if (isObjectEmpty(values)) {\n    return;\n  }\n\n  var compositeSetters = {};\n\n  for (var key in values) {\n    var glConstant = Number(key);\n    var setter = GL_PARAMETER_SETTERS[key];\n\n    if (setter) {\n      if (typeof setter === 'string') {\n        compositeSetters[setter] = true;\n      } else {\n        setter(gl, values[key], glConstant);\n      }\n    }\n  }\n\n  var cache = gl.state && gl.state.cache;\n\n  if (cache) {\n    for (var _key in compositeSetters) {\n      var compositeSetter = GL_COMPOSITE_PARAMETER_SETTERS[_key];\n      compositeSetter(gl, values, cache);\n    }\n  }\n}\nexport function getParameters(gl, parameters) {\n  parameters = parameters || GL_PARAMETER_DEFAULTS;\n\n  if (typeof parameters === 'number') {\n    var key = parameters;\n    var getter = GL_PARAMETER_GETTERS[key];\n    return getter ? getter(gl, key) : gl.getParameter(key);\n  }\n\n  var parameterKeys = Array.isArray(parameters) ? parameters : Object.keys(parameters);\n  var state = {};\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = parameterKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var _key2 = _step.value;\n      var _getter = GL_PARAMETER_GETTERS[_key2];\n      state[_key2] = _getter ? _getter(gl, Number(_key2)) : gl.getParameter(Number(_key2));\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n        _iterator[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return state;\n}\nexport function resetParameters(gl) {\n  setParameters(gl, GL_PARAMETER_DEFAULTS);\n}\nexport function withParameters(gl, parameters, func) {\n  if (isObjectEmpty(parameters)) {\n    return func(gl);\n  }\n\n  var _parameters$nocatch = parameters.nocatch,\n      nocatch = _parameters$nocatch === void 0 ? true : _parameters$nocatch;\n  pushContextState(gl);\n  setParameters(gl, parameters);\n  var value;\n\n  if (nocatch) {\n    value = func(gl);\n    popContextState(gl);\n  } else {\n    try {\n      value = func(gl);\n    } finally {\n      popContextState(gl);\n    }\n  }\n\n  return value;\n}","map":{"version":3,"sources":["../../../src/state-tracker/unified-parameter-api.js"],"names":["assert","isWebGL","isObjectEmpty","compositeSetters","glConstant","Number","setter","GL_PARAMETER_SETTERS","values","cache","gl","compositeSetter","GL_COMPOSITE_PARAMETER_SETTERS","parameters","key","getter","GL_PARAMETER_GETTERS","parameterKeys","Array","Object","state","setParameters","func","nocatch","pushContextState","value","popContextState"],"mappings":"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","sourcesContent":["// Provides a unified API for getting and setting any WebGL parameter\n// Also knows default values of all parameters, enabling fast cache initialization\n// Provides base functionality for the state caching.\nimport {\n  GL_PARAMETER_DEFAULTS,\n  GL_PARAMETER_SETTERS,\n  GL_COMPOSITE_PARAMETER_SETTERS,\n  GL_PARAMETER_GETTERS\n} from './webgl-parameter-tables';\n\nimport {pushContextState, popContextState} from './track-context-state';\nimport {isObjectEmpty, isWebGL, assert} from '../utils';\n\n// Sets any GL parameter regardless of function (gl.blendMode, ...)\n// Note: requires a `cache` object to be set on the context (gl.state.cache)\n// This object is used to fill in any missing values for composite setter functions\nexport function setParameters(gl, values) {\n  assert(isWebGL(gl), 'setParameters requires a WebGL context');\n\n  if (isObjectEmpty(values)) {\n    return;\n  }\n\n  const compositeSetters = {};\n\n  // HANDLE PRIMITIVE SETTERS (and make note of any composite setters)\n\n  for (const key in values) {\n    const glConstant = Number(key);\n    const setter = GL_PARAMETER_SETTERS[key];\n    if (setter) {\n      // Composite setters should only be called once, so save them\n      if (typeof setter === 'string') {\n        compositeSetters[setter] = true;\n      } else {\n        // if (gl[glConstant] !== undefined) {\n        // TODO - added above check since this is being called on WebGL2 values in WebGL1...\n        // TODO - deep equal on values? only call setter if value has changed?\n        // NOTE - the setter will automatically update this.state\n        setter(gl, values[key], glConstant);\n      }\n    }\n  }\n\n  // HANDLE COMPOSITE SETTERS\n\n  // NOTE: any non-provided values needed by composite setters are filled in from state cache\n  // The cache parameter is automatically retrieved from the context\n  // This depends on `trackContextState`, which is technically a \"circular\" dependency.\n  // But it is too inconvenient to always require a cache parameter here.\n  // This is the ONLY external dependency in this module/\n  const cache = gl.state && gl.state.cache;\n  if (cache) {\n    for (const key in compositeSetters) {\n      // TODO - avoid calling composite setters if values have not changed.\n      const compositeSetter = GL_COMPOSITE_PARAMETER_SETTERS[key];\n      // Note - if `trackContextState` has been called,\n      // the setter will automatically update this.state.cache\n      compositeSetter(gl, values, cache);\n    }\n  }\n\n  // Add a log for the else case?\n}\n\n// Copies the state from a context (gl.getParameter should not be overriden)\n// Reads the entire WebGL state from a context\n// Caveat: This generates a huge amount of synchronous driver roundtrips and should be\n// considered a very slow operation, to be used only if/when a context already manipulated\n// by external code needs to be synchronized for the first time\n// @return {Object} - a newly created map, with values keyed by GL parameters\nexport function getParameters(gl, parameters) {\n  // default to querying all parameters\n  parameters = parameters || GL_PARAMETER_DEFAULTS;\n  // support both arrays of parameters and objects (keys represent parameters)\n\n  if (typeof parameters === 'number') {\n    // single GL enum\n    const key = parameters;\n    const getter = GL_PARAMETER_GETTERS[key];\n    return getter ? getter(gl, key) : gl.getParameter(key);\n  }\n\n  const parameterKeys = Array.isArray(parameters) ? parameters : Object.keys(parameters);\n\n  const state = {};\n  for (const key of parameterKeys) {\n    const getter = GL_PARAMETER_GETTERS[key];\n    state[key] = getter ? getter(gl, Number(key)) : gl.getParameter(Number(key));\n  }\n  return state;\n}\n\n// Reset all parameters to a (almost) pure context state\n// NOTE: viewport and scissor will be set to the values in GL_PARAMETER_DEFAULTS,\n//   NOT the canvas size dimensions, so they will have to be properly set after\n//   calling this function.\nexport function resetParameters(gl) {\n  setParameters(gl, GL_PARAMETER_DEFAULTS);\n}\n\n// Stores current \"global\" WebGL context settings, changes selected parameters,\n// executes function, restores parameters\nexport function withParameters(gl, parameters, func) {\n  if (isObjectEmpty(parameters)) {\n    // Avoid setting state if no parameters provided. Just call and return\n    return func(gl);\n  }\n\n  const {nocatch = true} = parameters;\n\n  pushContextState(gl);\n  setParameters(gl, parameters);\n\n  // Setup is done, call the function\n  let value;\n\n  if (nocatch) {\n    // Avoid try catch to minimize stack size impact for safe execution paths\n    value = func(gl);\n    popContextState(gl);\n  } else {\n    // Wrap in a try-catch to ensure that parameters are restored on exceptions\n    try {\n      value = func(gl);\n    } finally {\n      popContextState(gl);\n    }\n  }\n\n  return value;\n}\n"]},"metadata":{},"sourceType":"module"}