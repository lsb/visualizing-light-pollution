{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport Model from '../lib/model';\nimport Geometry from '../geometry/geometry';\nvar CLIPSPACE_VERTEX_SHADER = \"attribute vec2 aClipSpacePosition;\\nattribute vec2 aTexCoord;\\nattribute vec2 aCoordinate;\\n\\nvarying vec2 position;\\nvarying vec2 coordinate;\\nvarying vec2 uv;\\n\\nvoid main(void) {\\n  gl_Position = vec4(aClipSpacePosition, 0., 1.);\\n  position = aClipSpacePosition;\\n  coordinate = aCoordinate;\\n  uv = aTexCoord;\\n}\\n\";\nvar POSITIONS = [-1, -1, 1, -1, -1, 1, 1, 1];\n\nvar ClipSpace = function (_Model) {\n  _inherits(ClipSpace, _Model);\n\n  function ClipSpace(gl, opts) {\n    var _this;\n\n    _classCallCheck(this, ClipSpace);\n\n    var TEX_COORDS = POSITIONS.map(function (coord) {\n      return coord === -1 ? 0 : coord;\n    });\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ClipSpace).call(this, gl, Object.assign({}, opts, {\n      vs: CLIPSPACE_VERTEX_SHADER,\n      geometry: new Geometry({\n        drawMode: 5,\n        vertexCount: 4,\n        attributes: {\n          aClipSpacePosition: {\n            size: 2,\n            value: new Float32Array(POSITIONS)\n          },\n          aTexCoord: {\n            size: 2,\n            value: new Float32Array(TEX_COORDS)\n          },\n          aCoordinate: {\n            size: 2,\n            value: new Float32Array(TEX_COORDS)\n          }\n        }\n      })\n    })));\n\n    _this.setVertexCount(4);\n\n    return _this;\n  }\n\n  return ClipSpace;\n}(Model);\n\nexport { ClipSpace as default };","map":{"version":3,"sources":["../../../src/utils/clip-space.js"],"names":["CLIPSPACE_VERTEX_SHADER","POSITIONS","ClipSpace","Model","TEX_COORDS","coord","vs","geometry","drawMode","vertexCount","attributes","aClipSpacePosition","size","value","aTexCoord","aCoordinate"],"mappings":";;;;AAEA,OAAA,KAAA,MAAA,cAAA;AACA,OAAA,QAAA,MAAA,sBAAA;AAEA,IAAMA,uBAAuB,GAA7B,iUAAA;AAkBA,IAAMC,SAAS,GAAG,CAAC,CAAD,CAAA,EAAK,CAAL,CAAA,EAAA,CAAA,EAAY,CAAZ,CAAA,EAAgB,CAAhB,CAAA,EAAA,CAAA,EAAA,CAAA,EAAlB,CAAkB,CAAlB;;IAEqBC,S;;;AACnB,WAAA,SAAA,CAAA,EAAA,EAAA,IAAA,EAAsB;AAAA,QAAA,KAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,CAAA;;AACpB,QAAME,UAAU,GAAG,SAAS,CAAT,GAAA,CAAc,UAAA,KAAA,EAAK;AAAA,aAAKC,KAAK,KAAK,CAAVA,CAAAA,GAAAA,CAAAA,GAAL,KAAA;AAAtC,KAAmB,CAAnB;AAEA,IAAA,KAAA,GAAA,0BAAA,CAAA,IAAA,EAAA,eAAA,CAAA,SAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAA,EAAA,EAEE,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,IAAA,EAAwB;AACtBC,MAAAA,EAAE,EADoB,uBAAA;AAEtBC,MAAAA,QAAQ,EAAE,IAAA,QAAA,CAAa;AACrBC,QAAAA,QAAQ,EADa,CAAA;AAErBC,QAAAA,WAAW,EAFU,CAAA;AAGrBC,QAAAA,UAAU,EAAE;AACVC,UAAAA,kBAAkB,EAAE;AAACC,YAAAA,IAAI,EAAL,CAAA;AAAUC,YAAAA,KAAK,EAAE,IAAA,YAAA,CAAA,SAAA;AAAjB,WADV;AAEVC,UAAAA,SAAS,EAAE;AAACF,YAAAA,IAAI,EAAL,CAAA;AAAUC,YAAAA,KAAK,EAAE,IAAA,YAAA,CAAA,UAAA;AAAjB,WAFD;AAGVE,UAAAA,WAAW,EAAE;AAACH,YAAAA,IAAI,EAAL,CAAA;AAAUC,YAAAA,KAAK,EAAE,IAAA,YAAA,CAAA,UAAA;AAAjB;AAHH;AAHS,OAAb;AAFY,KAAxB,CAFF,CAAA,CAAA;;AAeA,IAAA,KAAA,CAAA,cAAA,CAAA,CAAA;;AAlBoB,WAAA,KAAA;AAmBrB;;;EApBoCV,K;;SAAlBD,S","sourcesContent":["// ClipSpace\nimport GL from '@luma.gl/constants';\nimport Model from '../lib/model';\nimport Geometry from '../geometry/geometry';\n\nconst CLIPSPACE_VERTEX_SHADER = `\\\nattribute vec2 aClipSpacePosition;\nattribute vec2 aTexCoord;\nattribute vec2 aCoordinate;\n\nvarying vec2 position;\nvarying vec2 coordinate;\nvarying vec2 uv;\n\nvoid main(void) {\n  gl_Position = vec4(aClipSpacePosition, 0., 1.);\n  position = aClipSpacePosition;\n  coordinate = aCoordinate;\n  uv = aTexCoord;\n}\n`;\n\n/* eslint-disable indent, no-multi-spaces */\nconst POSITIONS = [-1, -1, 1, -1, -1, 1, 1, 1];\n\nexport default class ClipSpace extends Model {\n  constructor(gl, opts) {\n    const TEX_COORDS = POSITIONS.map(coord => (coord === -1 ? 0 : coord));\n\n    super(\n      gl,\n      Object.assign({}, opts, {\n        vs: CLIPSPACE_VERTEX_SHADER,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_STRIP,\n          vertexCount: 4,\n          attributes: {\n            aClipSpacePosition: {size: 2, value: new Float32Array(POSITIONS)},\n            aTexCoord: {size: 2, value: new Float32Array(TEX_COORDS)},\n            aCoordinate: {size: 2, value: new Float32Array(TEX_COORDS)}\n          }\n        })\n      })\n    );\n    this.setVertexCount(4);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}