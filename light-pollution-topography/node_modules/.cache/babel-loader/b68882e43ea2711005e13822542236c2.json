{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { Layer, project32, picking } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport vs from './scatterplot-layer-vertex.glsl';\nimport fs from './scatterplot-layer-fragment.glsl';\nvar DEFAULT_COLOR = [0, 0, 0, 255];\nvar defaultProps = {\n  radiusScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  radiusMinPixels: {\n    type: 'number',\n    min: 0,\n    value: 0\n  },\n  radiusMaxPixels: {\n    type: 'number',\n    min: 0,\n    value: Number.MAX_SAFE_INTEGER\n  },\n  lineWidthUnits: 'meters',\n  lineWidthScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  lineWidthMinPixels: {\n    type: 'number',\n    min: 0,\n    value: 0\n  },\n  lineWidthMaxPixels: {\n    type: 'number',\n    min: 0,\n    value: Number.MAX_SAFE_INTEGER\n  },\n  stroked: false,\n  filled: true,\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  getRadius: {\n    type: 'accessor',\n    value: 1\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  strokeWidth: {\n    deprecatedFor: 'getLineWidth'\n  },\n  outline: {\n    deprecatedFor: 'stroked'\n  },\n  getColor: {\n    deprecatedFor: ['getFillColor', 'getLineColor']\n  }\n};\n\nvar ScatterplotLayer = function (_Layer) {\n  _inherits(ScatterplotLayer, _Layer);\n\n  function ScatterplotLayer() {\n    _classCallCheck(this, ScatterplotLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ScatterplotLayer).apply(this, arguments));\n  }\n\n  _createClass(ScatterplotLayer, [{\n    key: \"getShaders\",\n    value: function getShaders(id) {\n      return _get(_getPrototypeOf(ScatterplotLayer.prototype), \"getShaders\", this).call(this, {\n        vs: vs,\n        fs: fs,\n        modules: [project32, picking]\n      });\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      this.getAttributeManager().addInstanced({\n        instancePositions: {\n          size: 3,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          transition: true,\n          accessor: 'getPosition'\n        },\n        instanceRadius: {\n          size: 1,\n          transition: true,\n          accessor: 'getRadius',\n          defaultValue: 1\n        },\n        instanceFillColors: {\n          size: this.props.colorFormat.length,\n          transition: true,\n          normalized: true,\n          type: 5121,\n          accessor: 'getFillColor',\n          defaultValue: [0, 0, 0, 255]\n        },\n        instanceLineColors: {\n          size: this.props.colorFormat.length,\n          transition: true,\n          normalized: true,\n          type: 5121,\n          accessor: 'getLineColor',\n          defaultValue: [0, 0, 0, 255]\n        },\n        instanceLineWidths: {\n          size: 1,\n          transition: true,\n          accessor: 'getLineWidth',\n          defaultValue: 1\n        }\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n          oldProps = _ref.oldProps,\n          changeFlags = _ref.changeFlags;\n\n      _get(_getPrototypeOf(ScatterplotLayer.prototype), \"updateState\", this).call(this, {\n        props: props,\n        oldProps: oldProps,\n        changeFlags: changeFlags\n      });\n\n      if (changeFlags.extensionsChanged) {\n        var gl = this.context.gl;\n\n        if (this.state.model) {\n          this.state.model[\"delete\"]();\n        }\n\n        this.setState({\n          model: this._getModel(gl)\n        });\n        this.getAttributeManager().invalidateAll();\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref2) {\n      var uniforms = _ref2.uniforms;\n      var viewport = this.context.viewport;\n      var _this$props = this.props,\n          radiusScale = _this$props.radiusScale,\n          radiusMinPixels = _this$props.radiusMinPixels,\n          radiusMaxPixels = _this$props.radiusMaxPixels,\n          stroked = _this$props.stroked,\n          filled = _this$props.filled,\n          lineWidthUnits = _this$props.lineWidthUnits,\n          lineWidthScale = _this$props.lineWidthScale,\n          lineWidthMinPixels = _this$props.lineWidthMinPixels,\n          lineWidthMaxPixels = _this$props.lineWidthMaxPixels;\n      var widthMultiplier = lineWidthUnits === 'pixels' ? viewport.metersPerPixel : 1;\n      this.state.model.setUniforms(uniforms).setUniforms({\n        stroked: stroked ? 1 : 0,\n        filled: filled,\n        radiusScale: radiusScale,\n        radiusMinPixels: radiusMinPixels,\n        radiusMaxPixels: radiusMaxPixels,\n        lineWidthScale: lineWidthScale * widthMultiplier,\n        lineWidthMinPixels: lineWidthMinPixels,\n        lineWidthMaxPixels: lineWidthMaxPixels\n      }).draw();\n    }\n  }, {\n    key: \"_getModel\",\n    value: function _getModel(gl) {\n      var positions = [-1, -1, 0, -1, 1, 0, 1, 1, 0, 1, -1, 0];\n      return new Model(gl, Object.assign(this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: 6,\n          vertexCount: 4,\n          attributes: {\n            positions: {\n              size: 3,\n              value: new Float32Array(positions)\n            }\n          }\n        }),\n        isInstanced: true\n      }));\n    }\n  }]);\n\n  return ScatterplotLayer;\n}(Layer);\n\nexport { ScatterplotLayer as default };\nScatterplotLayer.layerName = 'ScatterplotLayer';\nScatterplotLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/scatterplot-layer/scatterplot-layer.js"],"names":["DEFAULT_COLOR","defaultProps","radiusScale","type","min","value","radiusMinPixels","radiusMaxPixels","Number","MAX_SAFE_INTEGER","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","stroked","filled","getPosition","x","getRadius","getFillColor","getLineColor","getLineWidth","strokeWidth","deprecatedFor","outline","getColor","ScatterplotLayer","Layer","id","vs","fs","modules","instancePositions","size","fp64","transition","accessor","instanceRadius","defaultValue","instanceFillColors","normalized","instanceLineColors","instanceLineWidths","props","oldProps","changeFlags","gl","model","uniforms","viewport","widthMultiplier","positions","geometry","drawMode","vertexCount","attributes","isInstanced"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, picking} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './scatterplot-layer-vertex.glsl';\nimport fs from './scatterplot-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  radiusScale: {type: 'number', min: 0, value: 1},\n  radiusMinPixels: {type: 'number', min: 0, value: 0}, //  min point radius in pixels\n  radiusMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER}, // max point radius in pixels\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: {type: 'number', min: 0, value: 1},\n  lineWidthMinPixels: {type: 'number', min: 0, value: 0},\n  lineWidthMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER},\n\n  stroked: false,\n  filled: true,\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getRadius: {type: 'accessor', value: 1},\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineWidth: {type: 'accessor', value: 1},\n\n  // deprecated\n  strokeWidth: {deprecatedFor: 'getLineWidth'},\n  outline: {deprecatedFor: 'stroked'},\n  getColor: {deprecatedFor: ['getFillColor', 'getLineColor']}\n};\n\nexport default class ScatterplotLayer extends Layer {\n  getShaders(id) {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  initializeState() {\n    this.getAttributeManager().addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceRadius: {\n        size: 1,\n        transition: true,\n        accessor: 'getRadius',\n        defaultValue: 1\n      },\n      instanceFillColors: {\n        size: this.props.colorFormat.length,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getFillColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineColors: {\n        size: this.props.colorFormat.length,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getLineColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getLineWidth',\n        defaultValue: 1\n      }\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      this.getAttributeManager().invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {viewport} = this.context;\n    const {\n      radiusScale,\n      radiusMinPixels,\n      radiusMaxPixels,\n      stroked,\n      filled,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels\n    } = this.props;\n\n    const widthMultiplier = lineWidthUnits === 'pixels' ? viewport.metersPerPixel : 1;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        stroked: stroked ? 1 : 0,\n        filled,\n        radiusScale,\n        radiusMinPixels,\n        radiusMaxPixels,\n        lineWidthScale: lineWidthScale * widthMultiplier,\n        lineWidthMinPixels,\n        lineWidthMaxPixels\n      })\n      .draw();\n  }\n\n  _getModel(gl) {\n    // a square that minimally cover the unit circle\n    const positions = [-1, -1, 0, -1, 1, 0, 1, 1, 0, 1, -1, 0];\n\n    return new Model(\n      gl,\n      Object.assign(this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_FAN,\n          vertexCount: 4,\n          attributes: {\n            positions: {size: 3, value: new Float32Array(positions)}\n          }\n        }),\n        isInstanced: true\n      })\n    );\n  }\n}\n\nScatterplotLayer.layerName = 'ScatterplotLayer';\nScatterplotLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}