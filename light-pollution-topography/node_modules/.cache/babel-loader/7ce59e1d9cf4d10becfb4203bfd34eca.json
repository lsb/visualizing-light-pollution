{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { flatbuffers } from 'flatbuffers';\nimport { encodeUtf8 } from '../util/utf8';\nvar ByteBuffer = flatbuffers.ByteBuffer;\nimport { isPromise, isIterable, isAsyncIterable, isIteratorResult, BigInt64Array, BigUint64Array } from './compat';\n/** @ignore */\n\nconst SharedArrayBuf = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : ArrayBuffer;\n/** @ignore */\n\nfunction collapseContiguousByteRanges(chunks) {\n  let result = chunks[0] ? [chunks[0]] : [];\n  let xOffset, yOffset, xLen, yLen;\n\n  for (let x, y, i = 0, j = 0, n = chunks.length; ++i < n;) {\n    x = result[j];\n    y = chunks[i]; // continue if x and y don't share the same underlying ArrayBuffer, or if x isn't before y\n\n    if (!x || !y || x.buffer !== y.buffer || y.byteOffset < x.byteOffset) {\n      y && (result[++j] = y);\n      continue;\n    }\n\n    ({\n      byteOffset: xOffset,\n      byteLength: xLen\n    } = x);\n    ({\n      byteOffset: yOffset,\n      byteLength: yLen\n    } = y); // continue if the byte ranges of x and y aren't contiguous\n\n    if (xOffset + xLen < yOffset || yOffset + yLen < xOffset) {\n      y && (result[++j] = y);\n      continue;\n    }\n\n    result[j] = new Uint8Array(x.buffer, xOffset, yOffset - xOffset + yLen);\n  }\n\n  return result;\n}\n/** @ignore */\n\n\nexport function memcpy(target, source, targetByteOffset = 0, sourceByteLength = source.byteLength) {\n  const targetByteLength = target.byteLength;\n  const dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);\n  const src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));\n  dst.set(src, targetByteOffset);\n  return target;\n}\n/** @ignore */\n\nexport function joinUint8Arrays(chunks, size) {\n  // collapse chunks that share the same underlying ArrayBuffer and whose byte ranges overlap,\n  // to avoid unnecessarily copying the bytes to do this buffer join. This is a common case during\n  // streaming, where we may be reading partial byte ranges out of the same underlying ArrayBuffer\n  let result = collapseContiguousByteRanges(chunks);\n  let byteLength = result.reduce((x, b) => x + b.byteLength, 0);\n  let source, sliced, buffer;\n  let offset = 0,\n      index = -1,\n      length = Math.min(size || Infinity, byteLength);\n\n  for (let n = result.length; ++index < n;) {\n    source = result[index];\n    sliced = source.subarray(0, Math.min(source.length, length - offset));\n\n    if (length <= offset + sliced.length) {\n      if (sliced.length < source.length) {\n        result[index] = source.subarray(sliced.length);\n      } else if (sliced.length === source.length) {\n        index++;\n      }\n\n      buffer ? memcpy(buffer, sliced, offset) : buffer = sliced;\n      break;\n    }\n\n    memcpy(buffer || (buffer = new Uint8Array(length)), sliced, offset);\n    offset += sliced.length;\n  }\n\n  return [buffer || new Uint8Array(0), result.slice(index), byteLength - (buffer ? buffer.byteLength : 0)];\n}\nexport function toArrayBufferView(ArrayBufferViewCtor, input) {\n  let value = isIteratorResult(input) ? input.value : input;\n\n  if (value instanceof ArrayBufferViewCtor) {\n    if (ArrayBufferViewCtor === Uint8Array) {\n      // Node's `Buffer` class passes the `instanceof Uint8Array` check, but we need\n      // a real Uint8Array, since Buffer#slice isn't the same as Uint8Array#slice :/\n      return new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength);\n    }\n\n    return value;\n  }\n\n  if (!value) {\n    return new ArrayBufferViewCtor(0);\n  }\n\n  if (typeof value === 'string') {\n    value = encodeUtf8(value);\n  }\n\n  if (value instanceof ArrayBuffer) {\n    return new ArrayBufferViewCtor(value);\n  }\n\n  if (value instanceof SharedArrayBuf) {\n    return new ArrayBufferViewCtor(value);\n  }\n\n  if (value instanceof ByteBuffer) {\n    return toArrayBufferView(ArrayBufferViewCtor, value.bytes());\n  }\n\n  return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : value.byteLength <= 0 ? new ArrayBufferViewCtor(0) : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);\n}\n/** @ignore */\n\nexport const toInt8Array = input => toArrayBufferView(Int8Array, input);\n/** @ignore */\n\nexport const toInt16Array = input => toArrayBufferView(Int16Array, input);\n/** @ignore */\n\nexport const toInt32Array = input => toArrayBufferView(Int32Array, input);\n/** @ignore */\n\nexport const toBigInt64Array = input => toArrayBufferView(BigInt64Array, input);\n/** @ignore */\n\nexport const toUint8Array = input => toArrayBufferView(Uint8Array, input);\n/** @ignore */\n\nexport const toUint16Array = input => toArrayBufferView(Uint16Array, input);\n/** @ignore */\n\nexport const toUint32Array = input => toArrayBufferView(Uint32Array, input);\n/** @ignore */\n\nexport const toBigUint64Array = input => toArrayBufferView(BigUint64Array, input);\n/** @ignore */\n\nexport const toFloat32Array = input => toArrayBufferView(Float32Array, input);\n/** @ignore */\n\nexport const toFloat64Array = input => toArrayBufferView(Float64Array, input);\n/** @ignore */\n\nexport const toUint8ClampedArray = input => toArrayBufferView(Uint8ClampedArray, input);\n/** @ignore */\n\nconst pump = iterator => {\n  iterator.next();\n  return iterator;\n};\n/** @ignore */\n\n\nexport function* toArrayBufferViewIterator(ArrayCtor, source) {\n  const wrap = function* (x) {\n    yield x;\n  };\n\n  const buffers = typeof source === 'string' ? wrap(source) : ArrayBuffer.isView(source) ? wrap(source) : source instanceof ArrayBuffer ? wrap(source) : source instanceof SharedArrayBuf ? wrap(source) : !isIterable(source) ? wrap(source) : source;\n  yield* pump(function* (it) {\n    let r = null;\n\n    do {\n      r = it.next((yield toArrayBufferView(ArrayCtor, r)));\n    } while (!r.done);\n  }(buffers[Symbol.iterator]()));\n}\n/** @ignore */\n\nexport const toInt8ArrayIterator = input => toArrayBufferViewIterator(Int8Array, input);\n/** @ignore */\n\nexport const toInt16ArrayIterator = input => toArrayBufferViewIterator(Int16Array, input);\n/** @ignore */\n\nexport const toInt32ArrayIterator = input => toArrayBufferViewIterator(Int32Array, input);\n/** @ignore */\n\nexport const toUint8ArrayIterator = input => toArrayBufferViewIterator(Uint8Array, input);\n/** @ignore */\n\nexport const toUint16ArrayIterator = input => toArrayBufferViewIterator(Uint16Array, input);\n/** @ignore */\n\nexport const toUint32ArrayIterator = input => toArrayBufferViewIterator(Uint32Array, input);\n/** @ignore */\n\nexport const toFloat32ArrayIterator = input => toArrayBufferViewIterator(Float32Array, input);\n/** @ignore */\n\nexport const toFloat64ArrayIterator = input => toArrayBufferViewIterator(Float64Array, input);\n/** @ignore */\n\nexport const toUint8ClampedArrayIterator = input => toArrayBufferViewIterator(Uint8ClampedArray, input);\n/** @ignore */\n\nexport async function* toArrayBufferViewAsyncIterator(ArrayCtor, source) {\n  // if a Promise, unwrap the Promise and iterate the resolved value\n  if (isPromise(source)) {\n    return yield* toArrayBufferViewAsyncIterator(ArrayCtor, (await source));\n  }\n\n  const wrap = async function* (x) {\n    yield await x;\n  };\n\n  const emit = async function* (source) {\n    yield* pump(function* (it) {\n      let r = null;\n\n      do {\n        r = it.next((yield r && r.value));\n      } while (!r.done);\n    }(source[Symbol.iterator]()));\n  };\n\n  const buffers = typeof source === 'string' ? wrap(source) // if string, wrap in an AsyncIterableIterator\n  : ArrayBuffer.isView(source) ? wrap(source) // if TypedArray, wrap in an AsyncIterableIterator\n  : source instanceof ArrayBuffer ? wrap(source) // if ArrayBuffer, wrap in an AsyncIterableIterator\n  : source instanceof SharedArrayBuf ? wrap(source) // if SharedArrayBuffer, wrap in an AsyncIterableIterator\n  : isIterable(source) ? emit(source) // If Iterable, wrap in an AsyncIterableIterator and compose the `next` values\n  : !isAsyncIterable(source) ? wrap(source) // If not an AsyncIterable, treat as a sentinel and wrap in an AsyncIterableIterator\n  : source; // otherwise if AsyncIterable, use it\n\n  yield* pump(async function* (it) {\n    let r = null;\n\n    do {\n      r = await it.next((yield toArrayBufferView(ArrayCtor, r)));\n    } while (!r.done);\n  }(buffers[Symbol.asyncIterator]()));\n}\n/** @ignore */\n\nexport const toInt8ArrayAsyncIterator = input => toArrayBufferViewAsyncIterator(Int8Array, input);\n/** @ignore */\n\nexport const toInt16ArrayAsyncIterator = input => toArrayBufferViewAsyncIterator(Int16Array, input);\n/** @ignore */\n\nexport const toInt32ArrayAsyncIterator = input => toArrayBufferViewAsyncIterator(Int32Array, input);\n/** @ignore */\n\nexport const toUint8ArrayAsyncIterator = input => toArrayBufferViewAsyncIterator(Uint8Array, input);\n/** @ignore */\n\nexport const toUint16ArrayAsyncIterator = input => toArrayBufferViewAsyncIterator(Uint16Array, input);\n/** @ignore */\n\nexport const toUint32ArrayAsyncIterator = input => toArrayBufferViewAsyncIterator(Uint32Array, input);\n/** @ignore */\n\nexport const toFloat32ArrayAsyncIterator = input => toArrayBufferViewAsyncIterator(Float32Array, input);\n/** @ignore */\n\nexport const toFloat64ArrayAsyncIterator = input => toArrayBufferViewAsyncIterator(Float64Array, input);\n/** @ignore */\n\nexport const toUint8ClampedArrayAsyncIterator = input => toArrayBufferViewAsyncIterator(Uint8ClampedArray, input);\n/** @ignore */\n\nexport function rebaseValueOffsets(offset, length, valueOffsets) {\n  // If we have a non-zero offset, create a new offsets array with the values\n  // shifted by the start offset, such that the new start offset is 0\n  if (offset !== 0) {\n    valueOffsets = valueOffsets.slice(0, length + 1);\n\n    for (let i = -1; ++i <= length;) {\n      valueOffsets[i] += offset;\n    }\n  }\n\n  return valueOffsets;\n}\n/** @ignore */\n\nexport function compareArrayLike(a, b) {\n  let i = 0,\n      n = a.length;\n\n  if (n !== b.length) {\n    return false;\n  }\n\n  if (n > 0) {\n    do {\n      if (a[i] !== b[i]) {\n        return false;\n      }\n    } while (++i < n);\n  }\n\n  return true;\n}","map":{"version":3,"sources":["util/buffer.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport { encodeUtf8 } from '../util/utf8';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport { TypedArray, TypedArrayConstructor } from '../interfaces';\nimport { BigIntArray, BigIntArrayConstructor } from '../interfaces';\nimport { isPromise, isIterable, isAsyncIterable, isIteratorResult, BigInt64Array, BigUint64Array } from './compat';\n\n/** @ignore */\nconst SharedArrayBuf = (typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : ArrayBuffer);\n\n/** @ignore */\nfunction collapseContiguousByteRanges(chunks: Uint8Array[]) {\n    let result = chunks[0] ? [chunks[0]] : [];\n    let xOffset: number, yOffset: number, xLen: number, yLen: number;\n    for (let x, y, i = 0, j = 0, n = chunks.length; ++i < n;) {\n        x = result[j];\n        y = chunks[i];\n        // continue if x and y don't share the same underlying ArrayBuffer, or if x isn't before y\n        if (!x || !y || x.buffer !== y.buffer || y.byteOffset < x.byteOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        ({ byteOffset: xOffset, byteLength: xLen } = x);\n        ({ byteOffset: yOffset, byteLength: yLen } = y);\n        // continue if the byte ranges of x and y aren't contiguous\n        if ((xOffset + xLen) < yOffset || (yOffset + yLen) < xOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        result[j] = new Uint8Array(x.buffer, xOffset, yOffset - xOffset + yLen);\n    }\n    return result;\n}\n\n/** @ignore */\nexport function memcpy<TTarget extends ArrayBufferView, TSource extends ArrayBufferView>(target: TTarget, source: TSource, targetByteOffset = 0, sourceByteLength = source.byteLength) {\n    const targetByteLength = target.byteLength;\n    const dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);\n    const src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));\n    dst.set(src, targetByteOffset);\n    return target;\n}\n\n/** @ignore */\nexport function joinUint8Arrays(chunks: Uint8Array[], size?: number | null): [Uint8Array, Uint8Array[], number] {\n    // collapse chunks that share the same underlying ArrayBuffer and whose byte ranges overlap,\n    // to avoid unnecessarily copying the bytes to do this buffer join. This is a common case during\n    // streaming, where we may be reading partial byte ranges out of the same underlying ArrayBuffer\n    let result = collapseContiguousByteRanges(chunks);\n    let byteLength = result.reduce((x, b) => x + b.byteLength, 0);\n    let source: Uint8Array, sliced: Uint8Array, buffer: Uint8Array | void;\n    let offset = 0, index = -1, length = Math.min(size || Infinity, byteLength);\n    for (let n = result.length; ++index < n;) {\n        source = result[index];\n        sliced = source.subarray(0, Math.min(source.length, length - offset));\n        if (length <= (offset + sliced.length)) {\n            if (sliced.length < source.length) {\n                result[index] = source.subarray(sliced.length);\n            } else if (sliced.length === source.length) { index++; }\n            buffer ? memcpy(buffer, sliced, offset) : (buffer = sliced);\n            break;\n        }\n        memcpy(buffer || (buffer = new Uint8Array(length)), sliced, offset);\n        offset += sliced.length;\n    }\n    return [buffer || new Uint8Array(0), result.slice(index), byteLength - (buffer ? buffer.byteLength : 0)];\n}\n\n/** @ignore */\nexport type ArrayBufferViewInput = ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined  |\n                    IteratorResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> |\n          ReadableStreamReadResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> ;\n\n/** @ignore */\nexport function toArrayBufferView<T extends TypedArray>(ArrayBufferViewCtor: TypedArrayConstructor<T>, input: ArrayBufferViewInput): T;\nexport function toArrayBufferView<T extends BigIntArray>(ArrayBufferViewCtor: BigIntArrayConstructor<T>, input: ArrayBufferViewInput): T;\nexport function toArrayBufferView(ArrayBufferViewCtor: any, input: ArrayBufferViewInput) {\n\n    let value: any = isIteratorResult(input) ? input.value : input;\n\n    if (value instanceof ArrayBufferViewCtor) {\n        if (ArrayBufferViewCtor === Uint8Array) {\n            // Node's `Buffer` class passes the `instanceof Uint8Array` check, but we need\n            // a real Uint8Array, since Buffer#slice isn't the same as Uint8Array#slice :/\n            return new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength);\n        }\n        return value;\n    }\n    if (!value) { return new ArrayBufferViewCtor(0); }\n    if (typeof value === 'string') { value = encodeUtf8(value); }\n    if (value instanceof ArrayBuffer) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof SharedArrayBuf) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof ByteBuffer) { return toArrayBufferView(ArrayBufferViewCtor, value.bytes()); }\n    return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : value.byteLength <= 0 ? new ArrayBufferViewCtor(0)\n        : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);\n}\n\n/** @ignore */ export const toInt8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int8Array, input);\n/** @ignore */ export const toInt16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int16Array, input);\n/** @ignore */ export const toInt32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int32Array, input);\n/** @ignore */ export const toBigInt64Array = (input: ArrayBufferViewInput) => toArrayBufferView(BigInt64Array, input);\n/** @ignore */ export const toUint8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8Array, input);\n/** @ignore */ export const toUint16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint16Array, input);\n/** @ignore */ export const toUint32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint32Array, input);\n/** @ignore */ export const toBigUint64Array = (input: ArrayBufferViewInput) => toArrayBufferView(BigUint64Array, input);\n/** @ignore */ export const toFloat32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float32Array, input);\n/** @ignore */ export const toFloat64Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArray = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8ClampedArray, input);\n\n/** @ignore */\ntype ArrayBufferViewIteratorInput = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nconst pump = <T extends Iterator<any> | AsyncIterator<any>>(iterator: T) => { iterator.next(); return iterator; };\n\n/** @ignore */\nexport function* toArrayBufferViewIterator<T extends TypedArray>(ArrayCtor: TypedArrayConstructor<T>, source: ArrayBufferViewIteratorInput) {\n\n    const wrap = function*<T>(x: T) { yield x; };\n    const buffers: Iterable<ArrayBufferViewInput> =\n                   (typeof source === 'string') ? wrap(source)\n                 : (ArrayBuffer.isView(source)) ? wrap(source)\n              : (source instanceof ArrayBuffer) ? wrap(source)\n           : (source instanceof SharedArrayBuf) ? wrap(source)\n    : !isIterable<ArrayBufferViewInput>(source) ? wrap(source) : source;\n\n    yield* pump((function* (it) {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.iterator]()));\n}\n\n/** @ignore */ export const toInt8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8ClampedArray, input);\n\n/** @ignore */\ntype ArrayBufferViewAsyncIteratorInput = AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput> | PromiseLike<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nexport async function* toArrayBufferViewAsyncIterator<T extends TypedArray>(ArrayCtor: TypedArrayConstructor<T>, source: ArrayBufferViewAsyncIteratorInput): AsyncIterableIterator<T> {\n\n    // if a Promise, unwrap the Promise and iterate the resolved value\n    if (isPromise<ArrayBufferViewInput>(source)) {\n        return yield* toArrayBufferViewAsyncIterator(ArrayCtor, await source);\n    }\n\n    const wrap = async function*<T>(x: T) { yield await x; };\n    const emit = async function* <T extends Iterable<any>>(source: T) {\n        yield* pump((function*(it: Iterator<any>) {\n            let r: IteratorResult<any> = <any> null;\n            do {\n                r = it.next(yield r && r.value);\n            } while (!r.done);\n        })(source[Symbol.iterator]()));\n    };\n\n    const buffers: AsyncIterable<ArrayBufferViewInput> =\n                        (typeof source === 'string') ? wrap(source) // if string, wrap in an AsyncIterableIterator\n                      : (ArrayBuffer.isView(source)) ? wrap(source) // if TypedArray, wrap in an AsyncIterableIterator\n                   : (source instanceof ArrayBuffer) ? wrap(source) // if ArrayBuffer, wrap in an AsyncIterableIterator\n                : (source instanceof SharedArrayBuf) ? wrap(source) // if SharedArrayBuffer, wrap in an AsyncIterableIterator\n          : isIterable<ArrayBufferViewInput>(source) ? emit(source) // If Iterable, wrap in an AsyncIterableIterator and compose the `next` values\n    : !isAsyncIterable<ArrayBufferViewInput>(source) ? wrap(source) // If not an AsyncIterable, treat as a sentinel and wrap in an AsyncIterableIterator\n                                                     : source; // otherwise if AsyncIterable, use it\n\n    yield* pump((async function* (it) {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = await it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.asyncIterator]()));\n}\n\n/** @ignore */ export const toInt8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8ClampedArray, input);\n\n/** @ignore */\nexport function rebaseValueOffsets(offset: number, length: number, valueOffsets: Int32Array) {\n    // If we have a non-zero offset, create a new offsets array with the values\n    // shifted by the start offset, such that the new start offset is 0\n    if (offset !== 0) {\n        valueOffsets = valueOffsets.slice(0, length + 1);\n        for (let i = -1; ++i <= length;) {\n            valueOffsets[i] += offset;\n        }\n    }\n    return valueOffsets;\n}\n\n/** @ignore */\nexport function compareArrayLike<T extends ArrayLike<any>>(a: T, b: T) {\n    let i = 0, n = a.length;\n    if (n !== b.length) { return false; }\n    if (n > 0) {\n        do { if (a[i] !== b[i]) { return false; } } while (++i < n);\n    }\n    return true;\n}\n"]},"metadata":{},"sourceType":"module"}