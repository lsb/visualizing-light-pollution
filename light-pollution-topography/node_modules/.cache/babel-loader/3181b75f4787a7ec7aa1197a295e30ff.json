{"ast":null,"code":"export function assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'luma.gl: assertion failed.');\n  }\n}\nexport function isObjectEmpty(object) {\n  for (var key in object) {\n    return false;\n  }\n\n  return true;\n}\nexport function deepArrayEqual(x, y) {\n  if (x === y) {\n    return true;\n  }\n\n  var isArrayX = Array.isArray(x) || ArrayBuffer.isView(x);\n  var isArrayY = Array.isArray(y) || ArrayBuffer.isView(y);\n\n  if (isArrayX && isArrayY && x.length === y.length) {\n    for (var i = 0; i < x.length; ++i) {\n      if (x[i] !== y[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}","map":{"version":3,"sources":["../../../src/utils/utils.js"],"names":["message","x","isArrayX","Array","ArrayBuffer","isArrayY","y","i"],"mappings":"AACA,OAAO,SAAA,MAAA,CAAA,SAAA,EAAA,OAAA,EAAoC;AACzC,MAAI,CAAJ,SAAA,EAAgB;AACd,UAAM,IAAA,KAAA,CAAUA,OAAO,IAAvB,4BAAM,CAAN;AACD;AACF;AAGD,OAAO,SAAA,aAAA,CAAA,MAAA,EAA+B;AACpC,OAAK,IAAL,GAAA,IAAA,MAAA,EAA0B;AACxB,WAAA,KAAA;AACD;;AACD,SAAA,IAAA;AACD;AAED,OAAO,SAAA,cAAA,CAAA,CAAA,EAAA,CAAA,EAA8B;AACnC,MAAIC,CAAC,KAAL,CAAA,EAAa;AACX,WAAA,IAAA;AACD;;AACD,MAAMC,QAAQ,GAAGC,KAAK,CAALA,OAAAA,CAAAA,CAAAA,KAAoBC,WAAW,CAAXA,MAAAA,CAArC,CAAqCA,CAArC;AACA,MAAMC,QAAQ,GAAGF,KAAK,CAALA,OAAAA,CAAAA,CAAAA,KAAoBC,WAAW,CAAXA,MAAAA,CAArC,CAAqCA,CAArC;;AACA,MAAIF,QAAQ,IAARA,QAAAA,IAAwBD,CAAC,CAADA,MAAAA,KAAaK,CAAC,CAA1C,MAAA,EAAmD;AACjD,SAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGN,CAAC,CAArB,MAAA,EAA8B,EAA9B,CAAA,EAAmC;AACjC,UAAIA,CAAC,CAADA,CAAC,CAADA,KAASK,CAAC,CAAd,CAAc,CAAd,EAAmB;AACjB,eAAA,KAAA;AACD;AACF;;AACD,WAAA,IAAA;AACD;;AACD,SAAA,KAAA;AACD","sourcesContent":["// Avoid bundling assert polyfill module\nexport function assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'luma.gl: assertion failed.');\n  }\n}\n\n// Returns true if given object is empty, false otherwise.\nexport function isObjectEmpty(object) {\n  for (const key in object) {\n    return false;\n  }\n  return true;\n}\n\nexport function deepArrayEqual(x, y) {\n  if (x === y) {\n    return true;\n  }\n  const isArrayX = Array.isArray(x) || ArrayBuffer.isView(x);\n  const isArrayY = Array.isArray(y) || ArrayBuffer.isView(y);\n  if (isArrayX && isArrayY && x.length === y.length) {\n    for (let i = 0; i < x.length; ++i) {\n      if (x[i] !== y[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n}\n"]},"metadata":{},"sourceType":"module"}