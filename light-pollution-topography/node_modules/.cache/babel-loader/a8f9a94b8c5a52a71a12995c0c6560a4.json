{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { toArrayBuffer } from '../../javascript-utils/binary-utils';\nimport WorkerFarm from '../../worker-utils/worker-farm';\nimport { getTransferList } from '@loaders.gl/loader-utils';\nimport { parse } from '../parse';\nvar VERSION = typeof \"2.1.2\" !== 'undefined' ? \"2.1.2\" : 'latest';\nexport function canParseWithWorker(loader, data, options, context) {\n  if (!WorkerFarm.isSupported()) {\n    return false;\n  }\n\n  var loaderOptions = options && options[loader.id];\n\n  if (options.worker === 'local' && loaderOptions && loaderOptions.localWorkerUrl || options.worker && loaderOptions && loaderOptions.workerUrl) {\n    return loader.useWorker ? loader.useWorker(options) : true;\n  }\n\n  return false;\n}\nexport default function parseWithWorker(loader, data, options, context) {\n  var _ref = options || {},\n      worker = _ref.worker;\n\n  var loaderOptions = options && options[loader.id] || {};\n  var workerUrl = worker === 'local' ? loaderOptions.localWorkerUrl : loaderOptions.workerUrl;\n  var workerSource = \"url(\".concat(workerUrl, \")\");\n  var workerName = loader.name;\n  var workerFarm = getWorkerFarm(options);\n  options = JSON.parse(JSON.stringify(options));\n  var warning = loader.version !== VERSION ? \"(core version \".concat(VERSION, \")\") : '';\n  return workerFarm.process(workerSource, \"\".concat(workerName, \"-worker@\").concat(loader.version).concat(warning), {\n    arraybuffer: toArrayBuffer(data),\n    options: options,\n    source: \"loaders.gl@\".concat(VERSION),\n    type: 'parse'\n  });\n}\nvar _workerFarm = null;\n\nfunction getWorkerFarm() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var props = {};\n\n  if (options.maxConcurrency) {\n    props.maxConcurrency = options.maxConcurrency;\n  }\n\n  if (options.onDebug) {\n    props.onDebug = options.onDebug;\n  }\n\n  if (!_workerFarm) {\n    _workerFarm = new WorkerFarm({\n      onMessage: onWorkerMessage\n    });\n  }\n\n  _workerFarm.setProps(props);\n\n  return _workerFarm;\n}\n\nfunction onWorkerMessage(_x) {\n  return _onWorkerMessage.apply(this, arguments);\n}\n\nfunction _onWorkerMessage() {\n  _onWorkerMessage = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(_ref2) {\n    var worker, data, resolve, reject, result;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            worker = _ref2.worker, data = _ref2.data, resolve = _ref2.resolve, reject = _ref2.reject;\n            _context.t0 = data.type;\n            _context.next = _context.t0 === 'done' ? 4 : _context.t0 === 'parse' ? 6 : _context.t0 === 'error' ? 17 : 19;\n            break;\n\n          case 4:\n            resolve(data.result);\n            return _context.abrupt(\"break\", 19);\n\n          case 6:\n            _context.prev = 6;\n            _context.next = 9;\n            return parse(data.arraybuffer, data.options, data.url);\n\n          case 9:\n            result = _context.sent;\n            worker.postMessage({\n              type: 'parse-done',\n              id: data.id,\n              result: result\n            }, getTransferList(result));\n            _context.next = 16;\n            break;\n\n          case 13:\n            _context.prev = 13;\n            _context.t1 = _context[\"catch\"](6);\n            worker.postMessage({\n              type: 'parse-error',\n              id: data.id,\n              message: _context.t1.message\n            });\n\n          case 16:\n            return _context.abrupt(\"break\", 19);\n\n          case 17:\n            reject(data.message);\n            return _context.abrupt(\"break\", 19);\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[6, 13]]);\n  }));\n  return _onWorkerMessage.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../src/lib/loader-utils/parse-with-worker.js"],"names":["VERSION","WorkerFarm","loaderOptions","options","loader","worker","workerUrl","workerSource","workerName","workerFarm","getWorkerFarm","JSON","warning","arraybuffer","toArrayBuffer","source","type","_workerFarm","props","onMessage","onWorkerMessage","data","resolve","reject","result","parse","id","getTransferList","message"],"mappings":"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","sourcesContent":["// __VERSION__ is injected by babel-plugin-version-inline\n/* global __VERSION__ */\nimport {toArrayBuffer} from '../../javascript-utils/binary-utils';\nimport WorkerFarm from '../../worker-utils/worker-farm';\nimport {getTransferList} from '@loaders.gl/loader-utils';\nimport {parse} from '../parse';\n\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n\nexport function canParseWithWorker(loader, data, options, context) {\n  if (!WorkerFarm.isSupported()) {\n    return false;\n  }\n  const loaderOptions = options && options[loader.id];\n  if (\n    (options.worker === 'local' && loaderOptions && loaderOptions.localWorkerUrl) ||\n    (options.worker && loaderOptions && loaderOptions.workerUrl)\n  ) {\n    return loader.useWorker ? loader.useWorker(options) : true;\n  }\n  return false;\n}\n\n/**\n * this function expects that the worker function sends certain messages,\n * this can be automated if the worker is wrapper by a call to createWorker in @loaders.gl/loader-utils.\n */\nexport default function parseWithWorker(loader, data, options, context) {\n  const {worker} = options || {};\n  const loaderOptions = (options && options[loader.id]) || {};\n  const workerUrl = worker === 'local' ? loaderOptions.localWorkerUrl : loaderOptions.workerUrl;\n\n  // Mark as URL\n  const workerSource = `url(${workerUrl})`;\n  const workerName = loader.name;\n\n  const workerFarm = getWorkerFarm(options);\n\n  // options.log object contains functions which cannot be transferred\n  // TODO - decide how to handle logging on workers\n  options = JSON.parse(JSON.stringify(options));\n\n  const warning = loader.version !== VERSION ? `(core version ${VERSION})` : '';\n\n  return workerFarm.process(workerSource, `${workerName}-worker@${loader.version}${warning}`, {\n    arraybuffer: toArrayBuffer(data),\n    options,\n    source: `loaders.gl@${VERSION}`, // Lets worker ignore unrelated messages\n    type: 'parse' // For future extension\n  });\n}\n\nlet _workerFarm = null;\n\n// Create a single instance of a worker farm\nfunction getWorkerFarm(options = {}) {\n  const props = {};\n  if (options.maxConcurrency) {\n    props.maxConcurrency = options.maxConcurrency;\n  }\n  if (options.onDebug) {\n    props.onDebug = options.onDebug;\n  }\n\n  if (!_workerFarm) {\n    _workerFarm = new WorkerFarm({onMessage: onWorkerMessage});\n  }\n  _workerFarm.setProps(props);\n\n  return _workerFarm;\n}\n\nasync function onWorkerMessage({worker, data, resolve, reject}) {\n  switch (data.type) {\n    case 'done':\n      resolve(data.result);\n      break;\n\n    case 'parse':\n      try {\n        const result = await parse(data.arraybuffer, data.options, data.url);\n        worker.postMessage({type: 'parse-done', id: data.id, result}, getTransferList(result));\n      } catch (error) {\n        worker.postMessage({type: 'parse-error', id: data.id, message: error.message});\n      }\n      break;\n\n    case 'error':\n      reject(data.message);\n      break;\n\n    default:\n    // TODO - is this not an error case? Log a warning?\n  }\n}\n"]},"metadata":{},"sourceType":"module"}