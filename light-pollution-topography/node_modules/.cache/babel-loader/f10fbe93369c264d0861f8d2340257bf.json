{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport assert from '../utils/assert';\nimport { deepEqual } from '../utils/deep-equal';\nimport log from '../utils/log';\nimport { flatten } from '../utils/flatten';\n\nvar ViewManager = function () {\n  function ViewManager() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, ViewManager);\n\n    this.views = [];\n    this.width = 100;\n    this.height = 100;\n    this.viewState = {};\n    this.controllers = {};\n    this.timeline = props.timeline;\n    this._viewports = [];\n    this._viewportMap = {};\n    this._isUpdating = false;\n    this._needsRedraw = 'Initial render';\n    this._needsUpdate = true;\n    this._eventManager = props.eventManager;\n    this._eventCallbacks = {\n      onViewStateChange: props.onViewStateChange,\n      onInteractiveStateChange: props.onInteractiveStateChange\n    };\n    Object.seal(this);\n    this.setProps(props);\n  }\n\n  _createClass(ViewManager, [{\n    key: \"finalize\",\n    value: function finalize() {\n      for (var key in this.controllers) {\n        if (this.controllers[key]) {\n          this.controllers[key].finalize();\n        }\n      }\n\n      this.controllers = {};\n    }\n  }, {\n    key: \"needsRedraw\",\n    value: function needsRedraw() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        clearRedrawFlags: false\n      };\n      var redraw = this._needsRedraw;\n\n      if (opts.clearRedrawFlags) {\n        this._needsRedraw = false;\n      }\n\n      return redraw;\n    }\n  }, {\n    key: \"setNeedsUpdate\",\n    value: function setNeedsUpdate(reason) {\n      this._needsUpdate = this._needsUpdate || reason;\n      this._needsRedraw = this._needsRedraw || reason;\n    }\n  }, {\n    key: \"updateViewStates\",\n    value: function updateViewStates() {\n      for (var viewId in this.controllers) {\n        var controller = this.controllers[viewId];\n\n        if (controller) {\n          controller.updateTransition();\n        }\n      }\n    }\n  }, {\n    key: \"getViewports\",\n    value: function getViewports(rect) {\n      if (rect) {\n        return this._viewports.filter(function (viewport) {\n          return viewport.containsPixel(rect);\n        });\n      }\n\n      return this._viewports;\n    }\n  }, {\n    key: \"getViews\",\n    value: function getViews() {\n      var viewMap = {};\n      this.views.forEach(function (view) {\n        viewMap[view.id] = view;\n      });\n      return viewMap;\n    }\n  }, {\n    key: \"getView\",\n    value: function getView(viewOrViewId) {\n      return typeof viewOrViewId === 'string' ? this.views.find(function (view) {\n        return view.id === viewOrViewId;\n      }) : viewOrViewId;\n    }\n  }, {\n    key: \"getViewState\",\n    value: function getViewState(viewId) {\n      var view = this.getView(viewId);\n      var viewState = view && this.viewState[view.getViewStateId()] || this.viewState;\n      return view ? view.filterViewState(viewState) : viewState;\n    }\n  }, {\n    key: \"getViewport\",\n    value: function getViewport(viewId) {\n      return this._viewportMap[viewId];\n    }\n  }, {\n    key: \"unproject\",\n    value: function unproject(xyz, opts) {\n      var viewports = this.getViewports();\n      var pixel = {\n        x: xyz[0],\n        y: xyz[1]\n      };\n\n      for (var i = viewports.length - 1; i >= 0; --i) {\n        var viewport = viewports[i];\n\n        if (viewport.containsPixel(pixel)) {\n          var p = xyz.slice();\n          p[0] -= viewport.x;\n          p[1] -= viewport.y;\n          return viewport.unproject(p, opts);\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"setProps\",\n    value: function setProps(props) {\n      if ('views' in props) {\n        this._setViews(props.views);\n      }\n\n      if ('viewState' in props) {\n        this._setViewState(props.viewState);\n      }\n\n      if ('width' in props || 'height' in props) {\n        this._setSize(props.width, props.height);\n      }\n\n      if (!this._isUpdating) {\n        this._update();\n      }\n    }\n  }, {\n    key: \"_update\",\n    value: function _update() {\n      this._isUpdating = true;\n\n      if (this._needsUpdate) {\n        this._needsUpdate = false;\n\n        this._rebuildViewports();\n      }\n\n      if (this._needsUpdate) {\n        this._needsUpdate = false;\n\n        this._rebuildViewports();\n      }\n\n      this._isUpdating = false;\n    }\n  }, {\n    key: \"_setSize\",\n    value: function _setSize(width, height) {\n      assert(Number.isFinite(width) && Number.isFinite(height));\n\n      if (width !== this.width || height !== this.height) {\n        this.width = width;\n        this.height = height;\n        this.setNeedsUpdate('Size changed');\n      }\n    }\n  }, {\n    key: \"_setViews\",\n    value: function _setViews(views) {\n      views = flatten(views, Boolean);\n\n      var viewsChanged = this._diffViews(views, this.views);\n\n      if (viewsChanged) {\n        this.setNeedsUpdate('views changed');\n      }\n\n      this.views = views;\n    }\n  }, {\n    key: \"_setViewState\",\n    value: function _setViewState(viewState) {\n      if (viewState) {\n        var viewStateChanged = !deepEqual(viewState, this.viewState);\n\n        if (viewStateChanged) {\n          this.setNeedsUpdate('viewState changed');\n        }\n\n        this.viewState = viewState;\n      } else {\n        log.warn('missing `viewState` or `initialViewState`')();\n      }\n    }\n  }, {\n    key: \"_onViewStateChange\",\n    value: function _onViewStateChange(viewId, event) {\n      event.viewId = viewId;\n\n      this._eventCallbacks.onViewStateChange(event);\n    }\n  }, {\n    key: \"_createController\",\n    value: function _createController(props) {\n      var Controller = props.type;\n      var controller = new Controller(Object.assign({\n        timeline: this.timeline,\n        eventManager: this._eventManager,\n        onViewStateChange: this._onViewStateChange.bind(this, props.id),\n        onStateChange: this._eventCallbacks.onInteractiveStateChange\n      }, props));\n      return controller;\n    }\n  }, {\n    key: \"_updateController\",\n    value: function _updateController(view, viewState, viewport, controller) {\n      if (view.controller) {\n        var controllerProps = Object.assign({}, view.controller, viewState, {\n          id: view.id,\n          x: viewport.x,\n          y: viewport.y,\n          width: viewport.width,\n          height: viewport.height\n        });\n\n        if (controller) {\n          controller.setProps(controllerProps);\n        } else {\n          controller = this._createController(controllerProps);\n        }\n\n        return controller;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_rebuildViewports\",\n    value: function _rebuildViewports() {\n      var width = this.width,\n          height = this.height,\n          views = this.views;\n      var oldControllers = this.controllers;\n      this._viewports = [];\n      this.controllers = {};\n\n      for (var i = views.length; i--;) {\n        var view = views[i];\n        var viewState = this.getViewState(view);\n        var viewport = view.makeViewport({\n          width: width,\n          height: height,\n          viewState: viewState\n        });\n        this.controllers[view.id] = this._updateController(view, viewState, viewport, oldControllers[view.id]);\n\n        this._viewports.unshift(viewport);\n      }\n\n      for (var id in oldControllers) {\n        if (oldControllers[id] && !this.controllers[id]) {\n          oldControllers[id].finalize();\n        }\n      }\n\n      this._buildViewportMap();\n    }\n  }, {\n    key: \"_buildViewportMap\",\n    value: function _buildViewportMap() {\n      var _this = this;\n\n      this._viewportMap = {};\n\n      this._viewports.forEach(function (viewport) {\n        if (viewport.id) {\n          _this._viewportMap[viewport.id] = _this._viewportMap[viewport.id] || viewport;\n        }\n      });\n    }\n  }, {\n    key: \"_diffViews\",\n    value: function _diffViews(newViews, oldViews) {\n      if (newViews.length !== oldViews.length) {\n        return true;\n      }\n\n      return newViews.some(function (_, i) {\n        return !newViews[i].equals(oldViews[i]);\n      });\n    }\n  }]);\n\n  return ViewManager;\n}();\n\nexport { ViewManager as default };","map":{"version":3,"sources":["../../../src/lib/view-manager.js"],"names":["ViewManager","props","onViewStateChange","onInteractiveStateChange","Object","opts","clearRedrawFlags","redraw","reason","controller","rect","viewport","viewMap","view","viewOrViewId","viewId","viewState","xyz","viewports","pixel","x","y","i","p","width","height","assert","Number","views","flatten","viewsChanged","viewStateChanged","deepEqual","log","event","Controller","timeline","eventManager","onStateChange","controllerProps","id","oldControllers","newViews","oldViews"],"mappings":";;AAoBA,OAAA,MAAA,MAAA,iBAAA;AACA,SAAA,SAAA,QAAA,qBAAA;AACA,OAAA,GAAA,MAAA,cAAA;AACA,SAAA,OAAA,QAAA,kBAAA;;IAEqBA,W;AACnB,WAAA,WAAA,GAAwB;AAAA,QAAZC,KAAY,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,WAAA,CAAA;;AAEtB,SAAA,KAAA,GAAA,EAAA;AACA,SAAA,KAAA,GAAA,GAAA;AACA,SAAA,MAAA,GAAA,GAAA;AACA,SAAA,SAAA,GAAA,EAAA;AACA,SAAA,WAAA,GAAA,EAAA;AACA,SAAA,QAAA,GAAgBA,KAAK,CAArB,QAAA;AAEA,SAAA,UAAA,GAAA,EAAA;AACA,SAAA,YAAA,GAAA,EAAA;AACA,SAAA,WAAA,GAAA,KAAA;AACA,SAAA,YAAA,GAAA,gBAAA;AACA,SAAA,YAAA,GAAA,IAAA;AAEA,SAAA,aAAA,GAAqBA,KAAK,CAA1B,YAAA;AACA,SAAA,eAAA,GAAuB;AACrBC,MAAAA,iBAAiB,EAAED,KAAK,CADH,iBAAA;AAErBE,MAAAA,wBAAwB,EAAEF,KAAK,CAACE;AAFX,KAAvB;AAKAC,IAAAA,MAAM,CAANA,IAAAA,CAAAA,IAAAA;AAGA,SAAA,QAAA,CAAA,KAAA;AACD;;;;+BAEU;AACT,WAAK,IAAL,GAAA,IAAkB,KAAlB,WAAA,EAAoC;AAClC,YAAI,KAAA,WAAA,CAAJ,GAAI,CAAJ,EAA2B;AACzB,eAAA,WAAA,CAAA,GAAA,EAAA,QAAA;AACD;AACF;;AACD,WAAA,WAAA,GAAA,EAAA;AACD;;;kCAG6C;AAAA,UAAlCC,IAAkC,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAA3B;AAACC,QAAAA,gBAAgB,EAAE;AAAnB,OAA2B;AAC5C,UAAMC,MAAM,GAAG,KAAf,YAAA;;AACA,UAAIF,IAAI,CAAR,gBAAA,EAA2B;AACzB,aAAA,YAAA,GAAA,KAAA;AACD;;AACD,aAAA,MAAA;AACD;;;mCAIcG,M,EAAQ;AACrB,WAAA,YAAA,GAAoB,KAAA,YAAA,IAApB,MAAA;AACA,WAAA,YAAA,GAAoB,KAAA,YAAA,IAApB,MAAA;AACD;;;uCAGkB;AACjB,WAAK,IAAL,MAAA,IAAqB,KAArB,WAAA,EAAuC;AACrC,YAAMC,UAAU,GAAG,KAAA,WAAA,CAAnB,MAAmB,CAAnB;;AACA,YAAA,UAAA,EAAgB;AACdA,UAAAA,UAAU,CAAVA,gBAAAA;AACD;AACF;AACF;;;iCASYC,I,EAAM;AACjB,UAAA,IAAA,EAAU;AACR,eAAO,KAAA,UAAA,CAAA,MAAA,CAAuB,UAAA,QAAA,EAAQ;AAAA,iBAAIC,QAAQ,CAARA,aAAAA,CAAJ,IAAIA,CAAJ;AAAtC,SAAO,CAAP;AACD;;AACD,aAAO,KAAP,UAAA;AACD;;;+BAEU;AACT,UAAMC,OAAO,GAAb,EAAA;AACA,WAAA,KAAA,CAAA,OAAA,CAAmB,UAAA,IAAA,EAAQ;AACzBA,QAAAA,OAAO,CAACC,IAAI,CAAZD,EAAO,CAAPA,GAAAA,IAAAA;AADF,OAAA;AAGA,aAAA,OAAA;AACD;;;4BAGOE,Y,EAAc;AACpB,aAAO,OAAA,YAAA,KAAA,QAAA,GACH,KAAA,KAAA,CAAA,IAAA,CAAgB,UAAA,IAAA,EAAI;AAAA,eAAID,IAAI,CAAJA,EAAAA,KAAJ,YAAA;AADjB,OACH,CADG,GAAP,YAAA;AAGD;;;iCAOYE,M,EAAQ;AACnB,UAAMF,IAAI,GAAG,KAAA,OAAA,CAAb,MAAa,CAAb;AAEA,UAAMG,SAAS,GAAIH,IAAI,IAAI,KAAA,SAAA,CAAeA,IAAI,CAA5B,cAAwBA,EAAf,CAARA,IAAkD,KAArE,SAAA;AACA,aAAOA,IAAI,GAAGA,IAAI,CAAJA,eAAAA,CAAH,SAAGA,CAAH,GAAX,SAAA;AACD;;;gCAEWE,M,EAAQ;AAClB,aAAO,KAAA,YAAA,CAAP,MAAO,CAAP;AACD;;;8BAYSE,G,EAAKZ,I,EAAM;AACnB,UAAMa,SAAS,GAAG,KAAlB,YAAkB,EAAlB;AACA,UAAMC,KAAK,GAAG;AAACC,QAAAA,CAAC,EAAEH,GAAG,CAAP,CAAO,CAAP;AAAYI,QAAAA,CAAC,EAAEJ,GAAG,CAAA,CAAA;AAAlB,OAAd;;AACA,WAAK,IAAIK,CAAC,GAAGJ,SAAS,CAATA,MAAAA,GAAb,CAAA,EAAmCI,CAAC,IAApC,CAAA,EAA2C,EAA3C,CAAA,EAAgD;AAC9C,YAAMX,QAAQ,GAAGO,SAAS,CAA1B,CAA0B,CAA1B;;AACA,YAAIP,QAAQ,CAARA,aAAAA,CAAJ,KAAIA,CAAJ,EAAmC;AACjC,cAAMY,CAAC,GAAGN,GAAG,CAAb,KAAUA,EAAV;AACAM,UAAAA,CAAC,CAADA,CAAC,CAADA,IAAQZ,QAAQ,CAAhBY,CAAAA;AACAA,UAAAA,CAAC,CAADA,CAAC,CAADA,IAAQZ,QAAQ,CAAhBY,CAAAA;AACA,iBAAOZ,QAAQ,CAARA,SAAAA,CAAAA,CAAAA,EAAP,IAAOA,CAAP;AACD;AACF;;AACD,aAAA,IAAA;AACD;;;6BAEQV,K,EAAO;AACd,UAAI,WAAJ,KAAA,EAAsB;AACpB,aAAA,SAAA,CAAeA,KAAK,CAApB,KAAA;AACD;;AAGD,UAAI,eAAJ,KAAA,EAA0B;AACxB,aAAA,aAAA,CAAmBA,KAAK,CAAxB,SAAA;AACD;;AAED,UAAI,WAAA,KAAA,IAAoB,YAAxB,KAAA,EAA2C;AACzC,aAAA,QAAA,CAAcA,KAAK,CAAnB,KAAA,EAA2BA,KAAK,CAAhC,MAAA;AACD;;AAKD,UAAI,CAAC,KAAL,WAAA,EAAuB;AACrB,aAAA,OAAA;AACD;AACF;;;8BAES;AACR,WAAA,WAAA,GAAA,IAAA;;AAGA,UAAI,KAAJ,YAAA,EAAuB;AACrB,aAAA,YAAA,GAAA,KAAA;;AACA,aAAA,iBAAA;AACD;;AAID,UAAI,KAAJ,YAAA,EAAuB;AACrB,aAAA,YAAA,GAAA,KAAA;;AACA,aAAA,iBAAA;AACD;;AAED,WAAA,WAAA,GAAA,KAAA;AACD;;;6BAEQuB,K,EAAOC,M,EAAQ;AACtBC,MAAAA,MAAM,CAACC,MAAM,CAANA,QAAAA,CAAAA,KAAAA,KAA0BA,MAAM,CAANA,QAAAA,CAAjCD,MAAiCC,CAA3B,CAAND;;AACA,UAAIF,KAAK,KAAK,KAAVA,KAAAA,IAAwBC,MAAM,KAAK,KAAvC,MAAA,EAAoD;AAClD,aAAA,KAAA,GAAA,KAAA;AACA,aAAA,MAAA,GAAA,MAAA;AACA,aAAA,cAAA,CAAA,cAAA;AACD;AACF;;;8BAISG,K,EAAO;AACfA,MAAAA,KAAK,GAAGC,OAAO,CAAA,KAAA,EAAfD,OAAe,CAAfA;;AAEA,UAAME,YAAY,GAAG,KAAA,UAAA,CAAA,KAAA,EAAuB,KAA5C,KAAqB,CAArB;;AACA,UAAA,YAAA,EAAkB;AAChB,aAAA,cAAA,CAAA,eAAA;AACD;;AAED,WAAA,KAAA,GAAA,KAAA;AACD;;;kCAEad,S,EAAW;AACvB,UAAA,SAAA,EAAe;AACb,YAAMe,gBAAgB,GAAG,CAACC,SAAS,CAAA,SAAA,EAAY,KAA/C,SAAmC,CAAnC;;AAEA,YAAA,gBAAA,EAAsB;AACpB,eAAA,cAAA,CAAA,mBAAA;AACD;;AAED,aAAA,SAAA,GAAA,SAAA;AAPF,OAAA,MAQO;AACLC,QAAAA,GAAG,CAAHA,IAAAA,CAAAA,2CAAAA;AACD;AACF;;;uCAMkBlB,M,EAAQmB,K,EAAO;AAChCA,MAAAA,KAAK,CAALA,MAAAA,GAAAA,MAAAA;;AACA,WAAA,eAAA,CAAA,iBAAA,CAAA,KAAA;AACD;;;sCAEiBjC,K,EAAO;AACvB,UAAMkC,UAAU,GAAGlC,KAAK,CAAxB,IAAA;AAEA,UAAMQ,UAAU,GAAG,IAAA,UAAA,CACjB,MAAM,CAAN,MAAA,CACE;AACE2B,QAAAA,QAAQ,EAAE,KADZ,QAAA;AAEEC,QAAAA,YAAY,EAAE,KAFhB,aAAA;AAIEnC,QAAAA,iBAAiB,EAAE,KAAA,kBAAA,CAAA,IAAA,CAAA,IAAA,EAAmCD,KAAK,CAJ7D,EAIqB,CAJrB;AAKEqC,QAAAA,aAAa,EAAE,KAAA,eAAA,CAAqBnC;AALtC,OADF,EADF,KACE,CADiB,CAAnB;AAaA,aAAA,UAAA;AACD;;;sCAEiBU,I,EAAMG,S,EAAWL,Q,EAAUF,U,EAAY;AACvD,UAAII,IAAI,CAAR,UAAA,EAAqB;AACnB,YAAM0B,eAAe,GAAG,MAAM,CAAN,MAAA,CAAA,EAAA,EAAkB1B,IAAI,CAAtB,UAAA,EAAA,SAAA,EAA8C;AACpE2B,UAAAA,EAAE,EAAE3B,IAAI,CAD4D,EAAA;AAEpEO,UAAAA,CAAC,EAAET,QAAQ,CAFyD,CAAA;AAGpEU,UAAAA,CAAC,EAAEV,QAAQ,CAHyD,CAAA;AAIpEa,UAAAA,KAAK,EAAEb,QAAQ,CAJqD,KAAA;AAKpEc,UAAAA,MAAM,EAAEd,QAAQ,CAACc;AALmD,SAA9C,CAAxB;;AASA,YAAA,UAAA,EAAgB;AACdhB,UAAAA,UAAU,CAAVA,QAAAA,CAAAA,eAAAA;AADF,SAAA,MAEO;AACLA,UAAAA,UAAU,GAAG,KAAA,iBAAA,CAAbA,eAAa,CAAbA;AACD;;AACD,eAAA,UAAA;AACD;;AACD,aAAA,IAAA;AACD;;;wCAGmB;AAAA,UACXe,KADW,GAAA,KAAA,KAAA;AAAA,UACJC,MADI,GAAA,KAAA,MAAA;AAAA,UACIG,KADJ,GAAA,KAAA,KAAA;AAGlB,UAAMa,cAAc,GAAG,KAAvB,WAAA;AACA,WAAA,UAAA,GAAA,EAAA;AACA,WAAA,WAAA,GAAA,EAAA;;AAGA,WAAK,IAAInB,CAAC,GAAGM,KAAK,CAAlB,MAAA,EAA2BN,CAA3B,EAAA,GAAkC;AAChC,YAAMT,IAAI,GAAGe,KAAK,CAAlB,CAAkB,CAAlB;AACA,YAAMZ,SAAS,GAAG,KAAA,YAAA,CAAlB,IAAkB,CAAlB;AACA,YAAML,QAAQ,GAAG,IAAI,CAAJ,YAAA,CAAkB;AAACa,UAAAA,KAAK,EAAN,KAAA;AAAQC,UAAAA,MAAM,EAAd,MAAA;AAAgBT,UAAAA,SAAS,EAATA;AAAhB,SAAlB,CAAjB;AAGA,aAAA,WAAA,CAAiBH,IAAI,CAArB,EAAA,IAA4B,KAAA,iBAAA,CAAA,IAAA,EAAA,SAAA,EAAA,QAAA,EAI1B4B,cAAc,CAAC5B,IAAI,CAJrB,EAIgB,CAJY,CAA5B;;AAOA,aAAA,UAAA,CAAA,OAAA,CAAA,QAAA;AACD;;AAGD,WAAK,IAAL,EAAA,IAAA,cAAA,EAAiC;AAC/B,YAAI4B,cAAc,CAAdA,EAAc,CAAdA,IAAsB,CAAC,KAAA,WAAA,CAA3B,EAA2B,CAA3B,EAAiD;AAC/CA,UAAAA,cAAc,CAAdA,EAAc,CAAdA,CAAAA,QAAAA;AACD;AACF;;AAED,WAAA,iBAAA;AACD;;;wCAEmB;AAAA,UAAA,KAAA,GAAA,IAAA;;AAElB,WAAA,YAAA,GAAA,EAAA;;AACA,WAAA,UAAA,CAAA,OAAA,CAAwB,UAAA,QAAA,EAAY;AAClC,YAAI9B,QAAQ,CAAZ,EAAA,EAAiB;AAEf,UAAA,KAAI,CAAJ,YAAA,CAAkBA,QAAQ,CAA1B,EAAA,IAAiC,KAAI,CAAJ,YAAA,CAAkBA,QAAQ,CAA1B,EAAA,KAAjC,QAAA;AACD;AAJH,OAAA;AAMD;;;+BAIU+B,Q,EAAUC,Q,EAAU;AAC7B,UAAID,QAAQ,CAARA,MAAAA,KAAoBC,QAAQ,CAAhC,MAAA,EAAyC;AACvC,eAAA,IAAA;AACD;;AAED,aAAO,QAAQ,CAAR,IAAA,CAAc,UAAA,CAAA,EAAA,CAAA,EAAA;AAAA,eAAU,CAACD,QAAQ,CAARA,CAAQ,CAARA,CAAAA,MAAAA,CAAmBC,QAAQ,CAAtC,CAAsC,CAA3BD,CAAX;AAArB,OAAO,CAAP;AACD;;;;;;SAzTkB1C,W","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport assert from '../utils/assert';\nimport {deepEqual} from '../utils/deep-equal';\nimport log from '../utils/log';\nimport {flatten} from '../utils/flatten';\n\nexport default class ViewManager {\n  constructor(props = {}) {\n    // List of view descriptors, gets re-evaluated when width/height changes\n    this.views = [];\n    this.width = 100;\n    this.height = 100;\n    this.viewState = {};\n    this.controllers = {};\n    this.timeline = props.timeline;\n\n    this._viewports = []; // Generated viewports\n    this._viewportMap = {};\n    this._isUpdating = false;\n    this._needsRedraw = 'Initial render';\n    this._needsUpdate = true;\n\n    this._eventManager = props.eventManager;\n    this._eventCallbacks = {\n      onViewStateChange: props.onViewStateChange,\n      onInteractiveStateChange: props.onInteractiveStateChange\n    };\n\n    Object.seal(this);\n\n    // Init with default map viewport\n    this.setProps(props);\n  }\n\n  finalize() {\n    for (const key in this.controllers) {\n      if (this.controllers[key]) {\n        this.controllers[key].finalize();\n      }\n    }\n    this.controllers = {};\n  }\n\n  // Check if a redraw is needed\n  needsRedraw(opts = {clearRedrawFlags: false}) {\n    const redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n    return redraw;\n  }\n\n  // Layers will be updated deeply (in next animation frame)\n  // Potentially regenerating attributes and sub layers\n  setNeedsUpdate(reason) {\n    this._needsUpdate = this._needsUpdate || reason;\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n\n  // Checks each viewport for transition updates\n  updateViewStates() {\n    for (const viewId in this.controllers) {\n      const controller = this.controllers[viewId];\n      if (controller) {\n        controller.updateTransition();\n      }\n    }\n  }\n\n  /** Get a set of viewports for a given width and height\n   * TODO - Intention is for deck.gl to autodeduce width and height and drop the need for props\n   * @param rect (object, optional) - filter the viewports\n   *   + not provided - return all viewports\n   *   + {x, y} - only return viewports that contain this pixel\n   *   + {x, y, width, height} - only return viewports that overlap with this rectangle\n   */\n  getViewports(rect) {\n    if (rect) {\n      return this._viewports.filter(viewport => viewport.containsPixel(rect));\n    }\n    return this._viewports;\n  }\n\n  getViews() {\n    const viewMap = {};\n    this.views.forEach(view => {\n      viewMap[view.id] = view;\n    });\n    return viewMap;\n  }\n\n  // Resolves a viewId string to a View, if already a View returns it.\n  getView(viewOrViewId) {\n    return typeof viewOrViewId === 'string'\n      ? this.views.find(view => view.id === viewOrViewId)\n      : viewOrViewId;\n  }\n\n  // Returns the viewState for a specific viewId. Matches the viewState by\n  // 1. view.viewStateId\n  // 2. view.id\n  // 3. root viewState\n  // then applies the view's filter if any\n  getViewState(viewId) {\n    const view = this.getView(viewId);\n    // Backward compatibility: view state for single view\n    const viewState = (view && this.viewState[view.getViewStateId()]) || this.viewState;\n    return view ? view.filterViewState(viewState) : viewState;\n  }\n\n  getViewport(viewId) {\n    return this._viewportMap[viewId];\n  }\n\n  /**\n   * Unproject pixel coordinates on screen onto world coordinates,\n   * (possibly [lon, lat]) on map.\n   * - [x, y] => [lng, lat]\n   * - [x, y, z] => [lng, lat, Z]\n   * @param {Array} xyz -\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether origin is top left\n   * @return {Array|null} - [lng, lat, Z] or [X, Y, Z]\n   */\n  unproject(xyz, opts) {\n    const viewports = this.getViewports();\n    const pixel = {x: xyz[0], y: xyz[1]};\n    for (let i = viewports.length - 1; i >= 0; --i) {\n      const viewport = viewports[i];\n      if (viewport.containsPixel(pixel)) {\n        const p = xyz.slice();\n        p[0] -= viewport.x;\n        p[1] -= viewport.y;\n        return viewport.unproject(p, opts);\n      }\n    }\n    return null;\n  }\n\n  setProps(props) {\n    if ('views' in props) {\n      this._setViews(props.views);\n    }\n\n    // TODO - support multiple view states\n    if ('viewState' in props) {\n      this._setViewState(props.viewState);\n    }\n\n    if ('width' in props || 'height' in props) {\n      this._setSize(props.width, props.height);\n    }\n\n    // Important: avoid invoking _update() inside itself\n    // Nested updates result in unexpected side effects inside _rebuildViewports()\n    // when using auto control in pure-js\n    if (!this._isUpdating) {\n      this._update();\n    }\n  }\n\n  _update() {\n    this._isUpdating = true;\n\n    // Only rebuild viewports if the update flag is set\n    if (this._needsUpdate) {\n      this._needsUpdate = false;\n      this._rebuildViewports();\n    }\n\n    // If viewport transition(s) are triggered during viewports update, controller(s)\n    // will immediately call `onViewStateChange` which calls `viewManager.setProps` again.\n    if (this._needsUpdate) {\n      this._needsUpdate = false;\n      this._rebuildViewports();\n    }\n\n    this._isUpdating = false;\n  }\n\n  _setSize(width, height) {\n    assert(Number.isFinite(width) && Number.isFinite(height));\n    if (width !== this.width || height !== this.height) {\n      this.width = width;\n      this.height = height;\n      this.setNeedsUpdate('Size changed');\n    }\n  }\n\n  // Update the view descriptor list and set change flag if needed\n  // Does not actually rebuild the `Viewport`s until `getViewports` is called\n  _setViews(views) {\n    views = flatten(views, Boolean);\n\n    const viewsChanged = this._diffViews(views, this.views);\n    if (viewsChanged) {\n      this.setNeedsUpdate('views changed');\n    }\n\n    this.views = views;\n  }\n\n  _setViewState(viewState) {\n    if (viewState) {\n      const viewStateChanged = !deepEqual(viewState, this.viewState);\n\n      if (viewStateChanged) {\n        this.setNeedsUpdate('viewState changed');\n      }\n\n      this.viewState = viewState;\n    } else {\n      log.warn('missing `viewState` or `initialViewState`')();\n    }\n  }\n\n  //\n  // PRIVATE METHODS\n  //\n\n  _onViewStateChange(viewId, event) {\n    event.viewId = viewId;\n    this._eventCallbacks.onViewStateChange(event);\n  }\n\n  _createController(props) {\n    const Controller = props.type;\n\n    const controller = new Controller(\n      Object.assign(\n        {\n          timeline: this.timeline,\n          eventManager: this._eventManager,\n          // Set an internal callback that calls the prop callback if provided\n          onViewStateChange: this._onViewStateChange.bind(this, props.id),\n          onStateChange: this._eventCallbacks.onInteractiveStateChange\n        },\n        props\n      )\n    );\n\n    return controller;\n  }\n\n  _updateController(view, viewState, viewport, controller) {\n    if (view.controller) {\n      const controllerProps = Object.assign({}, view.controller, viewState, {\n        id: view.id,\n        x: viewport.x,\n        y: viewport.y,\n        width: viewport.width,\n        height: viewport.height\n      });\n\n      // TODO - check if view / controller type has changed, and replace the controller\n      if (controller) {\n        controller.setProps(controllerProps);\n      } else {\n        controller = this._createController(controllerProps);\n      }\n      return controller;\n    }\n    return null;\n  }\n\n  // Rebuilds viewports from descriptors towards a certain window size\n  _rebuildViewports() {\n    const {width, height, views} = this;\n\n    const oldControllers = this.controllers;\n    this._viewports = [];\n    this.controllers = {};\n\n    // Create controllers in reverse order, so that views on top receive events first\n    for (let i = views.length; i--; ) {\n      const view = views[i];\n      const viewState = this.getViewState(view);\n      const viewport = view.makeViewport({width, height, viewState});\n\n      // Update the controller\n      this.controllers[view.id] = this._updateController(\n        view,\n        viewState,\n        viewport,\n        oldControllers[view.id]\n      );\n\n      this._viewports.unshift(viewport);\n    }\n\n    // Remove unused controllers\n    for (const id in oldControllers) {\n      if (oldControllers[id] && !this.controllers[id]) {\n        oldControllers[id].finalize();\n      }\n    }\n\n    this._buildViewportMap();\n  }\n\n  _buildViewportMap() {\n    // Build a view id to view index\n    this._viewportMap = {};\n    this._viewports.forEach(viewport => {\n      if (viewport.id) {\n        // TODO - issue warning if multiple viewports use same id\n        this._viewportMap[viewport.id] = this._viewportMap[viewport.id] || viewport;\n      }\n    });\n  }\n\n  // Check if viewport array has changed, returns true if any change\n  // Note that descriptors can be the same\n  _diffViews(newViews, oldViews) {\n    if (newViews.length !== oldViews.length) {\n      return true;\n    }\n\n    return newViews.some((_, i) => !newViews[i].equals(oldViews[i]));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}