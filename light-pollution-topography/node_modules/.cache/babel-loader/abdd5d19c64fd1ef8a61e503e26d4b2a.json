{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { CompositeLayer, createIterable, log } from '@deck.gl/core';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport * as Polygon from '../solid-polygon-layer/polygon';\nimport { replaceInRange } from '../utils';\nvar defaultLineColor = [0, 0, 0, 255];\nvar defaultFillColor = [0, 0, 0, 255];\nvar defaultProps = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  elevationScale: 1,\n  wireframe: false,\n  _normalize: true,\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n  getPolygon: {\n    type: 'accessor',\n    value: function value(f) {\n      return f.polygon;\n    }\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: defaultFillColor\n  },\n  getLineColor: {\n    type: 'accessor',\n    value: defaultLineColor\n  },\n  getLineWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  getElevation: {\n    type: 'accessor',\n    value: 1000\n  },\n  material: true\n};\n\nvar PolygonLayer = function (_CompositeLayer) {\n  _inherits(PolygonLayer, _CompositeLayer);\n\n  function PolygonLayer() {\n    _classCallCheck(this, PolygonLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PolygonLayer).apply(this, arguments));\n  }\n\n  _createClass(PolygonLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      this.state = {\n        paths: []\n      };\n\n      if (this.props.getLineDashArray) {\n        log.removed('getLineDashArray', 'PathStyleExtension')();\n      }\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var _this = this;\n\n      var oldProps = _ref.oldProps,\n          props = _ref.props,\n          changeFlags = _ref.changeFlags;\n      var geometryChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon);\n\n      if (geometryChanged && Array.isArray(changeFlags.dataChanged)) {\n        var paths = this.state.paths.slice();\n        var pathsDiff = changeFlags.dataChanged.map(function (dataRange) {\n          return replaceInRange({\n            data: paths,\n            getIndex: function getIndex(p) {\n              return p.__source.index;\n            },\n            dataRange: dataRange,\n            replace: _this._getPaths(dataRange)\n          });\n        });\n        this.setState({\n          paths: paths,\n          pathsDiff: pathsDiff\n        });\n      } else if (geometryChanged) {\n        this.setState({\n          paths: this._getPaths(),\n          pathsDiff: null\n        });\n      }\n    }\n  }, {\n    key: \"_getPaths\",\n    value: function _getPaths() {\n      var dataRange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _this$props = this.props,\n          data = _this$props.data,\n          getPolygon = _this$props.getPolygon,\n          positionFormat = _this$props.positionFormat,\n          _normalize = _this$props._normalize;\n      var paths = [];\n      var positionSize = positionFormat === 'XY' ? 2 : 3;\n      var startRow = dataRange.startRow,\n          endRow = dataRange.endRow;\n\n      var _createIterable = createIterable(data, startRow, endRow),\n          iterable = _createIterable.iterable,\n          objectInfo = _createIterable.objectInfo;\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = iterable[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var object = _step.value;\n          objectInfo.index++;\n          var polygon = getPolygon(object, objectInfo);\n\n          if (_normalize) {\n            polygon = Polygon.normalize(polygon, positionSize);\n          }\n\n          var _polygon = polygon,\n              holeIndices = _polygon.holeIndices;\n          var positions = polygon.positions || polygon;\n\n          if (holeIndices) {\n            for (var i = 0; i <= holeIndices.length; i++) {\n              var path = positions.subarray(holeIndices[i - 1] || 0, holeIndices[i] || positions.length);\n              paths.push(this.getSubLayerRow({\n                path: path\n              }, object, objectInfo.index));\n            }\n          } else {\n            paths.push(this.getSubLayerRow({\n              path: positions\n            }, object, objectInfo.index));\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return paths;\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this$props2 = this.props,\n          data = _this$props2.data,\n          _dataDiff = _this$props2._dataDiff,\n          stroked = _this$props2.stroked,\n          filled = _this$props2.filled,\n          extruded = _this$props2.extruded,\n          wireframe = _this$props2.wireframe,\n          _normalize = _this$props2._normalize,\n          elevationScale = _this$props2.elevationScale,\n          transitions = _this$props2.transitions,\n          positionFormat = _this$props2.positionFormat;\n      var _this$props3 = this.props,\n          lineWidthUnits = _this$props3.lineWidthUnits,\n          lineWidthScale = _this$props3.lineWidthScale,\n          lineWidthMinPixels = _this$props3.lineWidthMinPixels,\n          lineWidthMaxPixels = _this$props3.lineWidthMaxPixels,\n          lineJointRounded = _this$props3.lineJointRounded,\n          lineMiterLimit = _this$props3.lineMiterLimit,\n          lineDashJustified = _this$props3.lineDashJustified;\n      var _this$props4 = this.props,\n          getFillColor = _this$props4.getFillColor,\n          getLineColor = _this$props4.getLineColor,\n          getLineWidth = _this$props4.getLineWidth,\n          getLineDashArray = _this$props4.getLineDashArray,\n          getElevation = _this$props4.getElevation,\n          getPolygon = _this$props4.getPolygon,\n          updateTriggers = _this$props4.updateTriggers,\n          material = _this$props4.material;\n      var _this$state = this.state,\n          paths = _this$state.paths,\n          pathsDiff = _this$state.pathsDiff;\n      var FillLayer = this.getSubLayerClass('fill', SolidPolygonLayer);\n      var StrokeLayer = this.getSubLayerClass('stroke', PathLayer);\n      var polygonLayer = this.shouldRenderSubLayer('fill', paths) && new FillLayer({\n        _dataDiff: _dataDiff,\n        extruded: extruded,\n        elevationScale: elevationScale,\n        filled: filled,\n        wireframe: wireframe,\n        _normalize: _normalize,\n        getElevation: getElevation,\n        getFillColor: getFillColor,\n        getLineColor: getLineColor,\n        material: material,\n        transitions: transitions\n      }, this.getSubLayerProps({\n        id: 'fill',\n        updateTriggers: {\n          getPolygon: updateTriggers.getPolygon,\n          getElevation: updateTriggers.getElevation,\n          getFillColor: updateTriggers.getFillColor,\n          getLineColor: updateTriggers.getLineColor\n        }\n      }), {\n        data: data,\n        positionFormat: positionFormat,\n        getPolygon: getPolygon\n      });\n      var polygonLineLayer = !extruded && stroked && this.shouldRenderSubLayer('stroke', paths) && new StrokeLayer({\n        _dataDiff: pathsDiff && function () {\n          return pathsDiff;\n        },\n        widthUnits: lineWidthUnits,\n        widthScale: lineWidthScale,\n        widthMinPixels: lineWidthMinPixels,\n        widthMaxPixels: lineWidthMaxPixels,\n        rounded: lineJointRounded,\n        miterLimit: lineMiterLimit,\n        dashJustified: lineDashJustified,\n        _pathType: 'loop',\n        transitions: transitions && {\n          getWidth: transitions.getLineWidth,\n          getColor: transitions.getLineColor,\n          getPath: transitions.getPolygon\n        },\n        getColor: this.getSubLayerAccessor(getLineColor),\n        getWidth: this.getSubLayerAccessor(getLineWidth),\n        getDashArray: this.getSubLayerAccessor(getLineDashArray)\n      }, this.getSubLayerProps({\n        id: 'stroke',\n        updateTriggers: {\n          getWidth: updateTriggers.getLineWidth,\n          getColor: updateTriggers.getLineColor,\n          getDashArray: updateTriggers.getLineDashArray\n        }\n      }), {\n        data: paths,\n        positionFormat: positionFormat,\n        getPath: function getPath(x) {\n          return x.path;\n        }\n      });\n      return [!extruded && polygonLayer, polygonLineLayer, extruded && polygonLayer];\n    }\n  }]);\n\n  return PolygonLayer;\n}(CompositeLayer);\n\nexport { PolygonLayer as default };\nPolygonLayer.layerName = 'PolygonLayer';\nPolygonLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/polygon-layer/polygon-layer.js"],"names":["defaultLineColor","defaultFillColor","defaultProps","stroked","filled","extruded","elevationScale","wireframe","_normalize","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","lineJointRounded","lineMiterLimit","getPolygon","type","value","f","getFillColor","getLineColor","getLineWidth","getElevation","material","PolygonLayer","CompositeLayer","paths","log","oldProps","props","changeFlags","geometryChanged","Array","pathsDiff","replaceInRange","data","getIndex","p","dataRange","replace","positionFormat","positionSize","startRow","endRow","iterable","objectInfo","createIterable","object","polygon","Polygon","holeIndices","positions","i","path","_dataDiff","transitions","lineDashJustified","getLineDashArray","updateTriggers","FillLayer","StrokeLayer","polygonLayer","id","polygonLineLayer","widthUnits","widthScale","widthMinPixels","widthMaxPixels","rounded","miterLimit","dashJustified","_pathType","getWidth","getColor","getPath","getDashArray","x"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer, createIterable, log} from '@deck.gl/core';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport * as Polygon from '../solid-polygon-layer/polygon';\nimport {replaceInRange} from '../utils';\n\nconst defaultLineColor = [0, 0, 0, 255];\nconst defaultFillColor = [0, 0, 0, 255];\n\nconst defaultProps = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  elevationScale: 1,\n  wireframe: false,\n  _normalize: true,\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n\n  getPolygon: {type: 'accessor', value: f => f.polygon},\n  // Polygon fill color\n  getFillColor: {type: 'accessor', value: defaultFillColor},\n  // Point, line and polygon outline color\n  getLineColor: {type: 'accessor', value: defaultLineColor},\n  // Line and polygon outline accessors\n  getLineWidth: {type: 'accessor', value: 1},\n  // Polygon extrusion accessor\n  getElevation: {type: 'accessor', value: 1000},\n\n  // Optional material for 'lighting' shader module\n  material: true\n};\n\nexport default class PolygonLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      paths: []\n    };\n\n    if (this.props.getLineDashArray) {\n      log.removed('getLineDashArray', 'PathStyleExtension')();\n    }\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    const geometryChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    if (geometryChanged && Array.isArray(changeFlags.dataChanged)) {\n      const paths = this.state.paths.slice();\n      const pathsDiff = changeFlags.dataChanged.map(dataRange =>\n        replaceInRange({\n          data: paths,\n          getIndex: p => p.__source.index,\n          dataRange,\n          replace: this._getPaths(dataRange)\n        })\n      );\n      this.setState({paths, pathsDiff});\n    } else if (geometryChanged) {\n      this.setState({\n        paths: this._getPaths(),\n        pathsDiff: null\n      });\n    }\n  }\n\n  _getPaths(dataRange = {}) {\n    const {data, getPolygon, positionFormat, _normalize} = this.props;\n    const paths = [];\n    const positionSize = positionFormat === 'XY' ? 2 : 3;\n    const {startRow, endRow} = dataRange;\n\n    const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n    for (const object of iterable) {\n      objectInfo.index++;\n      let polygon = getPolygon(object, objectInfo);\n      if (_normalize) {\n        polygon = Polygon.normalize(polygon, positionSize);\n      }\n      const {holeIndices} = polygon;\n      const positions = polygon.positions || polygon;\n\n      if (holeIndices) {\n        // split the positions array into `holeIndices.length + 1` rings\n        // holeIndices[-1] falls back to 0\n        // holeIndices[holeIndices.length] falls back to positions.length\n        for (let i = 0; i <= holeIndices.length; i++) {\n          const path = positions.subarray(\n            holeIndices[i - 1] || 0,\n            holeIndices[i] || positions.length\n          );\n          paths.push(this.getSubLayerRow({path}, object, objectInfo.index));\n        }\n      } else {\n        paths.push(this.getSubLayerRow({path: positions}, object, objectInfo.index));\n      }\n    }\n    return paths;\n  }\n\n  /* eslint-disable complexity */\n  renderLayers() {\n    // Layer composition props\n    const {\n      data,\n      _dataDiff,\n      stroked,\n      filled,\n      extruded,\n      wireframe,\n      _normalize,\n      elevationScale,\n      transitions,\n      positionFormat\n    } = this.props;\n\n    // Rendering props underlying layer\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      getPolygon,\n      updateTriggers,\n      material\n    } = this.props;\n\n    const {paths, pathsDiff} = this.state;\n\n    const FillLayer = this.getSubLayerClass('fill', SolidPolygonLayer);\n    const StrokeLayer = this.getSubLayerClass('stroke', PathLayer);\n\n    // Filled Polygon Layer\n    const polygonLayer =\n      this.shouldRenderSubLayer('fill', paths) &&\n      new FillLayer(\n        {\n          _dataDiff,\n          extruded,\n          elevationScale,\n\n          filled,\n          wireframe,\n          _normalize,\n\n          getElevation,\n          getFillColor,\n          getLineColor,\n\n          material,\n          transitions\n        },\n        this.getSubLayerProps({\n          id: 'fill',\n          updateTriggers: {\n            getPolygon: updateTriggers.getPolygon,\n            getElevation: updateTriggers.getElevation,\n            getFillColor: updateTriggers.getFillColor,\n            getLineColor: updateTriggers.getLineColor\n          }\n        }),\n        {\n          data,\n          positionFormat,\n          getPolygon\n        }\n      );\n\n    // Polygon line layer\n    const polygonLineLayer =\n      !extruded &&\n      stroked &&\n      this.shouldRenderSubLayer('stroke', paths) &&\n      new StrokeLayer(\n        {\n          _dataDiff: pathsDiff && (() => pathsDiff),\n          widthUnits: lineWidthUnits,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          rounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          // Already normalized\n          _pathType: 'loop',\n\n          transitions: transitions && {\n            getWidth: transitions.getLineWidth,\n            getColor: transitions.getLineColor,\n            getPath: transitions.getPolygon\n          },\n\n          getColor: this.getSubLayerAccessor(getLineColor),\n          getWidth: this.getSubLayerAccessor(getLineWidth),\n          getDashArray: this.getSubLayerAccessor(getLineDashArray)\n        },\n        this.getSubLayerProps({\n          id: 'stroke',\n          updateTriggers: {\n            getWidth: updateTriggers.getLineWidth,\n            getColor: updateTriggers.getLineColor,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        {\n          data: paths,\n          positionFormat,\n          getPath: x => x.path\n        }\n      );\n\n    return [\n      // If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonLayer,\n      polygonLineLayer,\n      // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonLayer\n    ];\n  }\n  /* eslint-enable complexity */\n}\n\nPolygonLayer.layerName = 'PolygonLayer';\nPolygonLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}