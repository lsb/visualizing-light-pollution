{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { copyStringToDataView } from '@loaders.gl/loader-utils';\nimport { MAGIC_ARRAY } from '../constants';\nimport { encode3DTileHeader, encode3DTileByteLength } from './helpers/encode-3d-tile-header';\nexport function encodeBatchedModel3DTile(tile, dataView, byteOffset, options) {\n  var _tile = tile,\n      _tile$featuresLength = _tile.featuresLength,\n      featuresLength = _tile$featuresLength === void 0 ? 1 : _tile$featuresLength;\n  var featureTableJson = {\n    BATCH_LENGTH: featuresLength\n  };\n  var featureTableJsonString = JSON.stringify(featureTableJson);\n  var featureTableJsonByteLength = featureTableJsonString.length;\n  tile = _objectSpread({\n    magic: MAGIC_ARRAY.BATCHED_MODEL\n  }, tile);\n  var byteOffsetStart = byteOffset;\n  byteOffset = encode3DTileHeader(tile, dataView, byteOffset);\n\n  if (dataView) {\n    dataView.setUint32(12, featureTableJsonByteLength, true);\n    dataView.setUint32(16, 0, true);\n    dataView.setUint32(20, 0, true);\n    dataView.setUint32(24, 0, true);\n  }\n\n  byteOffset += 16;\n  byteOffset += copyStringToDataView(dataView, byteOffset, featureTableJsonString, featureTableJsonByteLength);\n  encode3DTileByteLength(dataView, byteOffsetStart, byteOffset - byteOffsetStart);\n  return byteOffset;\n}","map":{"version":3,"sources":["../../../../src/lib/encoders/encode-3d-tile-batched-model.js"],"names":["featuresLength","featureTableJson","BATCH_LENGTH","featureTableJsonString","JSON","featureTableJsonByteLength","tile","magic","MAGIC_ARRAY","BATCHED_MODEL","byteOffsetStart","byteOffset","encode3DTileHeader","dataView","copyStringToDataView","encode3DTileByteLength"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,SAAA,oBAAA,QAAA,0BAAA;AACA,SAAA,WAAA,QAAA,cAAA;AACA,SAAA,kBAAA,EAAA,sBAAA,QAAA,iCAAA;AAGA,OAAO,SAAA,wBAAA,CAAA,IAAA,EAAA,QAAA,EAAA,UAAA,EAAA,OAAA,EAAuE;AAAA,MAAA,KAAA,GAAA,IAAA;AAAA,MAAA,oBAAA,GAAA,KAAA,CAAA,cAAA;AAAA,MACrEA,cADqE,GAAA,oBAAA,KAAA,KAAA,CAAA,GAAA,CAAA,GAAA,oBAAA;AAG5E,MAAMC,gBAAgB,GAAG;AACvBC,IAAAA,YAAY,EAAEF;AADS,GAAzB;AAGA,MAAMG,sBAAsB,GAAGC,IAAI,CAAJA,SAAAA,CAA/B,gBAA+BA,CAA/B;AACA,MAAMC,0BAA0B,GAAGF,sBAAsB,CAAzD,MAAA;AAGAG,EAAAA,IAAI,GAAA,aAAA,CAAA;AAAIC,IAAAA,KAAK,EAAEC,WAAW,CAACC;AAAvB,GAAA,EAAJH,IAAI,CAAJA;AAEA,MAAMI,eAAe,GAArB,UAAA;AAEAC,EAAAA,UAAU,GAAGC,kBAAkB,CAAA,IAAA,EAAA,QAAA,EAA/BD,UAA+B,CAA/BA;;AAEA,MAAA,QAAA,EAAc;AACZE,IAAAA,QAAQ,CAARA,SAAAA,CAAAA,EAAAA,EAAAA,0BAAAA,EAAAA,IAAAA;AACAA,IAAAA,QAAQ,CAARA,SAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,IAAAA;AACAA,IAAAA,QAAQ,CAARA,SAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,IAAAA;AACAA,IAAAA,QAAQ,CAARA,SAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,IAAAA;AACD;;AACDF,EAAAA,UAAU,IAAVA,EAAAA;AAGAA,EAAAA,UAAU,IAAIG,oBAAoB,CAAA,QAAA,EAAA,UAAA,EAAA,sBAAA,EAAlCH,0BAAkC,CAAlCA;AASAI,EAAAA,sBAAsB,CAAA,QAAA,EAAA,eAAA,EAA4BJ,UAAU,GAA5DI,eAAsB,CAAtBA;AAEA,SAAA,UAAA;AACD","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {copyStringToDataView} from '@loaders.gl/loader-utils';\nimport {MAGIC_ARRAY} from '../constants';\nimport {encode3DTileHeader, encode3DTileByteLength} from './helpers/encode-3d-tile-header';\n\n// Procedurally encode the tile array dataView for testing purposes\nexport function encodeBatchedModel3DTile(tile, dataView, byteOffset, options) {\n  const {featuresLength = 1} = tile;\n\n  const featureTableJson = {\n    BATCH_LENGTH: featuresLength\n  };\n  const featureTableJsonString = JSON.stringify(featureTableJson);\n  const featureTableJsonByteLength = featureTableJsonString.length;\n\n  // Add default magic for this tile type\n  tile = {magic: MAGIC_ARRAY.BATCHED_MODEL, ...tile};\n\n  const byteOffsetStart = byteOffset;\n\n  byteOffset = encode3DTileHeader(tile, dataView, byteOffset);\n\n  if (dataView) {\n    dataView.setUint32(12, featureTableJsonByteLength, true); // featureTableJsonByteLength\n    dataView.setUint32(16, 0, true); // featureTableBinaryByteLength\n    dataView.setUint32(20, 0, true); // batchTableJsonByteLength\n    dataView.setUint32(24, 0, true); // batchTableBinaryByteLength\n  }\n  byteOffset += 16;\n\n  // TODO feature table binary\n  byteOffset += copyStringToDataView(\n    dataView,\n    byteOffset,\n    featureTableJsonString,\n    featureTableJsonByteLength\n  );\n  // TODO batch table\n\n  // Go \"back\" and rewrite the tile's `byteLength` now that we know the value\n  encode3DTileByteLength(dataView, byteOffsetStart, byteOffset - byteOffsetStart);\n\n  return byteOffset;\n}\n"]},"metadata":{},"sourceType":"module"}