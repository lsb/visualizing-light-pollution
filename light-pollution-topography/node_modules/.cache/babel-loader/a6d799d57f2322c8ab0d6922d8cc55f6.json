{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { fetchFile } from '../fetch/fetch-file';\nexport function getLoaderContext(context, options, previousContext) {\n  if (previousContext) {\n    return previousContext;\n  }\n\n  context = _objectSpread({\n    fetch: context.fetch || fetchFile\n  }, context);\n\n  if (!Array.isArray(context.loaders)) {\n    context.loaders = null;\n  }\n\n  return context;\n}\nexport function getLoaders(loaders, context) {\n  if (!context && !Array.isArray(loaders)) {\n    return loaders;\n  }\n\n  var candidateLoaders;\n\n  if (loaders) {\n    candidateLoaders = Array.isArray(loaders) ? loaders : [loaders];\n  }\n\n  if (context && context.loaders) {\n    var contextLoaders = Array.isArray(context.loaders) ? context.loaders : [context.loaders];\n    candidateLoaders = candidateLoaders ? [].concat(_toConsumableArray(candidateLoaders), _toConsumableArray(contextLoaders)) : contextLoaders;\n  }\n\n  return candidateLoaders && candidateLoaders.length ? candidateLoaders : null;\n}","map":{"version":3,"sources":["../../../../src/lib/loader-utils/get-loader-context.js"],"names":["context","fetch","fetchFile","Array","candidateLoaders","contextLoaders"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,SAAA,SAAA,QAAA,qBAAA;AAEA,OAAO,SAAA,gBAAA,CAAA,OAAA,EAAA,OAAA,EAAA,eAAA,EAA6D;AAGlE,MAAA,eAAA,EAAqB;AACnB,WAAA,eAAA;AACD;;AACDA,EAAAA,OAAO,GAAA,aAAA,CAAA;AAELC,IAAAA,KAAK,EAAED,OAAO,CAAPA,KAAAA,IAAiBE;AAFnB,GAAA,EAAPF,OAAO,CAAPA;;AAOA,MAAI,CAACG,KAAK,CAALA,OAAAA,CAAcH,OAAO,CAA1B,OAAKG,CAAL,EAAqC;AACnCH,IAAAA,OAAO,CAAPA,OAAAA,GAAAA,IAAAA;AACD;;AAED,SAAA,OAAA;AACD;AAED,OAAO,SAAA,UAAA,CAAA,OAAA,EAAA,OAAA,EAAsC;AAE3C,MAAI,CAAA,OAAA,IAAY,CAACG,KAAK,CAALA,OAAAA,CAAjB,OAAiBA,CAAjB,EAAyC;AACvC,WAAA,OAAA;AACD;;AAGD,MAAA,gBAAA;;AACA,MAAA,OAAA,EAAa;AACXC,IAAAA,gBAAgB,GAAGD,KAAK,CAALA,OAAAA,CAAAA,OAAAA,IAAAA,OAAAA,GAAmC,CAAtDC,OAAsD,CAAtDA;AACD;;AACD,MAAIJ,OAAO,IAAIA,OAAO,CAAtB,OAAA,EAAgC;AAC9B,QAAMK,cAAc,GAAGF,KAAK,CAALA,OAAAA,CAAcH,OAAO,CAArBG,OAAAA,IAAiCH,OAAO,CAAxCG,OAAAA,GAAmD,CAACH,OAAO,CAAlF,OAA0E,CAA1E;AACAI,IAAAA,gBAAgB,GAAGA,gBAAgB,GAAA,GAAA,MAAA,CAAA,kBAAA,CAAA,gBAAA,CAAA,EAAA,kBAAA,CAAA,cAAA,CAAA,CAAA,GAAnCA,cAAAA;AACD;;AAED,SAAOA,gBAAgB,IAAIA,gBAAgB,CAApCA,MAAAA,GAAAA,gBAAAA,GAAP,IAAA;AACD","sourcesContent":["// \"sub\" loaders invoked by other loaders get a \"context\" injected on `this`\n// The context will inject core methods like `parse` and contain information\n// about loaders and options passed in to the top-level `parse` call.\nimport {fetchFile} from '../fetch/fetch-file';\n\nexport function getLoaderContext(context, options, previousContext) {\n  // For recursive calls, we already have a context\n  // TODO - add any additional loaders to context?\n  if (previousContext) {\n    return previousContext;\n  }\n  context = {\n    // TODO - determine how to inject fetch, fetch in options etc\n    fetch: context.fetch || fetchFile,\n    ...context\n  };\n\n  // Recursive loading does not use single loader\n  if (!Array.isArray(context.loaders)) {\n    context.loaders = null;\n  }\n\n  return context;\n}\n\nexport function getLoaders(loaders, context) {\n  // A single non-array loader is force selected, but only on top-level (context === null)\n  if (!context && !Array.isArray(loaders)) {\n    return loaders;\n  }\n\n  // Create a merged list\n  let candidateLoaders;\n  if (loaders) {\n    candidateLoaders = Array.isArray(loaders) ? loaders : [loaders];\n  }\n  if (context && context.loaders) {\n    const contextLoaders = Array.isArray(context.loaders) ? context.loaders : [context.loaders];\n    candidateLoaders = candidateLoaders ? [...candidateLoaders, ...contextLoaders] : contextLoaders;\n  }\n  // If no loaders, return null to look in globally registered loaders\n  return candidateLoaders && candidateLoaders.length ? candidateLoaders : null;\n}\n"]},"metadata":{},"sourceType":"module"}