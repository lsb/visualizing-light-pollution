{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport Tiles3DLoader from './tiles-3d-loader';\nimport { getIonTilesetMetadata } from './lib/ion/ion';\n\nfunction preload(_x) {\n  return _preload.apply(this, arguments);\n}\n\nfunction _preload() {\n  _preload = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(url) {\n    var options,\n        _options,\n        accessToken,\n        assetId,\n        matched,\n        _args2 = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};\n            options = options['cesium-ion'] || {};\n            _options = options, accessToken = _options.accessToken;\n            assetId = options.assetId;\n\n            if (!Number.isFinite(assetId)) {\n              matched = url.match(/\\/([0-9]+)\\/tileset.json/);\n              assetId = matched && matched[1];\n            }\n\n            return _context2.abrupt(\"return\", getIonTilesetMetadata(accessToken, assetId));\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _preload.apply(this, arguments);\n}\n\nvar CesiumIonLoader = _objectSpread({}, Tiles3DLoader, {\n  id: 'cesium-ion',\n  name: 'Cesium Ion',\n  preload: preload,\n  parse: function () {\n    var _parse = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(data, options, context, loader) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options['3d-tiles'] = options['cesium-ion'];\n              options.loader = CesiumIonLoader;\n              return _context.abrupt(\"return\", Tiles3DLoader.parse(data, options, context, loader));\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function parse(_x2, _x3, _x4, _x5) {\n      return _parse.apply(this, arguments);\n    }\n\n    return parse;\n  }(),\n  options: {\n    'cesium-ion': Tiles3DLoader.options['3d-tiles']\n  }\n});\n\nexport default CesiumIonLoader;","map":{"version":3,"sources":["../../src/cesium-ion-loader.js"],"names":["preload","options","accessToken","assetId","Number","matched","url","getIonTilesetMetadata","CesiumIonLoader","id","name","parse","Tiles3DLoader"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,aAAA,MAAA,mBAAA;AACA,SAAA,qBAAA,QAAA,eAAA;;SAEeA,O;;;;;wDAAf,SAAA,QAAA,CAAA,GAAA,EAAA;AAAA,QAAA,OAAA;AAAA,QAAA,QAAA;AAAA,QAAA,WAAA;AAAA,QAAA,OAAA;AAAA,QAAA,OAAA;AAAA,QAAA,MAAA,GAAA,SAAA;;AAAA,WAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,aAAA,CAAA,EAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,eAAA,CAAA;AAA4BC,YAAAA,OAA5B,GAAA,MAAA,CAAA,MAAA,GAAA,CAAA,IAAA,MAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,MAAA,CAAA,CAAA,CAAA,GAAA,EAA4BA;AAC1BA,YAAAA,OAAO,GAAGA,OAAO,CAAPA,YAAO,CAAPA,IAAVA,EAAAA;AADF,YAAA,QAAA,GAAA,OAAA,EAESC,WAFT,GAAA,QAAA,CAAA,WAAA;AAGMC,YAAAA,OAHN,GAGgBF,OAAO,CAHvB,OAGME;;AACJ,gBAAI,CAACC,MAAM,CAANA,QAAAA,CAAL,OAAKA,CAAL,EAA+B;AACvBC,cAAAA,OADuB,GACbC,GAAG,CAAHA,KAAAA,CADa,0BACbA,CAAVD;AACNF,cAAAA,OAAO,GAAGE,OAAO,IAAIA,OAAO,CAA5BF,CAA4B,CAA5BA;AACD;;AAPH,mBAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAQSI,qBAAqB,CAAA,WAAA,EAR9B,OAQ8B,CAR9B,CAAA;;AAAA,eAAA,CAAA;AAAA,eAAA,KAAA;AAAA,mBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,KAAA,EAAA,QAAA,CAAA;;;;;AAWA,IAAMC,eAAe,GAAA,aAAA,CAAA,EAAA,EAAA,aAAA,EAAA;AAEnBC,EAAAA,EAAE,EAFiB,YAAA;AAGnBC,EAAAA,IAAI,EAHe,YAAA;AAInBV,EAAAA,OAAO,EAJY,OAAA;AAKnBW,EAAAA,KAAK,EAAA,YAAA;AAAA,QAAA,MAAA,GAAA,iBAAA,CAAA,mBAAA,CAAA,IAAA,CAAE,SAAA,OAAA,CAAA,IAAA,EAAA,OAAA,EAAA,OAAA,EAAA,MAAA,EAAA;AAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,eAAA,CAAA,EAAA;AAAA,kBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,iBAAA,CAAA;AACLV,cAAAA,OAAO,CAAPA,UAAO,CAAPA,GAAsBA,OAAO,CAA7BA,YAA6B,CAA7BA;AACAA,cAAAA,OAAO,CAAPA,MAAAA,GAAAA,eAAAA;AAFK,qBAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAGEW,aAAa,CAAbA,KAAAA,CAAAA,IAAAA,EAAAA,OAAAA,EAAAA,OAAAA,EAHF,MAGEA,CAHF,CAAA;;AAAA,iBAAA,CAAA;AAAA,iBAAA,KAAA;AAAA,qBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,OAAA,EAAA,OAAA,CAAA;AAAF,KAAA,CAAA,CAAA;;AAAA,aAAA,KAAA,CAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA,aAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,WAAA,KAAA;AALc,GAKd,EALc;AAUnBX,EAAAA,OAAO,EAAE;AACP,kBAAcW,aAAa,CAAbA,OAAAA,CAAAA,UAAAA;AADP;AAVU,CAAA,CAArB;;AAeA,eAAA,eAAA","sourcesContent":["import Tiles3DLoader from './tiles-3d-loader';\nimport {getIonTilesetMetadata} from './lib/ion/ion';\n\nasync function preload(url, options = {}) {\n  options = options['cesium-ion'] || {};\n  const {accessToken} = options;\n  let assetId = options.assetId;\n  if (!Number.isFinite(assetId)) {\n    const matched = url.match(/\\/([0-9]+)\\/tileset.json/);\n    assetId = matched && matched[1];\n  }\n  return getIonTilesetMetadata(accessToken, assetId);\n}\n\nconst CesiumIonLoader = {\n  ...Tiles3DLoader,\n  id: 'cesium-ion',\n  name: 'Cesium Ion',\n  preload,\n  parse: async (data, options, context, loader) => {\n    options['3d-tiles'] = options['cesium-ion'];\n    options.loader = CesiumIonLoader;\n    return Tiles3DLoader.parse(data, options, context, loader);\n  },\n  options: {\n    'cesium-ion': Tiles3DLoader.options['3d-tiles']\n  }\n};\n\nexport default CesiumIonLoader;\n"]},"metadata":{},"sourceType":"module"}