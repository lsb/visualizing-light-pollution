{"ast":null,"code":"import { normalizeLoader } from './loader-utils/normalize-loader';\nvar registeredLoaders = [];\nexport function registerLoaders(loaders) {\n  loaders = Array.isArray(loaders) ? loaders : [loaders];\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    var _loop = function _loop() {\n      var loader = _step.value;\n      var normalizedLoader = normalizeLoader(loader);\n\n      if (!registeredLoaders.find(function (registeredLoader) {\n        return normalizedLoader === registeredLoader;\n      })) {\n        registeredLoaders.unshift(normalizedLoader);\n      }\n    };\n\n    for (var _iterator = loaders[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      _loop();\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n        _iterator[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n}\nexport function getRegisteredLoaders() {\n  return registeredLoaders;\n}\nexport function _unregisterLoaders() {\n  registeredLoaders = [];\n}","map":{"version":3,"sources":["../../../src/lib/register-loaders.js"],"names":["registeredLoaders","loaders","Array","loader","normalizedLoader","normalizeLoader"],"mappings":"AAAA,SAAA,eAAA,QAAA,iCAAA;AAEA,IAAIA,iBAAiB,GAArB,EAAA;AAEA,OAAO,SAAA,eAAA,CAAA,OAAA,EAAkC;AACvCC,EAAAA,OAAO,GAAGC,KAAK,CAALA,OAAAA,CAAAA,OAAAA,IAAAA,OAAAA,GAAmC,CAA7CD,OAA6C,CAA7CA;AADuC,MAAA,yBAAA,GAAA,IAAA;AAAA,MAAA,iBAAA,GAAA,KAAA;AAAA,MAAA,cAAA,GAAA,SAAA;;AAAA,MAAA;AAAA,QAAA,KAAA,GAAA,SAAA,KAAA,GAAA;AAAA,UAG5BE,MAH4B,GAAA,KAAA,CAAA,KAAA;AAIrC,UAAMC,gBAAgB,GAAGC,eAAe,CAAxC,MAAwC,CAAxC;;AACA,UAAI,CAAC,iBAAiB,CAAjB,IAAA,CAAuB,UAAA,gBAAA,EAAgB;AAAA,eAAID,gBAAgB,KAApB,gBAAA;AAA5C,OAAK,CAAL,EAAwF;AAEtFJ,QAAAA,iBAAiB,CAAjBA,OAAAA,CAAAA,gBAAAA;AACD;AARoC,KAAA;;AAGvC,SAAA,IAAA,SAAA,GAAqBC,OAArB,CAAA,MAAA,CAAA,QAAA,CAAqBA,EAArB,EAAA,KAAA,EAAA,EAAA,yBAAA,GAAA,CAAA,KAAA,GAAA,SAAA,CAAA,IAAA,EAAA,EAAA,IAAA,CAAA,EAAA,yBAAA,GAAA,IAAA,EAA8B;AAAA,MAAA,KAAA;AAM7B;AATsC,GAAA,CAAA,OAAA,GAAA,EAAA;AAAA,IAAA,iBAAA,GAAA,IAAA;AAAA,IAAA,cAAA,GAAA,GAAA;AAAA,GAAA,SAAA;AAAA,QAAA;AAAA,UAAA,CAAA,yBAAA,IAAA,SAAA,CAAA,QAAA,CAAA,IAAA,IAAA,EAAA;AAAA,QAAA,SAAA,CAAA,QAAA,CAAA;AAAA;AAAA,KAAA,SAAA;AAAA,UAAA,iBAAA,EAAA;AAAA,cAAA,cAAA;AAAA;AAAA;AAAA;AAUxC;AAED,OAAO,SAAA,oBAAA,GAAgC;AACrC,SAAA,iBAAA;AACD;AAGD,OAAO,SAAA,kBAAA,GAA8B;AACnCD,EAAAA,iBAAiB,GAAjBA,EAAAA;AACD","sourcesContent":["import {normalizeLoader} from './loader-utils/normalize-loader';\n\nlet registeredLoaders = [];\n\nexport function registerLoaders(loaders) {\n  loaders = Array.isArray(loaders) ? loaders : [loaders];\n\n  for (const loader of loaders) {\n    const normalizedLoader = normalizeLoader(loader);\n    if (!registeredLoaders.find(registeredLoader => normalizedLoader === registeredLoader)) {\n      // add to the beginning of the registeredLoaders, so the last registeredLoader get picked\n      registeredLoaders.unshift(normalizedLoader);\n    }\n  }\n}\n\nexport function getRegisteredLoaders() {\n  return registeredLoaders;\n}\n\n// For testing\nexport function _unregisterLoaders() {\n  registeredLoaders = [];\n}\n"]},"metadata":{},"sourceType":"module"}