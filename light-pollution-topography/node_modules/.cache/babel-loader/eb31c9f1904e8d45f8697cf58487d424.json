{"ast":null,"code":"import assert from './env-utils/assert';\nvar VERSION = typeof \"2.1.2\" !== 'undefined' ? \"2.1.2\" : '';\nexport function validateLoaderVersion(loader) {\n  var coreVersion = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : VERSION;\n  assert(loader, 'no loader provided');\n  var loaderVersion = loader.version;\n\n  if (!coreVersion || !loaderVersion) {\n    return;\n  }\n\n  coreVersion = parseVersion(coreVersion);\n  loaderVersion = parseVersion(loaderVersion);\n}\n\nfunction parseVersion(version) {\n  var parts = version.split('.').map(Number);\n  return {\n    major: parts[0],\n    minor: parts[1]\n  };\n}","map":{"version":3,"sources":["../../../src/lib/validate-loader-version.js"],"names":["VERSION","coreVersion","assert","loaderVersion","loader","parseVersion","parts","version","major","minor"],"mappings":"AAAA,OAAA,MAAA,MAAA,oBAAA;AAKA,IAAMA,OAAO,GAAG,OAAA,OAAA,KAAA,WAAA,GAAA,OAAA,GAAhB,EAAA;AAGA,OAAO,SAAA,qBAAA,CAAA,MAAA,EAA8D;AAAA,MAAvBC,WAAuB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAATD,OAAS;AACnEE,EAAAA,MAAM,CAAA,MAAA,EAANA,oBAAM,CAANA;AAEA,MAAIC,aAAa,GAAGC,MAAM,CAA1B,OAAA;;AACA,MAAI,CAAA,WAAA,IAAgB,CAApB,aAAA,EAAoC;AAClC;AACD;;AAEDH,EAAAA,WAAW,GAAGI,YAAY,CAA1BJ,WAA0B,CAA1BA;AACAE,EAAAA,aAAa,GAAGE,YAAY,CAA5BF,aAA4B,CAA5BA;AASD;;AAED,SAAA,YAAA,CAAA,OAAA,EAA+B;AAC7B,MAAMG,KAAK,GAAGC,OAAO,CAAPA,KAAAA,CAAAA,GAAAA,EAAAA,GAAAA,CAAd,MAAcA,CAAd;AACA,SAAO;AAACC,IAAAA,KAAK,EAAEF,KAAK,CAAb,CAAa,CAAb;AAAkBG,IAAAA,KAAK,EAAEH,KAAK,CAAA,CAAA;AAA9B,GAAP;AACD","sourcesContent":["import assert from './env-utils/assert';\n\n// __VERSION__ is injected by babel-plugin-version-inline\n/* global __VERSION__ */\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : '';\n\n// Returns `true` if the two versions are compatible\nexport function validateLoaderVersion(loader, coreVersion = VERSION) {\n  assert(loader, 'no loader provided');\n\n  let loaderVersion = loader.version;\n  if (!coreVersion || !loaderVersion) {\n    return;\n  }\n\n  coreVersion = parseVersion(coreVersion);\n  loaderVersion = parseVersion(loaderVersion);\n\n  // TODO enable when fix the __version__ injection\n  // assert(\n  //   coreVersion.major === loaderVersion.major && coreVersion.minor <= loaderVersion.minor,\n  //   `loader: ${loader.name} is not compatible. ${coreVersion.major}.${\n  //     coreVersion.minor\n  //   }+ is required.`\n  // );\n}\n\nfunction parseVersion(version) {\n  const parts = version.split('.').map(Number);\n  return {major: parts[0], minor: parts[1]};\n}\n"]},"metadata":{},"sourceType":"module"}