{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { Texture2D, TextureCube } from '@luma.gl/webgl';\nimport { loadImage } from '@loaders.gl/images';\n\nvar GLTFEnvironment = function () {\n  function GLTFEnvironment(gl, _ref) {\n    var brdfLutUrl = _ref.brdfLutUrl,\n        getTexUrl = _ref.getTexUrl,\n        _ref$specularMipLevel = _ref.specularMipLevels,\n        specularMipLevels = _ref$specularMipLevel === void 0 ? 10 : _ref$specularMipLevel;\n\n    _classCallCheck(this, GLTFEnvironment);\n\n    this.gl = gl;\n    this.brdfLutUrl = brdfLutUrl;\n    this.getTexUrl = getTexUrl;\n    this.specularMipLevels = specularMipLevels;\n  }\n\n  _createClass(GLTFEnvironment, [{\n    key: \"makeCube\",\n    value: function makeCube(_ref2) {\n      var id = _ref2.id,\n          getTextureForFace = _ref2.getTextureForFace,\n          parameters = _ref2.parameters;\n      var pixels = {};\n      TextureCube.FACES.forEach(function (face) {\n        pixels[face] = getTextureForFace(face);\n      });\n      return new TextureCube(this.gl, {\n        id: id,\n        mipmaps: false,\n        parameters: parameters,\n        pixels: pixels\n      });\n    }\n  }, {\n    key: \"getDiffuseEnvSampler\",\n    value: function getDiffuseEnvSampler() {\n      var _this = this;\n\n      if (!this._DiffuseEnvSampler) {\n        var _parameters;\n\n        this._DiffuseEnvSampler = this.makeCube({\n          id: 'DiffuseEnvSampler',\n          getTextureForFace: function getTextureForFace(dir) {\n            return loadImage(_this.getTexUrl('diffuse', dir, 0));\n          },\n          parameters: (_parameters = {}, _defineProperty(_parameters, 10242, 33071), _defineProperty(_parameters, 10243, 33071), _defineProperty(_parameters, 10241, 9729), _defineProperty(_parameters, 10240, 9729), _parameters)\n        });\n      }\n\n      return this._DiffuseEnvSampler;\n    }\n  }, {\n    key: \"getSpecularEnvSampler\",\n    value: function getSpecularEnvSampler() {\n      var _this2 = this;\n\n      if (!this._SpecularEnvSampler) {\n        var _parameters2;\n\n        this._SpecularEnvSampler = this.makeCube({\n          id: 'SpecularEnvSampler',\n          getTextureForFace: function getTextureForFace(dir) {\n            var imageArray = [];\n\n            for (var lod = 0; lod <= _this2.specularMipLevels - 1; lod++) {\n              imageArray.push(loadImage(_this2.getTexUrl('specular', dir, lod)));\n            }\n\n            return imageArray;\n          },\n          parameters: (_parameters2 = {}, _defineProperty(_parameters2, 10242, 33071), _defineProperty(_parameters2, 10243, 33071), _defineProperty(_parameters2, 10241, 9987), _defineProperty(_parameters2, 10240, 9729), _parameters2)\n        });\n      }\n\n      return this._SpecularEnvSampler;\n    }\n  }, {\n    key: \"getBrdfTexture\",\n    value: function getBrdfTexture() {\n      if (!this._BrdfTexture) {\n        var _parameters3;\n\n        this._BrdfTexture = new Texture2D(this.gl, {\n          id: 'brdfLUT',\n          parameters: (_parameters3 = {}, _defineProperty(_parameters3, 10242, 33071), _defineProperty(_parameters3, 10243, 33071), _defineProperty(_parameters3, 10241, 9729), _defineProperty(_parameters3, 10240, 9729), _parameters3),\n          data: loadImage(this.brdfLutUrl)\n        });\n      }\n\n      return this._BrdfTexture;\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      if (this._DiffuseEnvSampler) {\n        this._DiffuseEnvSampler[\"delete\"]();\n\n        this._DiffuseEnvSampler = null;\n      }\n\n      if (this._SpecularEnvSampler) {\n        this._SpecularEnvSampler[\"delete\"]();\n\n        this._SpecularEnvSampler = null;\n      }\n\n      if (this._BrdfTexture) {\n        this._BrdfTexture[\"delete\"]();\n\n        this._BrdfTexture = null;\n      }\n    }\n  }]);\n\n  return GLTFEnvironment;\n}();\n\nexport { GLTFEnvironment as default };","map":{"version":3,"sources":["../../../src/gltf/gltf-environment.js"],"names":["GLTFEnvironment","brdfLutUrl","getTexUrl","specularMipLevels","id","getTextureForFace","parameters","pixels","TextureCube","mipmaps","loadImage","imageArray","lod","data"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {Texture2D, TextureCube} from '@luma.gl/webgl';\nimport {loadImage} from '@loaders.gl/images';\n\nexport default class GLTFEnvironment {\n  constructor(gl, {brdfLutUrl, getTexUrl, specularMipLevels = 10}) {\n    this.gl = gl;\n    this.brdfLutUrl = brdfLutUrl;\n    this.getTexUrl = getTexUrl;\n    this.specularMipLevels = specularMipLevels;\n  }\n\n  makeCube({id, getTextureForFace, parameters}) {\n    const pixels = {};\n    TextureCube.FACES.forEach(face => {\n      pixels[face] = getTextureForFace(face);\n    });\n    return new TextureCube(this.gl, {\n      id,\n      mipmaps: false,\n      parameters,\n      pixels\n    });\n  }\n\n  getDiffuseEnvSampler() {\n    if (!this._DiffuseEnvSampler) {\n      this._DiffuseEnvSampler = this.makeCube({\n        id: 'DiffuseEnvSampler',\n        getTextureForFace: dir => loadImage(this.getTexUrl('diffuse', dir, 0)),\n        parameters: {\n          [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n          [GL.TEXTURE_MAG_FILTER]: GL.LINEAR\n        }\n      });\n    }\n\n    return this._DiffuseEnvSampler;\n  }\n\n  getSpecularEnvSampler() {\n    if (!this._SpecularEnvSampler) {\n      this._SpecularEnvSampler = this.makeCube({\n        id: 'SpecularEnvSampler',\n        getTextureForFace: dir => {\n          const imageArray = [];\n          for (let lod = 0; lod <= this.specularMipLevels - 1; lod++) {\n            imageArray.push(loadImage(this.getTexUrl('specular', dir, lod)));\n          }\n          return imageArray;\n        },\n        parameters: {\n          [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_MIN_FILTER]: GL.LINEAR_MIPMAP_LINEAR,\n          [GL.TEXTURE_MAG_FILTER]: GL.LINEAR\n        }\n      });\n    }\n\n    return this._SpecularEnvSampler;\n  }\n\n  getBrdfTexture() {\n    if (!this._BrdfTexture) {\n      this._BrdfTexture = new Texture2D(this.gl, {\n        id: 'brdfLUT',\n        parameters: {\n          [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n          [GL.TEXTURE_MAG_FILTER]: GL.LINEAR\n        },\n        // Texture2D accepts a promise that returns an image as data (Async Textures)\n        data: loadImage(this.brdfLutUrl)\n      });\n    }\n\n    return this._BrdfTexture;\n  }\n\n  delete() {\n    if (this._DiffuseEnvSampler) {\n      this._DiffuseEnvSampler.delete();\n      this._DiffuseEnvSampler = null;\n    }\n\n    if (this._SpecularEnvSampler) {\n      this._SpecularEnvSampler.delete();\n      this._SpecularEnvSampler = null;\n    }\n\n    if (this._BrdfTexture) {\n      this._BrdfTexture.delete();\n      this._BrdfTexture = null;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}