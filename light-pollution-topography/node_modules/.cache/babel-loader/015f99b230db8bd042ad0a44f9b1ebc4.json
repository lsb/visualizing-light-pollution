{"ast":null,"code":"import _toConsumableArray from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _construct from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/construct\";\nimport _createSuper from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _inherits from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _classCallCheck from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { DictionaryVector } from '../vector/dictionary';\n/** @ignore */\n\nexport var Value = /*#__PURE__*/function () {\n  function Value() {\n    _classCallCheck(this, Value);\n  }\n\n  _createClass(Value, [{\n    key: \"eq\",\n    value: function eq(other) {\n      if (!(other instanceof Value)) {\n        other = new Literal(other);\n      }\n\n      return new Equals(this, other);\n    }\n  }, {\n    key: \"le\",\n    value: function le(other) {\n      if (!(other instanceof Value)) {\n        other = new Literal(other);\n      }\n\n      return new LTeq(this, other);\n    }\n  }, {\n    key: \"ge\",\n    value: function ge(other) {\n      if (!(other instanceof Value)) {\n        other = new Literal(other);\n      }\n\n      return new GTeq(this, other);\n    }\n  }, {\n    key: \"lt\",\n    value: function lt(other) {\n      return new Not(this.ge(other));\n    }\n  }, {\n    key: \"gt\",\n    value: function gt(other) {\n      return new Not(this.le(other));\n    }\n  }, {\n    key: \"ne\",\n    value: function ne(other) {\n      return new Not(this.eq(other));\n    }\n  }]);\n\n  return Value;\n}();\n/** @ignore */\n\nexport var Literal = /*#__PURE__*/function (_Value) {\n  _inherits(Literal, _Value);\n\n  var _super = _createSuper(Literal);\n\n  function Literal(v) {\n    var _this;\n\n    _classCallCheck(this, Literal);\n\n    _this = _super.call(this);\n    _this.v = v;\n    return _this;\n  }\n\n  return Literal;\n}(Value);\n/** @ignore */\n\nexport var Col = /*#__PURE__*/function (_Value2) {\n  _inherits(Col, _Value2);\n\n  var _super2 = _createSuper(Col);\n\n  function Col(name) {\n    var _this2;\n\n    _classCallCheck(this, Col);\n\n    _this2 = _super2.call(this);\n    _this2.name = name;\n    return _this2;\n  }\n\n  _createClass(Col, [{\n    key: \"bind\",\n    value: function bind(batch) {\n      if (!this.colidx) {\n        // Assume column index doesn't change between calls to bind\n        //this.colidx = cols.findIndex(v => v.name.indexOf(this.name) != -1);\n        this.colidx = -1;\n        var fields = batch.schema.fields;\n\n        for (var idx = -1; ++idx < fields.length;) {\n          if (fields[idx].name === this.name) {\n            this.colidx = idx;\n            break;\n          }\n        }\n\n        if (this.colidx < 0) {\n          throw new Error(\"Failed to bind Col \\\"\".concat(this.name, \"\\\"\"));\n        }\n      }\n\n      var vec = this.vector = batch.getChildAt(this.colidx);\n      return function (idx) {\n        return vec.get(idx);\n      };\n    }\n  }]);\n\n  return Col;\n}(Value);\n/** @ignore */\n\nexport var Predicate = /*#__PURE__*/function () {\n  function Predicate() {\n    _classCallCheck(this, Predicate);\n  }\n\n  _createClass(Predicate, [{\n    key: \"and\",\n    value: function and() {\n      for (var _len = arguments.length, expr = new Array(_len), _key = 0; _key < _len; _key++) {\n        expr[_key] = arguments[_key];\n      }\n\n      return _construct(And, [this].concat(expr));\n    }\n  }, {\n    key: \"or\",\n    value: function or() {\n      for (var _len2 = arguments.length, expr = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        expr[_key2] = arguments[_key2];\n      }\n\n      return _construct(Or, [this].concat(expr));\n    }\n  }, {\n    key: \"not\",\n    value: function not() {\n      return new Not(this);\n    }\n  }]);\n\n  return Predicate;\n}();\n/** @ignore */\n\nexport var ComparisonPredicate = /*#__PURE__*/function (_Predicate) {\n  _inherits(ComparisonPredicate, _Predicate);\n\n  var _super3 = _createSuper(ComparisonPredicate);\n\n  function ComparisonPredicate(left, right) {\n    var _this3;\n\n    _classCallCheck(this, ComparisonPredicate);\n\n    _this3 = _super3.call(this);\n    _this3.left = left;\n    _this3.right = right;\n    return _this3;\n  }\n\n  _createClass(ComparisonPredicate, [{\n    key: \"bind\",\n    value: function bind(batch) {\n      if (this.left instanceof Literal) {\n        if (this.right instanceof Literal) {\n          return this._bindLitLit(batch, this.left, this.right);\n        } else {\n          // right is a Col\n          return this._bindLitCol(batch, this.left, this.right);\n        }\n      } else {\n        // left is a Col\n        if (this.right instanceof Literal) {\n          return this._bindColLit(batch, this.left, this.right);\n        } else {\n          // right is a Col\n          return this._bindColCol(batch, this.left, this.right);\n        }\n      }\n    }\n  }]);\n\n  return ComparisonPredicate;\n}(Predicate);\n/** @ignore */\n\nexport var CombinationPredicate = /*#__PURE__*/function (_Predicate2) {\n  _inherits(CombinationPredicate, _Predicate2);\n\n  var _super4 = _createSuper(CombinationPredicate);\n\n  function CombinationPredicate() {\n    var _this4;\n\n    _classCallCheck(this, CombinationPredicate);\n\n    _this4 = _super4.call(this);\n\n    for (var _len3 = arguments.length, children = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      children[_key3] = arguments[_key3];\n    }\n\n    _this4.children = children;\n    return _this4;\n  }\n\n  return CombinationPredicate;\n}(Predicate); // add children to prototype so it doesn't get mangled in es2015/umd\n\nCombinationPredicate.prototype.children = Object.freeze([]); // freeze for safety\n\n/** @ignore */\n\nexport var And = /*#__PURE__*/function (_CombinationPredicate) {\n  _inherits(And, _CombinationPredicate);\n\n  var _super5 = _createSuper(And);\n\n  function And() {\n    for (var _len4 = arguments.length, children = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      children[_key4] = arguments[_key4];\n    }\n\n    _classCallCheck(this, And);\n\n    // Flatten any Ands\n    children = children.reduce(function (accum, p) {\n      return accum.concat(p instanceof And ? p.children : p);\n    }, []);\n    return _super5.call.apply(_super5, [this].concat(_toConsumableArray(children)));\n  }\n\n  _createClass(And, [{\n    key: \"bind\",\n    value: function bind(batch) {\n      var bound = this.children.map(function (p) {\n        return p.bind(batch);\n      });\n      return function (idx, batch) {\n        return bound.every(function (p) {\n          return p(idx, batch);\n        });\n      };\n    }\n  }]);\n\n  return And;\n}(CombinationPredicate);\n/** @ignore */\n\nexport var Or = /*#__PURE__*/function (_CombinationPredicate2) {\n  _inherits(Or, _CombinationPredicate2);\n\n  var _super6 = _createSuper(Or);\n\n  function Or() {\n    for (var _len5 = arguments.length, children = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      children[_key5] = arguments[_key5];\n    }\n\n    _classCallCheck(this, Or);\n\n    // Flatten any Ors\n    children = children.reduce(function (accum, p) {\n      return accum.concat(p instanceof Or ? p.children : p);\n    }, []);\n    return _super6.call.apply(_super6, [this].concat(_toConsumableArray(children)));\n  }\n\n  _createClass(Or, [{\n    key: \"bind\",\n    value: function bind(batch) {\n      var bound = this.children.map(function (p) {\n        return p.bind(batch);\n      });\n      return function (idx, batch) {\n        return bound.some(function (p) {\n          return p(idx, batch);\n        });\n      };\n    }\n  }]);\n\n  return Or;\n}(CombinationPredicate);\n/** @ignore */\n\nexport var Equals = /*#__PURE__*/function (_ComparisonPredicate) {\n  _inherits(Equals, _ComparisonPredicate);\n\n  var _super7 = _createSuper(Equals);\n\n  function Equals() {\n    _classCallCheck(this, Equals);\n\n    return _super7.apply(this, arguments);\n  }\n\n  _createClass(Equals, [{\n    key: \"_bindLitLit\",\n    value: function _bindLitLit(_batch, left, right) {\n      var rtrn = left.v == right.v;\n      return function () {\n        return rtrn;\n      };\n    }\n  }, {\n    key: \"_bindColCol\",\n    value: function _bindColCol(batch, left, right) {\n      var left_func = left.bind(batch);\n      var right_func = right.bind(batch);\n      return function (idx, batch) {\n        return left_func(idx, batch) == right_func(idx, batch);\n      };\n    }\n  }, {\n    key: \"_bindColLit\",\n    value: function _bindColLit(batch, col, lit) {\n      var col_func = col.bind(batch);\n\n      if (col.vector instanceof DictionaryVector) {\n        var key;\n        var vector = col.vector;\n\n        if (vector.dictionary !== this.lastDictionary) {\n          key = vector.reverseLookup(lit.v);\n          this.lastDictionary = vector.dictionary;\n          this.lastKey = key;\n        } else {\n          key = this.lastKey;\n        }\n\n        if (key === -1) {\n          // the value doesn't exist in the dictionary - always return\n          // false\n          // TODO: special-case of PredicateFunc that encapsulates this\n          // \"always false\" behavior. That way filtering operations don't\n          // have to bother checking\n          return function () {\n            return false;\n          };\n        } else {\n          return function (idx) {\n            return vector.getKey(idx) === key;\n          };\n        }\n      } else {\n        return function (idx, cols) {\n          return col_func(idx, cols) == lit.v;\n        };\n      }\n    }\n  }, {\n    key: \"_bindLitCol\",\n    value: function _bindLitCol(batch, lit, col) {\n      // Equals is commutative\n      return this._bindColLit(batch, col, lit);\n    }\n  }]);\n\n  return Equals;\n}(ComparisonPredicate);\n/** @ignore */\n\nexport var LTeq = /*#__PURE__*/function (_ComparisonPredicate2) {\n  _inherits(LTeq, _ComparisonPredicate2);\n\n  var _super8 = _createSuper(LTeq);\n\n  function LTeq() {\n    _classCallCheck(this, LTeq);\n\n    return _super8.apply(this, arguments);\n  }\n\n  _createClass(LTeq, [{\n    key: \"_bindLitLit\",\n    value: function _bindLitLit(_batch, left, right) {\n      var rtrn = left.v <= right.v;\n      return function () {\n        return rtrn;\n      };\n    }\n  }, {\n    key: \"_bindColCol\",\n    value: function _bindColCol(batch, left, right) {\n      var left_func = left.bind(batch);\n      var right_func = right.bind(batch);\n      return function (idx, cols) {\n        return left_func(idx, cols) <= right_func(idx, cols);\n      };\n    }\n  }, {\n    key: \"_bindColLit\",\n    value: function _bindColLit(batch, col, lit) {\n      var col_func = col.bind(batch);\n      return function (idx, cols) {\n        return col_func(idx, cols) <= lit.v;\n      };\n    }\n  }, {\n    key: \"_bindLitCol\",\n    value: function _bindLitCol(batch, lit, col) {\n      var col_func = col.bind(batch);\n      return function (idx, cols) {\n        return lit.v <= col_func(idx, cols);\n      };\n    }\n  }]);\n\n  return LTeq;\n}(ComparisonPredicate);\n/** @ignore */\n\nexport var GTeq = /*#__PURE__*/function (_ComparisonPredicate3) {\n  _inherits(GTeq, _ComparisonPredicate3);\n\n  var _super9 = _createSuper(GTeq);\n\n  function GTeq() {\n    _classCallCheck(this, GTeq);\n\n    return _super9.apply(this, arguments);\n  }\n\n  _createClass(GTeq, [{\n    key: \"_bindLitLit\",\n    value: function _bindLitLit(_batch, left, right) {\n      var rtrn = left.v >= right.v;\n      return function () {\n        return rtrn;\n      };\n    }\n  }, {\n    key: \"_bindColCol\",\n    value: function _bindColCol(batch, left, right) {\n      var left_func = left.bind(batch);\n      var right_func = right.bind(batch);\n      return function (idx, cols) {\n        return left_func(idx, cols) >= right_func(idx, cols);\n      };\n    }\n  }, {\n    key: \"_bindColLit\",\n    value: function _bindColLit(batch, col, lit) {\n      var col_func = col.bind(batch);\n      return function (idx, cols) {\n        return col_func(idx, cols) >= lit.v;\n      };\n    }\n  }, {\n    key: \"_bindLitCol\",\n    value: function _bindLitCol(batch, lit, col) {\n      var col_func = col.bind(batch);\n      return function (idx, cols) {\n        return lit.v >= col_func(idx, cols);\n      };\n    }\n  }]);\n\n  return GTeq;\n}(ComparisonPredicate);\n/** @ignore */\n\nexport var Not = /*#__PURE__*/function (_Predicate3) {\n  _inherits(Not, _Predicate3);\n\n  var _super10 = _createSuper(Not);\n\n  function Not(child) {\n    var _this5;\n\n    _classCallCheck(this, Not);\n\n    _this5 = _super10.call(this);\n    _this5.child = child;\n    return _this5;\n  }\n\n  _createClass(Not, [{\n    key: \"bind\",\n    value: function bind(batch) {\n      var func = this.child.bind(batch);\n      return function (idx, batch) {\n        return !func(idx, batch);\n      };\n    }\n  }]);\n\n  return Not;\n}(Predicate);\n/** @ignore */\n\nexport var CustomPredicate = /*#__PURE__*/function (_Predicate4) {\n  _inherits(CustomPredicate, _Predicate4);\n\n  var _super11 = _createSuper(CustomPredicate);\n\n  function CustomPredicate(next, bind_) {\n    var _this6;\n\n    _classCallCheck(this, CustomPredicate);\n\n    _this6 = _super11.call(this);\n    _this6.next = next;\n    _this6.bind_ = bind_;\n    return _this6;\n  }\n\n  _createClass(CustomPredicate, [{\n    key: \"bind\",\n    value: function bind(batch) {\n      this.bind_(batch);\n      return this.next;\n    }\n  }]);\n\n  return CustomPredicate;\n}(Predicate);\nexport function lit(v) {\n  return new Literal(v);\n}\nexport function col(n) {\n  return new Col(n);\n}\nexport function and() {\n  for (var _len6 = arguments.length, p = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n    p[_key6] = arguments[_key6];\n  }\n\n  return _construct(And, p);\n}\nexport function or() {\n  for (var _len7 = arguments.length, p = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n    p[_key7] = arguments[_key7];\n  }\n\n  return _construct(Or, p);\n}\nexport function custom(next, bind) {\n  return new CustomPredicate(next, bind);\n}","map":{"version":3,"sources":["compute/predicate.ts"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA,SAAS,gBAAT,QAAiC,sBAAjC;AAOA;;AACA,WAAsB,KAAtB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,uBACO,KADP,EAC0B;AAClB,UAAI,EAAE,KAAK,YAAY,KAAnB,CAAJ,EAA+B;AAAE,QAAA,KAAK,GAAG,IAAI,OAAJ,CAAY,KAAZ,CAAR;AAA6B;;AAC9D,aAAO,IAAI,MAAJ,CAAW,IAAX,EAAiB,KAAjB,CAAP;AACH;AAJL;AAAA;AAAA,uBAKO,KALP,EAK0B;AAClB,UAAI,EAAE,KAAK,YAAY,KAAnB,CAAJ,EAA+B;AAAE,QAAA,KAAK,GAAG,IAAI,OAAJ,CAAY,KAAZ,CAAR;AAA6B;;AAC9D,aAAO,IAAI,IAAJ,CAAS,IAAT,EAAe,KAAf,CAAP;AACH;AARL;AAAA;AAAA,uBASO,KATP,EAS0B;AAClB,UAAI,EAAE,KAAK,YAAY,KAAnB,CAAJ,EAA+B;AAAE,QAAA,KAAK,GAAG,IAAI,OAAJ,CAAY,KAAZ,CAAR;AAA6B;;AAC9D,aAAO,IAAI,IAAJ,CAAS,IAAT,EAAe,KAAf,CAAP;AACH;AAZL;AAAA;AAAA,uBAaO,KAbP,EAa0B;AAClB,aAAO,IAAI,GAAJ,CAAQ,KAAK,EAAL,CAAQ,KAAR,CAAR,CAAP;AACH;AAfL;AAAA;AAAA,uBAgBO,KAhBP,EAgB0B;AAClB,aAAO,IAAI,GAAJ,CAAQ,KAAK,EAAL,CAAQ,KAAR,CAAR,CAAP;AACH;AAlBL;AAAA;AAAA,uBAmBO,KAnBP,EAmB0B;AAClB,aAAO,IAAI,GAAJ,CAAQ,KAAK,EAAL,CAAQ,KAAR,CAAR,CAAP;AACH;AArBL;;AAAA;AAAA;AAwBA;;AACA,WAAa,OAAb;AAAA;;AAAA;;AACI,mBAAmB,CAAnB,EAAuB;AAAA;;AAAA;;AAAI;AAAR,UAAA,CAAA,GAAA,CAAA;AAAI;AAAc;;AADzC;AAAA,EAAqC,KAArC;AAIA;;AACA,WAAa,GAAb;AAAA;;AAAA;;AAMI,eAAmB,IAAnB,EAA+B;AAAA;;AAAA;;AAAI;AAAhB,WAAA,IAAA,GAAA,IAAA;AAAY;AAAc;;AANjD;AAAA;AAAA,yBAOS,KAPT,EAO2B;AACnB,UAAI,CAAC,KAAK,MAAV,EAAkB;AACd;AACA;AACA,aAAK,MAAL,GAAc,CAAC,CAAf;AACA,YAAM,MAAM,GAAG,KAAK,CAAC,MAAN,CAAa,MAA5B;;AACA,aAAK,IAAI,GAAG,GAAG,CAAC,CAAhB,EAAmB,EAAE,GAAF,GAAQ,MAAM,CAAC,MAAlC,GAA2C;AACvC,cAAI,MAAM,CAAC,GAAD,CAAN,CAAY,IAAZ,KAAqB,KAAK,IAA9B,EAAoC;AAChC,iBAAK,MAAL,GAAc,GAAd;AACA;AACH;AACJ;;AACD,YAAI,KAAK,MAAL,GAAc,CAAlB,EAAqB;AAAE,gBAAM,IAAI,KAAJ,gCAAiC,KAAK,IAAtC,QAAN;AAAuD;AACjF;;AAED,UAAM,GAAG,GAAG,KAAK,MAAL,GAAc,KAAK,CAAC,UAAN,CAAiB,KAAK,MAAtB,CAA1B;AACA,aAAO,UAAC,GAAD;AAAA,eAAiB,GAAG,CAAC,GAAJ,CAAQ,GAAR,CAAjB;AAAA,OAAP;AACH;AAxBL;;AAAA;AAAA,EAAiC,KAAjC;AA2BA;;AACA,WAAsB,SAAtB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,0BAE4B;AAAA,wCAAjB,IAAiB;AAAjB,QAAA,IAAiB;AAAA;;AAAS,wBAAW,GAAX,GAAe,IAAf,SAAwB,IAAxB;AAAgC;AAFrE;AAAA;AAAA,yBAG2B;AAAA,yCAAjB,IAAiB;AAAjB,QAAA,IAAiB;AAAA;;AAAQ,wBAAW,EAAX,GAAc,IAAd,SAAuB,IAAvB;AAA+B;AAHlE;AAAA;AAAA,0BAIO;AAAgB,aAAO,IAAI,GAAJ,CAAQ,IAAR,CAAP;AAAuB;AAJ9C;;AAAA;AAAA;AAOA;;AACA,WAAsB,mBAAtB;AAAA;;AAAA;;AACI,+BAA4B,IAA5B,EAA4D,KAA5D,EAA2E;AAAA;;AAAA;;AACvE;AADwB,WAAA,IAAA,GAAA,IAAA;AAAgC,WAAA,KAAA,GAAA,KAAA;AAAe;AAE1E;;AAHL;AAAA;AAAA,yBAKS,KALT,EAK2B;AACnB,UAAI,KAAK,IAAL,YAAqB,OAAzB,EAAkC;AAC9B,YAAI,KAAK,KAAL,YAAsB,OAA1B,EAAmC;AAC/B,iBAAO,KAAK,WAAL,CAAiB,KAAjB,EAAwB,KAAK,IAA7B,EAAmC,KAAK,KAAxC,CAAP;AACH,SAFD,MAEO;AAAE;AAEL,iBAAO,KAAK,WAAL,CAAiB,KAAjB,EAAwB,KAAK,IAA7B,EAAmC,KAAK,KAAxC,CAAP;AACH;AACJ,OAPD,MAOO;AAAE;AACL,YAAI,KAAK,KAAL,YAAsB,OAA1B,EAAmC;AAC/B,iBAAO,KAAK,WAAL,CAAiB,KAAjB,EAAwB,KAAK,IAA7B,EAA0C,KAAK,KAA/C,CAAP;AACH,SAFD,MAEO;AAAE;AACL,iBAAO,KAAK,WAAL,CAAiB,KAAjB,EAAwB,KAAK,IAA7B,EAA0C,KAAK,KAA/C,CAAP;AACH;AACJ;AACJ;AApBL;;AAAA;AAAA,EAA0D,SAA1D;AA4BA;;AACA,WAAsB,oBAAtB;AAAA;;AAAA;;AAEI,kCAAoC;AAAA;;AAAA;;AAChC;;AADgC,uCAArB,QAAqB;AAArB,MAAA,QAAqB;AAAA;;AAEhC,WAAK,QAAL,GAAgB,QAAhB;AAFgC;AAGnC;;AALL;AAAA,EAAmD,SAAnD,E,CAOA;;AACO,oBAAoB,CAAC,SAArB,CAAgC,QAAhC,GAA2C,MAAM,CAAC,MAAP,CAAc,EAAd,CAA3C,C,CAA8D;;AAErE;;AACA,WAAa,GAAb;AAAA;;AAAA;;AACI,iBAAoC;AAAA,uCAArB,QAAqB;AAArB,MAAA,QAAqB;AAAA;;AAAA;;AAChC;AACA,IAAA,QAAQ,GAAG,QAAQ,CAAC,MAAT,CAAgB,UAAC,KAAD,EAAqB,CAArB,EAAkD;AACzE,aAAO,KAAK,CAAC,MAAN,CAAa,CAAC,YAAY,GAAb,GAAmB,CAAC,CAAC,QAArB,GAAgC,CAA7C,CAAP;AACH,KAFU,EAER,EAFQ,CAAX;AAFgC,wEAKvB,QALuB;AAMnC;;AAPL;AAAA;AAAA,yBAQS,KART,EAQ2B;AACnB,UAAM,KAAK,GAAG,KAAK,QAAL,CAAc,GAAd,CAAkB,UAAC,CAAD;AAAA,eAAO,CAAC,CAAC,IAAF,CAAO,KAAP,CAAP;AAAA,OAAlB,CAAd;AACA,aAAO,UAAC,GAAD,EAAc,KAAd;AAAA,eAAqC,KAAK,CAAC,KAAN,CAAY,UAAC,CAAD;AAAA,iBAAO,CAAC,CAAC,GAAD,EAAM,KAAN,CAAR;AAAA,SAAZ,CAArC;AAAA,OAAP;AACH;AAXL;;AAAA;AAAA,EAAyB,oBAAzB;AAcA;;AACA,WAAa,EAAb;AAAA;;AAAA;;AACI,gBAAoC;AAAA,uCAArB,QAAqB;AAArB,MAAA,QAAqB;AAAA;;AAAA;;AAChC;AACA,IAAA,QAAQ,GAAG,QAAQ,CAAC,MAAT,CAAgB,UAAC,KAAD,EAAqB,CAArB,EAAkD;AACzE,aAAO,KAAK,CAAC,MAAN,CAAa,CAAC,YAAY,EAAb,GAAkB,CAAC,CAAC,QAApB,GAA+B,CAA5C,CAAP;AACH,KAFU,EAER,EAFQ,CAAX;AAFgC,wEAKvB,QALuB;AAMnC;;AAPL;AAAA;AAAA,yBAQS,KART,EAQ2B;AACnB,UAAM,KAAK,GAAG,KAAK,QAAL,CAAc,GAAd,CAAkB,UAAC,CAAD;AAAA,eAAO,CAAC,CAAC,IAAF,CAAO,KAAP,CAAP;AAAA,OAAlB,CAAd;AACA,aAAO,UAAC,GAAD,EAAc,KAAd;AAAA,eAAqC,KAAK,CAAC,IAAN,CAAW,UAAC,CAAD;AAAA,iBAAO,CAAC,CAAC,GAAD,EAAM,KAAN,CAAR;AAAA,SAAX,CAArC;AAAA,OAAP;AACH;AAXL;;AAAA;AAAA,EAAwB,oBAAxB;AAcA;;AACA,WAAa,MAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,gCAK0B,MAL1B,EAK+C,IAL/C,EAK8D,KAL9D,EAK4E;AACpE,UAAM,IAAI,GAAY,IAAI,CAAC,CAAL,IAAU,KAAK,CAAC,CAAtC;AACA,aAAO;AAAA,eAAM,IAAN;AAAA,OAAP;AACH;AARL;AAAA;AAAA,gCAU0B,KAV1B,EAU8C,IAV9C,EAUyD,KAVzD,EAUmE;AAC3D,UAAM,SAAS,GAAG,IAAI,CAAC,IAAL,CAAU,KAAV,CAAlB;AACA,UAAM,UAAU,GAAG,KAAK,CAAC,IAAN,CAAW,KAAX,CAAnB;AACA,aAAO,UAAC,GAAD,EAAc,KAAd;AAAA,eAAqC,SAAS,CAAC,GAAD,EAAM,KAAN,CAAT,IAAyB,UAAU,CAAC,GAAD,EAAM,KAAN,CAAxE;AAAA,OAAP;AACH;AAdL;AAAA;AAAA,gCAgB0B,KAhB1B,EAgB8C,GAhB9C,EAgBwD,GAhBxD,EAgBoE;AAC5D,UAAM,QAAQ,GAAG,GAAG,CAAC,IAAJ,CAAS,KAAT,CAAjB;;AACA,UAAI,GAAG,CAAC,MAAJ,YAAsB,gBAA1B,EAA4C;AACxC,YAAI,GAAJ;AACA,YAAM,MAAM,GAAG,GAAG,CAAC,MAAnB;;AACA,YAAI,MAAM,CAAC,UAAP,KAAsB,KAAK,cAA/B,EAA+C;AAC3C,UAAA,GAAG,GAAG,MAAM,CAAC,aAAP,CAAqB,GAAG,CAAC,CAAzB,CAAN;AACA,eAAK,cAAL,GAAsB,MAAM,CAAC,UAA7B;AACA,eAAK,OAAL,GAAe,GAAf;AACH,SAJD,MAIO;AACH,UAAA,GAAG,GAAG,KAAK,OAAX;AACH;;AAED,YAAI,GAAG,KAAK,CAAC,CAAb,EAAgB;AACZ;AACA;AACA;AACA;AACA;AACA,iBAAO;AAAA,mBAAM,KAAN;AAAA,WAAP;AACH,SAPD,MAOO;AACH,iBAAO,UAAC,GAAD,EAAgB;AACnB,mBAAO,MAAM,CAAC,MAAP,CAAc,GAAd,MAAuB,GAA9B;AACH,WAFD;AAGH;AACJ,OAvBD,MAuBO;AACH,eAAO,UAAC,GAAD,EAAc,IAAd;AAAA,iBAAoC,QAAQ,CAAC,GAAD,EAAM,IAAN,CAAR,IAAuB,GAAG,CAAC,CAA/D;AAAA,SAAP;AACH;AACJ;AA5CL;AAAA;AAAA,gCA8C0B,KA9C1B,EA8C8C,GA9C9C,EA8C4D,GA9C5D,EA8CoE;AAC5D;AACA,aAAO,KAAK,WAAL,CAAiB,KAAjB,EAAwB,GAAxB,EAA6B,GAA7B,CAAP;AACH;AAjDL;;AAAA;AAAA,EAA4B,mBAA5B;AAoDA;;AACA,WAAa,IAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,gCAC0B,MAD1B,EAC+C,IAD/C,EAC8D,KAD9D,EAC4E;AACpE,UAAM,IAAI,GAAY,IAAI,CAAC,CAAL,IAAU,KAAK,CAAC,CAAtC;AACA,aAAO;AAAA,eAAM,IAAN;AAAA,OAAP;AACH;AAJL;AAAA;AAAA,gCAM0B,KAN1B,EAM8C,IAN9C,EAMyD,KANzD,EAMmE;AAC3D,UAAM,SAAS,GAAG,IAAI,CAAC,IAAL,CAAU,KAAV,CAAlB;AACA,UAAM,UAAU,GAAG,KAAK,CAAC,IAAN,CAAW,KAAX,CAAnB;AACA,aAAO,UAAC,GAAD,EAAc,IAAd;AAAA,eAAoC,SAAS,CAAC,GAAD,EAAM,IAAN,CAAT,IAAwB,UAAU,CAAC,GAAD,EAAM,IAAN,CAAtE;AAAA,OAAP;AACH;AAVL;AAAA;AAAA,gCAY0B,KAZ1B,EAY8C,GAZ9C,EAYwD,GAZxD,EAYoE;AAC5D,UAAM,QAAQ,GAAG,GAAG,CAAC,IAAJ,CAAS,KAAT,CAAjB;AACA,aAAO,UAAC,GAAD,EAAc,IAAd;AAAA,eAAoC,QAAQ,CAAC,GAAD,EAAM,IAAN,CAAR,IAAuB,GAAG,CAAC,CAA/D;AAAA,OAAP;AACH;AAfL;AAAA;AAAA,gCAiB0B,KAjB1B,EAiB8C,GAjB9C,EAiB4D,GAjB5D,EAiBoE;AAC5D,UAAM,QAAQ,GAAG,GAAG,CAAC,IAAJ,CAAS,KAAT,CAAjB;AACA,aAAO,UAAC,GAAD,EAAc,IAAd;AAAA,eAAoC,GAAG,CAAC,CAAJ,IAAS,QAAQ,CAAC,GAAD,EAAM,IAAN,CAArD;AAAA,OAAP;AACH;AApBL;;AAAA;AAAA,EAA0B,mBAA1B;AAuBA;;AACA,WAAa,IAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,gCAC0B,MAD1B,EAC+C,IAD/C,EAC8D,KAD9D,EAC4E;AACpE,UAAM,IAAI,GAAY,IAAI,CAAC,CAAL,IAAU,KAAK,CAAC,CAAtC;AACA,aAAO;AAAA,eAAM,IAAN;AAAA,OAAP;AACH;AAJL;AAAA;AAAA,gCAM0B,KAN1B,EAM8C,IAN9C,EAMyD,KANzD,EAMmE;AAC3D,UAAM,SAAS,GAAG,IAAI,CAAC,IAAL,CAAU,KAAV,CAAlB;AACA,UAAM,UAAU,GAAG,KAAK,CAAC,IAAN,CAAW,KAAX,CAAnB;AACA,aAAO,UAAC,GAAD,EAAc,IAAd;AAAA,eAAoC,SAAS,CAAC,GAAD,EAAM,IAAN,CAAT,IAAwB,UAAU,CAAC,GAAD,EAAM,IAAN,CAAtE;AAAA,OAAP;AACH;AAVL;AAAA;AAAA,gCAY0B,KAZ1B,EAY8C,GAZ9C,EAYwD,GAZxD,EAYoE;AAC5D,UAAM,QAAQ,GAAG,GAAG,CAAC,IAAJ,CAAS,KAAT,CAAjB;AACA,aAAO,UAAC,GAAD,EAAc,IAAd;AAAA,eAAoC,QAAQ,CAAC,GAAD,EAAM,IAAN,CAAR,IAAuB,GAAG,CAAC,CAA/D;AAAA,OAAP;AACH;AAfL;AAAA;AAAA,gCAiB0B,KAjB1B,EAiB8C,GAjB9C,EAiB4D,GAjB5D,EAiBoE;AAC5D,UAAM,QAAQ,GAAG,GAAG,CAAC,IAAJ,CAAS,KAAT,CAAjB;AACA,aAAO,UAAC,GAAD,EAAc,IAAd;AAAA,eAAoC,GAAG,CAAC,CAAJ,IAAS,QAAQ,CAAC,GAAD,EAAM,IAAN,CAArD;AAAA,OAAP;AACH;AApBL;;AAAA;AAAA,EAA0B,mBAA1B;AAuBA;;AACA,WAAa,GAAb;AAAA;;AAAA;;AACI,eAA4B,KAA5B,EAA4C;AAAA;;AAAA;;AACxC;AADwB,WAAA,KAAA,GAAA,KAAA;AAAgB;AAE3C;;AAHL;AAAA;AAAA,yBAKS,KALT,EAK2B;AACnB,UAAM,IAAI,GAAG,KAAK,KAAL,CAAW,IAAX,CAAgB,KAAhB,CAAb;AACA,aAAO,UAAC,GAAD,EAAc,KAAd;AAAA,eAAqC,CAAC,IAAI,CAAC,GAAD,EAAM,KAAN,CAA1C;AAAA,OAAP;AACH;AARL;;AAAA;AAAA,EAAyB,SAAzB;AAWA;;AACA,WAAa,eAAb;AAAA;;AAAA;;AACI,2BAAoB,IAApB,EAAiD,KAAjD,EAAoF;AAAA;;AAAA;;AAChF;AADgB,WAAA,IAAA,GAAA,IAAA;AAA6B,WAAA,KAAA,GAAA,KAAA;AAAmC;AAEnF;;AAHL;AAAA;AAAA,yBAKS,KALT,EAK2B;AACnB,WAAK,KAAL,CAAW,KAAX;AACA,aAAO,KAAK,IAAZ;AACH;AARL;;AAAA;AAAA,EAAqC,SAArC;AAWA,OAAM,SAAU,GAAV,CAAc,CAAd,EAAoB;AAAgB,SAAO,IAAI,OAAJ,CAAY,CAAZ,CAAP;AAAwB;AAClE,OAAM,SAAU,GAAV,CAAc,CAAd,EAAuB;AAAc,SAAO,IAAI,GAAJ,CAAQ,CAAR,CAAP;AAAoB;AAC/D,OAAM,SAAU,GAAV,GAA+B;AAAA,qCAAd,CAAc;AAAd,IAAA,CAAc;AAAA;;AAAS,oBAAW,GAAX,EAAkB,CAAlB;AAAuB;AACrE,OAAM,SAAU,EAAV,GAA8B;AAAA,qCAAd,CAAc;AAAd,IAAA,CAAc;AAAA;;AAAQ,oBAAW,EAAX,EAAiB,CAAjB;AAAsB;AAClE,OAAM,SAAU,MAAV,CAAiB,IAAjB,EAAsC,IAAtC,EAAwE;AAC1E,SAAO,IAAI,eAAJ,CAAoB,IAApB,EAA0B,IAA1B,CAAP;AACH","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { RecordBatch } from '../recordbatch';\nimport { DictionaryVector } from '../vector/dictionary';\n\n/** @ignore */\nexport type ValueFunc<T> = (idx: number, cols: RecordBatch) => T | null;\n/** @ignore */\nexport type PredicateFunc = (idx: number, cols: RecordBatch) => boolean;\n\n/** @ignore */\nexport abstract class Value<T> {\n    eq(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new Equals(this, other);\n    }\n    le(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new LTeq(this, other);\n    }\n    ge(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new GTeq(this, other);\n    }\n    lt(other: Value<T> | T): Predicate {\n        return new Not(this.ge(other));\n    }\n    gt(other: Value<T> | T): Predicate {\n        return new Not(this.le(other));\n    }\n    ne(other: Value<T> | T): Predicate {\n        return new Not(this.eq(other));\n    }\n}\n\n/** @ignore */\nexport class Literal<T= any> extends Value<T> {\n    constructor(public v: T) { super(); }\n}\n\n/** @ignore */\nexport class Col<T= any> extends Value<T> {\n    // @ts-ignore\n    public vector: Vector;\n    // @ts-ignore\n    public colidx: number;\n\n    constructor(public name: string) { super(); }\n    bind(batch: RecordBatch): (idx: number, batch?: RecordBatch) => any {\n        if (!this.colidx) {\n            // Assume column index doesn't change between calls to bind\n            //this.colidx = cols.findIndex(v => v.name.indexOf(this.name) != -1);\n            this.colidx = -1;\n            const fields = batch.schema.fields;\n            for (let idx = -1; ++idx < fields.length;) {\n                if (fields[idx].name === this.name) {\n                    this.colidx = idx;\n                    break;\n                }\n            }\n            if (this.colidx < 0) { throw new Error(`Failed to bind Col \"${this.name}\"`); }\n        }\n\n        const vec = this.vector = batch.getChildAt(this.colidx)!;\n        return (idx: number) => vec.get(idx);\n    }\n}\n\n/** @ignore */\nexport abstract class Predicate {\n    abstract bind(batch: RecordBatch): PredicateFunc;\n    and(...expr: Predicate[]): And { return new And(this, ...expr); }\n    or(...expr: Predicate[]): Or { return new Or(this, ...expr); }\n    not(): Predicate { return new Not(this); }\n}\n\n/** @ignore */\nexport abstract class ComparisonPredicate<T= any> extends Predicate {\n    constructor(public readonly left: Value<T>, public readonly right: Value<T>) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        if (this.left instanceof Literal) {\n            if (this.right instanceof Literal) {\n                return this._bindLitLit(batch, this.left, this.right);\n            } else { // right is a Col\n\n                return this._bindLitCol(batch, this.left, this.right as Col);\n            }\n        } else { // left is a Col\n            if (this.right instanceof Literal) {\n                return this._bindColLit(batch, this.left as Col, this.right);\n            } else { // right is a Col\n                return this._bindColCol(batch, this.left as Col, this.right as Col);\n            }\n        }\n    }\n\n    protected abstract _bindLitLit(batch: RecordBatch, left: Literal, right: Literal): PredicateFunc;\n    protected abstract _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc;\n    protected abstract _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc;\n    protected abstract _bindLitCol(batch: RecordBatch, lit: Literal, col: Col): PredicateFunc;\n}\n\n/** @ignore */\nexport abstract class CombinationPredicate extends Predicate {\n    readonly children: Predicate[];\n    constructor(...children: Predicate[]) {\n        super();\n        this.children = children;\n    }\n}\n// add children to prototype so it doesn't get mangled in es2015/umd\n(<any> CombinationPredicate.prototype).children = Object.freeze([]); // freeze for safety\n\n/** @ignore */\nexport class And extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ands\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof And ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.every((p) => p(idx, batch));\n    }\n}\n\n/** @ignore */\nexport class Or extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ors\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof Or ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.some((p) => p(idx, batch));\n    }\n}\n\n/** @ignore */\nexport class Equals extends ComparisonPredicate {\n    // Helpers used to cache dictionary reverse lookups between calls to bind\n    private lastDictionary: Vector|undefined;\n    private lastKey: number|undefined;\n\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v == right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, batch: RecordBatch) => left_func(idx, batch) == right_func(idx, batch);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        if (col.vector instanceof DictionaryVector) {\n            let key: any;\n            const vector = col.vector as DictionaryVector;\n            if (vector.dictionary !== this.lastDictionary) {\n                key = vector.reverseLookup(lit.v);\n                this.lastDictionary = vector.dictionary;\n                this.lastKey = key;\n            } else {\n                key = this.lastKey;\n            }\n\n            if (key === -1) {\n                // the value doesn't exist in the dictionary - always return\n                // false\n                // TODO: special-case of PredicateFunc that encapsulates this\n                // \"always false\" behavior. That way filtering operations don't\n                // have to bother checking\n                return () => false;\n            } else {\n                return (idx: number) => {\n                    return vector.getKey(idx) === key;\n                };\n            }\n        } else {\n            return (idx: number, cols: RecordBatch) => col_func(idx, cols) == lit.v;\n        }\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        // Equals is commutative\n        return this._bindColLit(batch, col, lit);\n    }\n}\n\n/** @ignore */\nexport class LTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v <= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) <= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) <= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v <= col_func(idx, cols);\n    }\n}\n\n/** @ignore */\nexport class GTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v >= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) >= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) >= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v >= col_func(idx, cols);\n    }\n}\n\n/** @ignore */\nexport class Not extends Predicate {\n    constructor(public readonly child: Predicate) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        const func = this.child.bind(batch);\n        return (idx: number, batch: RecordBatch) => !func(idx, batch);\n    }\n}\n\n/** @ignore */\nexport class CustomPredicate extends Predicate {\n    constructor(private next: PredicateFunc, private bind_: (batch: RecordBatch) => void) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        this.bind_(batch);\n        return this.next;\n    }\n}\n\nexport function lit(v: any): Value<any> { return new Literal(v); }\nexport function col(n: string): Col<any> { return new Col(n); }\nexport function and(...p: Predicate[]): And { return new And(...p); }\nexport function or(...p: Predicate[]): Or { return new Or(...p); }\nexport function custom(next: PredicateFunc, bind: (batch: RecordBatch) => void) {\n    return new CustomPredicate(next, bind);\n}\n"]},"metadata":{},"sourceType":"module"}