{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport Stat from './stat';\n\nvar Stats = function () {\n  function Stats(_ref) {\n    var id = _ref.id,\n        stats = _ref.stats;\n\n    _classCallCheck(this, Stats);\n\n    this.id = id;\n    this.stats = {};\n\n    this._initializeStats(stats);\n\n    Object.seal(this);\n  }\n\n  _createClass(Stats, [{\n    key: \"get\",\n    value: function get(name) {\n      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'count';\n      return this._getOrCreate({\n        name: name,\n        type: type\n      });\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      for (var key in this.stats) {\n        this.stats[key].reset();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(fn) {\n      for (var key in this.stats) {\n        fn(this.stats[key]);\n      }\n    }\n  }, {\n    key: \"getTable\",\n    value: function getTable() {\n      var table = {};\n      this.forEach(function (stat) {\n        table[stat.name] = {\n          time: stat.time || 0,\n          count: stat.count || 0,\n          average: stat.getAverageTime() || 0,\n          hz: stat.getHz() || 0\n        };\n      });\n      return table;\n    }\n  }, {\n    key: \"_initializeStats\",\n    value: function _initializeStats() {\n      var _this = this;\n\n      var stats = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      stats.forEach(function (stat) {\n        return _this._getOrCreate(stat);\n      });\n    }\n  }, {\n    key: \"_getOrCreate\",\n    value: function _getOrCreate(stat) {\n      if (!stat || !stat.name) {\n        return null;\n      }\n\n      var name = stat.name,\n          type = stat.type;\n\n      if (!this.stats[name]) {\n        if (stat instanceof Stat) {\n          this.stats[name] = stat;\n        } else {\n          this.stats[name] = new Stat(name, type);\n        }\n      }\n\n      return this.stats[name];\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return Object.keys(this.stats).length;\n    }\n  }]);\n\n  return Stats;\n}();\n\nexport { Stats as default };","map":{"version":3,"sources":["../../../src/lib/stats.js"],"names":["Stats","id","stats","Object","name","type","fn","table","stat","time","count","average","hz"],"mappings":";;AAAA,OAAA,IAAA,MAAA,QAAA;;IAEqBA,K;AACnB,WAAA,KAAA,CAAA,IAAA,EAAyB;AAAA,QAAZC,EAAY,GAAA,IAAA,CAAZA,EAAY;AAAA,QAARC,KAAQ,GAAA,IAAA,CAARA,KAAQ;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,KAAA,CAAA;;AACvB,SAAA,EAAA,GAAA,EAAA;AACA,SAAA,KAAA,GAAA,EAAA;;AAEA,SAAA,gBAAA,CAAA,KAAA;;AAEAC,IAAAA,MAAM,CAANA,IAAAA,CAAAA,IAAAA;AACD;;;;wBAGGC,I,EAAsB;AAAA,UAAhBC,IAAgB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAT,OAAS;AACxB,aAAO,KAAA,YAAA,CAAkB;AAACD,QAAAA,IAAI,EAAL,IAAA;AAAOC,QAAAA,IAAI,EAAJA;AAAP,OAAlB,CAAP;AACD;;;4BAOO;AACN,WAAK,IAAL,GAAA,IAAkB,KAAlB,KAAA,EAA8B;AAC5B,aAAA,KAAA,CAAA,GAAA,EAAA,KAAA;AACD;;AAED,aAAA,IAAA;AACD;;;4BAEOC,E,EAAI;AACV,WAAK,IAAL,GAAA,IAAkB,KAAlB,KAAA,EAA8B;AAC5BA,QAAAA,EAAE,CAAC,KAAA,KAAA,CAAHA,GAAG,CAAD,CAAFA;AACD;AACF;;;+BAEU;AACT,UAAMC,KAAK,GAAX,EAAA;AACA,WAAA,OAAA,CAAa,UAAA,IAAA,EAAQ;AACnBA,QAAAA,KAAK,CAACC,IAAI,CAAVD,IAAK,CAALA,GAAmB;AACjBE,UAAAA,IAAI,EAAED,IAAI,CAAJA,IAAAA,IADW,CAAA;AAEjBE,UAAAA,KAAK,EAAEF,IAAI,CAAJA,KAAAA,IAFU,CAAA;AAGjBG,UAAAA,OAAO,EAAEH,IAAI,CAAJA,cAAAA,MAHQ,CAAA;AAIjBI,UAAAA,EAAE,EAAEJ,IAAI,CAAJA,KAAAA,MAAgB;AAJH,SAAnBD;AADF,OAAA;AASA,aAAA,KAAA;AACD;;;uCAE4B;AAAA,UAAA,KAAA,GAAA,IAAA;;AAAA,UAAZL,KAAY,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;AAC3BA,MAAAA,KAAK,CAALA,OAAAA,CAAc,UAAA,IAAA,EAAI;AAAA,eAAI,KAAI,CAAJ,YAAA,CAAJ,IAAI,CAAJ;AAAlBA,OAAAA;AACD;;;iCAEYM,I,EAAM;AACjB,UAAI,CAAA,IAAA,IAAS,CAACA,IAAI,CAAlB,IAAA,EAAyB;AACvB,eAAA,IAAA;AACD;;AAHgB,UAKVJ,IALU,GAKII,IALJ,CAAA,IAAA;AAAA,UAKJH,IALI,GAKIG,IALJ,CAAA,IAAA;;AAMjB,UAAI,CAAC,KAAA,KAAA,CAAL,IAAK,CAAL,EAAuB;AACrB,YAAIA,IAAI,YAAR,IAAA,EAA0B;AACxB,eAAA,KAAA,CAAA,IAAA,IAAA,IAAA;AADF,SAAA,MAEO;AACL,eAAA,KAAA,CAAA,IAAA,IAAmB,IAAA,IAAA,CAAA,IAAA,EAAnB,IAAmB,CAAnB;AACD;AACF;;AACD,aAAO,KAAA,KAAA,CAAP,IAAO,CAAP;AACD;;;wBAnDU;AACT,aAAOL,MAAM,CAANA,IAAAA,CAAY,KAAZA,KAAAA,EAAP,MAAA;AACD;;;;;;SAjBkBH,K","sourcesContent":["import Stat from './stat';\n\nexport default class Stats {\n  constructor({id, stats}) {\n    this.id = id;\n    this.stats = {};\n\n    this._initializeStats(stats);\n\n    Object.seal(this);\n  }\n\n  // Acquire a stat. Create if it doesn't exist.\n  get(name, type = 'count') {\n    return this._getOrCreate({name, type});\n  }\n\n  get size() {\n    return Object.keys(this.stats).length;\n  }\n\n  // Reset all stats\n  reset() {\n    for (const key in this.stats) {\n      this.stats[key].reset();\n    }\n\n    return this;\n  }\n\n  forEach(fn) {\n    for (const key in this.stats) {\n      fn(this.stats[key]);\n    }\n  }\n\n  getTable() {\n    const table = {};\n    this.forEach(stat => {\n      table[stat.name] = {\n        time: stat.time || 0,\n        count: stat.count || 0,\n        average: stat.getAverageTime() || 0,\n        hz: stat.getHz() || 0\n      };\n    });\n\n    return table;\n  }\n\n  _initializeStats(stats = []) {\n    stats.forEach(stat => this._getOrCreate(stat));\n  }\n\n  _getOrCreate(stat) {\n    if (!stat || !stat.name) {\n      return null;\n    }\n\n    const {name, type} = stat;\n    if (!this.stats[name]) {\n      if (stat instanceof Stat) {\n        this.stats[name] = stat;\n      } else {\n        this.stats[name] = new Stat(name, type);\n      }\n    }\n    return this.stats[name];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}