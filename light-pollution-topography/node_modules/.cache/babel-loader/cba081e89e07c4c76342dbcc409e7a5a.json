{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport Matrix4 from './matrix4';\nimport Vector3 from './vector3';\nimport Euler from './euler';\n\nvar Pose = function () {\n  function Pose() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$x = _ref.x,\n        x = _ref$x === void 0 ? 0 : _ref$x,\n        _ref$y = _ref.y,\n        y = _ref$y === void 0 ? 0 : _ref$y,\n        _ref$z = _ref.z,\n        z = _ref$z === void 0 ? 0 : _ref$z,\n        _ref$roll = _ref.roll,\n        roll = _ref$roll === void 0 ? 0 : _ref$roll,\n        _ref$pitch = _ref.pitch,\n        pitch = _ref$pitch === void 0 ? 0 : _ref$pitch,\n        _ref$yaw = _ref.yaw,\n        yaw = _ref$yaw === void 0 ? 0 : _ref$yaw,\n        position = _ref.position,\n        orientation = _ref.orientation;\n\n    _classCallCheck(this, Pose);\n\n    if (Array.isArray(position) && position.length === 3) {\n      this.position = new Vector3(position);\n    } else {\n      this.position = new Vector3(x, y, z);\n    }\n\n    if (Array.isArray(orientation) && orientation.length === 4) {\n      this.orientation = new Euler(orientation, orientation[3]);\n    } else {\n      this.orientation = new Euler(roll, pitch, yaw, Euler.RollPitchYaw);\n    }\n  }\n\n  _createClass(Pose, [{\n    key: \"getPosition\",\n    value: function getPosition() {\n      return this.position;\n    }\n  }, {\n    key: \"getOrientation\",\n    value: function getOrientation() {\n      return this.orientation;\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(pose) {\n      if (!pose) {\n        return false;\n      }\n\n      return this.position.equals(pose.position) && this.orientation.equals(pose.orientation);\n    }\n  }, {\n    key: \"exactEquals\",\n    value: function exactEquals(pose) {\n      if (!pose) {\n        return false;\n      }\n\n      return this.position.exactEquals(pose.position) && this.orientation.exactEquals(pose.orientation);\n    }\n  }, {\n    key: \"getTransformationMatrix\",\n    value: function getTransformationMatrix() {\n      var sr = Math.sin(this.roll);\n      var sp = Math.sin(this.pitch);\n      var sw = Math.sin(this.yaw);\n      var cr = Math.cos(this.roll);\n      var cp = Math.cos(this.pitch);\n      var cw = Math.cos(this.yaw);\n      var matrix = new Matrix4().setRowMajor(cw * cp, -sw * cr + cw * sp * sr, sw * sr + cw * sp * cr, this.x, sw * cp, cw * cr + sw * sp * sr, -cw * sr + sw * sp * cr, this.y, -sp, cp * sr, cp * cr, this.z, 0, 0, 0, 1);\n      return matrix;\n    }\n  }, {\n    key: \"getTransformationMatrixFromPose\",\n    value: function getTransformationMatrixFromPose(pose) {\n      return new Matrix4().multiplyRight(this.getTransformationMatrix()).multiplyRight(pose.getTransformationMatrix().invert());\n    }\n  }, {\n    key: \"getTransformationMatrixToPose\",\n    value: function getTransformationMatrixToPose(pose) {\n      return new Matrix4().multiplyRight(pose.getTransformationMatrix()).multiplyRight(this.getTransformationMatrix().invert());\n    }\n  }, {\n    key: \"x\",\n    get: function get() {\n      return this.position.x;\n    },\n    set: function set(value) {\n      return this.position.x = value;\n    }\n  }, {\n    key: \"y\",\n    get: function get() {\n      return this.position.y;\n    },\n    set: function set(value) {\n      return this.position.y = value;\n    }\n  }, {\n    key: \"z\",\n    get: function get() {\n      return this.position.z;\n    },\n    set: function set(value) {\n      return this.position.z = value;\n    }\n  }, {\n    key: \"roll\",\n    get: function get() {\n      return this.orientation.roll;\n    },\n    set: function set(value) {\n      return this.orientation.roll = value;\n    }\n  }, {\n    key: \"pitch\",\n    get: function get() {\n      return this.orientation.pitch;\n    },\n    set: function set(value) {\n      return this.orientation.pitch = value;\n    }\n  }, {\n    key: \"yaw\",\n    get: function get() {\n      return this.orientation.yaw;\n    },\n    set: function set(value) {\n      return this.orientation.yaw = value;\n    }\n  }]);\n\n  return Pose;\n}();\n\nexport { Pose as default };","map":{"version":3,"sources":["../../../src/classes/pose.js"],"names":["Pose","x","y","z","roll","pitch","yaw","position","orientation","Array","Euler","value","pose","sr","Math","sp","sw","cr","cp","cw","matrix"],"mappings":"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","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport Matrix4 from './matrix4';\nimport Vector3 from './vector3';\nimport Euler from './euler';\n\nexport default class Pose {\n  /**\n   * A pose contains both rotation and rotations.\n   * Note that every single pose defines its own coordinate system\n   * (with the position of the pose in the origin, and zero rotations).\n   * These \"pose relative\" coordinate will be centered on the defining\n   * pose's position and with with the defining pose's orientation\n   * aligned with axis.\n   */\n  constructor({x = 0, y = 0, z = 0, roll = 0, pitch = 0, yaw = 0, position, orientation} = {}) {\n    if (Array.isArray(position) && position.length === 3) {\n      this.position = new Vector3(position);\n    } else {\n      this.position = new Vector3(x, y, z);\n    }\n    if (Array.isArray(orientation) && orientation.length === 4) {\n      this.orientation = new Euler(orientation, orientation[3]);\n    } else {\n      this.orientation = new Euler(roll, pitch, yaw, Euler.RollPitchYaw);\n    }\n  }\n\n  /* eslint-disable no-multi-spaces, brace-style, no-return-assign */\n  get x() {\n    return this.position.x;\n  }\n  set x(value) {\n    return (this.position.x = value);\n  }\n  get y() {\n    return this.position.y;\n  }\n  set y(value) {\n    return (this.position.y = value);\n  }\n  get z() {\n    return this.position.z;\n  }\n  set z(value) {\n    return (this.position.z = value);\n  }\n  get roll() {\n    return this.orientation.roll;\n  }\n  set roll(value) {\n    return (this.orientation.roll = value);\n  }\n  get pitch() {\n    return this.orientation.pitch;\n  }\n  set pitch(value) {\n    return (this.orientation.pitch = value);\n  }\n  get yaw() {\n    return this.orientation.yaw;\n  }\n  set yaw(value) {\n    return (this.orientation.yaw = value);\n  }\n  /* eslint-enable no-multi-spaces, brace-style, no-return-assign */\n\n  getPosition() {\n    return this.position;\n  }\n\n  getOrientation() {\n    return this.orientation;\n  }\n\n  equals(pose) {\n    if (!pose) {\n      return false;\n    }\n    return this.position.equals(pose.position) && this.orientation.equals(pose.orientation);\n  }\n\n  exactEquals(pose) {\n    if (!pose) {\n      return false;\n    }\n    return (\n      this.position.exactEquals(pose.position) && this.orientation.exactEquals(pose.orientation)\n    );\n  }\n\n  /*\n   * Returns a 4x4 matrix that transforms a coordinates (in the same\n   * coordinate system as this pose) into the \"pose-relative\" coordinate\n   * system defined by this pose.\n   * The pose relative coordinates with have origin in the position of this\n   * pose, and axis will be aligned with the rotation of this pose.\n   */\n  getTransformationMatrix() {\n    // setup precomputations for the sin/cos of the angles\n    const sr = Math.sin(this.roll);\n    const sp = Math.sin(this.pitch);\n    const sw = Math.sin(this.yaw);\n\n    const cr = Math.cos(this.roll);\n    const cp = Math.cos(this.pitch);\n    const cw = Math.cos(this.yaw);\n\n    const matrix = new Matrix4().setRowMajor(\n      cw * cp, // 0,0\n      -sw * cr + cw * sp * sr, // 0,1\n      sw * sr + cw * sp * cr, // 0,2\n      this.x, // 0,3\n\n      sw * cp, // 1,0\n      cw * cr + sw * sp * sr, // 1,1\n      -cw * sr + sw * sp * cr, // 1,2\n      this.y, // 1,3\n\n      -sp, // 2,0\n      cp * sr, // 2,1\n      cp * cr, // 2,2\n      this.z, // 2,3\n\n      0,\n      0,\n      0,\n      1\n    );\n\n    return matrix;\n  }\n\n  /*\n   * Given a second pose that represent the same object in a second coordinate\n   * system, this method returns a 4x4 matrix that transforms coordinates in the\n   * second coordinate system into the coordinate system of this pose.\n   */\n  getTransformationMatrixFromPose(pose) {\n    return new Matrix4()\n      .multiplyRight(this.getTransformationMatrix())\n      .multiplyRight(pose.getTransformationMatrix().invert());\n  }\n\n  /*\n   * Given a second pose that represent the same object in a second coordinate\n   * system, this method returns a 4x4 matrix that transforms coordinates in the\n   * coordinate system of this pose into the coordinate system of the second pose.\n   *\n   * Note: This method returns the inverse of that returned by\n   * this.getTransformationMatrixFromPose(pose)\n   */\n  getTransformationMatrixToPose(pose) {\n    return new Matrix4()\n      .multiplyRight(pose.getTransformationMatrix())\n      .multiplyRight(this.getTransformationMatrix().invert());\n  }\n}\n"]},"metadata":{},"sourceType":"module"}