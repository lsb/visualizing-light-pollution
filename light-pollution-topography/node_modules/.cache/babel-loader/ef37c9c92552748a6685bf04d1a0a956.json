{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { Layer, project32, picking } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport vs from './icon-layer-vertex.glsl';\nimport fs from './icon-layer-fragment.glsl';\nimport IconManager from './icon-manager';\nvar DEFAULT_COLOR = [0, 0, 0, 255];\nvar defaultProps = {\n  iconAtlas: {\n    type: 'object',\n    value: null,\n    async: true\n  },\n  iconMapping: {\n    type: 'object',\n    value: {},\n    async: true\n  },\n  sizeScale: {\n    type: 'number',\n    value: 1,\n    min: 0\n  },\n  billboard: true,\n  sizeUnits: 'pixels',\n  sizeMinPixels: {\n    type: 'number',\n    min: 0,\n    value: 0\n  },\n  sizeMaxPixels: {\n    type: 'number',\n    min: 0,\n    value: Number.MAX_SAFE_INTEGER\n  },\n  alphaCutoff: {\n    type: 'number',\n    value: 0.05,\n    min: 0,\n    max: 1\n  },\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  getIcon: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.icon;\n    }\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getSize: {\n    type: 'accessor',\n    value: 1\n  },\n  getAngle: {\n    type: 'accessor',\n    value: 0\n  },\n  getPixelOffset: {\n    type: 'accessor',\n    value: [0, 0]\n  }\n};\n\nvar IconLayer = function (_Layer) {\n  _inherits(IconLayer, _Layer);\n\n  function IconLayer() {\n    _classCallCheck(this, IconLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(IconLayer).apply(this, arguments));\n  }\n\n  _createClass(IconLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      return _get(_getPrototypeOf(IconLayer.prototype), \"getShaders\", this).call(this, {\n        vs: vs,\n        fs: fs,\n        modules: [project32, picking]\n      });\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      var _this = this;\n\n      this.state = {\n        iconManager: new IconManager(this.context.gl, {\n          onUpdate: function onUpdate() {\n            return _this._onUpdate();\n          }\n        })\n      };\n      var attributeManager = this.getAttributeManager();\n      attributeManager.addInstanced({\n        instancePositions: {\n          size: 3,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          transition: true,\n          accessor: 'getPosition'\n        },\n        instanceSizes: {\n          size: 1,\n          transition: true,\n          accessor: 'getSize',\n          defaultValue: 1\n        },\n        instanceOffsets: {\n          size: 2,\n          accessor: 'getIcon',\n          transform: this.getInstanceOffset\n        },\n        instanceIconFrames: {\n          size: 4,\n          accessor: 'getIcon',\n          transform: this.getInstanceIconFrame\n        },\n        instanceColorModes: {\n          size: 1,\n          type: 5121,\n          accessor: 'getIcon',\n          transform: this.getInstanceColorMode\n        },\n        instanceColors: {\n          size: this.props.colorFormat.length,\n          type: 5121,\n          normalized: true,\n          transition: true,\n          accessor: 'getColor',\n          defaultValue: DEFAULT_COLOR\n        },\n        instanceAngles: {\n          size: 1,\n          transition: true,\n          accessor: 'getAngle'\n        },\n        instancePixelOffset: {\n          size: 2,\n          transition: true,\n          accessor: 'getPixelOffset'\n        }\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var oldProps = _ref.oldProps,\n          props = _ref.props,\n          changeFlags = _ref.changeFlags;\n\n      _get(_getPrototypeOf(IconLayer.prototype), \"updateState\", this).call(this, {\n        props: props,\n        oldProps: oldProps,\n        changeFlags: changeFlags\n      });\n\n      var attributeManager = this.getAttributeManager();\n      var iconAtlas = props.iconAtlas,\n          iconMapping = props.iconMapping,\n          data = props.data,\n          getIcon = props.getIcon;\n      var iconManager = this.state.iconManager;\n      iconManager.setProps({\n        loadOptions: props.loadOptions\n      });\n      var iconMappingChanged = false;\n      var prePacked = iconAtlas || this.internalState.isAsyncPropLoading('iconAtlas');\n\n      if (prePacked) {\n        if (oldProps.iconAtlas !== props.iconAtlas) {\n          iconManager.setProps({\n            iconAtlas: iconAtlas,\n            autoPacking: false\n          });\n        }\n\n        if (oldProps.iconMapping !== props.iconMapping) {\n          iconManager.setProps({\n            iconMapping: iconMapping\n          });\n          iconMappingChanged = true;\n        }\n      } else {\n        iconManager.setProps({\n          autoPacking: true\n        });\n      }\n\n      if (changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getIcon)) {\n        iconManager.setProps({\n          data: data,\n          getIcon: getIcon\n        });\n        iconMappingChanged = true;\n      }\n\n      if (iconMappingChanged) {\n        attributeManager.invalidate('instanceOffsets');\n        attributeManager.invalidate('instanceIconFrames');\n        attributeManager.invalidate('instanceColorModes');\n      }\n\n      if (changeFlags.extensionsChanged) {\n        var gl = this.context.gl;\n\n        if (this.state.model) {\n          this.state.model[\"delete\"]();\n        }\n\n        this.setState({\n          model: this._getModel(gl)\n        });\n        attributeManager.invalidateAll();\n      }\n    }\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState() {\n      _get(_getPrototypeOf(IconLayer.prototype), \"finalizeState\", this).call(this);\n\n      this.state.iconManager.finalize();\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref2) {\n      var uniforms = _ref2.uniforms;\n      var _this$props = this.props,\n          sizeScale = _this$props.sizeScale,\n          sizeMinPixels = _this$props.sizeMinPixels,\n          sizeMaxPixels = _this$props.sizeMaxPixels,\n          sizeUnits = _this$props.sizeUnits,\n          billboard = _this$props.billboard,\n          alphaCutoff = _this$props.alphaCutoff;\n      var iconManager = this.state.iconManager;\n      var viewport = this.context.viewport;\n      var iconsTexture = iconManager.getTexture();\n\n      if (iconsTexture && iconsTexture.loaded) {\n        this.state.model.setUniforms(Object.assign({}, uniforms, {\n          iconsTexture: iconsTexture,\n          iconsTextureDim: [iconsTexture.width, iconsTexture.height],\n          sizeScale: sizeScale * (sizeUnits === 'pixels' ? viewport.metersPerPixel : 1),\n          sizeMinPixels: sizeMinPixels,\n          sizeMaxPixels: sizeMaxPixels,\n          billboard: billboard,\n          alphaCutoff: alphaCutoff\n        })).draw();\n      }\n    }\n  }, {\n    key: \"_getModel\",\n    value: function _getModel(gl) {\n      var positions = [-1, -1, -1, 1, 1, 1, 1, -1];\n      return new Model(gl, Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: 6,\n          attributes: {\n            positions: {\n              size: 2,\n              value: new Float32Array(positions)\n            }\n          }\n        }),\n        isInstanced: true\n      }));\n    }\n  }, {\n    key: \"_onUpdate\",\n    value: function _onUpdate() {\n      this.setNeedsRedraw();\n    }\n  }, {\n    key: \"getInstanceOffset\",\n    value: function getInstanceOffset(icon) {\n      var rect = this.state.iconManager.getIconMapping(icon);\n      return [rect.width / 2 - rect.anchorX || 0, rect.height / 2 - rect.anchorY || 0];\n    }\n  }, {\n    key: \"getInstanceColorMode\",\n    value: function getInstanceColorMode(icon) {\n      var mapping = this.state.iconManager.getIconMapping(icon);\n      return mapping.mask ? 1 : 0;\n    }\n  }, {\n    key: \"getInstanceIconFrame\",\n    value: function getInstanceIconFrame(icon) {\n      var rect = this.state.iconManager.getIconMapping(icon);\n      return [rect.x || 0, rect.y || 0, rect.width || 0, rect.height || 0];\n    }\n  }, {\n    key: \"isLoaded\",\n    get: function get() {\n      return _get(_getPrototypeOf(IconLayer.prototype), \"isLoaded\", this) && this.state.iconManager.isLoaded;\n    }\n  }]);\n\n  return IconLayer;\n}(Layer);\n\nexport { IconLayer as default };\nIconLayer.layerName = 'IconLayer';\nIconLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/icon-layer/icon-layer.js"],"names":["DEFAULT_COLOR","defaultProps","iconAtlas","type","value","async","iconMapping","sizeScale","min","billboard","sizeUnits","sizeMinPixels","sizeMaxPixels","Number","MAX_SAFE_INTEGER","alphaCutoff","max","getPosition","x","getIcon","getColor","getSize","getAngle","getPixelOffset","IconLayer","Layer","vs","fs","modules","iconManager","onUpdate","attributeManager","instancePositions","size","fp64","transition","accessor","instanceSizes","defaultValue","instanceOffsets","transform","getInstanceOffset","instanceIconFrames","getInstanceIconFrame","instanceColorModes","getInstanceColorMode","instanceColors","normalized","instanceAngles","instancePixelOffset","oldProps","props","changeFlags","data","loadOptions","iconMappingChanged","prePacked","autoPacking","gl","model","uniforms","viewport","iconsTexture","iconsTextureDim","positions","id","geometry","drawMode","attributes","isInstanced","icon","rect","mapping"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {Layer, project32, picking} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './icon-layer-vertex.glsl';\nimport fs from './icon-layer-fragment.glsl';\nimport IconManager from './icon-manager';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n/*\n * @param {object} props\n * @param {Texture2D | string} props.iconAtlas - atlas image url or texture\n * @param {object} props.iconMapping - icon names mapped to icon definitions\n * @param {object} props.iconMapping[icon_name].x - x position of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].y - y position of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].width - width of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].height - height of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].anchorX - x anchor of icon on the atlas image,\n *   default to width / 2\n * @param {object} props.iconMapping[icon_name].anchorY - y anchor of icon on the atlas image,\n *   default to height / 2\n * @param {object} props.iconMapping[icon_name].mask - whether icon is treated as a transparency\n *   mask. If true, user defined color is applied. If false, original color from the image is\n *   applied. Default to false.\n * @param {number} props.size - icon size in pixels\n * @param {func} props.getPosition - returns anchor position of the icon, in [lng, lat, z]\n * @param {func} props.getIcon - returns icon name as a string\n * @param {func} props.getSize - returns icon size multiplier as a number\n * @param {func} props.getColor - returns color of the icon in [r, g, b, a]. Only works on icons\n *   with mask: true.\n * @param {func} props.getAngle - returns rotating angle (in degree) of the icon.\n */\nconst defaultProps = {\n  iconAtlas: {type: 'object', value: null, async: true},\n  iconMapping: {type: 'object', value: {}, async: true},\n  sizeScale: {type: 'number', value: 1, min: 0},\n  billboard: true,\n  sizeUnits: 'pixels',\n  sizeMinPixels: {type: 'number', min: 0, value: 0}, //  min point radius in pixels\n  sizeMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER}, // max point radius in pixels\n  alphaCutoff: {type: 'number', value: 0.05, min: 0, max: 1},\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getIcon: {type: 'accessor', value: x => x.icon},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getSize: {type: 'accessor', value: 1},\n  getAngle: {type: 'accessor', value: 0},\n  getPixelOffset: {type: 'accessor', value: [0, 0]}\n};\n\nexport default class IconLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  initializeState() {\n    this.state = {\n      iconManager: new IconManager(this.context.gl, {onUpdate: () => this._onUpdate()})\n    };\n\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceSizes: {\n        size: 1,\n        transition: true,\n        accessor: 'getSize',\n        defaultValue: 1\n      },\n      instanceOffsets: {size: 2, accessor: 'getIcon', transform: this.getInstanceOffset},\n      instanceIconFrames: {size: 4, accessor: 'getIcon', transform: this.getInstanceIconFrame},\n      instanceColorModes: {\n        size: 1,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getIcon',\n        transform: this.getInstanceColorMode\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceAngles: {\n        size: 1,\n        transition: true,\n        accessor: 'getAngle'\n      },\n      instancePixelOffset: {\n        size: 2,\n        transition: true,\n        accessor: 'getPixelOffset'\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  /* eslint-disable max-statements, complexity */\n  updateState({oldProps, props, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    const attributeManager = this.getAttributeManager();\n    const {iconAtlas, iconMapping, data, getIcon} = props;\n    const {iconManager} = this.state;\n\n    iconManager.setProps({loadOptions: props.loadOptions});\n\n    let iconMappingChanged = false;\n    const prePacked = iconAtlas || this.internalState.isAsyncPropLoading('iconAtlas');\n\n    // prepacked iconAtlas from user\n    if (prePacked) {\n      if (oldProps.iconAtlas !== props.iconAtlas) {\n        iconManager.setProps({iconAtlas, autoPacking: false});\n      }\n\n      if (oldProps.iconMapping !== props.iconMapping) {\n        iconManager.setProps({iconMapping});\n        iconMappingChanged = true;\n      }\n    } else {\n      // otherwise, use autoPacking\n      iconManager.setProps({autoPacking: true});\n    }\n\n    if (\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getIcon))\n    ) {\n      iconManager.setProps({data, getIcon});\n      iconMappingChanged = true;\n    }\n\n    if (iconMappingChanged) {\n      attributeManager.invalidate('instanceOffsets');\n      attributeManager.invalidate('instanceIconFrames');\n      attributeManager.invalidate('instanceColorModes');\n    }\n\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      attributeManager.invalidateAll();\n    }\n  }\n  /* eslint-enable max-statements, complexity */\n\n  get isLoaded() {\n    return super.isLoaded && this.state.iconManager.isLoaded;\n  }\n\n  finalizeState() {\n    super.finalizeState();\n    // Release resources held by the icon manager\n    this.state.iconManager.finalize();\n  }\n\n  draw({uniforms}) {\n    const {sizeScale, sizeMinPixels, sizeMaxPixels, sizeUnits, billboard, alphaCutoff} = this.props;\n    const {iconManager} = this.state;\n    const {viewport} = this.context;\n\n    const iconsTexture = iconManager.getTexture();\n    if (iconsTexture && iconsTexture.loaded) {\n      this.state.model\n        .setUniforms(\n          Object.assign({}, uniforms, {\n            iconsTexture,\n            iconsTextureDim: [iconsTexture.width, iconsTexture.height],\n            sizeScale: sizeScale * (sizeUnits === 'pixels' ? viewport.metersPerPixel : 1),\n            sizeMinPixels,\n            sizeMaxPixels,\n            billboard,\n            alphaCutoff\n          })\n        )\n        .draw();\n    }\n  }\n\n  _getModel(gl) {\n    // The icon-layer vertex shader uses 2d positions\n    // specifed via: attribute vec2 positions;\n    const positions = [-1, -1, -1, 1, 1, 1, 1, -1];\n\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_FAN,\n          attributes: {\n            // The size must be explicitly passed here otherwise luma.gl\n            // will default to assuming that positions are 3D (x,y,z)\n            positions: {\n              size: 2,\n              value: new Float32Array(positions)\n            }\n          }\n        }),\n        isInstanced: true\n      })\n    );\n  }\n\n  _onUpdate() {\n    this.setNeedsRedraw();\n  }\n\n  getInstanceOffset(icon) {\n    const rect = this.state.iconManager.getIconMapping(icon);\n    return [rect.width / 2 - rect.anchorX || 0, rect.height / 2 - rect.anchorY || 0];\n  }\n\n  getInstanceColorMode(icon) {\n    const mapping = this.state.iconManager.getIconMapping(icon);\n    return mapping.mask ? 1 : 0;\n  }\n\n  getInstanceIconFrame(icon) {\n    const rect = this.state.iconManager.getIconMapping(icon);\n    return [rect.x || 0, rect.y || 0, rect.width || 0, rect.height || 0];\n  }\n}\n\nIconLayer.layerName = 'IconLayer';\nIconLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}