{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport DoublyLinkedListNode from '../utils/doubly-linked-list-node';\n\nvar DoublyLinkedList = function () {\n  function DoublyLinkedList() {\n    _classCallCheck(this, DoublyLinkedList);\n\n    this.head = null;\n    this.tail = null;\n    this._length = 0;\n  }\n\n  _createClass(DoublyLinkedList, [{\n    key: \"add\",\n    value: function add(item) {\n      var node = new DoublyLinkedListNode(item, this.tail, null);\n\n      if (this.tail) {\n        this.tail.next = node;\n        this.tail = node;\n      } else {\n        this.head = node;\n        this.tail = node;\n      }\n\n      ++this._length;\n      return node;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(node) {\n      if (!node) {\n        return;\n      }\n\n      if (node.previous && node.next) {\n        node.previous.next = node.next;\n        node.next.previous = node.previous;\n      } else if (node.previous) {\n        node.previous.next = null;\n        this.tail = node.previous;\n      } else if (node.next) {\n        node.next.previous = null;\n        this.head = node.next;\n      } else {\n        this.head = null;\n        this.tail = null;\n      }\n\n      node.next = null;\n      node.previous = null;\n      --this._length;\n    }\n  }, {\n    key: \"splice\",\n    value: function splice(node, nextNode) {\n      if (node === nextNode) {\n        return;\n      }\n\n      this.remove(nextNode);\n\n      this._insert(node, nextNode);\n    }\n  }, {\n    key: \"_insert\",\n    value: function _insert(node, nextNode) {\n      var oldNodeNext = node.next;\n      node.next = nextNode;\n\n      if (this.tail === node) {\n        this.tail = nextNode;\n      } else {\n        oldNodeNext.previous = nextNode;\n      }\n\n      nextNode.next = oldNodeNext;\n      nextNode.previous = node;\n      ++this._length;\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this._length;\n    }\n  }]);\n\n  return DoublyLinkedList;\n}();\n\nexport { DoublyLinkedList as default };","map":{"version":3,"sources":["../../../src/utils/doubly-linked-list.js"],"names":["DoublyLinkedList","item","node","nextNode","oldNodeNext"],"mappings":";;AAGA,OAAA,oBAAA,MAAA,kCAAA;;IAOqBA,gB;AACnB,WAAA,gBAAA,GAAc;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,gBAAA,CAAA;;AACZ,SAAA,IAAA,GAAA,IAAA;AACA,SAAA,IAAA,GAAA,IAAA;AACA,SAAA,OAAA,GAAA,CAAA;AACD;;;;wBAWGC,I,EAAM;AACR,UAAMC,IAAI,GAAG,IAAA,oBAAA,CAAA,IAAA,EAA+B,KAA/B,IAAA,EAAb,IAAa,CAAb;;AAEA,UAAI,KAAJ,IAAA,EAAe;AACb,aAAA,IAAA,CAAA,IAAA,GAAA,IAAA;AACA,aAAA,IAAA,GAAA,IAAA;AAFF,OAAA,MAGO;AACL,aAAA,IAAA,GAAA,IAAA;AACA,aAAA,IAAA,GAAA,IAAA;AACD;;AAED,QAAE,KAAF,OAAA;AAEA,aAAA,IAAA;AACD;;;2BAMMA,I,EAAM;AACX,UAAI,CAAJ,IAAA,EAAW;AACT;AACD;;AAED,UAAIA,IAAI,CAAJA,QAAAA,IAAiBA,IAAI,CAAzB,IAAA,EAAgC;AAC9BA,QAAAA,IAAI,CAAJA,QAAAA,CAAAA,IAAAA,GAAqBA,IAAI,CAAzBA,IAAAA;AACAA,QAAAA,IAAI,CAAJA,IAAAA,CAAAA,QAAAA,GAAqBA,IAAI,CAAzBA,QAAAA;AAFF,OAAA,MAGO,IAAIA,IAAI,CAAR,QAAA,EAAmB;AAExBA,QAAAA,IAAI,CAAJA,QAAAA,CAAAA,IAAAA,GAAAA,IAAAA;AACA,aAAA,IAAA,GAAYA,IAAI,CAAhB,QAAA;AAHK,OAAA,MAIA,IAAIA,IAAI,CAAR,IAAA,EAAe;AAEpBA,QAAAA,IAAI,CAAJA,IAAAA,CAAAA,QAAAA,GAAAA,IAAAA;AACA,aAAA,IAAA,GAAYA,IAAI,CAAhB,IAAA;AAHK,OAAA,MAIA;AAEL,aAAA,IAAA,GAAA,IAAA;AACA,aAAA,IAAA,GAAA,IAAA;AACD;;AAEDA,MAAAA,IAAI,CAAJA,IAAAA,GAAAA,IAAAA;AACAA,MAAAA,IAAI,CAAJA,QAAAA,GAAAA,IAAAA;AAEA,QAAE,KAAF,OAAA;AACD;;;2BAOMA,I,EAAMC,Q,EAAU;AACrB,UAAID,IAAI,KAAR,QAAA,EAAuB;AACrB;AACD;;AAGD,WAAA,MAAA,CAAA,QAAA;;AACA,WAAA,OAAA,CAAA,IAAA,EAAA,QAAA;AACD;;;4BAEOA,I,EAAMC,Q,EAAU;AACtB,UAAMC,WAAW,GAAGF,IAAI,CAAxB,IAAA;AACAA,MAAAA,IAAI,CAAJA,IAAAA,GAAAA,QAAAA;;AAGA,UAAI,KAAA,IAAA,KAAJ,IAAA,EAAwB;AACtB,aAAA,IAAA,GAAA,QAAA;AADF,OAAA,MAEO;AACLE,QAAAA,WAAW,CAAXA,QAAAA,GAAAA,QAAAA;AACD;;AAEDD,MAAAA,QAAQ,CAARA,IAAAA,GAAAA,WAAAA;AACAA,MAAAA,QAAQ,CAARA,QAAAA,GAAAA,IAAAA;AAEA,QAAE,KAAF,OAAA;AACD;;;wBAvFY;AACX,aAAO,KAAP,OAAA;AACD;;;;;;SATkBH,gB","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport DoublyLinkedListNode from '../utils/doubly-linked-list-node';\n\n/**\n * Doubly linked list\n *\n * @private\n */\nexport default class DoublyLinkedList {\n  constructor() {\n    this.head = null;\n    this.tail = null;\n    this._length = 0;\n  }\n\n  get length() {\n    return this._length;\n  }\n\n  /**\n   * Adds the item to the end of the list\n   * @param {*} [item]\n   * @return {DoublyLinkedListNode}\n   */\n  add(item) {\n    const node = new DoublyLinkedListNode(item, this.tail, null);\n\n    if (this.tail) {\n      this.tail.next = node;\n      this.tail = node;\n    } else {\n      this.head = node;\n      this.tail = node;\n    }\n\n    ++this._length;\n\n    return node;\n  }\n\n  /**\n   * Removes the given node from the list\n   * @param {DoublyLinkedListNode} node\n   */\n  remove(node) {\n    if (!node) {\n      return;\n    }\n\n    if (node.previous && node.next) {\n      node.previous.next = node.next;\n      node.next.previous = node.previous;\n    } else if (node.previous) {\n      // Remove last node\n      node.previous.next = null;\n      this.tail = node.previous;\n    } else if (node.next) {\n      // Remove first node\n      node.next.previous = null;\n      this.head = node.next;\n    } else {\n      // Remove last node in the linked list\n      this.head = null;\n      this.tail = null;\n    }\n\n    node.next = null;\n    node.previous = null;\n\n    --this._length;\n  }\n\n  /**\n   * Moves nextNode after node\n   * @param {DoublyLinkedListNode} node\n   * @param {DoublyLinkedListNode} nextNode\n   */\n  splice(node, nextNode) {\n    if (node === nextNode) {\n      return;\n    }\n\n    // Remove nextNode, then insert after node\n    this.remove(nextNode);\n    this._insert(node, nextNode);\n  }\n\n  _insert(node, nextNode) {\n    const oldNodeNext = node.next;\n    node.next = nextNode;\n\n    // nextNode is the new tail\n    if (this.tail === node) {\n      this.tail = nextNode;\n    } else {\n      oldNodeNext.previous = nextNode;\n    }\n\n    nextNode.next = oldNodeNext;\n    nextNode.previous = node;\n\n    ++this._length;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}