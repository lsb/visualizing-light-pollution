{"ast":null,"code":"import _toConsumableArray from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _createSuper from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _inherits from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Type } from '../enum';\nimport { Chunked } from './chunked';\nimport { clampRange } from '../util/vector';\nimport { AbstractVector, Vector } from '../vector';\n/** @ignore */\n\nexport var BaseVector = /*#__PURE__*/function (_AbstractVector) {\n  _inherits(BaseVector, _AbstractVector);\n\n  var _super = _createSuper(BaseVector);\n\n  function BaseVector(data, children) {\n    var _this;\n\n    _classCallCheck(this, BaseVector);\n\n    _this = _super.call(this);\n    _this._children = children;\n    _this.numChildren = data.childData.length;\n\n    _this._bindDataAccessors(_this.data = data);\n\n    return _this;\n  }\n\n  _createClass(BaseVector, [{\n    key: \"clone\",\n    value: function clone(data) {\n      var children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._children;\n      return Vector.new(data, children);\n    }\n  }, {\n    key: \"concat\",\n    value: function concat() {\n      for (var _len = arguments.length, others = new Array(_len), _key = 0; _key < _len; _key++) {\n        others[_key] = arguments[_key];\n      }\n\n      return Chunked.concat.apply(Chunked, [this].concat(others));\n    }\n  }, {\n    key: \"slice\",\n    value: function slice(begin, end) {\n      // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n      // clamp between 0 and length, and wrap around on negative indices, e.g.\n      // slice(-1, 5) or slice(5, -1)\n      return clampRange(this, begin, end, this._sliceInternal);\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid(index) {\n      if (this.nullCount > 0) {\n        var idx = this.offset + index;\n        var val = this.nullBitmap[idx >> 3];\n        var mask = val & 1 << idx % 8;\n        return mask !== 0;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"getChildAt\",\n    value: function getChildAt(index) {\n      return index < 0 || index >= this.numChildren ? null : (this._children || (this._children = []))[index] || (this._children[index] = Vector.new(this.data.childData[index]));\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return _toConsumableArray(this);\n    }\n  }, {\n    key: \"_sliceInternal\",\n    value: function _sliceInternal(self, begin, end) {\n      return self.clone(self.data.slice(begin, end - begin), null);\n    } // @ts-ignore\n\n  }, {\n    key: \"_bindDataAccessors\",\n    value: function _bindDataAccessors(data) {// Implementation in src/vectors/index.ts due to circular dependency/packaging shenanigans\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this.data.type;\n    }\n  }, {\n    key: \"typeId\",\n    get: function get() {\n      return this.data.typeId;\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.data.length;\n    }\n  }, {\n    key: \"offset\",\n    get: function get() {\n      return this.data.offset;\n    }\n  }, {\n    key: \"stride\",\n    get: function get() {\n      return this.data.stride;\n    }\n  }, {\n    key: \"nullCount\",\n    get: function get() {\n      return this.data.nullCount;\n    }\n  }, {\n    key: \"byteLength\",\n    get: function get() {\n      return this.data.byteLength;\n    }\n  }, {\n    key: \"VectorName\",\n    get: function get() {\n      return \"\".concat(Type[this.typeId], \"Vector\");\n    }\n  }, {\n    key: \"ArrayType\",\n    get: function get() {\n      return this.type.ArrayType;\n    }\n  }, {\n    key: \"values\",\n    get: function get() {\n      return this.data.values;\n    }\n  }, {\n    key: \"typeIds\",\n    get: function get() {\n      return this.data.typeIds;\n    }\n  }, {\n    key: \"nullBitmap\",\n    get: function get() {\n      return this.data.nullBitmap;\n    }\n  }, {\n    key: \"valueOffsets\",\n    get: function get() {\n      return this.data.valueOffsets;\n    }\n  }, {\n    key: Symbol.toStringTag,\n    get: function get() {\n      return \"\".concat(this.VectorName, \"<\").concat(this.type[Symbol.toStringTag], \">\");\n    }\n  }]);\n\n  return BaseVector;\n}(AbstractVector);\nBaseVector.prototype[Symbol.isConcatSpreadable] = true;","map":{"version":3,"sources":["vector/base.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Chunked } from './chunked';\nimport { clampRange } from '../util/vector';\nimport { VectorType as V } from '../interfaces';\nimport { AbstractVector, Vector, Clonable, Sliceable, Applicative } from '../vector';\n\n/** @ignore */\nexport interface BaseVector<T extends DataType = any> extends Clonable<V<T>>, Sliceable<V<T>>, Applicative<T, Chunked<T>> {\n    slice(begin?: number, end?: number): V<T>;\n    concat(...others: Vector<T>[]): Chunked<T>;\n    clone<R extends DataType = T>(data: Data<R>, children?: Vector<R>[]): V<R>;\n}\n\n/** @ignore */\nexport abstract class BaseVector<T extends DataType = any> extends AbstractVector<T>\n    implements Clonable<V<T>>, Sliceable<V<T>>, Applicative<T, Chunked<T>> {\n\n    protected _children?: Vector[];\n\n    constructor(data: Data<T>, children?: Vector[]) {\n        super();\n        this._children = children;\n        this.numChildren = data.childData.length;\n        this._bindDataAccessors(this.data = data);\n    }\n\n    public readonly data: Data<T>;\n    public readonly numChildren: number;\n\n    public get type() { return this.data.type; }\n    public get typeId() { return this.data.typeId; }\n    public get length() { return this.data.length; }\n    public get offset() { return this.data.offset; }\n    public get stride() { return this.data.stride; }\n    public get nullCount() { return this.data.nullCount; }\n    public get byteLength() { return this.data.byteLength; }\n    public get VectorName() { return `${Type[this.typeId]}Vector`; }\n\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n\n    public get values() { return this.data.values; }\n    public get typeIds() { return this.data.typeIds; }\n    public get nullBitmap() { return this.data.nullBitmap; }\n    public get valueOffsets() { return this.data.valueOffsets; }\n\n    public get [Symbol.toStringTag]() { return `${this.VectorName}<${this.type[Symbol.toStringTag]}>`; }\n\n    public clone<R extends DataType = T>(data: Data<R>, children = this._children) {\n        return Vector.new<R>(data, children) as any;\n    }\n\n    public concat(...others: Vector<T>[]) {\n        return Chunked.concat<T>(this, ...others);\n    }\n\n    public slice(begin?: number, end?: number) {\n        // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n        // clamp between 0 and length, and wrap around on negative indices, e.g.\n        // slice(-1, 5) or slice(5, -1)\n        return clampRange(this, begin, end, this._sliceInternal);\n    }\n\n    public isValid(index: number): boolean {\n        if (this.nullCount > 0) {\n            const idx = this.offset + index;\n            const val = this.nullBitmap[idx >> 3];\n            const mask = (val & (1 << (idx % 8)));\n            return mask !== 0;\n        }\n        return true;\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Vector<R> | null {\n        return index < 0 || index >= this.numChildren ? null : (\n            (this._children || (this._children = []))[index] ||\n            (this._children[index] = Vector.new<R>(this.data.childData[index] as Data<R>))\n        ) as Vector<R>;\n    }\n\n    public toJSON(): any { return [...this]; }\n\n    protected _sliceInternal(self: this, begin: number, end: number) {\n        return self.clone(self.data.slice(begin, end - begin), null!);\n    }\n\n    // @ts-ignore\n    protected _bindDataAccessors(data: Data<T>) {\n        // Implementation in src/vectors/index.ts due to circular dependency/packaging shenanigans\n    }\n}\n\n(BaseVector.prototype as any)[Symbol.isConcatSpreadable] = true;\n"]},"metadata":{},"sourceType":"module"}