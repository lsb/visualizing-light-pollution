{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { flatbuffers } from 'flatbuffers';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\nimport { Schema, Field } from '../../schema';\nimport { toUint8Array } from '../../util/buffer';\nimport { MessageHeader, MetadataVersion } from '../../enum';\nimport { instance as typeAssembler } from '../../visitor/typeassembler';\nimport { fieldFromJSON, schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON } from './json';\nvar Long = flatbuffers.Long;\nvar Builder = flatbuffers.Builder;\nvar ByteBuffer = flatbuffers.ByteBuffer;\nvar Type = Schema_.org.apache.arrow.flatbuf.Type;\nvar _Field = Schema_.org.apache.arrow.flatbuf.Field;\nvar _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nvar _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nvar _Message = Message_.org.apache.arrow.flatbuf.Message;\nvar _KeyValue = Schema_.org.apache.arrow.flatbuf.KeyValue;\nvar _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nvar _Endianness = Schema_.org.apache.arrow.flatbuf.Endianness;\nvar _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nvar _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nimport { DataType, Dictionary, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct, Union, Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, Int32 } from '../../type';\n/**\n * @ignore\n * @private\n **/\n\nexport class Message {\n  constructor(bodyLength, version, headerType, header) {\n    this._version = version;\n    this._headerType = headerType;\n    this.body = new Uint8Array(0);\n    header && (this._createHeader = () => header);\n    this._bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n  }\n  /** @nocollapse */\n\n\n  static fromJSON(msg, headerType) {\n    const message = new Message(0, MetadataVersion.V4, headerType);\n    message._createHeader = messageHeaderFromJSON(msg, headerType);\n    return message;\n  }\n  /** @nocollapse */\n\n\n  static decode(buf) {\n    buf = new ByteBuffer(toUint8Array(buf));\n\n    const _message = _Message.getRootAsMessage(buf);\n\n    const bodyLength = _message.bodyLength();\n\n    const version = _message.version();\n\n    const headerType = _message.headerType();\n\n    const message = new Message(bodyLength, version, headerType);\n    message._createHeader = decodeMessageHeader(_message, headerType);\n    return message;\n  }\n  /** @nocollapse */\n\n\n  static encode(message) {\n    let b = new Builder(),\n        headerOffset = -1;\n\n    if (message.isSchema()) {\n      headerOffset = Schema.encode(b, message.header());\n    } else if (message.isRecordBatch()) {\n      headerOffset = RecordBatch.encode(b, message.header());\n    } else if (message.isDictionaryBatch()) {\n      headerOffset = DictionaryBatch.encode(b, message.header());\n    }\n\n    _Message.startMessage(b);\n\n    _Message.addVersion(b, MetadataVersion.V4);\n\n    _Message.addHeader(b, headerOffset);\n\n    _Message.addHeaderType(b, message.headerType);\n\n    _Message.addBodyLength(b, new Long(message.bodyLength, 0));\n\n    _Message.finishMessageBuffer(b, _Message.endMessage(b));\n\n    return b.asUint8Array();\n  }\n  /** @nocollapse */\n\n\n  static from(header, bodyLength = 0) {\n    if (header instanceof Schema) {\n      return new Message(0, MetadataVersion.V4, MessageHeader.Schema, header);\n    }\n\n    if (header instanceof RecordBatch) {\n      return new Message(bodyLength, MetadataVersion.V4, MessageHeader.RecordBatch, header);\n    }\n\n    if (header instanceof DictionaryBatch) {\n      return new Message(bodyLength, MetadataVersion.V4, MessageHeader.DictionaryBatch, header);\n    }\n\n    throw new Error(`Unrecognized Message header: ${header}`);\n  }\n\n  get type() {\n    return this.headerType;\n  }\n\n  get version() {\n    return this._version;\n  }\n\n  get headerType() {\n    return this._headerType;\n  }\n\n  get bodyLength() {\n    return this._bodyLength;\n  }\n\n  header() {\n    return this._createHeader();\n  }\n\n  isSchema() {\n    return this.headerType === MessageHeader.Schema;\n  }\n\n  isRecordBatch() {\n    return this.headerType === MessageHeader.RecordBatch;\n  }\n\n  isDictionaryBatch() {\n    return this.headerType === MessageHeader.DictionaryBatch;\n  }\n\n}\n/**\n * @ignore\n * @private\n **/\n\nexport class RecordBatch {\n  get nodes() {\n    return this._nodes;\n  }\n\n  get length() {\n    return this._length;\n  }\n\n  get buffers() {\n    return this._buffers;\n  }\n\n  constructor(length, nodes, buffers) {\n    this._nodes = nodes;\n    this._buffers = buffers;\n    this._length = typeof length === 'number' ? length : length.low;\n  }\n\n}\n/**\n * @ignore\n * @private\n **/\n\nexport class DictionaryBatch {\n  get id() {\n    return this._id;\n  }\n\n  get data() {\n    return this._data;\n  }\n\n  get isDelta() {\n    return this._isDelta;\n  }\n\n  get length() {\n    return this.data.length;\n  }\n\n  get nodes() {\n    return this.data.nodes;\n  }\n\n  get buffers() {\n    return this.data.buffers;\n  }\n\n  constructor(data, id, isDelta = false) {\n    this._data = data;\n    this._isDelta = isDelta;\n    this._id = typeof id === 'number' ? id : id.low;\n  }\n\n}\n/**\n * @ignore\n * @private\n **/\n\nexport class BufferRegion {\n  constructor(offset, length) {\n    this.offset = typeof offset === 'number' ? offset : offset.low;\n    this.length = typeof length === 'number' ? length : length.low;\n  }\n\n}\n/**\n * @ignore\n * @private\n **/\n\nexport class FieldNode {\n  constructor(length, nullCount) {\n    this.length = typeof length === 'number' ? length : length.low;\n    this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n  }\n\n}\n/** @ignore */\n\nfunction messageHeaderFromJSON(message, type) {\n  return () => {\n    switch (type) {\n      case MessageHeader.Schema:\n        return Schema.fromJSON(message);\n\n      case MessageHeader.RecordBatch:\n        return RecordBatch.fromJSON(message);\n\n      case MessageHeader.DictionaryBatch:\n        return DictionaryBatch.fromJSON(message);\n    }\n\n    throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n  };\n}\n/** @ignore */\n\n\nfunction decodeMessageHeader(message, type) {\n  return () => {\n    switch (type) {\n      case MessageHeader.Schema:\n        return Schema.decode(message.header(new _Schema()));\n\n      case MessageHeader.RecordBatch:\n        return RecordBatch.decode(message.header(new _RecordBatch()), message.version());\n\n      case MessageHeader.DictionaryBatch:\n        return DictionaryBatch.decode(message.header(new _DictionaryBatch()), message.version());\n    }\n\n    throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n  };\n}\n\nField['encode'] = encodeField;\nField['decode'] = decodeField;\nField['fromJSON'] = fieldFromJSON;\nSchema['encode'] = encodeSchema;\nSchema['decode'] = decodeSchema;\nSchema['fromJSON'] = schemaFromJSON;\nRecordBatch['encode'] = encodeRecordBatch;\nRecordBatch['decode'] = decodeRecordBatch;\nRecordBatch['fromJSON'] = recordBatchFromJSON;\nDictionaryBatch['encode'] = encodeDictionaryBatch;\nDictionaryBatch['decode'] = decodeDictionaryBatch;\nDictionaryBatch['fromJSON'] = dictionaryBatchFromJSON;\nFieldNode['encode'] = encodeFieldNode;\nFieldNode['decode'] = decodeFieldNode;\nBufferRegion['encode'] = encodeBufferRegion;\nBufferRegion['decode'] = decodeBufferRegion;\n/** @ignore */\n\nfunction decodeSchema(_schema, dictionaries = new Map()) {\n  const fields = decodeSchemaFields(_schema, dictionaries);\n  return new Schema(fields, decodeCustomMetadata(_schema), dictionaries);\n}\n/** @ignore */\n\n\nfunction decodeRecordBatch(batch, version = MetadataVersion.V4) {\n  return new RecordBatch(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));\n}\n/** @ignore */\n\n\nfunction decodeDictionaryBatch(batch, version = MetadataVersion.V4) {\n  return new DictionaryBatch(RecordBatch.decode(batch.data(), version), batch.id(), batch.isDelta());\n}\n/** @ignore */\n\n\nfunction decodeBufferRegion(b) {\n  return new BufferRegion(b.offset(), b.length());\n}\n/** @ignore */\n\n\nfunction decodeFieldNode(f) {\n  return new FieldNode(f.length(), f.nullCount());\n}\n/** @ignore */\n\n\nfunction decodeFieldNodes(batch) {\n  const nodes = [];\n\n  for (let f, i = -1, j = -1, n = batch.nodesLength(); ++i < n;) {\n    if (f = batch.nodes(i)) {\n      nodes[++j] = FieldNode.decode(f);\n    }\n  }\n\n  return nodes;\n}\n/** @ignore */\n\n\nfunction decodeBuffers(batch, version) {\n  const bufferRegions = [];\n\n  for (let b, i = -1, j = -1, n = batch.buffersLength(); ++i < n;) {\n    if (b = batch.buffers(i)) {\n      // If this Arrow buffer was written before version 4,\n      // advance the buffer's bb_pos 8 bytes to skip past\n      // the now-removed page_id field\n      if (version < MetadataVersion.V4) {\n        b.bb_pos += 8 * (i + 1);\n      }\n\n      bufferRegions[++j] = BufferRegion.decode(b);\n    }\n  }\n\n  return bufferRegions;\n}\n/** @ignore */\n\n\nfunction decodeSchemaFields(schema, dictionaries) {\n  const fields = [];\n\n  for (let f, i = -1, j = -1, n = schema.fieldsLength(); ++i < n;) {\n    if (f = schema.fields(i)) {\n      fields[++j] = Field.decode(f, dictionaries);\n    }\n  }\n\n  return fields;\n}\n/** @ignore */\n\n\nfunction decodeFieldChildren(field, dictionaries) {\n  const children = [];\n\n  for (let f, i = -1, j = -1, n = field.childrenLength(); ++i < n;) {\n    if (f = field.children(i)) {\n      children[++j] = Field.decode(f, dictionaries);\n    }\n  }\n\n  return children;\n}\n/** @ignore */\n\n\nfunction decodeField(f, dictionaries) {\n  let id;\n  let field;\n  let type;\n  let keys;\n  let dictType;\n  let dictMeta; // If no dictionary encoding\n\n  if (!dictionaries || !(dictMeta = f.dictionary())) {\n    type = decodeFieldType(f, decodeFieldChildren(f, dictionaries));\n    field = new Field(f.name(), type, f.nullable(), decodeCustomMetadata(f));\n  } // tslint:disable\n  // If dictionary encoded and the first time we've seen this dictionary id, decode\n  // the data type and child fields, then wrap in a Dictionary type and insert the\n  // data type into the dictionary types map.\n  else if (!dictionaries.has(id = dictMeta.id().low)) {\n      // a dictionary index defaults to signed 32 bit int if unspecified\n      keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) : new Int32();\n      dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f, dictionaries)));\n      dictType = new Dictionary(type, keys, id, dictMeta.isOrdered());\n      field = new Field(f.name(), dictType, f.nullable(), decodeCustomMetadata(f));\n    } // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) : new Int32();\n        dictType = new Dictionary(dictionaries.get(id), keys, id, dictMeta.isOrdered());\n        field = new Field(f.name(), dictType, f.nullable(), decodeCustomMetadata(f));\n      }\n\n  return field || null;\n}\n/** @ignore */\n\n\nfunction decodeCustomMetadata(parent) {\n  const data = new Map();\n\n  if (parent) {\n    for (let entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\n      if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n        data.set(key, entry.value());\n      }\n    }\n  }\n\n  return data;\n}\n/** @ignore */\n\n\nfunction decodeIndexType(_type) {\n  return new Int(_type.isSigned(), _type.bitWidth());\n}\n/** @ignore */\n\n\nfunction decodeFieldType(f, children) {\n  const typeId = f.typeType();\n\n  switch (typeId) {\n    case Type.NONE:\n      return new Null();\n\n    case Type.Null:\n      return new Null();\n\n    case Type.Binary:\n      return new Binary();\n\n    case Type.Utf8:\n      return new Utf8();\n\n    case Type.Bool:\n      return new Bool();\n\n    case Type.List:\n      return new List((children || [])[0]);\n\n    case Type.Struct_:\n      return new Struct(children || []);\n  }\n\n  switch (typeId) {\n    case Type.Int:\n      {\n        const t = f.type(new Schema_.org.apache.arrow.flatbuf.Int());\n        return new Int(t.isSigned(), t.bitWidth());\n      }\n\n    case Type.FloatingPoint:\n      {\n        const t = f.type(new Schema_.org.apache.arrow.flatbuf.FloatingPoint());\n        return new Float(t.precision());\n      }\n\n    case Type.Decimal:\n      {\n        const t = f.type(new Schema_.org.apache.arrow.flatbuf.Decimal());\n        return new Decimal(t.scale(), t.precision());\n      }\n\n    case Type.Date:\n      {\n        const t = f.type(new Schema_.org.apache.arrow.flatbuf.Date());\n        return new Date_(t.unit());\n      }\n\n    case Type.Time:\n      {\n        const t = f.type(new Schema_.org.apache.arrow.flatbuf.Time());\n        return new Time(t.unit(), t.bitWidth());\n      }\n\n    case Type.Timestamp:\n      {\n        const t = f.type(new Schema_.org.apache.arrow.flatbuf.Timestamp());\n        return new Timestamp(t.unit(), t.timezone());\n      }\n\n    case Type.Interval:\n      {\n        const t = f.type(new Schema_.org.apache.arrow.flatbuf.Interval());\n        return new Interval(t.unit());\n      }\n\n    case Type.Union:\n      {\n        const t = f.type(new Schema_.org.apache.arrow.flatbuf.Union());\n        return new Union(t.mode(), t.typeIdsArray() || [], children || []);\n      }\n\n    case Type.FixedSizeBinary:\n      {\n        const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeBinary());\n        return new FixedSizeBinary(t.byteWidth());\n      }\n\n    case Type.FixedSizeList:\n      {\n        const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeList());\n        return new FixedSizeList(t.listSize(), (children || [])[0]);\n      }\n\n    case Type.Map:\n      {\n        const t = f.type(new Schema_.org.apache.arrow.flatbuf.Map());\n        return new Map_((children || [])[0], t.keysSorted());\n      }\n  }\n\n  throw new Error(`Unrecognized type: \"${Type[typeId]}\" (${typeId})`);\n}\n/** @ignore */\n\n\nfunction encodeSchema(b, schema) {\n  const fieldOffsets = schema.fields.map(f => Field.encode(b, f));\n\n  _Schema.startFieldsVector(b, fieldOffsets.length);\n\n  const fieldsVectorOffset = _Schema.createFieldsVector(b, fieldOffsets);\n\n  const metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 : _Schema.createCustomMetadataVector(b, [...schema.metadata].map(([k, v]) => {\n    const key = b.createString(`${k}`);\n    const val = b.createString(`${v}`);\n\n    _KeyValue.startKeyValue(b);\n\n    _KeyValue.addKey(b, key);\n\n    _KeyValue.addValue(b, val);\n\n    return _KeyValue.endKeyValue(b);\n  }));\n\n  _Schema.startSchema(b);\n\n  _Schema.addFields(b, fieldsVectorOffset);\n\n  _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big);\n\n  if (metadataOffset !== -1) {\n    _Schema.addCustomMetadata(b, metadataOffset);\n  }\n\n  return _Schema.endSchema(b);\n}\n/** @ignore */\n\n\nfunction encodeField(b, field) {\n  let nameOffset = -1;\n  let typeOffset = -1;\n  let dictionaryOffset = -1;\n  let type = field.type;\n  let typeId = field.typeId;\n\n  if (!DataType.isDictionary(type)) {\n    typeOffset = typeAssembler.visit(type, b);\n  } else {\n    typeId = type.dictionary.typeId;\n    dictionaryOffset = typeAssembler.visit(type, b);\n    typeOffset = typeAssembler.visit(type.dictionary, b);\n  }\n\n  const childOffsets = (type.children || []).map(f => Field.encode(b, f));\n\n  const childrenVectorOffset = _Field.createChildrenVector(b, childOffsets);\n\n  const metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 : _Field.createCustomMetadataVector(b, [...field.metadata].map(([k, v]) => {\n    const key = b.createString(`${k}`);\n    const val = b.createString(`${v}`);\n\n    _KeyValue.startKeyValue(b);\n\n    _KeyValue.addKey(b, key);\n\n    _KeyValue.addValue(b, val);\n\n    return _KeyValue.endKeyValue(b);\n  }));\n\n  if (field.name) {\n    nameOffset = b.createString(field.name);\n  }\n\n  _Field.startField(b);\n\n  _Field.addType(b, typeOffset);\n\n  _Field.addTypeType(b, typeId);\n\n  _Field.addChildren(b, childrenVectorOffset);\n\n  _Field.addNullable(b, !!field.nullable);\n\n  if (nameOffset !== -1) {\n    _Field.addName(b, nameOffset);\n  }\n\n  if (dictionaryOffset !== -1) {\n    _Field.addDictionary(b, dictionaryOffset);\n  }\n\n  if (metadataOffset !== -1) {\n    _Field.addCustomMetadata(b, metadataOffset);\n  }\n\n  return _Field.endField(b);\n}\n/** @ignore */\n\n\nfunction encodeRecordBatch(b, recordBatch) {\n  const nodes = recordBatch.nodes || [];\n  const buffers = recordBatch.buffers || [];\n\n  _RecordBatch.startNodesVector(b, nodes.length);\n\n  nodes.slice().reverse().forEach(n => FieldNode.encode(b, n));\n  const nodesVectorOffset = b.endVector();\n\n  _RecordBatch.startBuffersVector(b, buffers.length);\n\n  buffers.slice().reverse().forEach(b_ => BufferRegion.encode(b, b_));\n  const buffersVectorOffset = b.endVector();\n\n  _RecordBatch.startRecordBatch(b);\n\n  _RecordBatch.addLength(b, new Long(recordBatch.length, 0));\n\n  _RecordBatch.addNodes(b, nodesVectorOffset);\n\n  _RecordBatch.addBuffers(b, buffersVectorOffset);\n\n  return _RecordBatch.endRecordBatch(b);\n}\n/** @ignore */\n\n\nfunction encodeDictionaryBatch(b, dictionaryBatch) {\n  const dataOffset = RecordBatch.encode(b, dictionaryBatch.data);\n\n  _DictionaryBatch.startDictionaryBatch(b);\n\n  _DictionaryBatch.addId(b, new Long(dictionaryBatch.id, 0));\n\n  _DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);\n\n  _DictionaryBatch.addData(b, dataOffset);\n\n  return _DictionaryBatch.endDictionaryBatch(b);\n}\n/** @ignore */\n\n\nfunction encodeFieldNode(b, node) {\n  return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\n}\n/** @ignore */\n\n\nfunction encodeBufferRegion(b, node) {\n  return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\n}\n/** @ignore */\n\n\nconst platformIsLittleEndian = function () {\n  const buffer = new ArrayBuffer(2);\n  new DataView(buffer).setInt16(0, 256, true\n  /* littleEndian */\n  ); // Int16Array uses the platform's endianness.\n\n  return new Int16Array(buffer)[0] === 256;\n}();","map":{"version":3,"sources":["ipc/metadata/message.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\n\nimport { Schema, Field } from '../../schema';\nimport { toUint8Array } from '../../util/buffer';\nimport { ArrayBufferViewInput } from '../../util/buffer';\nimport { MessageHeader, MetadataVersion } from '../../enum';\nimport { instance as typeAssembler } from '../../visitor/typeassembler';\nimport { fieldFromJSON, schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON } from './json';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport Type = Schema_.org.apache.arrow.flatbuf.Type;\nimport _Field = Schema_.org.apache.arrow.flatbuf.Field;\nimport _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nimport _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nimport _Message = Message_.org.apache.arrow.flatbuf.Message;\nimport _KeyValue = Schema_.org.apache.arrow.flatbuf.KeyValue;\nimport _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nimport _Endianness = Schema_.org.apache.arrow.flatbuf.Endianness;\nimport _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nimport _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nimport _DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\n\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type';\n\n/**\n * @ignore\n * @private\n **/\nexport class Message<T extends MessageHeader = any> {\n\n    /** @nocollapse */\n    public static fromJSON<T extends MessageHeader>(msg: any, headerType: T): Message<T> {\n        const message = new Message(0, MetadataVersion.V4, headerType);\n        message._createHeader = messageHeaderFromJSON(msg, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const _message = _Message.getRootAsMessage(buf);\n        const bodyLength: Long = _message.bodyLength()!;\n        const version: MetadataVersion = _message.version();\n        const headerType: MessageHeader = _message.headerType();\n        const message = new Message(bodyLength, version, headerType);\n        message._createHeader = decodeMessageHeader(_message, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static encode<T extends MessageHeader>(message: Message<T>) {\n        let b = new Builder(), headerOffset = -1;\n        if (message.isSchema()) {\n            headerOffset = Schema.encode(b, message.header() as Schema);\n        } else if (message.isRecordBatch()) {\n            headerOffset = RecordBatch.encode(b, message.header() as RecordBatch);\n        } else if (message.isDictionaryBatch()) {\n            headerOffset = DictionaryBatch.encode(b, message.header() as DictionaryBatch);\n        }\n        _Message.startMessage(b);\n        _Message.addVersion(b, MetadataVersion.V4);\n        _Message.addHeader(b, headerOffset);\n        _Message.addHeaderType(b, message.headerType);\n        _Message.addBodyLength(b, new Long(message.bodyLength, 0));\n        _Message.finishMessageBuffer(b, _Message.endMessage(b));\n        return b.asUint8Array();\n    }\n\n    /** @nocollapse */\n    public static from(header: Schema | RecordBatch | DictionaryBatch, bodyLength = 0) {\n        if (header instanceof Schema) {\n            return new Message(0, MetadataVersion.V4, MessageHeader.Schema, header);\n        }\n        if (header instanceof RecordBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.RecordBatch, header);\n        }\n        if (header instanceof DictionaryBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.DictionaryBatch, header);\n        }\n        throw new Error(`Unrecognized Message header: ${header}`);\n    }\n\n    // @ts-ignore\n    public body: Uint8Array;\n    protected _headerType: T;\n    protected _bodyLength: number;\n    protected _version: MetadataVersion;\n    public get type() { return this.headerType; }\n    public get version() { return this._version; }\n    public get headerType() { return this._headerType; }\n    public get bodyLength() { return this._bodyLength; }\n    // @ts-ignore\n    protected _createHeader: MessageHeaderDecoder;\n    public header() { return this._createHeader<T>(); }\n    public isSchema(): this is Message<MessageHeader.Schema> { return this.headerType === MessageHeader.Schema; }\n    public isRecordBatch(): this is Message<MessageHeader.RecordBatch> { return this.headerType === MessageHeader.RecordBatch; }\n    public isDictionaryBatch(): this is Message<MessageHeader.DictionaryBatch> { return this.headerType === MessageHeader.DictionaryBatch; }\n\n    constructor(bodyLength: Long | number, version: MetadataVersion, headerType: T, header?: any) {\n        this._version = version;\n        this._headerType = headerType;\n        this.body = new Uint8Array(0);\n        header && (this._createHeader = () => header);\n        this._bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class RecordBatch {\n    protected _length: number;\n    protected _nodes: FieldNode[];\n    protected _buffers: BufferRegion[];\n    public get nodes() { return this._nodes; }\n    public get length() { return this._length; }\n    public get buffers() { return this._buffers; }\n    constructor(length: Long | number, nodes: FieldNode[], buffers: BufferRegion[]) {\n        this._nodes = nodes;\n        this._buffers = buffers;\n        this._length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class DictionaryBatch {\n\n    protected _id: number;\n    protected _isDelta: boolean;\n    protected _data: RecordBatch;\n    public get id() { return this._id; }\n    public get data() { return this._data; }\n    public get isDelta() { return this._isDelta; }\n    public get length(): number { return this.data.length; }\n    public get nodes(): FieldNode[] { return this.data.nodes; }\n    public get buffers(): BufferRegion[] { return this.data.buffers; }\n\n    constructor(data: RecordBatch, id: Long | number, isDelta: boolean = false) {\n        this._data = data;\n        this._isDelta = isDelta;\n        this._id = typeof id === 'number' ? id : id.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class BufferRegion {\n    public offset: number;\n    public length: number;\n    constructor(offset: Long | number, length: Long | number) {\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class FieldNode {\n    public length: number;\n    public nullCount: number;\n    constructor(length: Long | number, nullCount: Long | number) {\n        this.length = typeof length === 'number' ? length : length.low;\n        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n    }\n}\n\n/** @ignore */\nfunction messageHeaderFromJSON(message: any, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.fromJSON(message);\n            case MessageHeader.RecordBatch: return RecordBatch.fromJSON(message);\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.fromJSON(message);\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\n/** @ignore */\nfunction decodeMessageHeader(message: _Message, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.decode(message.header(new _Schema())!);\n            case MessageHeader.RecordBatch: return RecordBatch.decode(message.header(new _RecordBatch())!, message.version());\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.decode(message.header(new _DictionaryBatch())!, message.version());\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\nField['encode'] = encodeField;\nField['decode'] = decodeField;\nField['fromJSON'] = fieldFromJSON;\n\nSchema['encode'] = encodeSchema;\nSchema['decode'] = decodeSchema;\nSchema['fromJSON'] = schemaFromJSON;\n\nRecordBatch['encode'] = encodeRecordBatch;\nRecordBatch['decode'] = decodeRecordBatch;\nRecordBatch['fromJSON'] = recordBatchFromJSON;\n\nDictionaryBatch['encode'] = encodeDictionaryBatch;\nDictionaryBatch['decode'] = decodeDictionaryBatch;\nDictionaryBatch['fromJSON'] = dictionaryBatchFromJSON;\n\nFieldNode['encode'] = encodeFieldNode;\nFieldNode['decode'] = decodeFieldNode;\n\nBufferRegion['encode'] = encodeBufferRegion;\nBufferRegion['decode'] = decodeBufferRegion;\n\ndeclare module '../../schema' {\n    namespace Field {\n        export { encodeField as encode };\n        export { decodeField as decode };\n        export { fieldFromJSON as fromJSON };\n    }\n    namespace Schema {\n        export { encodeSchema as encode };\n        export { decodeSchema as decode };\n        export { schemaFromJSON as fromJSON };\n    }\n}\n\ndeclare module './message' {\n    namespace RecordBatch {\n        export { encodeRecordBatch as encode };\n        export { decodeRecordBatch as decode };\n        export { recordBatchFromJSON as fromJSON };\n    }\n    namespace DictionaryBatch {\n        export { encodeDictionaryBatch as encode };\n        export { decodeDictionaryBatch as decode };\n        export { dictionaryBatchFromJSON as fromJSON };\n    }\n    namespace FieldNode {\n        export { encodeFieldNode as encode };\n        export { decodeFieldNode as decode };\n    }\n    namespace BufferRegion {\n        export { encodeBufferRegion as encode };\n        export { decodeBufferRegion as decode };\n    }\n}\n\n/** @ignore */\nfunction decodeSchema(_schema: _Schema, dictionaries: Map<number, DataType> = new Map()) {\n    const fields = decodeSchemaFields(_schema, dictionaries);\n    return new Schema(fields, decodeCustomMetadata(_schema), dictionaries);\n}\n\n/** @ignore */\nfunction decodeRecordBatch(batch: _RecordBatch, version = MetadataVersion.V4) {\n    return new RecordBatch(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));\n}\n\n/** @ignore */\nfunction decodeDictionaryBatch(batch: _DictionaryBatch, version = MetadataVersion.V4) {\n    return new DictionaryBatch(RecordBatch.decode(batch.data()!, version), batch.id(), batch.isDelta());\n}\n\n/** @ignore */\nfunction decodeBufferRegion(b: _Buffer) {\n    return new BufferRegion(b.offset(), b.length());\n}\n\n/** @ignore */\nfunction decodeFieldNode(f: _FieldNode) {\n    return new FieldNode(f.length(), f.nullCount());\n}\n\n/** @ignore */\nfunction decodeFieldNodes(batch: _RecordBatch) {\n    const nodes = [] as FieldNode[];\n    for (let f, i = -1, j = -1, n = batch.nodesLength(); ++i < n;) {\n        if (f = batch.nodes(i)) {\n            nodes[++j] = FieldNode.decode(f);\n        }\n    }\n    return nodes;\n}\n\n/** @ignore */\nfunction decodeBuffers(batch: _RecordBatch, version: MetadataVersion) {\n    const bufferRegions = [] as BufferRegion[];\n    for (let b, i = -1, j = -1, n = batch.buffersLength(); ++i < n;) {\n        if (b = batch.buffers(i)) {\n        // If this Arrow buffer was written before version 4,\n        // advance the buffer's bb_pos 8 bytes to skip past\n        // the now-removed page_id field\n        if (version < MetadataVersion.V4) {\n                b.bb_pos += (8 * (i + 1));\n            }\n            bufferRegions[++j] = BufferRegion.decode(b);\n        }\n    }\n    return bufferRegions;\n}\n\n/** @ignore */\nfunction decodeSchemaFields(schema: _Schema, dictionaries?: Map<number, DataType>) {\n    const fields = [] as Field[];\n    for (let f, i = -1, j = -1, n = schema.fieldsLength(); ++i < n;) {\n        if (f = schema.fields(i)) {\n            fields[++j] = Field.decode(f, dictionaries);\n        }\n    }\n    return fields;\n}\n\n/** @ignore */\nfunction decodeFieldChildren(field: _Field, dictionaries?: Map<number, DataType>): Field[] {\n    const children = [] as Field[];\n    for (let f, i = -1, j = -1, n = field.childrenLength(); ++i < n;) {\n        if (f = field.children(i)) {\n            children[++j] = Field.decode(f, dictionaries);\n        }\n    }\n    return children;\n}\n\n/** @ignore */\nfunction decodeField(f: _Field, dictionaries?: Map<number, DataType>) {\n\n    let id: number;\n    let field: Field | void;\n    let type: DataType<any>;\n    let keys: _Int | TKeys | null;\n    let dictType: Dictionary;\n    let dictMeta: _DictionaryEncoding | null;\n\n    // If no dictionary encoding\n    if (!dictionaries || !(dictMeta = f.dictionary())) {\n        type = decodeFieldType(f, decodeFieldChildren(f, dictionaries));\n        field = new Field(f.name()!, type, f.nullable(), decodeCustomMetadata(f));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta.id().low)) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f, dictionaries)));\n        dictType = new Dictionary(type, keys, id, dictMeta.isOrdered());\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta.isOrdered());\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n    }\n    return field || null;\n}\n\n/** @ignore */\nfunction decodeCustomMetadata(parent?: _Schema | _Field | null) {\n    const data = new Map<string, string>();\n    if (parent) {\n        for (let entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\n            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n                data.set(key, entry.value()!);\n            }\n        }\n    }\n    return data;\n}\n\n/** @ignore */\nfunction decodeIndexType(_type: _Int) {\n    return new Int(_type.isSigned(), _type.bitWidth() as IntBitWidth);\n}\n\n/** @ignore */\nfunction decodeFieldType(f: _Field, children?: Field[]): DataType<any> {\n\n    const typeId = f.typeType();\n\n    switch (typeId) {\n        case Type.NONE:    return new Null();\n        case Type.Null:    return new Null();\n        case Type.Binary:  return new Binary();\n        case Type.Utf8:    return new Utf8();\n        case Type.Bool:    return new Bool();\n        case Type.List:    return new List((children || [])[0]);\n        case Type.Struct_: return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case Type.Int: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Int())!;\n            return new Int(t.isSigned(), t.bitWidth());\n        }\n        case Type.FloatingPoint: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FloatingPoint())!;\n            return new Float(t.precision());\n        }\n        case Type.Decimal: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Decimal())!;\n            return new Decimal(t.scale(), t.precision());\n        }\n        case Type.Date: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Date())!;\n            return new Date_(t.unit());\n        }\n        case Type.Time: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Time())!;\n            return new Time(t.unit(), t.bitWidth() as TimeBitWidth);\n        }\n        case Type.Timestamp: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Timestamp())!;\n            return new Timestamp(t.unit(), t.timezone());\n        }\n        case Type.Interval: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Interval())!;\n            return new Interval(t.unit());\n        }\n        case Type.Union: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Union())!;\n            return new Union(t.mode(), t.typeIdsArray() || [], children || []);\n        }\n        case Type.FixedSizeBinary: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeBinary())!;\n            return new FixedSizeBinary(t.byteWidth());\n        }\n        case Type.FixedSizeList: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeList())!;\n            return new FixedSizeList(t.listSize(), (children || [])[0]);\n        }\n        case Type.Map: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Map())!;\n            return new Map_((children || [])[0], t.keysSorted());\n        }\n    }\n    throw new Error(`Unrecognized type: \"${Type[typeId]}\" (${typeId})`);\n}\n\n/** @ignore */\nfunction encodeSchema(b: Builder, schema: Schema) {\n\n    const fieldOffsets = schema.fields.map((f) => Field.encode(b, f));\n\n    _Schema.startFieldsVector(b, fieldOffsets.length);\n\n    const fieldsVectorOffset = _Schema.createFieldsVector(b, fieldOffsets);\n\n    const metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 :\n        _Schema.createCustomMetadataVector(b, [...schema.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    _Schema.startSchema(b);\n    _Schema.addFields(b, fieldsVectorOffset);\n    _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big);\n\n    if (metadataOffset !== -1) { _Schema.addCustomMetadata(b, metadataOffset); }\n\n    return _Schema.endSchema(b);\n}\n\n/** @ignore */\nfunction encodeField(b: Builder, field: Field) {\n\n    let nameOffset = -1;\n    let typeOffset = -1;\n    let dictionaryOffset = -1;\n\n    let type = field.type;\n    let typeId: Type = <any> field.typeId;\n\n    if (!DataType.isDictionary(type)) {\n        typeOffset = typeAssembler.visit(type, b)!;\n    } else {\n        typeId = type.dictionary.typeId;\n        dictionaryOffset = typeAssembler.visit(type, b)!;\n        typeOffset = typeAssembler.visit(type.dictionary, b)!;\n    }\n\n    const childOffsets = (type.children || []).map((f: Field) => Field.encode(b, f));\n    const childrenVectorOffset = _Field.createChildrenVector(b, childOffsets);\n\n    const metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 :\n        _Field.createCustomMetadataVector(b, [...field.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    if (field.name) {\n        nameOffset = b.createString(field.name);\n    }\n\n    _Field.startField(b);\n    _Field.addType(b, typeOffset);\n    _Field.addTypeType(b, typeId);\n    _Field.addChildren(b, childrenVectorOffset);\n    _Field.addNullable(b, !!field.nullable);\n\n    if (nameOffset !== -1) { _Field.addName(b, nameOffset); }\n    if (dictionaryOffset !== -1) { _Field.addDictionary(b, dictionaryOffset); }\n    if (metadataOffset !== -1) { _Field.addCustomMetadata(b, metadataOffset); }\n\n    return _Field.endField(b);\n}\n\n/** @ignore */\nfunction encodeRecordBatch(b: Builder, recordBatch: RecordBatch) {\n\n    const nodes = recordBatch.nodes || [];\n    const buffers = recordBatch.buffers || [];\n\n    _RecordBatch.startNodesVector(b, nodes.length);\n    nodes.slice().reverse().forEach((n) => FieldNode.encode(b, n));\n\n    const nodesVectorOffset = b.endVector();\n\n    _RecordBatch.startBuffersVector(b, buffers.length);\n    buffers.slice().reverse().forEach((b_) => BufferRegion.encode(b, b_));\n\n    const buffersVectorOffset = b.endVector();\n\n    _RecordBatch.startRecordBatch(b);\n    _RecordBatch.addLength(b, new Long(recordBatch.length, 0));\n    _RecordBatch.addNodes(b, nodesVectorOffset);\n    _RecordBatch.addBuffers(b, buffersVectorOffset);\n    return _RecordBatch.endRecordBatch(b);\n}\n\n/** @ignore */\nfunction encodeDictionaryBatch(b: Builder, dictionaryBatch: DictionaryBatch) {\n    const dataOffset = RecordBatch.encode(b, dictionaryBatch.data);\n    _DictionaryBatch.startDictionaryBatch(b);\n    _DictionaryBatch.addId(b, new Long(dictionaryBatch.id, 0));\n    _DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);\n    _DictionaryBatch.addData(b, dataOffset);\n    return _DictionaryBatch.endDictionaryBatch(b);\n}\n\n/** @ignore */\nfunction encodeFieldNode(b: Builder, node: FieldNode) {\n    return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\n}\n\n/** @ignore */\nfunction encodeBufferRegion(b: Builder, node: BufferRegion) {\n    return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\n}\n\n/** @ignore */\nconst platformIsLittleEndian = (function() {\n    const buffer = new ArrayBuffer(2);\n    new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n    // Int16Array uses the platform's endianness.\n    return new Int16Array(buffer)[0] === 256;\n})();\n\n/** @ignore */\ntype MessageHeaderDecoder = <T extends MessageHeader>() => T extends MessageHeader.Schema ? Schema\n                                                         : T extends MessageHeader.RecordBatch ? RecordBatch\n                                                         : T extends MessageHeader.DictionaryBatch ? DictionaryBatch : never;\n"]},"metadata":{},"sourceType":"module"}