{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { getBlob } from './get-blob';\nvar imagebitmapOptionsSupported = true;\nexport default function parseToImageBitmap(_x, _x2, _x3) {\n  return _parseToImageBitmap.apply(this, arguments);\n}\n\nfunction _parseToImageBitmap() {\n  _parseToImageBitmap = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(arrayBuffer, options, url) {\n    var blob, imagebitmapOptions;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            blob = getBlob(arrayBuffer, url);\n            imagebitmapOptions = options && options.imagebitmap;\n\n            if (isEmptyObject(imagebitmapOptions) || !imagebitmapOptionsSupported) {\n              imagebitmapOptions = null;\n            }\n\n            if (!imagebitmapOptions) {\n              _context.next = 14;\n              break;\n            }\n\n            _context.prev = 4;\n            _context.next = 7;\n            return createImageBitmap(blob, imagebitmapOptions);\n\n          case 7:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](4);\n            console.warn(_context.t0);\n            imagebitmapOptionsSupported = false;\n\n          case 14:\n            _context.next = 16;\n            return createImageBitmap(blob);\n\n          case 16:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[4, 10]]);\n  }));\n  return _parseToImageBitmap.apply(this, arguments);\n}\n\nvar EMPTY_OBJECT = {};\n\nfunction isEmptyObject(object) {\n  for (var key in object || EMPTY_OBJECT) {\n    return true;\n  }\n\n  return false;\n}","map":{"version":3,"sources":["../../../../src/lib/parsers/parse-to-image-bitmap.js"],"names":["imagebitmapOptionsSupported","blob","getBlob","imagebitmapOptions","options","isEmptyObject","createImageBitmap","console","EMPTY_OBJECT","object"],"mappings":";;AACA,SAAA,OAAA,QAAA,YAAA;AAMA,IAAIA,2BAA2B,GAA/B,IAAA;AAGA,eAAA,SAAA,kBAAA,CAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA,SAAA,mBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;;mEAAe,SAAA,OAAA,CAAA,WAAA,EAAA,OAAA,EAAA,GAAA,EAAA;AAAA,QAAA,IAAA,EAAA,kBAAA;AAAA,WAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,aAAA,CAAA,EAAA;AAAA,gBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,eAAA,CAAA;AACPC,YAAAA,IADO,GACAC,OAAO,CAAA,WAAA,EADP,GACO,CAAdD;AACFE,YAAAA,kBAFS,GAEYC,OAAO,IAAIA,OAAO,CAF9B,WAETD;;AAIJ,gBAAIE,aAAa,CAAbA,kBAAa,CAAbA,IAAqC,CAAzC,2BAAA,EAAuE;AACrEF,cAAAA,kBAAkB,GAAlBA,IAAAA;AACD;;AARY,gBAAA,CAAA,kBAAA,EAAA;AAAA,cAAA,QAAA,CAAA,IAAA,GAAA,EAAA;AAAA;AAAA;;AAAA,YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA,YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA,mBAaIG,iBAAiB,CAAA,IAAA,EAbrB,kBAaqB,CAbrB;;AAAA,eAAA,CAAA;AAAA,mBAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAAA,QAAA,CAAA,IAAA,CAAA;;AAAA,eAAA,EAAA;AAAA,YAAA,QAAA,CAAA,IAAA,GAAA,EAAA;AAAA,YAAA,QAAA,CAAA,EAAA,GAAA,QAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA;AAeTC,YAAAA,OAAO,CAAPA,IAAAA,CAAAA,QAAAA,CAAAA,EAAAA;AACAP,YAAAA,2BAA2B,GAA3BA,KAAAA;;AAhBS,eAAA,EAAA;AAAA,YAAA,QAAA,CAAA,IAAA,GAAA,EAAA;AAAA,mBAoBAM,iBAAiB,CApBjB,IAoBiB,CApBjB;;AAAA,eAAA,EAAA;AAAA,mBAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAAA,QAAA,CAAA,IAAA,CAAA;;AAAA,eAAA,EAAA;AAAA,eAAA,KAAA;AAAA,mBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,KAAA,EAAA,OAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,CAAA;;;;;AAuBf,IAAME,YAAY,GAAlB,EAAA;;AAEA,SAAA,aAAA,CAAA,MAAA,EAA+B;AAC7B,OAAK,IAAL,GAAA,IAAkBC,MAAM,IAAxB,YAAA,EAA0C;AACxC,WAAA,IAAA;AACD;;AACD,SAAA,KAAA;AACD","sourcesContent":["/* global createImageBitmap */\nimport {getBlob} from './get-blob';\n\n// Asynchronously parses an array buffer into an ImageBitmap - this contains the decoded data\n// Supported on worker threads, not supported on Edge, IE11 and Safari\n// https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap#Browser_compatibility\n\nlet imagebitmapOptionsSupported = true;\n\n// TODO - createImageBitmap supports source rect (5 param overload), pass through?\nexport default async function parseToImageBitmap(arrayBuffer, options, url) {\n  const blob = getBlob(arrayBuffer, url);\n  let imagebitmapOptions = options && options.imagebitmap;\n\n  // Firefox crashes if imagebitmapOptions is supplied\n  // Avoid supplying if not provided, remember if not supported\n  if (isEmptyObject(imagebitmapOptions) || !imagebitmapOptionsSupported) {\n    imagebitmapOptions = null;\n  }\n\n  if (imagebitmapOptions) {\n    try {\n      // @ts-ignore Options\n      return await createImageBitmap(blob, imagebitmapOptions);\n    } catch (error) {\n      console.warn(error); // eslint-disable-line\n      imagebitmapOptionsSupported = false;\n    }\n  }\n\n  return await createImageBitmap(blob);\n}\n\nconst EMPTY_OBJECT = {};\n\nfunction isEmptyObject(object) {\n  for (const key in object || EMPTY_OBJECT) {\n    return true;\n  }\n  return false;\n}\n"]},"metadata":{},"sourceType":"module"}