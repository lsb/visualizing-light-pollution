{"ast":null,"code":"var _jsxFileName = \"/home/lsb/wikidatageo/dark-sky-vacations/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport DeckGL from '@deck.gl/react';\nimport { TerrainLayer, TileLayer } from '@deck.gl/geo-layers';\nimport { BitmapLayer, ScatterplotLayer, TextLayer } from '@deck.gl/layers';\nimport { Table } from 'apache-arrow';\n\nconst logAndReturn = x => {\n  console.log(x);\n  return x;\n};\n\nfunction getURLFromTemplate(template, properties) {\n  if (!template || !template.length) {\n    return null;\n  }\n\n  if (Array.isArray(template)) {\n    const index = Math.abs(properties.x + properties.y) % template.length;\n    template = template[index];\n  }\n\n  return template.replace(/\\{ *([\\w_-]+) *\\}/g, (_, property) => properties[property]);\n} // where can i import this from lol\n\n\nclass SingleBatchArrowTileLayer extends TileLayer {\n  async getTileData(tile) {\n    const {\n      data\n    } = this.props; // console.log({tiledata: data});\n\n    tile.url = getURLFromTemplate(data, tile);\n\n    if (!tile.url) {\n      return null;\n    }\n\n    const table = await Table.from(fetch(tile.url, {\n      layer: this\n    })); // console.log({table});\n\n    return table;\n  }\n\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      initialViewState: {\n        longitude: -122.4,\n        latitude: 37.7,\n        zoom: 5,\n        pitch: 30,\n        bearing: 0,\n        maxZoom: 8\n      }\n    };\n  }\n\n  render() {\n    const light = new TileLayer({\n      data: './tiles/light-{z}-{x}-{y}.png',\n      tileSize: 1024,\n      maxZoom: 6,\n      wrapLongitude: true,\n      renderSubLayers: props => new BitmapLayer(logAndReturn(props), {\n        data: null,\n        image: props.data,\n        bounds: [props.tile.bbox.west, props.tile.bbox.south, props.tile.bbox.east, props.tile.bbox.north]\n      })\n    });\n    const lumaTopo = new TerrainLayer({\n      elevationDecoder: {\n        rScaler: 500,\n        gScaler: 0,\n        bScaler: 0,\n        offset: -131072\n      },\n      meshMaxError: 1,\n      elevationData: './tiles/light-{z}-{x}-{y}.png',\n      maxZoom: 8,\n      wrapLongitude: true,\n      texture: './tiles/texture-{z}-{x}-{y}.png',\n      material: {\n        ambient: 0.2,\n        diffuse: 1,\n        shininess: 128,\n        specularColor: [255, 192, 64]\n      }\n    });\n    const dataTilesPointText = new SingleBatchArrowTileLayer({\n      data: './data-tiles/geo-tile-{z}-{x}-{y}-light-0.arrow',\n      maxZoom: 6,\n      wrapLongitude: true,\n      pickable: true,\n      renderSubLayers: ({\n        tile: {\n          bbox: {\n            north,\n            south,\n            east,\n            west\n          }\n        },\n        data\n      }) => {\n        // data.then(thendata => console.log({thendata}));\n        const points = new ScatterplotLayer({\n          id: `points-${north}-${south}-${east}-${west}`,\n          data,\n          pickable: true,\n          onHover: h => alert(h),\n          onClick: h => console.log({\n            hiIGotClicked: h\n          }),\n          //  ({object, picked}) => this.setState({\n          //   pointpick: logAndReturn(picked) ? data.get(index) : null}),\n          radiusMinPixels: 10,\n          radiusMaxPixels: 40,\n          lineWidthUnits: 'pixels',\n          getRadius: 40,\n          wrapLongitude: true,\n          getPosition: ({\n            gt_lon,\n            gt_lat\n          }, {\n            index,\n            target\n          }) => [gt_lon, gt_lat],\n          getFillColor: [0, 128, 255],\n          getLineColor: [0, 0, 0]\n        });\n        return [points];\n      }\n    });\n    console.log({\n      state: this.state\n    });\n    const textPick = !this.state.pointpick ? null : new TextLayer({\n      id: `title-${this.state.pointpick.item_id}`,\n      data: [this.state.pointpick.site_page],\n      pickable: false,\n      characterSet: this.state.pointpick.site_page.split(''),\n      backgroundColor: [255, 255, 255],\n      getText: d => `   ${d}   `,\n      getSize: 20,\n      sizeUnits: 'pixels',\n      wrapLongitude: true,\n      getPosition: [this.state.pointpick.gt_lon, this.state.pointpick.gt_lat]\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(DeckGL, {\n      initialViewState: this.state.initialViewState,\n      controller: true,\n      layers: [dataTilesPointText, null && lumaTopo, textPick],\n      id: \"maincanvas\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/lsb/wikidatageo/dark-sky-vacations/src/App.js"],"names":["React","DeckGL","TerrainLayer","TileLayer","BitmapLayer","ScatterplotLayer","TextLayer","Table","logAndReturn","x","console","log","getURLFromTemplate","template","properties","length","Array","isArray","index","Math","abs","y","replace","_","property","SingleBatchArrowTileLayer","getTileData","tile","data","props","url","table","from","fetch","layer","App","Component","constructor","state","initialViewState","longitude","latitude","zoom","pitch","bearing","maxZoom","render","light","tileSize","wrapLongitude","renderSubLayers","image","bounds","bbox","west","south","east","north","lumaTopo","elevationDecoder","rScaler","gScaler","bScaler","offset","meshMaxError","elevationData","texture","material","ambient","diffuse","shininess","specularColor","dataTilesPointText","pickable","points","id","onHover","h","alert","onClick","hiIGotClicked","radiusMinPixels","radiusMaxPixels","lineWidthUnits","getRadius","getPosition","gt_lon","gt_lat","target","getFillColor","getLineColor","textPick","pointpick","item_id","site_page","characterSet","split","backgroundColor","getText","d","getSize","sizeUnits"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\n\nimport DeckGL from '@deck.gl/react';\nimport { TerrainLayer, TileLayer } from '@deck.gl/geo-layers';\nimport { BitmapLayer, ScatterplotLayer, TextLayer } from '@deck.gl/layers';\nimport { Table } from 'apache-arrow';\n\nconst logAndReturn = (x) => { console.log(x); return x };\n\nfunction getURLFromTemplate(template, properties) {\n  if (!template || !template.length) {\n    return null;\n  }\n  if (Array.isArray(template)) {\n    const index = Math.abs(properties.x + properties.y) % template.length;\n    template = template[index];\n  }\n  return template.replace(/\\{ *([\\w_-]+) *\\}/g, (_, property) => properties[property]);\n} // where can i import this from lol\n\nclass SingleBatchArrowTileLayer extends TileLayer {\n  async getTileData(tile) {\n    const {data} = this.props;\n    // console.log({tiledata: data});\n    tile.url = getURLFromTemplate(data, tile);\n    if(!tile.url) { return null }\n    const table = await Table.from(fetch(tile.url, {layer: this}));\n    // console.log({table});\n    return table;\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {initialViewState: {longitude: -122.4, latitude: 37.7, zoom: 5, pitch: 30, bearing: 0, maxZoom: 8}}\n  }\n  render() {\n    const light = new TileLayer({\n      data: './tiles/light-{z}-{x}-{y}.png',\n      tileSize: 1024,\n      maxZoom: 6,\n      wrapLongitude: true,\n      renderSubLayers: props => (\n        new BitmapLayer(logAndReturn(props), {\n          data: null,\n          image: props.data,\n          bounds: [props.tile.bbox.west, props.tile.bbox.south, props.tile.bbox.east, props.tile.bbox.north],\n        })\n      )\n    })\n    const lumaTopo = new TerrainLayer({\n      elevationDecoder: {\n        rScaler: 500,\n        gScaler: 0,\n        bScaler: 0,\n        offset: -131072,\n      },\n      meshMaxError: 1,\n      elevationData: './tiles/light-{z}-{x}-{y}.png',\n      maxZoom: 8,\n      wrapLongitude: true,\n      texture: './tiles/texture-{z}-{x}-{y}.png',\n      material: {\n        ambient: 0.2,\n        diffuse: 1,\n        shininess: 128,\n        specularColor: [255, 192, 64]\n      }\n    });\n    const dataTilesPointText = new SingleBatchArrowTileLayer({\n      data: './data-tiles/geo-tile-{z}-{x}-{y}-light-0.arrow',\n      maxZoom: 6,\n      wrapLongitude: true,\n      pickable: true,\n      renderSubLayers: ({tile: {bbox: {north, south, east, west}}, data}) => {\n        // data.then(thendata => console.log({thendata}));\n        const points = new ScatterplotLayer({\n          id: `points-${north}-${south}-${east}-${west}`,\n          data,\n          pickable: true,\n          onHover: h => alert(h),\n          onClick: h => console.log({hiIGotClicked: h}),\n          //  ({object, picked}) => this.setState({\n          //   pointpick: logAndReturn(picked) ? data.get(index) : null}),\n          radiusMinPixels: 10,\n          radiusMaxPixels: 40,\n          lineWidthUnits: 'pixels',\n          getRadius: 40,\n          wrapLongitude: true,\n          getPosition: ({gt_lon, gt_lat}, {index, target}) => [gt_lon, gt_lat],\n          getFillColor: [0,128,255],\n          getLineColor: [0,0,0],  \n        });\n        return [points];\n      }\n    });\n    console.log({state: this.state});\n    const textPick = !this.state.pointpick ? null : new TextLayer({\n      id: `title-${this.state.pointpick.item_id}`,\n      data: [this.state.pointpick.site_page],\n      pickable: false,\n      characterSet: this.state.pointpick.site_page.split(''),\n      backgroundColor: [255,255,255],\n      getText: (d) => `   ${d}   `,\n      getSize: 20,\n      sizeUnits: 'pixels',\n      wrapLongitude: true,\n      getPosition: [this.state.pointpick.gt_lon, this.state.pointpick.gt_lat],\n    });\n    return (\n      <div>\n        <div>\n          <DeckGL initialViewState={this.state.initialViewState} controller={true} layers={[dataTilesPointText, null && lumaTopo, textPick]} id={\"maincanvas\"} />\n        </div>\n        {/* <div id=\"colophon\">© Lee Butterman 2020. Made in Oakland, California.</div>\n        <div>\n          \n        </div> */}\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}