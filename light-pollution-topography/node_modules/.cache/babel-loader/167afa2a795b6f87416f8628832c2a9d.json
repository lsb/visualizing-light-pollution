{"ast":null,"code":"import _regeneratorRuntime from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _wrapAsyncGenerator from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator\";\nimport _awaitAsyncGenerator from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator\";\nimport _asyncIterator from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncIterator\";\nimport _asyncGeneratorDelegate from \"/home/lsb/wikidatageo/dark-sky-vacations/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncGeneratorDelegate\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(toArrayBufferViewIterator);\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { flatbuffers } from 'flatbuffers';\nimport { encodeUtf8 } from '../util/utf8';\nvar ByteBuffer = flatbuffers.ByteBuffer;\nimport { isPromise, isIterable, isAsyncIterable, isIteratorResult, BigInt64Array, BigUint64Array } from './compat';\n/** @ignore */\n\nvar SharedArrayBuf = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : ArrayBuffer;\n/** @ignore */\n\nfunction collapseContiguousByteRanges(chunks) {\n  var result = chunks[0] ? [chunks[0]] : [];\n  var xOffset, yOffset, xLen, yLen;\n\n  for (var x, y, i = 0, j = 0, n = chunks.length; ++i < n;) {\n    x = result[j];\n    y = chunks[i]; // continue if x and y don't share the same underlying ArrayBuffer, or if x isn't before y\n\n    if (!x || !y || x.buffer !== y.buffer || y.byteOffset < x.byteOffset) {\n      y && (result[++j] = y);\n      continue;\n    }\n\n    var _x6 = x;\n    xOffset = _x6.byteOffset;\n    xLen = _x6.byteLength;\n    var _y = y;\n    yOffset = _y.byteOffset;\n    yLen = _y.byteLength;\n\n    // continue if the byte ranges of x and y aren't contiguous\n    if (xOffset + xLen < yOffset || yOffset + yLen < xOffset) {\n      y && (result[++j] = y);\n      continue;\n    }\n\n    result[j] = new Uint8Array(x.buffer, xOffset, yOffset - xOffset + yLen);\n  }\n\n  return result;\n}\n/** @ignore */\n\n\nexport function memcpy(target, source) {\n  var targetByteOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var sourceByteLength = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : source.byteLength;\n  var targetByteLength = target.byteLength;\n  var dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);\n  var src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));\n  dst.set(src, targetByteOffset);\n  return target;\n}\n/** @ignore */\n\nexport function joinUint8Arrays(chunks, size) {\n  // collapse chunks that share the same underlying ArrayBuffer and whose byte ranges overlap,\n  // to avoid unnecessarily copying the bytes to do this buffer join. This is a common case during\n  // streaming, where we may be reading partial byte ranges out of the same underlying ArrayBuffer\n  var result = collapseContiguousByteRanges(chunks);\n  var byteLength = result.reduce(function (x, b) {\n    return x + b.byteLength;\n  }, 0);\n  var source, sliced, buffer;\n  var offset = 0,\n      index = -1,\n      length = Math.min(size || Infinity, byteLength);\n\n  for (var n = result.length; ++index < n;) {\n    source = result[index];\n    sliced = source.subarray(0, Math.min(source.length, length - offset));\n\n    if (length <= offset + sliced.length) {\n      if (sliced.length < source.length) {\n        result[index] = source.subarray(sliced.length);\n      } else if (sliced.length === source.length) {\n        index++;\n      }\n\n      buffer ? memcpy(buffer, sliced, offset) : buffer = sliced;\n      break;\n    }\n\n    memcpy(buffer || (buffer = new Uint8Array(length)), sliced, offset);\n    offset += sliced.length;\n  }\n\n  return [buffer || new Uint8Array(0), result.slice(index), byteLength - (buffer ? buffer.byteLength : 0)];\n}\nexport function toArrayBufferView(ArrayBufferViewCtor, input) {\n  var value = isIteratorResult(input) ? input.value : input;\n\n  if (value instanceof ArrayBufferViewCtor) {\n    if (ArrayBufferViewCtor === Uint8Array) {\n      // Node's `Buffer` class passes the `instanceof Uint8Array` check, but we need\n      // a real Uint8Array, since Buffer#slice isn't the same as Uint8Array#slice :/\n      return new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength);\n    }\n\n    return value;\n  }\n\n  if (!value) {\n    return new ArrayBufferViewCtor(0);\n  }\n\n  if (typeof value === 'string') {\n    value = encodeUtf8(value);\n  }\n\n  if (value instanceof ArrayBuffer) {\n    return new ArrayBufferViewCtor(value);\n  }\n\n  if (value instanceof SharedArrayBuf) {\n    return new ArrayBufferViewCtor(value);\n  }\n\n  if (value instanceof ByteBuffer) {\n    return toArrayBufferView(ArrayBufferViewCtor, value.bytes());\n  }\n\n  return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : value.byteLength <= 0 ? new ArrayBufferViewCtor(0) : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);\n}\n/** @ignore */\n\nexport var toInt8Array = function toInt8Array(input) {\n  return toArrayBufferView(Int8Array, input);\n};\n/** @ignore */\n\nexport var toInt16Array = function toInt16Array(input) {\n  return toArrayBufferView(Int16Array, input);\n};\n/** @ignore */\n\nexport var toInt32Array = function toInt32Array(input) {\n  return toArrayBufferView(Int32Array, input);\n};\n/** @ignore */\n\nexport var toBigInt64Array = function toBigInt64Array(input) {\n  return toArrayBufferView(BigInt64Array, input);\n};\n/** @ignore */\n\nexport var toUint8Array = function toUint8Array(input) {\n  return toArrayBufferView(Uint8Array, input);\n};\n/** @ignore */\n\nexport var toUint16Array = function toUint16Array(input) {\n  return toArrayBufferView(Uint16Array, input);\n};\n/** @ignore */\n\nexport var toUint32Array = function toUint32Array(input) {\n  return toArrayBufferView(Uint32Array, input);\n};\n/** @ignore */\n\nexport var toBigUint64Array = function toBigUint64Array(input) {\n  return toArrayBufferView(BigUint64Array, input);\n};\n/** @ignore */\n\nexport var toFloat32Array = function toFloat32Array(input) {\n  return toArrayBufferView(Float32Array, input);\n};\n/** @ignore */\n\nexport var toFloat64Array = function toFloat64Array(input) {\n  return toArrayBufferView(Float64Array, input);\n};\n/** @ignore */\n\nexport var toUint8ClampedArray = function toUint8ClampedArray(input) {\n  return toArrayBufferView(Uint8ClampedArray, input);\n};\n/** @ignore */\n\nvar pump = function pump(iterator) {\n  iterator.next();\n  return iterator;\n};\n/** @ignore */\n\n\nexport function toArrayBufferViewIterator(ArrayCtor, source) {\n  var wrap, buffers;\n  return _regeneratorRuntime.wrap(function toArrayBufferViewIterator$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          wrap = /*#__PURE__*/_regeneratorRuntime.mark(function wrap(x) {\n            return _regeneratorRuntime.wrap(function wrap$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.next = 2;\n                    return x;\n\n                  case 2:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, wrap);\n          });\n          buffers = typeof source === 'string' ? wrap(source) : ArrayBuffer.isView(source) ? wrap(source) : source instanceof ArrayBuffer ? wrap(source) : source instanceof SharedArrayBuf ? wrap(source) : !isIterable(source) ? wrap(source) : source;\n          return _context3.delegateYield(pump( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(it) {\n            var r;\n            return _regeneratorRuntime.wrap(function _callee$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    r = null;\n\n                  case 1:\n                    _context2.t0 = it;\n                    _context2.next = 4;\n                    return toArrayBufferView(ArrayCtor, r);\n\n                  case 4:\n                    _context2.t1 = _context2.sent;\n                    r = _context2.t0.next.call(_context2.t0, _context2.t1);\n\n                  case 6:\n                    if (!r.done) {\n                      _context2.next = 1;\n                      break;\n                    }\n\n                  case 7:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, _callee);\n          })(buffers[Symbol.iterator]())), \"t0\", 3);\n\n        case 3:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked);\n}\n/** @ignore */\n\nexport var toInt8ArrayIterator = function toInt8ArrayIterator(input) {\n  return toArrayBufferViewIterator(Int8Array, input);\n};\n/** @ignore */\n\nexport var toInt16ArrayIterator = function toInt16ArrayIterator(input) {\n  return toArrayBufferViewIterator(Int16Array, input);\n};\n/** @ignore */\n\nexport var toInt32ArrayIterator = function toInt32ArrayIterator(input) {\n  return toArrayBufferViewIterator(Int32Array, input);\n};\n/** @ignore */\n\nexport var toUint8ArrayIterator = function toUint8ArrayIterator(input) {\n  return toArrayBufferViewIterator(Uint8Array, input);\n};\n/** @ignore */\n\nexport var toUint16ArrayIterator = function toUint16ArrayIterator(input) {\n  return toArrayBufferViewIterator(Uint16Array, input);\n};\n/** @ignore */\n\nexport var toUint32ArrayIterator = function toUint32ArrayIterator(input) {\n  return toArrayBufferViewIterator(Uint32Array, input);\n};\n/** @ignore */\n\nexport var toFloat32ArrayIterator = function toFloat32ArrayIterator(input) {\n  return toArrayBufferViewIterator(Float32Array, input);\n};\n/** @ignore */\n\nexport var toFloat64ArrayIterator = function toFloat64ArrayIterator(input) {\n  return toArrayBufferViewIterator(Float64Array, input);\n};\n/** @ignore */\n\nexport var toUint8ClampedArrayIterator = function toUint8ClampedArrayIterator(input) {\n  return toArrayBufferViewIterator(Uint8ClampedArray, input);\n};\n/** @ignore */\n\nexport function toArrayBufferViewAsyncIterator(_x, _x2) {\n  return _toArrayBufferViewAsyncIterator.apply(this, arguments);\n}\n/** @ignore */\n\nfunction _toArrayBufferViewAsyncIterator() {\n  _toArrayBufferViewAsyncIterator = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(ArrayCtor, source) {\n    var wrap, emit, buffers;\n    return _regeneratorRuntime.wrap(function _callee6$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            if (!isPromise(source)) {\n              _context8.next = 13;\n              break;\n            }\n\n            _context8.t0 = _asyncGeneratorDelegate;\n            _context8.t1 = _asyncIterator;\n            _context8.t2 = toArrayBufferViewAsyncIterator;\n            _context8.t3 = ArrayCtor;\n            _context8.next = 7;\n            return _awaitAsyncGenerator(source);\n\n          case 7:\n            _context8.t4 = _context8.sent;\n            _context8.t5 = (0, _context8.t2)(_context8.t3, _context8.t4);\n            _context8.t6 = (0, _context8.t1)(_context8.t5);\n            _context8.t7 = _awaitAsyncGenerator;\n            return _context8.delegateYield((0, _context8.t0)(_context8.t6, _context8.t7), \"t8\", 12);\n\n          case 12:\n            return _context8.abrupt(\"return\", _context8.t8);\n\n          case 13:\n            wrap = /*#__PURE__*/function () {\n              var _ref = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(x) {\n                return _regeneratorRuntime.wrap(function _callee2$(_context4) {\n                  while (1) {\n                    switch (_context4.prev = _context4.next) {\n                      case 0:\n                        _context4.next = 2;\n                        return x;\n\n                      case 2:\n                      case \"end\":\n                        return _context4.stop();\n                    }\n                  }\n                }, _callee2);\n              }));\n\n              return function wrap(_x3) {\n                return _ref.apply(this, arguments);\n              };\n            }();\n\n            emit = /*#__PURE__*/function () {\n              var _ref2 = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(source) {\n                return _regeneratorRuntime.wrap(function _callee4$(_context6) {\n                  while (1) {\n                    switch (_context6.prev = _context6.next) {\n                      case 0:\n                        return _context6.delegateYield(_asyncGeneratorDelegate(_asyncIterator(pump( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(it) {\n                          var r;\n                          return _regeneratorRuntime.wrap(function _callee3$(_context5) {\n                            while (1) {\n                              switch (_context5.prev = _context5.next) {\n                                case 0:\n                                  r = null;\n\n                                case 1:\n                                  _context5.t0 = it;\n                                  _context5.next = 4;\n                                  return r && r.value;\n\n                                case 4:\n                                  _context5.t1 = _context5.sent;\n                                  r = _context5.t0.next.call(_context5.t0, _context5.t1);\n\n                                case 6:\n                                  if (!r.done) {\n                                    _context5.next = 1;\n                                    break;\n                                  }\n\n                                case 7:\n                                case \"end\":\n                                  return _context5.stop();\n                              }\n                            }\n                          }, _callee3);\n                        })(source[Symbol.iterator]()))), _awaitAsyncGenerator), \"t0\", 1);\n\n                      case 1:\n                      case \"end\":\n                        return _context6.stop();\n                    }\n                  }\n                }, _callee4);\n              }));\n\n              return function emit(_x4) {\n                return _ref2.apply(this, arguments);\n              };\n            }();\n\n            buffers = typeof source === 'string' ? wrap(source) // if string, wrap in an AsyncIterableIterator\n            : ArrayBuffer.isView(source) ? wrap(source) // if TypedArray, wrap in an AsyncIterableIterator\n            : source instanceof ArrayBuffer ? wrap(source) // if ArrayBuffer, wrap in an AsyncIterableIterator\n            : source instanceof SharedArrayBuf ? wrap(source) // if SharedArrayBuffer, wrap in an AsyncIterableIterator\n            : isIterable(source) ? emit(source) // If Iterable, wrap in an AsyncIterableIterator and compose the `next` values\n            : !isAsyncIterable(source) ? wrap(source) // If not an AsyncIterable, treat as a sentinel and wrap in an AsyncIterableIterator\n            : source; // otherwise if AsyncIterable, use it\n\n            return _context8.delegateYield(_asyncGeneratorDelegate(_asyncIterator(pump(function () {\n              var _ref3 = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(it) {\n                var r;\n                return _regeneratorRuntime.wrap(function _callee5$(_context7) {\n                  while (1) {\n                    switch (_context7.prev = _context7.next) {\n                      case 0:\n                        r = null;\n\n                      case 1:\n                        _context7.t0 = _awaitAsyncGenerator;\n                        _context7.t1 = it;\n                        _context7.next = 5;\n                        return toArrayBufferView(ArrayCtor, r);\n\n                      case 5:\n                        _context7.t2 = _context7.sent;\n                        _context7.t3 = _context7.t1.next.call(_context7.t1, _context7.t2);\n                        _context7.next = 9;\n                        return (0, _context7.t0)(_context7.t3);\n\n                      case 9:\n                        r = _context7.sent;\n\n                      case 10:\n                        if (!r.done) {\n                          _context7.next = 1;\n                          break;\n                        }\n\n                      case 11:\n                      case \"end\":\n                        return _context7.stop();\n                    }\n                  }\n                }, _callee5);\n              }));\n\n              return function (_x5) {\n                return _ref3.apply(this, arguments);\n              };\n            }()(buffers[Symbol.asyncIterator]()))), _awaitAsyncGenerator), \"t9\", 17);\n\n          case 17:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _toArrayBufferViewAsyncIterator.apply(this, arguments);\n}\n\nexport var toInt8ArrayAsyncIterator = function toInt8ArrayAsyncIterator(input) {\n  return toArrayBufferViewAsyncIterator(Int8Array, input);\n};\n/** @ignore */\n\nexport var toInt16ArrayAsyncIterator = function toInt16ArrayAsyncIterator(input) {\n  return toArrayBufferViewAsyncIterator(Int16Array, input);\n};\n/** @ignore */\n\nexport var toInt32ArrayAsyncIterator = function toInt32ArrayAsyncIterator(input) {\n  return toArrayBufferViewAsyncIterator(Int32Array, input);\n};\n/** @ignore */\n\nexport var toUint8ArrayAsyncIterator = function toUint8ArrayAsyncIterator(input) {\n  return toArrayBufferViewAsyncIterator(Uint8Array, input);\n};\n/** @ignore */\n\nexport var toUint16ArrayAsyncIterator = function toUint16ArrayAsyncIterator(input) {\n  return toArrayBufferViewAsyncIterator(Uint16Array, input);\n};\n/** @ignore */\n\nexport var toUint32ArrayAsyncIterator = function toUint32ArrayAsyncIterator(input) {\n  return toArrayBufferViewAsyncIterator(Uint32Array, input);\n};\n/** @ignore */\n\nexport var toFloat32ArrayAsyncIterator = function toFloat32ArrayAsyncIterator(input) {\n  return toArrayBufferViewAsyncIterator(Float32Array, input);\n};\n/** @ignore */\n\nexport var toFloat64ArrayAsyncIterator = function toFloat64ArrayAsyncIterator(input) {\n  return toArrayBufferViewAsyncIterator(Float64Array, input);\n};\n/** @ignore */\n\nexport var toUint8ClampedArrayAsyncIterator = function toUint8ClampedArrayAsyncIterator(input) {\n  return toArrayBufferViewAsyncIterator(Uint8ClampedArray, input);\n};\n/** @ignore */\n\nexport function rebaseValueOffsets(offset, length, valueOffsets) {\n  // If we have a non-zero offset, create a new offsets array with the values\n  // shifted by the start offset, such that the new start offset is 0\n  if (offset !== 0) {\n    valueOffsets = valueOffsets.slice(0, length + 1);\n\n    for (var i = -1; ++i <= length;) {\n      valueOffsets[i] += offset;\n    }\n  }\n\n  return valueOffsets;\n}\n/** @ignore */\n\nexport function compareArrayLike(a, b) {\n  var i = 0,\n      n = a.length;\n\n  if (n !== b.length) {\n    return false;\n  }\n\n  if (n > 0) {\n    do {\n      if (a[i] !== b[i]) {\n        return false;\n      }\n    } while (++i < n);\n  }\n\n  return true;\n}","map":{"version":3,"sources":["util/buffer.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport { encodeUtf8 } from '../util/utf8';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport { TypedArray, TypedArrayConstructor } from '../interfaces';\nimport { BigIntArray, BigIntArrayConstructor } from '../interfaces';\nimport { isPromise, isIterable, isAsyncIterable, isIteratorResult, BigInt64Array, BigUint64Array } from './compat';\n\n/** @ignore */\nconst SharedArrayBuf = (typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : ArrayBuffer);\n\n/** @ignore */\nfunction collapseContiguousByteRanges(chunks: Uint8Array[]) {\n    let result = chunks[0] ? [chunks[0]] : [];\n    let xOffset: number, yOffset: number, xLen: number, yLen: number;\n    for (let x, y, i = 0, j = 0, n = chunks.length; ++i < n;) {\n        x = result[j];\n        y = chunks[i];\n        // continue if x and y don't share the same underlying ArrayBuffer, or if x isn't before y\n        if (!x || !y || x.buffer !== y.buffer || y.byteOffset < x.byteOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        ({ byteOffset: xOffset, byteLength: xLen } = x);\n        ({ byteOffset: yOffset, byteLength: yLen } = y);\n        // continue if the byte ranges of x and y aren't contiguous\n        if ((xOffset + xLen) < yOffset || (yOffset + yLen) < xOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        result[j] = new Uint8Array(x.buffer, xOffset, yOffset - xOffset + yLen);\n    }\n    return result;\n}\n\n/** @ignore */\nexport function memcpy<TTarget extends ArrayBufferView, TSource extends ArrayBufferView>(target: TTarget, source: TSource, targetByteOffset = 0, sourceByteLength = source.byteLength) {\n    const targetByteLength = target.byteLength;\n    const dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);\n    const src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));\n    dst.set(src, targetByteOffset);\n    return target;\n}\n\n/** @ignore */\nexport function joinUint8Arrays(chunks: Uint8Array[], size?: number | null): [Uint8Array, Uint8Array[], number] {\n    // collapse chunks that share the same underlying ArrayBuffer and whose byte ranges overlap,\n    // to avoid unnecessarily copying the bytes to do this buffer join. This is a common case during\n    // streaming, where we may be reading partial byte ranges out of the same underlying ArrayBuffer\n    let result = collapseContiguousByteRanges(chunks);\n    let byteLength = result.reduce((x, b) => x + b.byteLength, 0);\n    let source: Uint8Array, sliced: Uint8Array, buffer: Uint8Array | void;\n    let offset = 0, index = -1, length = Math.min(size || Infinity, byteLength);\n    for (let n = result.length; ++index < n;) {\n        source = result[index];\n        sliced = source.subarray(0, Math.min(source.length, length - offset));\n        if (length <= (offset + sliced.length)) {\n            if (sliced.length < source.length) {\n                result[index] = source.subarray(sliced.length);\n            } else if (sliced.length === source.length) { index++; }\n            buffer ? memcpy(buffer, sliced, offset) : (buffer = sliced);\n            break;\n        }\n        memcpy(buffer || (buffer = new Uint8Array(length)), sliced, offset);\n        offset += sliced.length;\n    }\n    return [buffer || new Uint8Array(0), result.slice(index), byteLength - (buffer ? buffer.byteLength : 0)];\n}\n\n/** @ignore */\nexport type ArrayBufferViewInput = ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined  |\n                    IteratorResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> |\n          ReadableStreamReadResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> ;\n\n/** @ignore */\nexport function toArrayBufferView<T extends TypedArray>(ArrayBufferViewCtor: TypedArrayConstructor<T>, input: ArrayBufferViewInput): T;\nexport function toArrayBufferView<T extends BigIntArray>(ArrayBufferViewCtor: BigIntArrayConstructor<T>, input: ArrayBufferViewInput): T;\nexport function toArrayBufferView(ArrayBufferViewCtor: any, input: ArrayBufferViewInput) {\n\n    let value: any = isIteratorResult(input) ? input.value : input;\n\n    if (value instanceof ArrayBufferViewCtor) {\n        if (ArrayBufferViewCtor === Uint8Array) {\n            // Node's `Buffer` class passes the `instanceof Uint8Array` check, but we need\n            // a real Uint8Array, since Buffer#slice isn't the same as Uint8Array#slice :/\n            return new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength);\n        }\n        return value;\n    }\n    if (!value) { return new ArrayBufferViewCtor(0); }\n    if (typeof value === 'string') { value = encodeUtf8(value); }\n    if (value instanceof ArrayBuffer) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof SharedArrayBuf) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof ByteBuffer) { return toArrayBufferView(ArrayBufferViewCtor, value.bytes()); }\n    return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : value.byteLength <= 0 ? new ArrayBufferViewCtor(0)\n        : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);\n}\n\n/** @ignore */ export const toInt8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int8Array, input);\n/** @ignore */ export const toInt16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int16Array, input);\n/** @ignore */ export const toInt32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int32Array, input);\n/** @ignore */ export const toBigInt64Array = (input: ArrayBufferViewInput) => toArrayBufferView(BigInt64Array, input);\n/** @ignore */ export const toUint8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8Array, input);\n/** @ignore */ export const toUint16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint16Array, input);\n/** @ignore */ export const toUint32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint32Array, input);\n/** @ignore */ export const toBigUint64Array = (input: ArrayBufferViewInput) => toArrayBufferView(BigUint64Array, input);\n/** @ignore */ export const toFloat32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float32Array, input);\n/** @ignore */ export const toFloat64Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArray = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8ClampedArray, input);\n\n/** @ignore */\ntype ArrayBufferViewIteratorInput = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nconst pump = <T extends Iterator<any> | AsyncIterator<any>>(iterator: T) => { iterator.next(); return iterator; };\n\n/** @ignore */\nexport function* toArrayBufferViewIterator<T extends TypedArray>(ArrayCtor: TypedArrayConstructor<T>, source: ArrayBufferViewIteratorInput) {\n\n    const wrap = function*<T>(x: T) { yield x; };\n    const buffers: Iterable<ArrayBufferViewInput> =\n                   (typeof source === 'string') ? wrap(source)\n                 : (ArrayBuffer.isView(source)) ? wrap(source)\n              : (source instanceof ArrayBuffer) ? wrap(source)\n           : (source instanceof SharedArrayBuf) ? wrap(source)\n    : !isIterable<ArrayBufferViewInput>(source) ? wrap(source) : source;\n\n    yield* pump((function* (it) {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.iterator]()));\n}\n\n/** @ignore */ export const toInt8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8ClampedArray, input);\n\n/** @ignore */\ntype ArrayBufferViewAsyncIteratorInput = AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput> | PromiseLike<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nexport async function* toArrayBufferViewAsyncIterator<T extends TypedArray>(ArrayCtor: TypedArrayConstructor<T>, source: ArrayBufferViewAsyncIteratorInput): AsyncIterableIterator<T> {\n\n    // if a Promise, unwrap the Promise and iterate the resolved value\n    if (isPromise<ArrayBufferViewInput>(source)) {\n        return yield* toArrayBufferViewAsyncIterator(ArrayCtor, await source);\n    }\n\n    const wrap = async function*<T>(x: T) { yield await x; };\n    const emit = async function* <T extends Iterable<any>>(source: T) {\n        yield* pump((function*(it: Iterator<any>) {\n            let r: IteratorResult<any> = <any> null;\n            do {\n                r = it.next(yield r && r.value);\n            } while (!r.done);\n        })(source[Symbol.iterator]()));\n    };\n\n    const buffers: AsyncIterable<ArrayBufferViewInput> =\n                        (typeof source === 'string') ? wrap(source) // if string, wrap in an AsyncIterableIterator\n                      : (ArrayBuffer.isView(source)) ? wrap(source) // if TypedArray, wrap in an AsyncIterableIterator\n                   : (source instanceof ArrayBuffer) ? wrap(source) // if ArrayBuffer, wrap in an AsyncIterableIterator\n                : (source instanceof SharedArrayBuf) ? wrap(source) // if SharedArrayBuffer, wrap in an AsyncIterableIterator\n          : isIterable<ArrayBufferViewInput>(source) ? emit(source) // If Iterable, wrap in an AsyncIterableIterator and compose the `next` values\n    : !isAsyncIterable<ArrayBufferViewInput>(source) ? wrap(source) // If not an AsyncIterable, treat as a sentinel and wrap in an AsyncIterableIterator\n                                                     : source; // otherwise if AsyncIterable, use it\n\n    yield* pump((async function* (it) {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = await it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.asyncIterator]()));\n}\n\n/** @ignore */ export const toInt8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8ClampedArray, input);\n\n/** @ignore */\nexport function rebaseValueOffsets(offset: number, length: number, valueOffsets: Int32Array) {\n    // If we have a non-zero offset, create a new offsets array with the values\n    // shifted by the start offset, such that the new start offset is 0\n    if (offset !== 0) {\n        valueOffsets = valueOffsets.slice(0, length + 1);\n        for (let i = -1; ++i <= length;) {\n            valueOffsets[i] += offset;\n        }\n    }\n    return valueOffsets;\n}\n\n/** @ignore */\nexport function compareArrayLike<T extends ArrayLike<any>>(a: T, b: T) {\n    let i = 0, n = a.length;\n    if (n !== b.length) { return false; }\n    if (n > 0) {\n        do { if (a[i] !== b[i]) { return false; } } while (++i < n);\n    }\n    return true;\n}\n"]},"metadata":{},"sourceType":"module"}