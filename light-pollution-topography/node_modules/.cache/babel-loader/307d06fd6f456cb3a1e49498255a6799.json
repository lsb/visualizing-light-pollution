{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { Matrix4 } from 'math.gl';\nimport { MVTLoader } from '@loaders.gl/mvt';\nimport { load } from '@loaders.gl/core';\nimport { COORDINATE_SYSTEM } from '@deck.gl/core';\nimport TileLayer from '../tile-layer/tile-layer';\nimport { getURLFromTemplate } from '../tile-layer/utils';\nimport ClipExtension from './clip-extension';\nvar WORLD_SIZE = 512;\n\nvar MVTLayer = function (_TileLayer) {\n  _inherits(MVTLayer, _TileLayer);\n\n  function MVTLayer() {\n    _classCallCheck(this, MVTLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MVTLayer).apply(this, arguments));\n  }\n\n  _createClass(MVTLayer, [{\n    key: \"getTileData\",\n    value: function getTileData(tile) {\n      var url = getURLFromTemplate(this.props.data, tile);\n\n      if (!url) {\n        return Promise.reject('Invalid URL');\n      }\n\n      return load(url, MVTLoader, this.getLoadOptions());\n    }\n  }, {\n    key: \"renderSubLayers\",\n    value: function renderSubLayers(props) {\n      var tile = props.tile;\n      var worldScale = Math.pow(2, tile.z);\n      var xScale = WORLD_SIZE / worldScale;\n      var yScale = -xScale;\n      var xOffset = WORLD_SIZE * tile.x / worldScale;\n      var yOffset = WORLD_SIZE * (1 - tile.y / worldScale);\n      var modelMatrix = new Matrix4().translate([xOffset, yOffset, 0]).scale([xScale, yScale, 1]);\n      props.modelMatrix = modelMatrix;\n      props.coordinateSystem = COORDINATE_SYSTEM.CARTESIAN;\n      props.extensions = [].concat(_toConsumableArray(props.extensions || []), [new ClipExtension()]);\n      return _get(_getPrototypeOf(MVTLayer.prototype), \"renderSubLayers\", this).call(this, props);\n    }\n  }]);\n\n  return MVTLayer;\n}(TileLayer);\n\nexport { MVTLayer as default };\nMVTLayer.layerName = 'MVTLayer';","map":{"version":3,"sources":["../../../src/mvt-layer/mvt-layer.js"],"names":["WORLD_SIZE","MVTLayer","TileLayer","tile","url","getURLFromTemplate","Promise","load","props","worldScale","Math","xScale","yScale","xOffset","yOffset","modelMatrix","COORDINATE_SYSTEM"],"mappings":";;;;;;;AAAA,SAAA,OAAA,QAAA,SAAA;AACA,SAAA,SAAA,QAAA,iBAAA;AACA,SAAA,IAAA,QAAA,kBAAA;AACA,SAAA,iBAAA,QAAA,eAAA;AAEA,OAAA,SAAA,MAAA,0BAAA;AACA,SAAA,kBAAA,QAAA,qBAAA;AACA,OAAA,aAAA,MAAA,kBAAA;AAEA,IAAMA,UAAU,GAAhB,GAAA;;IAEqBC,Q;;;;;;;;;;;gCACPE,I,EAAM;AAChB,UAAMC,GAAG,GAAGC,kBAAkB,CAAC,KAAA,KAAA,CAAD,IAAA,EAA9B,IAA8B,CAA9B;;AACA,UAAI,CAAJ,GAAA,EAAU;AACR,eAAOC,OAAO,CAAPA,MAAAA,CAAP,aAAOA,CAAP;AACD;;AACD,aAAOC,IAAI,CAAA,GAAA,EAAA,SAAA,EAAiB,KAA5B,cAA4B,EAAjB,CAAX;AACD;;;oCAEeC,K,EAAO;AAAA,UACdL,IADc,GACNK,KADM,CAAA,IAAA;AAErB,UAAMC,UAAU,GAAGC,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAYP,IAAI,CAAnC,CAAmBO,CAAnB;AAEA,UAAMC,MAAM,GAAGX,UAAU,GAAzB,UAAA;AACA,UAAMY,MAAM,GAAG,CAAf,MAAA;AAEA,UAAMC,OAAO,GAAIb,UAAU,GAAGG,IAAI,CAAlB,CAACH,GAAjB,UAAA;AACA,UAAMc,OAAO,GAAGd,UAAU,IAAI,IAAIG,IAAI,CAAJA,CAAAA,GAAlC,UAA0B,CAA1B;AAEA,UAAMY,WAAW,GAAG,IAAA,OAAA,GAAA,SAAA,CAAwB,CAAA,OAAA,EAAA,OAAA,EAAxB,CAAwB,CAAxB,EAAA,KAAA,CAAqD,CAAA,MAAA,EAAA,MAAA,EAAzE,CAAyE,CAArD,CAApB;AAEAP,MAAAA,KAAK,CAALA,WAAAA,GAAAA,WAAAA;AACAA,MAAAA,KAAK,CAALA,gBAAAA,GAAyBQ,iBAAiB,CAA1CR,SAAAA;AACAA,MAAAA,KAAK,CAALA,UAAAA,GAAAA,GAAAA,MAAAA,CAAAA,kBAAAA,CAAwBA,KAAK,CAALA,UAAAA,IAAxBA,EAAAA,CAAAA,EAAAA,CAAiD,IAAjDA,aAAiD,EAAjDA,CAAAA,CAAAA;AAEA,aAAA,IAAA,CAAA,eAAA,CAAA,QAAA,CAAA,SAAA,CAAA,EAAA,iBAAA,EAAA,IAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAA,KAAA,CAAA;AACD;;;;EA1BmCN,S;;SAAjBD,Q;AA6BrBA,QAAQ,CAARA,SAAAA,GAAAA,UAAAA","sourcesContent":["import {Matrix4} from 'math.gl';\nimport {MVTLoader} from '@loaders.gl/mvt';\nimport {load} from '@loaders.gl/core';\nimport {COORDINATE_SYSTEM} from '@deck.gl/core';\n\nimport TileLayer from '../tile-layer/tile-layer';\nimport {getURLFromTemplate} from '../tile-layer/utils';\nimport ClipExtension from './clip-extension';\n\nconst WORLD_SIZE = 512;\n\nexport default class MVTLayer extends TileLayer {\n  getTileData(tile) {\n    const url = getURLFromTemplate(this.props.data, tile);\n    if (!url) {\n      return Promise.reject('Invalid URL');\n    }\n    return load(url, MVTLoader, this.getLoadOptions());\n  }\n\n  renderSubLayers(props) {\n    const {tile} = props;\n    const worldScale = Math.pow(2, tile.z);\n\n    const xScale = WORLD_SIZE / worldScale;\n    const yScale = -xScale;\n\n    const xOffset = (WORLD_SIZE * tile.x) / worldScale;\n    const yOffset = WORLD_SIZE * (1 - tile.y / worldScale);\n\n    const modelMatrix = new Matrix4().translate([xOffset, yOffset, 0]).scale([xScale, yScale, 1]);\n\n    props.modelMatrix = modelMatrix;\n    props.coordinateSystem = COORDINATE_SYSTEM.CARTESIAN;\n    props.extensions = [...(props.extensions || []), new ClipExtension()];\n\n    return super.renderSubLayers(props);\n  }\n}\n\nMVTLayer.layerName = 'MVTLayer';\n"]},"metadata":{},"sourceType":"module"}