{"ast":null,"code":"import { assert } from '@loaders.gl/loader-utils';\nimport { toArrayBuffer as bufferToArrayBuffer } from '../node/utils/to-array-buffer.node';\nexport function toArrayBuffer(data) {\n  if (bufferToArrayBuffer) {\n    data = bufferToArrayBuffer(data);\n  }\n\n  if (data instanceof ArrayBuffer) {\n    return data;\n  }\n\n  if (ArrayBuffer.isView(data)) {\n    return data.buffer;\n  }\n\n  if (typeof data === 'string') {\n    var text = data;\n    var uint8Array = new TextEncoder().encode(text);\n    return uint8Array.buffer;\n  }\n\n  return assert(false);\n}","map":{"version":3,"sources":["../../../src/javascript-utils/binary-utils.js"],"names":["toArrayBuffer","data","bufferToArrayBuffer","ArrayBuffer","text","uint8Array","assert"],"mappings":"AACA,SAAA,MAAA,QAAA,0BAAA;AACA,SAAQA,aAAa,IAArB,mBAAA,QAAA,oCAAA;AAEA,OAAO,SAAA,aAAA,CAAA,IAAA,EAA6B;AAClC,MAAA,mBAAA,EAAyB;AAEvBC,IAAAA,IAAI,GAAGC,mBAAmB,CAA1BD,IAA0B,CAA1BA;AACD;;AAED,MAAIA,IAAI,YAAR,WAAA,EAAiC;AAC/B,WAAA,IAAA;AACD;;AAGD,MAAIE,WAAW,CAAXA,MAAAA,CAAJ,IAAIA,CAAJ,EAA8B;AAC5B,WAAOF,IAAI,CAAX,MAAA;AACD;;AAED,MAAI,OAAA,IAAA,KAAJ,QAAA,EAA8B;AAC5B,QAAMG,IAAI,GAAV,IAAA;AACA,QAAMC,UAAU,GAAG,IAAA,WAAA,GAAA,MAAA,CAAnB,IAAmB,CAAnB;AACA,WAAOA,UAAU,CAAjB,MAAA;AACD;;AAED,SAAOC,MAAM,CAAb,KAAa,CAAb;AACD","sourcesContent":["/* global TextEncoder */\nimport {assert} from '@loaders.gl/loader-utils';\nimport {toArrayBuffer as bufferToArrayBuffer} from '../node/utils/to-array-buffer.node';\n\nexport function toArrayBuffer(data) {\n  if (bufferToArrayBuffer) {\n    // TODO - per docs we should just be able to call buffer.buffer, but there are issues\n    data = bufferToArrayBuffer(data);\n  }\n\n  if (data instanceof ArrayBuffer) {\n    return data;\n  }\n\n  // Careful - Node Buffers will look like ArrayBuffers (keep after isBuffer)\n  if (ArrayBuffer.isView(data)) {\n    return data.buffer;\n  }\n\n  if (typeof data === 'string') {\n    const text = data;\n    const uint8Array = new TextEncoder().encode(text);\n    return uint8Array.buffer;\n  }\n\n  return assert(false);\n}\n\n// export function blobToArrayBuffer(blob) {\n//   return new Promise((resolve, reject) => {\n//     let arrayBuffer;\n//     const fileReader = new FileReader();\n//     fileReader.onload = event => {\n//       arrayBuffer = event.target.result;\n//     };\n//     fileReader.onloadend = event => resolve(arrayBuffer);\n//     fileReader.onerror = reject;\n//     fileReader.readAsArrayBuffer(blob);\n//   });\n// }\n"]},"metadata":{},"sourceType":"module"}