{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Dictionary } from '../type';\nimport { Builder } from '../builder';\n/** @ignore */\n\nexport class DictionaryBuilder extends Builder {\n  constructor({\n    'type': type,\n    'nullValues': nulls,\n    'dictionaryHashFunction': hashFn\n  }) {\n    super({\n      type: new Dictionary(type.dictionary, type.indices, type.id, type.isOrdered)\n    });\n    this._nulls = null;\n    this._dictionaryOffset = 0;\n    this._keysToIndices = Object.create(null);\n    this.indices = Builder.new({\n      'type': this.type.indices,\n      'nullValues': nulls\n    });\n    this.dictionary = Builder.new({\n      'type': this.type.dictionary,\n      'nullValues': null\n    });\n\n    if (typeof hashFn === 'function') {\n      this.valueToKey = hashFn;\n    }\n  }\n\n  get values() {\n    return this.indices.values;\n  }\n\n  get nullCount() {\n    return this.indices.nullCount;\n  }\n\n  get nullBitmap() {\n    return this.indices.nullBitmap;\n  }\n\n  get byteLength() {\n    return this.indices.byteLength + this.dictionary.byteLength;\n  }\n\n  get reservedLength() {\n    return this.indices.reservedLength + this.dictionary.reservedLength;\n  }\n\n  get reservedByteLength() {\n    return this.indices.reservedByteLength + this.dictionary.reservedByteLength;\n  }\n\n  isValid(value) {\n    return this.indices.isValid(value);\n  }\n\n  setValid(index, valid) {\n    const indices = this.indices;\n    valid = indices.setValid(index, valid);\n    this.length = indices.length;\n    return valid;\n  }\n\n  setValue(index, value) {\n    let keysToIndices = this._keysToIndices;\n    let key = this.valueToKey(value);\n    let idx = keysToIndices[key];\n\n    if (idx === undefined) {\n      keysToIndices[key] = idx = this._dictionaryOffset + this.dictionary.append(value).length - 1;\n    }\n\n    return this.indices.setValue(index, idx);\n  }\n\n  flush() {\n    const type = this.type;\n    const prev = this._dictionary;\n    const curr = this.dictionary.toVector();\n    const data = this.indices.flush().clone(type);\n    data.dictionary = prev ? prev.concat(curr) : curr;\n    this.finished || (this._dictionaryOffset += curr.length);\n    this._dictionary = data.dictionary;\n    this.clear();\n    return data;\n  }\n\n  finish() {\n    this.indices.finish();\n    this.dictionary.finish();\n    this._dictionaryOffset = 0;\n    this._keysToIndices = Object.create(null);\n    return super.finish();\n  }\n\n  clear() {\n    this.indices.clear();\n    this.dictionary.clear();\n    return super.clear();\n  }\n\n  valueToKey(val) {\n    return typeof val === 'string' ? val : `${val}`;\n  }\n\n}","map":{"version":3,"sources":["builder/dictionary.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { IntBuilder } from './int';\nimport { Dictionary, DataType } from '../type';\nimport { Builder, BuilderOptions } from '../builder';\n\ntype DictionaryHashFunction = (x: any) => string | number;\n\nexport interface DictionaryBuilderOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\n    dictionaryHashFunction?: DictionaryHashFunction;\n}\n\n/** @ignore */\nexport class DictionaryBuilder<T extends Dictionary, TNull = any> extends Builder<T, TNull> {\n\n    protected _dictionaryOffset: number;\n    protected _dictionary?: Vector<T['dictionary']>;\n    protected _keysToIndices: { [key: string]: number };\n    public readonly indices: IntBuilder<T['indices']>;\n    public readonly dictionary: Builder<T['dictionary']>;\n\n    constructor({ 'type': type, 'nullValues': nulls, 'dictionaryHashFunction': hashFn }: DictionaryBuilderOptions<T, TNull>) {\n        super({ type: new Dictionary(type.dictionary, type.indices, type.id, type.isOrdered) as T });\n        this._nulls = <any> null;\n        this._dictionaryOffset = 0;\n        this._keysToIndices = Object.create(null);\n        this.indices = Builder.new({ 'type': this.type.indices, 'nullValues': nulls }) as IntBuilder<T['indices']>;\n        this.dictionary = Builder.new({ 'type': this.type.dictionary, 'nullValues': null }) as Builder<T['dictionary']>;\n        if (typeof hashFn === 'function') {\n            this.valueToKey = hashFn;\n        }\n    }\n\n    public get values() { return this.indices.values; }\n    public get nullCount() { return this.indices.nullCount; }\n    public get nullBitmap() { return this.indices.nullBitmap; }\n    public get byteLength() { return this.indices.byteLength + this.dictionary.byteLength; }\n    public get reservedLength() { return this.indices.reservedLength + this.dictionary.reservedLength; }\n    public get reservedByteLength() { return this.indices.reservedByteLength + this.dictionary.reservedByteLength; }\n    public isValid(value: T['TValue'] | TNull) { return this.indices.isValid(value); }\n    public setValid(index: number, valid: boolean) {\n        const indices = this.indices;\n        valid = indices.setValid(index, valid);\n        this.length = indices.length;\n        return valid;\n    }\n    public setValue(index: number, value: T['TValue']) {\n        let keysToIndices = this._keysToIndices;\n        let key = this.valueToKey(value);\n        let idx = keysToIndices[key];\n        if (idx === undefined) {\n            keysToIndices[key] = idx = this._dictionaryOffset + this.dictionary.append(value).length - 1;\n        }\n        return this.indices.setValue(index, idx);\n    }\n    public flush() {\n        const type = this.type;\n        const prev = this._dictionary;\n        const curr = this.dictionary.toVector();\n        const data = this.indices.flush().clone(type);\n        data.dictionary = prev ? prev.concat(curr) : curr;\n        this.finished || (this._dictionaryOffset += curr.length);\n        this._dictionary = data.dictionary as Vector<T['dictionary']>;\n        this.clear();\n        return data;\n    }\n    public finish() {\n        this.indices.finish();\n        this.dictionary.finish();\n        this._dictionaryOffset = 0;\n        this._keysToIndices = Object.create(null);\n        return super.finish();\n    }\n    public clear() {\n        this.indices.clear();\n        this.dictionary.clear();\n        return super.clear();\n    }\n    public valueToKey(val: any): string | number {\n        return typeof val === 'string' ? val : `${val}`;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}