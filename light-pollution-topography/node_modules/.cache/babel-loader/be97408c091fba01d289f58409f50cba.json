{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { isWebGL2 } from '@luma.gl/gltools';\nimport { lumaStats } from '../init';\nimport { assertWebGLContext, getKey, getKeyValue } from '../webgl-utils';\nimport { uid, assert, stubRemovedMethods as _stubRemovedMethods } from '../utils';\nvar ERR_RESOURCE_METHOD_UNDEFINED = 'Resource subclass must define virtual methods';\n\nvar Resource = function () {\n  function Resource(gl) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Resource);\n\n    assertWebGLContext(gl);\n    var id = opts.id,\n        _opts$userData = opts.userData,\n        userData = _opts$userData === void 0 ? {} : _opts$userData;\n    this.gl = gl;\n    this.id = id || uid(this.constructor.name);\n    this.userData = userData;\n    this._bound = false;\n    this._handle = opts.handle;\n\n    if (this._handle === undefined) {\n      this._handle = this._createHandle();\n    }\n\n    this.byteLength = 0;\n\n    this._addStats();\n  }\n\n  _createClass(Resource, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"\".concat(this.constructor.name, \"(\").concat(this.id, \")\");\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref$deleteChildren = _ref.deleteChildren,\n          deleteChildren = _ref$deleteChildren === void 0 ? false : _ref$deleteChildren;\n\n      var children = this._handle && this._deleteHandle(this._handle);\n\n      if (this._handle) {\n        this._removeStats();\n      }\n\n      this._handle = null;\n\n      if (children && deleteChildren) {\n        children.filter(Boolean).forEach(function (child) {\n          child[\"delete\"]();\n        });\n      }\n\n      return this;\n    }\n  }, {\n    key: \"bind\",\n    value: function bind() {\n      var funcOrHandle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.handle;\n\n      if (typeof funcOrHandle !== 'function') {\n        this._bindHandle(funcOrHandle);\n\n        return this;\n      }\n\n      var value;\n\n      if (!this._bound) {\n        this._bindHandle(this.handle);\n\n        this._bound = true;\n        value = funcOrHandle();\n        this._bound = false;\n\n        this._bindHandle(null);\n      } else {\n        value = funcOrHandle();\n      }\n\n      return value;\n    }\n  }, {\n    key: \"unbind\",\n    value: function unbind() {\n      this.bind(null);\n    }\n  }, {\n    key: \"getParameter\",\n    value: function getParameter(pname) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      pname = getKeyValue(this.gl, pname);\n      assert(pname);\n      var parameters = this.constructor.PARAMETERS || {};\n      var parameter = parameters[pname];\n\n      if (parameter) {\n        var isWebgl2 = isWebGL2(this.gl);\n        var parameterAvailable = (!('webgl2' in parameter) || isWebgl2) && (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n\n        if (!parameterAvailable) {\n          var webgl1Default = parameter.webgl1;\n          var webgl2Default = 'webgl2' in parameter ? parameter.webgl2 : parameter.webgl1;\n          var defaultValue = isWebgl2 ? webgl2Default : webgl1Default;\n          return defaultValue;\n        }\n      }\n\n      return this._getParameter(pname, opts);\n    }\n  }, {\n    key: \"getParameters\",\n    value: function getParameters() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _ref2 = {},\n          parameters = _ref2.parameters,\n          keys = _ref2.keys;\n      var PARAMETERS = this.constructor.PARAMETERS || {};\n      var isWebgl2 = isWebGL2(this.gl);\n      var values = {};\n      var parameterKeys = parameters || Object.keys(PARAMETERS);\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = parameterKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var pname = _step.value;\n          var parameter = PARAMETERS[pname];\n          var parameterAvailable = parameter && (!('webgl2' in parameter) || isWebgl2) && (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n\n          if (parameterAvailable) {\n            var key = keys ? getKey(this.gl, pname) : pname;\n            values[key] = this.getParameter(pname, opts);\n\n            if (keys && parameter.type === 'GLenum') {\n              values[key] = getKey(this.gl, values[key]);\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return values;\n    }\n  }, {\n    key: \"setParameter\",\n    value: function setParameter(pname, value) {\n      pname = getKeyValue(this.gl, pname);\n      assert(pname);\n      var parameters = this.constructor.PARAMETERS || {};\n      var parameter = parameters[pname];\n\n      if (parameter) {\n        var isWebgl2 = isWebGL2(this.gl);\n        var parameterAvailable = (!('webgl2' in parameter) || isWebgl2) && (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n\n        if (!parameterAvailable) {\n          throw new Error('Parameter not available on this platform');\n        }\n\n        if (parameter.type === 'GLenum') {\n          value = getKeyValue(value);\n        }\n      }\n\n      this._setParameter(pname, value);\n\n      return this;\n    }\n  }, {\n    key: \"setParameters\",\n    value: function setParameters(parameters) {\n      for (var pname in parameters) {\n        this.setParameter(pname, parameters[pname]);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"stubRemovedMethods\",\n    value: function stubRemovedMethods(className, version, methodNames) {\n      return _stubRemovedMethods(this, className, version, methodNames);\n    }\n  }, {\n    key: \"initialize\",\n    value: function initialize(opts) {}\n  }, {\n    key: \"_createHandle\",\n    value: function _createHandle() {\n      throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n    }\n  }, {\n    key: \"_deleteHandle\",\n    value: function _deleteHandle() {\n      throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n    }\n  }, {\n    key: \"_bindHandle\",\n    value: function _bindHandle() {\n      throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n    }\n  }, {\n    key: \"_getOptsFromHandle\",\n    value: function _getOptsFromHandle() {\n      throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n    }\n  }, {\n    key: \"_getParameter\",\n    value: function _getParameter(pname, opts) {\n      throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n    }\n  }, {\n    key: \"_setParameter\",\n    value: function _setParameter(pname, value) {\n      throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n    }\n  }, {\n    key: \"_context\",\n    value: function _context() {\n      this.gl.luma = this.gl.luma || {};\n      return this.gl.luma;\n    }\n  }, {\n    key: \"_addStats\",\n    value: function _addStats() {\n      var name = this.constructor.name;\n      var stats = lumaStats.get('Resource Counts');\n      stats.get('Resources Created').incrementCount();\n      stats.get(\"\".concat(name, \"s Created\")).incrementCount();\n      stats.get(\"\".concat(name, \"s Active\")).incrementCount();\n    }\n  }, {\n    key: \"_removeStats\",\n    value: function _removeStats() {\n      var name = this.constructor.name;\n      var stats = lumaStats.get('Resource Counts');\n      stats.get(\"\".concat(name, \"s Active\")).decrementCount();\n    }\n  }, {\n    key: \"_trackAllocatedMemory\",\n    value: function _trackAllocatedMemory(bytes) {\n      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.constructor.name;\n      var stats = lumaStats.get('Memory Usage');\n      stats.get('GPU Memory').addCount(bytes);\n      stats.get(\"\".concat(name, \" Memory\")).addCount(bytes);\n      this.byteLength = bytes;\n    }\n  }, {\n    key: \"_trackDeallocatedMemory\",\n    value: function _trackDeallocatedMemory() {\n      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.constructor.name;\n      var stats = lumaStats.get('Memory Usage');\n      stats.get('GPU Memory').subtractCount(this.byteLength);\n      stats.get(\"\".concat(name, \" Memory\")).subtractCount(this.byteLength);\n      this.byteLength = 0;\n    }\n  }, {\n    key: \"handle\",\n    get: function get() {\n      return this._handle;\n    }\n  }]);\n\n  return Resource;\n}();\n\nexport { Resource as default };","map":{"version":3,"sources":["../../../src/classes/resource.js"],"names":["stubRemovedMethods","ERR_RESOURCE_METHOD_UNDEFINED","Resource","opts","assertWebGLContext","id","userData","uid","deleteChildren","children","child","funcOrHandle","handle","value","pname","getKeyValue","assert","parameters","parameter","isWebgl2","isWebGL2","parameterAvailable","webgl1Default","webgl2Default","defaultValue","keys","PARAMETERS","values","parameterKeys","Object","key","getKey","className","version","methodNames","name","stats","lumaStats","bytes"],"mappings":"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","sourcesContent":["import {isWebGL2} from '@luma.gl/gltools';\nimport {lumaStats} from '../init';\nimport {assertWebGLContext, getKey, getKeyValue} from '../webgl-utils';\nimport {uid, assert, stubRemovedMethods} from '../utils';\n\nconst ERR_RESOURCE_METHOD_UNDEFINED = 'Resource subclass must define virtual methods';\n\n// TODO - Handle context loss\n// function glGetContextLossCount(gl) {\n//   return (gl.luma && gl.luma.glCount) || 0;\n// }\n\nexport default class Resource {\n  constructor(gl, opts = {}) {\n    assertWebGLContext(gl);\n\n    const {id, userData = {}} = opts;\n    this.gl = gl;\n    // this.ext = polyfillContext(gl);\n    this.id = id || uid(this.constructor.name);\n    this.userData = userData;\n    this._bound = false;\n\n    // Set the handle\n    // If handle was provided, use it, otherwise create a new handle\n\n    // TODO - Stores the handle with context loss information\n    // this.glCount = glGetContextLossCount(this.gl);\n\n    // Default VertexArray needs to be created with null handle, so compare against undefined\n    this._handle = opts.handle;\n    if (this._handle === undefined) {\n      this._handle = this._createHandle();\n    }\n\n    // Only meaningful for resources that allocate GPU memory\n    this.byteLength = 0;\n\n    this._addStats();\n  }\n\n  toString() {\n    return `${this.constructor.name}(${this.id})`;\n  }\n\n  get handle() {\n    // TODO - Add context loss handling\n    // Will regenerate and reinitialize the handle if necessary\n    // const glCount = glGetContextLossCount(this.gl);\n    // if (this.glCount !== glCount) {\n    //   this._handle = this._createHandle(this.opts);\n    //   this._glCount = glCount;\n    //   // Reinitialize object\n    //   this.initialize(this.opts);\n    // }\n    return this._handle;\n  }\n\n  delete({deleteChildren = false} = {}) {\n    // Delete this object, and get refs to any children\n    const children = this._handle && this._deleteHandle(this._handle);\n    if (this._handle) {\n      this._removeStats();\n    }\n    this._handle = null;\n\n    // Optionally, recursively delete the children\n    if (children && deleteChildren) {\n      children.filter(Boolean).forEach(child => {\n        child.delete();\n      });\n    }\n\n    return this;\n  }\n\n  bind(funcOrHandle = this.handle) {\n    if (typeof funcOrHandle !== 'function') {\n      this._bindHandle(funcOrHandle);\n      return this;\n    }\n\n    let value;\n\n    if (!this._bound) {\n      this._bindHandle(this.handle);\n      this._bound = true;\n\n      value = funcOrHandle();\n\n      this._bound = false;\n      this._bindHandle(null);\n    } else {\n      value = funcOrHandle();\n    }\n\n    return value;\n  }\n\n  unbind() {\n    this.bind(null);\n  }\n\n  /**\n   * Query a Resource parameter\n   *\n   * @param {GLenum} pname\n   * @return {GLint|GLfloat|GLenum} param\n   */\n  getParameter(pname, opts = {}) {\n    pname = getKeyValue(this.gl, pname);\n    assert(pname);\n\n    const parameters = this.constructor.PARAMETERS || {};\n\n    // Use parameter definitions to handle unsupported parameters\n    const parameter = parameters[pname];\n    if (parameter) {\n      const isWebgl2 = isWebGL2(this.gl);\n\n      // Check if we can query for this parameter\n      const parameterAvailable =\n        (!('webgl2' in parameter) || isWebgl2) &&\n        (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n\n      if (!parameterAvailable) {\n        const webgl1Default = parameter.webgl1;\n        const webgl2Default = 'webgl2' in parameter ? parameter.webgl2 : parameter.webgl1;\n        const defaultValue = isWebgl2 ? webgl2Default : webgl1Default;\n        return defaultValue;\n      }\n    }\n\n    // If unknown parameter - Could be a valid parameter not covered by PARAMS\n    // Attempt to query for it and let WebGL report errors\n    return this._getParameter(pname, opts);\n  }\n\n  // Many resources support a getParameter call -\n  // getParameters will get all parameters - slow but useful for debugging\n  // eslint-disable-next-line complexity\n  getParameters(opts = {}) {\n    const {parameters, keys} = {};\n\n    // Get parameter definitions for this Resource\n    const PARAMETERS = this.constructor.PARAMETERS || {};\n\n    const isWebgl2 = isWebGL2(this.gl);\n\n    const values = {};\n\n    // Query all parameters if no list provided\n    const parameterKeys = parameters || Object.keys(PARAMETERS);\n\n    // WEBGL limits\n    for (const pname of parameterKeys) {\n      const parameter = PARAMETERS[pname];\n\n      // Check if this parameter is available on this platform\n      const parameterAvailable =\n        parameter &&\n        (!('webgl2' in parameter) || isWebgl2) &&\n        (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n\n      if (parameterAvailable) {\n        const key = keys ? getKey(this.gl, pname) : pname;\n        values[key] = this.getParameter(pname, opts);\n        if (keys && parameter.type === 'GLenum') {\n          values[key] = getKey(this.gl, values[key]);\n        }\n      }\n    }\n\n    return values;\n  }\n\n  /**\n   * Update a Resource setting\n   *\n   * @todo - cache parameter to avoid issuing WebGL calls?\n   *\n   * @param {GLenum} pname - parameter (GL constant, value or key)\n   * @param {GLint|GLfloat|GLenum} value\n   * @return {Resource} returns self to enable chaining\n   */\n  setParameter(pname, value) {\n    pname = getKeyValue(this.gl, pname);\n    assert(pname);\n\n    const parameters = this.constructor.PARAMETERS || {};\n\n    const parameter = parameters[pname];\n    if (parameter) {\n      const isWebgl2 = isWebGL2(this.gl);\n\n      // Check if this parameter is available on this platform\n      const parameterAvailable =\n        (!('webgl2' in parameter) || isWebgl2) &&\n        (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n\n      if (!parameterAvailable) {\n        throw new Error('Parameter not available on this platform');\n      }\n\n      // Handle string keys\n      if (parameter.type === 'GLenum') {\n        value = getKeyValue(value);\n      }\n    }\n\n    // If unknown parameter - Could be a valid parameter not covered by PARAMS\n    // attempt to set it and let WebGL report errors\n    this._setParameter(pname, value);\n    return this;\n  }\n\n  /*\n   * Batch update resource parameters\n   * Assumes the subclass supports a setParameter call\n   */\n  setParameters(parameters) {\n    for (const pname in parameters) {\n      this.setParameter(pname, parameters[pname]);\n    }\n    return this;\n  }\n\n  // Install stubs for removed methods\n  stubRemovedMethods(className, version, methodNames) {\n    return stubRemovedMethods(this, className, version, methodNames);\n  }\n\n  // PUBLIC VIRTUAL METHODS\n  initialize(opts) {}\n\n  // PROTECTED METHODS - These must be overridden by subclass\n  _createHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _deleteHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _bindHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _getOptsFromHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _getParameter(pname, opts) {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  /**\n   * @param {GLenum} pname\n   * @param {GLint|GLfloat|GLenum} param\n   * @return {Sampler} returns self to enable chaining\n   */\n  _setParameter(pname, value) {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  // PRIVATE METHODS\n\n  _context() {\n    this.gl.luma = this.gl.luma || {};\n    return this.gl.luma;\n  }\n\n  _addStats() {\n    const name = this.constructor.name;\n    const stats = lumaStats.get('Resource Counts');\n\n    stats.get('Resources Created').incrementCount();\n    stats.get(`${name}s Created`).incrementCount();\n    stats.get(`${name}s Active`).incrementCount();\n  }\n\n  _removeStats() {\n    const name = this.constructor.name;\n    const stats = lumaStats.get('Resource Counts');\n\n    stats.get(`${name}s Active`).decrementCount();\n  }\n\n  _trackAllocatedMemory(bytes, name = this.constructor.name) {\n    const stats = lumaStats.get('Memory Usage');\n\n    stats.get('GPU Memory').addCount(bytes);\n    stats.get(`${name} Memory`).addCount(bytes);\n    this.byteLength = bytes;\n  }\n\n  _trackDeallocatedMemory(name = this.constructor.name) {\n    const stats = lumaStats.get('Memory Usage');\n\n    stats.get('GPU Memory').subtractCount(this.byteLength);\n    stats.get(`${name} Memory`).subtractCount(this.byteLength);\n    this.byteLength = 0;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}