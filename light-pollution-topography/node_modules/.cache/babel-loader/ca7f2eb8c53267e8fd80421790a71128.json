{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { isLoaderObject } from './loader-utils/normalize-loader';\nimport { mergeOptions } from './loader-utils/merge-options';\nimport { getIteratorFromData } from './loader-utils/get-data';\nimport { getLoaderContext } from './loader-utils/get-loader-context';\nimport { selectLoader } from './select-loader';\nexport function parseInBatchesSync(_x, _x2, _x3, _x4) {\n  return _parseInBatchesSync.apply(this, arguments);\n}\n\nfunction _parseInBatchesSync() {\n  _parseInBatchesSync = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(data, loaders, options, url) {\n    var loader, context;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n              url = options;\n              options = loaders;\n              loaders = null;\n            }\n\n            loader = selectLoader(loaders, url, null);\n            options = mergeOptions(loader, options);\n            context = getLoaderContext({\n              url: url,\n              loaders: loaders\n            }, options);\n            return _context.abrupt(\"return\", parseWithLoaderInBatchesSync(loader, data, options, context));\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parseInBatchesSync.apply(this, arguments);\n}\n\nfunction parseWithLoaderInBatchesSync(loader, data, options, context) {\n  if (loader.parseInBatchesSync) {\n    var inputIterator = getIteratorFromData(data);\n    var outputIterator = loader.parseInBatchesSync(inputIterator, options, context, loader);\n    return outputIterator;\n  }\n\n  throw new Error('parseWithLoaderInBatchesSync not available');\n}","map":{"version":3,"sources":["../../../src/lib/parse-in-batches-sync.js"],"names":["Array","isLoaderObject","url","options","loaders","loader","selectLoader","mergeOptions","context","getLoaderContext","parseWithLoaderInBatchesSync","inputIterator","getIteratorFromData","outputIterator"],"mappings":";;AAAA,SAAA,cAAA,QAAA,iCAAA;AACA,SAAA,YAAA,QAAA,8BAAA;AACA,SAAA,mBAAA,QAAA,yBAAA;AACA,SAAA,gBAAA,QAAA,mCAAA;AACA,SAAA,YAAA,QAAA,iBAAA;AAGA,OAAA,SAAA,kBAAA,CAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA,SAAA,mBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;;mEAAO,SAAA,OAAA,CAAA,IAAA,EAAA,OAAA,EAAA,OAAA,EAAA,GAAA,EAAA;AAAA,QAAA,MAAA,EAAA,OAAA;AAAA,WAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,aAAA,CAAA,EAAA;AAAA,gBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,eAAA,CAAA;AAGL,gBAAI,CAACA,KAAK,CAALA,OAAAA,CAAD,OAACA,CAAD,IAA2B,CAACC,cAAc,CAA9C,OAA8C,CAA9C,EAAyD;AACvDC,cAAAA,GAAG,GAAHA,OAAAA;AACAC,cAAAA,OAAO,GAAPA,OAAAA;AACAC,cAAAA,OAAO,GAAPA,IAAAA;AACD;;AAIKC,YAAAA,MAXD,GAWUC,YAAY,CAAA,OAAA,EAAA,GAAA,EAXtB,IAWsB,CAArBD;AAGNF,YAAAA,OAAO,GAAGI,YAAY,CAAA,MAAA,EAAtBJ,OAAsB,CAAtBA;AAEMK,YAAAA,OAhBD,GAgBWC,gBAAgB,CAAC;AAACP,cAAAA,GAAG,EAAJ,GAAA;AAAME,cAAAA,OAAO,EAAPA;AAAN,aAAD,EAhB3B,OAgB2B,CAA1BI;AAhBD,mBAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAkBEE,4BAA4B,CAAA,MAAA,EAAA,IAAA,EAAA,OAAA,EAlB9B,OAkB8B,CAlB9B,CAAA;;AAAA,eAAA,CAAA;AAAA,eAAA,KAAA;AAAA,mBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,KAAA,EAAA,OAAA,CAAA;;;;;AAqBP,SAAA,4BAAA,CAAA,MAAA,EAAA,IAAA,EAAA,OAAA,EAAA,OAAA,EAAsE;AAEpE,MAAIL,MAAM,CAAV,kBAAA,EAA+B;AAC7B,QAAMM,aAAa,GAAGC,mBAAmB,CAAzC,IAAyC,CAAzC;AACA,QAAMC,cAAc,GAAGR,MAAM,CAANA,kBAAAA,CAAAA,aAAAA,EAAAA,OAAAA,EAAAA,OAAAA,EAAvB,MAAuBA,CAAvB;AACA,WAAA,cAAA;AACD;;AAED,QAAM,IAAA,KAAA,CAAN,4CAAM,CAAN;AACD","sourcesContent":["import {isLoaderObject} from './loader-utils/normalize-loader';\nimport {mergeOptions} from './loader-utils/merge-options';\nimport {getIteratorFromData} from './loader-utils/get-data';\nimport {getLoaderContext} from './loader-utils/get-loader-context';\nimport {selectLoader} from './select-loader';\n\n// TODO - remove?\nexport async function parseInBatchesSync(data, loaders, options, url) {\n  // Signature: parseInBatchesSync(data, options, url)\n  // Uses registered loaders\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    url = options;\n    options = loaders;\n    loaders = null;\n  }\n\n  // Chooses a loader and normalizes it\n  // TODO - only uses URL, need a selectLoader variant that peeks at first stream chunk...\n  const loader = selectLoader(loaders, url, null);\n\n  // Normalize options\n  options = mergeOptions(loader, options);\n\n  const context = getLoaderContext({url, loaders}, options);\n\n  return parseWithLoaderInBatchesSync(loader, data, options, context);\n}\n\nfunction parseWithLoaderInBatchesSync(loader, data, options, context) {\n  // Create async iterator adapter for data, and concatenate result\n  if (loader.parseInBatchesSync) {\n    const inputIterator = getIteratorFromData(data);\n    const outputIterator = loader.parseInBatchesSync(inputIterator, options, context, loader);\n    return outputIterator;\n  }\n\n  throw new Error('parseWithLoaderInBatchesSync not available');\n}\n"]},"metadata":{},"sourceType":"module"}