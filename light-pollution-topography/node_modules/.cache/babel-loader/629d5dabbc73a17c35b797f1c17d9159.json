{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Visitor } from '../visitor';\nimport { ArrowType, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from '../enum';\n/** @ignore */\n\nexport class JSONTypeAssembler extends Visitor {\n  visit(node) {\n    return node == null ? undefined : super.visit(node);\n  }\n\n  visitNull({\n    typeId\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase()\n    };\n  }\n\n  visitInt({\n    typeId,\n    bitWidth,\n    isSigned\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'bitWidth': bitWidth,\n      'isSigned': isSigned\n    };\n  }\n\n  visitFloat({\n    typeId,\n    precision\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'precision': Precision[precision]\n    };\n  }\n\n  visitBinary({\n    typeId\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase()\n    };\n  }\n\n  visitBool({\n    typeId\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase()\n    };\n  }\n\n  visitUtf8({\n    typeId\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase()\n    };\n  }\n\n  visitDecimal({\n    typeId,\n    scale,\n    precision\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'scale': scale,\n      'precision': precision\n    };\n  }\n\n  visitDate({\n    typeId,\n    unit\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'unit': DateUnit[unit]\n    };\n  }\n\n  visitTime({\n    typeId,\n    unit,\n    bitWidth\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'unit': TimeUnit[unit],\n      bitWidth\n    };\n  }\n\n  visitTimestamp({\n    typeId,\n    timezone,\n    unit\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'unit': TimeUnit[unit],\n      timezone\n    };\n  }\n\n  visitInterval({\n    typeId,\n    unit\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'unit': IntervalUnit[unit]\n    };\n  }\n\n  visitList({\n    typeId\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase()\n    };\n  }\n\n  visitStruct({\n    typeId\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase()\n    };\n  }\n\n  visitUnion({\n    typeId,\n    mode,\n    typeIds\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'mode': UnionMode[mode],\n      'typeIds': [...typeIds]\n    };\n  }\n\n  visitDictionary(node) {\n    return this.visit(node.dictionary);\n  }\n\n  visitFixedSizeBinary({\n    typeId,\n    byteWidth\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'byteWidth': byteWidth\n    };\n  }\n\n  visitFixedSizeList({\n    typeId,\n    listSize\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'listSize': listSize\n    };\n  }\n\n  visitMap({\n    typeId,\n    keysSorted\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'keysSorted': keysSorted\n    };\n  }\n\n}","map":{"version":3,"sources":["visitor/jsontypeassembler.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as type from '../type';\nimport { Visitor } from '../visitor';\nimport { ArrowType, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from '../enum';\n\n/** @ignore */\nexport interface JSONTypeAssembler extends Visitor {\n    visit<T extends type.DataType>(node: T): object | undefined;\n}\n\n/** @ignore */\nexport class JSONTypeAssembler extends Visitor {\n    public visit<T extends type.DataType>(node: T): object | undefined {\n        return node == null ? undefined : super.visit(node);\n    }\n    public visitNull<T extends type.Null>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitInt<T extends type.Int>({ typeId, bitWidth, isSigned }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'bitWidth': bitWidth, 'isSigned': isSigned };\n    }\n    public visitFloat<T extends type.Float>({ typeId, precision }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'precision': Precision[precision] };\n    }\n    public visitBinary<T extends type.Binary>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitBool<T extends type.Bool>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitUtf8<T extends type.Utf8>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitDecimal<T extends type.Decimal>({ typeId, scale, precision }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'scale': scale, 'precision': precision };\n    }\n    public visitDate<T extends type.Date_>({ typeId, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': DateUnit[unit] };\n    }\n    public visitTime<T extends type.Time>({ typeId, unit, bitWidth }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': TimeUnit[unit], bitWidth };\n    }\n    public visitTimestamp<T extends type.Timestamp>({ typeId, timezone, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': TimeUnit[unit], timezone };\n    }\n    public visitInterval<T extends type.Interval>({ typeId, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': IntervalUnit[unit] };\n    }\n    public visitList<T extends type.List>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitStruct<T extends type.Struct>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitUnion<T extends type.Union>({ typeId, mode, typeIds }: T) {\n        return {\n            'name': ArrowType[typeId].toLowerCase(),\n            'mode': UnionMode[mode],\n            'typeIds': [...typeIds]\n        };\n    }\n    public visitDictionary<T extends type.Dictionary>(node: T) {\n        return this.visit(node.dictionary);\n    }\n    public visitFixedSizeBinary<T extends type.FixedSizeBinary>({ typeId, byteWidth }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'byteWidth': byteWidth };\n    }\n    public visitFixedSizeList<T extends type.FixedSizeList>({ typeId, listSize }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'listSize': listSize };\n    }\n    public visitMap<T extends type.Map_>({ typeId, keysSorted }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'keysSorted': keysSorted };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}