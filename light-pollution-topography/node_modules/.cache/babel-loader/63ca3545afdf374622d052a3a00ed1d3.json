{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport Transition from './transition';\nvar EPSILON = 1e-5;\n\nfunction updateSpringElement(prev, cur, dest, damping, stiffness) {\n  var velocity = cur - prev;\n  var delta = dest - cur;\n  var spring = delta * stiffness;\n  var damper = -velocity * damping;\n  return spring + damper + velocity + cur;\n}\n\nfunction updateSpring(prev, cur, dest, damping, stiffness) {\n  if (Array.isArray(dest)) {\n    var next = [];\n\n    for (var i = 0; i < dest.length; i++) {\n      next[i] = updateSpringElement(prev[i], cur[i], dest[i], damping, stiffness);\n    }\n\n    return next;\n  }\n\n  return updateSpringElement(prev, cur, dest, damping, stiffness);\n}\n\nfunction distance(value1, value2) {\n  if (Array.isArray(value1)) {\n    var distanceSquare = 0;\n\n    for (var i = 0; i < value1.length; i++) {\n      var d = value1[i] - value2[i];\n      distanceSquare += d * d;\n    }\n\n    return Math.sqrt(distanceSquare);\n  }\n\n  return Math.abs(value1 - value2);\n}\n\nvar CPUSpringTransition = function (_Transition) {\n  _inherits(CPUSpringTransition, _Transition);\n\n  function CPUSpringTransition() {\n    _classCallCheck(this, CPUSpringTransition);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CPUSpringTransition).apply(this, arguments));\n  }\n\n  _createClass(CPUSpringTransition, [{\n    key: \"_onUpdate\",\n    value: function _onUpdate() {\n      var _this$settings = this.settings,\n          fromValue = _this$settings.fromValue,\n          toValue = _this$settings.toValue,\n          damping = _this$settings.damping,\n          stiffness = _this$settings.stiffness;\n\n      var _this$_prevValue = this._prevValue,\n          _prevValue = _this$_prevValue === void 0 ? fromValue : _this$_prevValue,\n          _this$_currValue = this._currValue,\n          _currValue = _this$_currValue === void 0 ? fromValue : _this$_currValue;\n\n      var nextValue = updateSpring(_prevValue, _currValue, toValue, damping, stiffness);\n      var delta = distance(nextValue, toValue);\n      var velocity = distance(nextValue, _currValue);\n\n      if (delta < EPSILON && velocity < EPSILON) {\n        nextValue = toValue;\n        this.end();\n      }\n\n      this._prevValue = _currValue;\n      this._currValue = nextValue;\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._currValue;\n    }\n  }]);\n\n  return CPUSpringTransition;\n}(Transition);\n\nexport { CPUSpringTransition as default };","map":{"version":3,"sources":["../../../src/transitions/cpu-spring-transition.js"],"names":["EPSILON","velocity","cur","delta","dest","spring","damper","Array","next","i","updateSpringElement","prev","distanceSquare","value1","d","value2","Math","CPUSpringTransition","Transition","fromValue","toValue","damping","stiffness","_prevValue","_currValue","nextValue","updateSpring","distance"],"mappings":"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","sourcesContent":["import Transition from './transition';\n\nconst EPSILON = 1e-5;\n\n/*\n * Calculate the next value in the spring transition\n * @param prev {Number} - previous value\n * @param cur {Number} - current value\n * @param dest {Number} - destination value\n * @param damping {Number}\n * @param stiffness {Number}\n */\nfunction updateSpringElement(prev, cur, dest, damping, stiffness) {\n  const velocity = cur - prev;\n  const delta = dest - cur;\n  const spring = delta * stiffness;\n  const damper = -velocity * damping;\n  return spring + damper + velocity + cur;\n}\n\n/*\n * Calculate the next value in the spring transition\n * @param prev {Number|Array} - previous value\n * @param cur {Number|Array} - current value\n * @param dest {Number|Array} - destination value\n * @param damping {Number}\n * @param stiffness {Number}\n */\nfunction updateSpring(prev, cur, dest, damping, stiffness) {\n  if (Array.isArray(dest)) {\n    const next = [];\n    for (let i = 0; i < dest.length; i++) {\n      next[i] = updateSpringElement(prev[i], cur[i], dest[i], damping, stiffness);\n    }\n    return next;\n  }\n  return updateSpringElement(prev, cur, dest, damping, stiffness);\n}\n\n/*\n * Calculate the distance between two numbers or two vectors\n */\nfunction distance(value1, value2) {\n  if (Array.isArray(value1)) {\n    let distanceSquare = 0;\n    for (let i = 0; i < value1.length; i++) {\n      const d = value1[i] - value2[i];\n      distanceSquare += d * d;\n    }\n    return Math.sqrt(distanceSquare);\n  }\n  return Math.abs(value1 - value2);\n}\n\nexport default class CPUSpringTransition extends Transition {\n  get value() {\n    return this._currValue;\n  }\n\n  _onUpdate() {\n    // TODO - use timeline\n    // const {time} = this;\n\n    const {fromValue, toValue, damping, stiffness} = this.settings;\n    const {_prevValue = fromValue, _currValue = fromValue} = this;\n    let nextValue = updateSpring(_prevValue, _currValue, toValue, damping, stiffness);\n    const delta = distance(nextValue, toValue);\n    const velocity = distance(nextValue, _currValue);\n\n    if (delta < EPSILON && velocity < EPSILON) {\n      nextValue = toValue;\n      this.end();\n    }\n\n    this._prevValue = _currValue;\n    this._currValue = nextValue;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}