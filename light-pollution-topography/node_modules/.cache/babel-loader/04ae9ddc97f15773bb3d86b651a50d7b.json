{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { Layer, picking } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport vs from './arc-layer-vertex.glsl';\nimport fs from './arc-layer-fragment.glsl';\nvar DEFAULT_COLOR = [0, 0, 0, 255];\nvar defaultProps = {\n  getSourcePosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.sourcePosition;\n    }\n  },\n  getTargetPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.targetPosition;\n    }\n  },\n  getSourceColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getTargetColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  getHeight: {\n    type: 'accessor',\n    value: 1\n  },\n  getTilt: {\n    type: 'accessor',\n    value: 0\n  },\n  widthUnits: 'pixels',\n  widthScale: {\n    type: 'number',\n    value: 1,\n    min: 0\n  },\n  widthMinPixels: {\n    type: 'number',\n    value: 0,\n    min: 0\n  },\n  widthMaxPixels: {\n    type: 'number',\n    value: Number.MAX_SAFE_INTEGER,\n    min: 0\n  }\n};\n\nvar ArcLayer = function (_Layer) {\n  _inherits(ArcLayer, _Layer);\n\n  function ArcLayer() {\n    _classCallCheck(this, ArcLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ArcLayer).apply(this, arguments));\n  }\n\n  _createClass(ArcLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      return _get(_getPrototypeOf(ArcLayer.prototype), \"getShaders\", this).call(this, {\n        vs: vs,\n        fs: fs,\n        modules: [picking]\n      });\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      var attributeManager = this.getAttributeManager();\n      attributeManager.addInstanced({\n        instanceSourcePositions: {\n          size: 3,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          transition: true,\n          accessor: 'getSourcePosition'\n        },\n        instanceTargetPositions: {\n          size: 3,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          transition: true,\n          accessor: 'getTargetPosition'\n        },\n        instanceSourceColors: {\n          size: this.props.colorFormat.length,\n          type: 5121,\n          normalized: true,\n          transition: true,\n          accessor: 'getSourceColor',\n          defaultValue: DEFAULT_COLOR\n        },\n        instanceTargetColors: {\n          size: this.props.colorFormat.length,\n          type: 5121,\n          normalized: true,\n          transition: true,\n          accessor: 'getTargetColor',\n          defaultValue: DEFAULT_COLOR\n        },\n        instanceWidths: {\n          size: 1,\n          transition: true,\n          accessor: 'getWidth',\n          defaultValue: 1\n        },\n        instanceHeights: {\n          size: 1,\n          transition: true,\n          accessor: 'getHeight',\n          defaultValue: 1\n        },\n        instanceTilts: {\n          size: 1,\n          transition: true,\n          accessor: 'getTilt',\n          defaultValue: 0\n        }\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n          oldProps = _ref.oldProps,\n          changeFlags = _ref.changeFlags;\n\n      _get(_getPrototypeOf(ArcLayer.prototype), \"updateState\", this).call(this, {\n        props: props,\n        oldProps: oldProps,\n        changeFlags: changeFlags\n      });\n\n      if (changeFlags.extensionsChanged) {\n        var gl = this.context.gl;\n\n        if (this.state.model) {\n          this.state.model[\"delete\"]();\n        }\n\n        this.setState({\n          model: this._getModel(gl)\n        });\n        this.getAttributeManager().invalidateAll();\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref2) {\n      var uniforms = _ref2.uniforms;\n      var viewport = this.context.viewport;\n      var _this$props = this.props,\n          widthUnits = _this$props.widthUnits,\n          widthScale = _this$props.widthScale,\n          widthMinPixels = _this$props.widthMinPixels,\n          widthMaxPixels = _this$props.widthMaxPixels;\n      var widthMultiplier = widthUnits === 'pixels' ? viewport.metersPerPixel : 1;\n      this.state.model.setUniforms(Object.assign({}, uniforms, {\n        widthScale: widthScale * widthMultiplier,\n        widthMinPixels: widthMinPixels,\n        widthMaxPixels: widthMaxPixels\n      })).draw();\n    }\n  }, {\n    key: \"_getModel\",\n    value: function _getModel(gl) {\n      var positions = [];\n      var NUM_SEGMENTS = 50;\n\n      for (var i = 0; i < NUM_SEGMENTS; i++) {\n        positions = positions.concat([i, -1, 0, i, 1, 0]);\n      }\n\n      var model = new Model(gl, Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: 5,\n          attributes: {\n            positions: new Float32Array(positions)\n          }\n        }),\n        isInstanced: true\n      }));\n      model.setUniforms({\n        numSegments: NUM_SEGMENTS\n      });\n      return model;\n    }\n  }]);\n\n  return ArcLayer;\n}(Layer);\n\nexport { ArcLayer as default };\nArcLayer.layerName = 'ArcLayer';\nArcLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/arc-layer/arc-layer.js"],"names":["DEFAULT_COLOR","defaultProps","getSourcePosition","type","value","x","getTargetPosition","getSourceColor","getTargetColor","getWidth","getHeight","getTilt","widthUnits","widthScale","min","widthMinPixels","widthMaxPixels","Number","ArcLayer","Layer","vs","fs","modules","attributeManager","instanceSourcePositions","size","fp64","transition","accessor","instanceTargetPositions","instanceSourceColors","normalized","defaultValue","instanceTargetColors","instanceWidths","instanceHeights","instanceTilts","props","oldProps","changeFlags","gl","model","uniforms","viewport","widthMultiplier","positions","NUM_SEGMENTS","i","id","geometry","drawMode","attributes","isInstanced","numSegments"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, picking} from '@deck.gl/core';\n\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './arc-layer-vertex.glsl';\nimport fs from './arc-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  getSourcePosition: {type: 'accessor', value: x => x.sourcePosition},\n  getTargetPosition: {type: 'accessor', value: x => x.targetPosition},\n  getSourceColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getTargetColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getWidth: {type: 'accessor', value: 1},\n  getHeight: {type: 'accessor', value: 1},\n  getTilt: {type: 'accessor', value: 0},\n\n  widthUnits: 'pixels',\n  widthScale: {type: 'number', value: 1, min: 0},\n  widthMinPixels: {type: 'number', value: 0, min: 0},\n  widthMaxPixels: {type: 'number', value: Number.MAX_SAFE_INTEGER, min: 0}\n};\n\nexport default class ArcLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [picking]}); // 'project' module added by default.\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instanceSourcePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getSourcePosition'\n      },\n      instanceTargetPositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getTargetPosition'\n      },\n      instanceSourceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getSourceColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceTargetColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getTargetColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getWidth',\n        defaultValue: 1\n      },\n      instanceHeights: {\n        size: 1,\n        transition: true,\n        accessor: 'getHeight',\n        defaultValue: 1\n      },\n      instanceTilts: {\n        size: 1,\n        transition: true,\n        accessor: 'getTilt',\n        defaultValue: 0\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n    // Re-generate model if geometry changed\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      this.getAttributeManager().invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {viewport} = this.context;\n    const {widthUnits, widthScale, widthMinPixels, widthMaxPixels} = this.props;\n\n    const widthMultiplier = widthUnits === 'pixels' ? viewport.metersPerPixel : 1;\n\n    this.state.model\n      .setUniforms(\n        Object.assign({}, uniforms, {\n          widthScale: widthScale * widthMultiplier,\n          widthMinPixels,\n          widthMaxPixels\n        })\n      )\n      .draw();\n  }\n\n  _getModel(gl) {\n    let positions = [];\n    const NUM_SEGMENTS = 50;\n    /*\n     *  (0, -1)-------------_(1, -1)\n     *       |          _,-\"  |\n     *       o      _,-\"      o\n     *       |  _,-\"          |\n     *   (0, 1)\"-------------(1, 1)\n     */\n    for (let i = 0; i < NUM_SEGMENTS; i++) {\n      positions = positions.concat([i, -1, 0, i, 1, 0]);\n    }\n\n    const model = new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_STRIP,\n          attributes: {\n            positions: new Float32Array(positions)\n          }\n        }),\n        isInstanced: true\n      })\n    );\n\n    model.setUniforms({numSegments: NUM_SEGMENTS});\n\n    return model;\n  }\n}\n\nArcLayer.layerName = 'ArcLayer';\nArcLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}