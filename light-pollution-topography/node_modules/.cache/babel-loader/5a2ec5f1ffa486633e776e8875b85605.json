{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { asyncDeepMap } from './async-deep-map';\nexport function deepLoad(_x, _x2, _x3) {\n  return _deepLoad.apply(this, arguments);\n}\n\nfunction _deepLoad() {\n  _deepLoad = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(urlTree, load, options) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return asyncDeepMap(urlTree, function (url) {\n              return shallowLoad(url, load, options);\n            });\n\n          case 2:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _deepLoad.apply(this, arguments);\n}\n\nexport function shallowLoad(_x4, _x5, _x6) {\n  return _shallowLoad.apply(this, arguments);\n}\n\nfunction _shallowLoad() {\n  _shallowLoad = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(url, load, options) {\n    var response, arrayBuffer;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return fetch(url, options.fetch);\n\n          case 2:\n            response = _context2.sent;\n            _context2.next = 5;\n            return response.arrayBuffer();\n\n          case 5:\n            arrayBuffer = _context2.sent;\n            _context2.next = 8;\n            return load(arrayBuffer, options);\n\n          case 8:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _shallowLoad.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../src/lib/texture-loading-api/deep-load.js"],"names":["asyncDeepMap","shallowLoad","response","fetch","options","arrayBuffer","load"],"mappings":";;AACA,SAAA,YAAA,QAAA,kBAAA;AAEA,OAAA,SAAA,QAAA,CAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA,SAAA,SAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;;yDAAO,SAAA,OAAA,CAAA,OAAA,EAAA,IAAA,EAAA,OAAA,EAAA;AAAA,WAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,aAAA,CAAA,EAAA;AAAA,gBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,eAAA,CAAA;AAAA,YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA,mBACQA,YAAY,CAAA,OAAA,EAAU,UAAA,GAAA,EAAG;AAAA,qBAAIC,WAAW,CAAA,GAAA,EAAA,IAAA,EAAf,OAAe,CAAf;AADjC,aACoB,CADpB;;AAAA,eAAA,CAAA;AAAA,mBAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAAA,QAAA,CAAA,IAAA,CAAA;;AAAA,eAAA,CAAA;AAAA,eAAA,KAAA;AAAA,mBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,KAAA,EAAA,OAAA,CAAA;;;;;AAIP,OAAA,SAAA,WAAA,CAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA,SAAA,YAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;;4DAAO,SAAA,QAAA,CAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA;AAAA,QAAA,QAAA,EAAA,WAAA;AAAA,WAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,aAAA,CAAA,EAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,eAAA,CAAA;AAAA,YAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,mBAEkBE,KAAK,CAAA,GAAA,EAAMC,OAAO,CAFpC,KAEuB,CAFvB;;AAAA,eAAA,CAAA;AAECF,YAAAA,QAFD,GAAA,SAAA,CAAA,IAECA;AAFD,YAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,mBAGqBA,QAAQ,CAH7B,WAGqBA,EAHrB;;AAAA,eAAA,CAAA;AAGCG,YAAAA,WAHD,GAAA,SAAA,CAAA,IAGCA;AAHD,YAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,mBAIQC,IAAI,CAAA,WAAA,EAJZ,OAIY,CAJZ;;AAAA,eAAA,CAAA;AAAA,mBAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA,SAAA,CAAA,IAAA,CAAA;;AAAA,eAAA,CAAA;AAAA,eAAA,KAAA;AAAA,mBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,KAAA,EAAA,QAAA,CAAA","sourcesContent":["/* global fetch */\nimport {asyncDeepMap} from './async-deep-map';\n\nexport async function deepLoad(urlTree, load, options) {\n  return await asyncDeepMap(urlTree, url => shallowLoad(url, load, options));\n}\n\nexport async function shallowLoad(url, load, options) {\n  // console.error('loading', url);\n  const response = await fetch(url, options.fetch);\n  const arrayBuffer = await response.arrayBuffer();\n  return await load(arrayBuffer, options);\n}\n"]},"metadata":{},"sourceType":"module"}