{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["bitmapLayerDefaults","wrapLongitude","renderSubLayers","props","BitmapLayer","data","image","bounds","tile","bbox","west","south","east","north","terrainLayerDefaults","elevationDecoder","rScaler","gScaler","bScaler","offset","meshMaxError","workerUrl","material","ambient","diffuse","shininess","specularColor","App","state","viz","viewState","longitude","latitude","zoom","pitch","bearing","maxZoom","isDrone","fullLoopDuration","pitchChange","bearingChange","tickSize","setTimeout","startAnimating","this","console","log","time","Date","now","i","Promise","resolve","requestAnimationFrame","eased","Math","sin","PI","eased2x","setState","transitionDuration","onTransitionInterrupt","smog","TileLayer","id","watercolor","tonerlabel","terrain","layers","TerrainLayer","elevationData","texture","controller","onViewStateChange","className","href","type","name","value","checked","onChange","e","target","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.64488711.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport DeckGL from '@deck.gl/react';\nimport { TerrainLayer, TileLayer, } from '@deck.gl/geo-layers';\nimport { BitmapLayer,  } from '@deck.gl/layers';\n\nconst bitmapLayerDefaults = ({\n  wrapLongitude: true,\n  renderSubLayers: props => (\n    new BitmapLayer((props), {\n      data: null,\n      image: props.data,\n      bounds: [props.tile.bbox.west, props.tile.bbox.south, props.tile.bbox.east, props.tile.bbox.north],\n    })\n  ),\n})\nconst terrainLayerDefaults = ({\n  elevationDecoder: {\n    rScaler: 0,\n    gScaler: 0,\n    bScaler: 337,\n    offset: 0,\n  },\n  meshMaxError: 1,\n  wrapLongitude: true,\n  workerUrl: \"./terrain-loader.worker.js\",\n  material: {\n    ambient: 0.2,\n    diffuse: 1,\n    shininess: 128,\n    specularColor: [255, 192, 64]\n  },\n});\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      viz: \"bumpy-light\",\n      viewState: {longitude: -122.4, latitude: 37.7, zoom: 6, pitch: 50, bearing: 0, maxZoom: 10},\n      isDrone: true,\n      fullLoopDuration: 200,\n      pitchChange: 0.5,\n      bearingChange: 3,\n      tickSize: 5,\n    };\n  }\n  componentDidMount() {\n    setTimeout(() => this.startAnimating(), 1000);\n  }\n  async startAnimating() {\n    const {viewState: {pitch, bearing}, fullLoopDuration, pitchChange, bearingChange, tickSize} = this.state;\n    if((typeof pitch) !== \"number\" || (typeof bearing) !== \"number\") {\n      console.log({\"deckgl appearance\": \"loading\", pitch, bearing, pitchChange, time: Date.now()});\n      setTimeout(() => this.startAnimating(), 0);\n    } else {\n      // for me, on my graphics card, the map view was glitching out (blank white flashes) with transitions longer than ~10ms\n      let i = 0;\n      do {\n        const raf = await new Promise(resolve => requestAnimationFrame(resolve));\n        const delay = await new Promise(resolve => setTimeout(resolve, tickSize));\n        const eased = Math.sin(Math.PI * 2 * i / fullLoopDuration);\n        const eased2x = Math.sin(Math.PI * 2 * 2 * i / fullLoopDuration);\n        this.setState({viewState: {\n          ...this.state.viewState,\n          bearing: bearing + eased * bearingChange,\n          pitch: pitch + eased2x * pitchChange,\n          transitionDuration: tickSize,\n          onTransitionInterrupt: () => this.setState({isDrone: false}),\n        }})\n      } while (i++ < fullLoopDuration && this.state.isDrone);\n      if(this.state.isDrone) { this.startAnimating() }\n    }\n  }\n  render() {\n    const {viz} = this.state;\n    const smog = new TileLayer({\n      ...bitmapLayerDefaults,\n      data: './tiles/greys-{z}-{x}-{y}.png',\n      maxZoom: 7,\n      id: 'smog',\n    })\n    const watercolor = new TileLayer({\n      ...bitmapLayerDefaults,\n      data: './stamen-tiles/watercolor/{z}/{x}/{y}.jpg',\n      id: 'watercolor',\n    });\n    const tonerlabel = new TileLayer({\n      ...bitmapLayerDefaults,\n      data: './stamen-tiles/toner-labels/{z}/{x}/{y}.png',\n      id: 'tonerlabel',\n    });\n    const terrain = new TileLayer({\n      ...bitmapLayerDefaults,\n      data: './stamen-tiles/terrain/{z}/{x}/{y}.png',\n      id: 'greenhills',\n    })\n    const bumpyLight = new TerrainLayer({\n      ...terrainLayerDefaults,\n      id: 'bumpyLight',\n      elevationData: './tiles/globe-{z}-{x}-{y}.png',\n      texture: './tiles/globe-{z}-{x}-{y}.png',\n      workerUrl: \"./terrain-loader.worker.js\",\n    });\n    const bumpyTerrain = new TerrainLayer({\n      ...terrainLayerDefaults,\n      id: 'bumpyTerrain',\n      elevationData: './tiles/globe-{z}-{x}-{y}.png',\n      texture: './stamen-tiles/terrain/{z}/{x}/{y}.png',\n    });\n    const bumpyWatercolor = new TerrainLayer({\n      ...terrainLayerDefaults,\n      id: 'bumpyWatercolor',\n      elevationData: './tiles/globe-{z}-{x}-{y}.png',\n      texture: './stamen-tiles/watercolor/{z}/{x}/{y}.jpg',\n    })\n    const layerMapping = ({\n      \"bumpy-light\": [bumpyLight],\n      \"bumpy-terrain\": [bumpyTerrain],\n      \"bumpy-watercolor\": [bumpyWatercolor],\n      \"hazy-terrain\": [terrain, smog],\n      \"hazy-watercolor\": [watercolor, tonerlabel, smog],\n      \"hazy-gouache\": [watercolor, smog],\n    })\n    const layers = layerMapping[viz];\n    return (\n      <div>\n        <div>\n          <DeckGL viewState={this.state.viewState} controller={true} layers={layers} id={\"maincanvas\"} onViewStateChange={({viewState}) => this.setState({viewState})} />\n        </div>\n        <div className=\"tweaks\">\n          <div id=\"colophon\">\n            Â© Lee Butterman 2020. Made in Oakland, California.<br/>\n            Map tiles by Stamen Design, <a href=\"https://creativecommons.org/licenses/by/3.0/\">CC BY 3.0</a>.<br/>\n            Map data by OpenStreetMap, <a href=\"https://creativecommons.org/licenses/by-sa/3.0/\">CC BY SA 3.0</a><br/>\n            Light pollution from <a href=\"https://dx.doi.org/10.1126/sciadv.1600377\">Falchi et al</a>, <a href=\"https://doi.org/10.5880/GFZ.1.4.2016.001\">World Atlas 2015</a>, <a href=\"https://creativecommons.org/licenses/by-nc/4.0/\">CC BY NC 4.0</a>.<br/>\n            <div id=\"legend\"><hr/>Light pollution legend (as haze):<br/><span id=\"no-human-light\">no human light</span>/<span id=\"horizon-glow\">horizon glow</span>/<span id=\"no-milky-way\">no milky way</span>/<span id=\"mesopic\">colors visible</span></div>\n          </div>\n          <div id=\"tweaks\">\n            View light pollution as:<br/>\n            <form>\n              <div>\n                <label>\n                  <input type=\"radio\" name=\"viz\" value=\"bumpy-light\" checked={viz === \"bumpy-light\"} onChange={e => this.setState({viz: e.target.value})} />\n                  topography, on a white/blue world\n                </label>\n              </div>\n              <div>\n                <label>\n                  <input type=\"radio\" name=\"viz\" value=\"bumpy-terrain\" checked={viz === \"bumpy-terrain\"} onChange={e => this.setState({viz: e.target.value})} />\n                  topography, on a terrain map world\n                </label>\n              </div>\n              <div>\n                <label>\n                  <input type=\"radio\" name=\"viz\" value=\"bumpy-watercolor\" checked={viz === \"bumpy-watercolor\"} onChange={e => this.setState({viz: e.target.value})} />\n                  topography, on a watercolor world\n                </label>\n              </div>\n              <div>\n                <label>\n                  <input type=\"radio\" name=\"viz\" value=\"hazy-terrain\" checked={viz === \"hazy-terrain\"} onChange={e => this.setState({viz: e.target.value})} />\n                  haze, on a terrain map world\n                </label>\n              </div>\n              <div>\n                <label>\n                  <input type=\"radio\" name=\"viz\" value=\"hazy-watercolor\" checked={viz === \"hazy-watercolor\"} onChange={e => this.setState({viz: e.target.value})} />\n                  haze, on a watercolor world with labels\n                </label>\n              </div>\n              <div>\n                <label>\n                  <input type=\"radio\" name=\"viz\" value=\"hazy-gouache\" checked={viz === \"hazy-gouache\"} onChange={e => this.setState({viz: e.target.value})} />\n                  haze, on a watercolor world\n                </label>\n              </div>\n            </form>\n            <label>\n              <input type=\"checkbox\" checked={this.state.isDrone} onChange={e => { this.setState({isDrone: e.target.checked}); if(!this.state.isDrone) this.startAnimating() } } />\n              drone hover\n            </label>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}