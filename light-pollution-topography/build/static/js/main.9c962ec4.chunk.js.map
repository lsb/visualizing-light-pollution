{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["bitmapLayerDefaults","wrapLongitude","renderSubLayers","props","BitmapLayer","data","image","bounds","tile","bbox","west","south","east","north","terrainLayerDefaults","elevationDecoder","rScaler","gScaler","bScaler","offset","meshMaxError","workerUrl","material","ambient","diffuse","shininess","specularColor","App","state","viz","viewState","longitude","latitude","zoom","pitch","bearing","maxZoom","isDrone","fullLoopDuration","tickSize","d1x","d1y","d1z","d2x","d2y","d2z","setTimeout","startAnimating","this","console","log","time","Date","now","i","Promise","resolve","requestAnimationFrame","easedsin","Math","sin","PI","easedcos","cos","setState","smog","TileLayer","id","watercolor","tonerlabel","terrain","layers","TerrainLayer","elevationData","texture","directionalLight","DirectionalLight","color","intensity","_shadow","direction","effects","LightingEffect","a","b","controller","onViewStateChange","className","href","onChange","e","target","value","type","checked","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qcAOMA,EAAuB,CAC3BC,eAAe,EACfC,gBAAiB,SAAAC,GAAK,OACpB,IAAIC,IAAaD,EAAQ,CACvBE,KAAM,KACNC,MAAOH,EAAME,KACbE,OAAQ,CAACJ,EAAMK,KAAKC,KAAKC,KAAMP,EAAMK,KAAKC,KAAKE,MAAOR,EAAMK,KAAKC,KAAKG,KAAMT,EAAMK,KAAKC,KAAKI,WAI5FC,EAAwB,CAC5BC,iBAAkB,CAChBC,QAAS,EACTC,QAAS,EACTC,QAAS,IACTC,OAAQ,GAEVC,aAAc,EACdnB,eAAe,EACfoB,UAAW,6BACXC,SAAU,CACRC,QAAS,GACTC,QAAS,EACTC,UAAW,IACXC,cAAe,CAAC,IAAK,IAAK,MA2IfC,E,kDAtIb,WAAYxB,GAAQ,IAAD,8BACjB,cAAMA,IACDyB,MAAQ,CACXC,IAAK,cACLC,UAAW,CAACC,WAAY,MAAOC,SAAU,KAAMC,KAAM,EAAGC,MAAO,EAAGC,QAAS,EAAGC,QAAS,IACvFC,SAAS,EACTC,iBAAkB,IAClBC,SAAU,GACVC,IAAK,EACLC,IAAK,EACLC,KAAM,GACNC,IAAK,EACLC,IAAK,EACLC,KAAM,KAbS,E,gEAgBE,IAAD,OAClBC,YAAW,kBAAM,EAAKC,mBAAkB,O,6KAGHC,KAAKpB,MAAnCU,E,EAAAA,iBAAkBC,E,EAAAA,SACQ,kBAAtBD,GAAwD,kBAAdC,E,gBACnDU,QAAQC,IAAI,CAAC,oBAAqB,UAAWZ,mBAAkBC,WAAUY,KAAMC,KAAKC,QACpFP,YAAW,kBAAM,EAAKC,mBAAkB,G,uBAEpCO,EAAI,E,uBAEY,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,sBAAsBD,M,+BAC3C,IAAID,SAAQ,SAAAC,GAAO,OAAIV,WAAWU,EAASjB,M,eACzDmB,EAA0D,EAA/CC,KAAKC,IAAc,EAAVD,KAAKE,GAASP,EAAIhB,GACtCwB,EAA0D,EAA/CH,KAAKI,IAAc,EAAVJ,KAAKE,GAASP,EAAIhB,GAC5CU,KAAKgB,SAAS,CAACxB,IAAKkB,EAAUjB,IAAKqB,I,WAC5BR,IAAMhB,GAAoBU,KAAKpB,MAAMS,Q,wBAC3CW,KAAKpB,MAAMS,SAAWW,KAAKD,iB,sIAGxB,IAAD,SACqCC,KAAKpB,MAA1CC,EADA,EACAA,IAAKW,EADL,EACKA,IAAKC,EADV,EACUA,IAAKC,EADf,EACeA,IAAKC,EADpB,EACoBA,IAAKC,EADzB,EACyBA,IAAKC,EAD9B,EAC8BA,IAC/BoB,EAAO,IAAIC,IAAJ,eACRlE,EADQ,CAEXK,KAAM,gCACN+B,QAAS,EACT+B,GAAI,UAEAC,EAAa,IAAIF,IAAJ,eACdlE,EADc,CAEjBK,KAAM,4CACN8D,GAAI,gBAEAE,EAAa,IAAIH,IAAJ,eACdlE,EADc,CAEjBK,KAAM,8CACN8D,GAAI,gBAEAG,EAAU,IAAIJ,IAAJ,eACXlE,EADW,CAEdK,KAAM,yCACN8D,GAAI,gBA6BAI,EARgB,CACpB,cAAe,CApBE,IAAIC,IAAJ,eACd1D,EADc,CAEjBqD,GAAI,aACJM,cAAe,gCACfC,QAAS,gCACTrD,UAAW,iCAgBX,gBAAiB,CAdE,IAAImD,IAAJ,eAChB1D,EADgB,CAEnBqD,GAAI,eACJM,cAAe,gCACfC,QAAS,6CAWT,mBAAoB,CATE,IAAIF,IAAJ,eACnB1D,EADmB,CAEtBqD,GAAI,kBACJM,cAAe,gCACfC,QAAS,gDAMT,eAAgB,CAACJ,EAASL,GAC1B,kBAAmB,CAACG,EAAYC,EAAYJ,GAC5C,eAAgB,CAACG,EAAYH,IAEHpC,GACtB8C,EAAmB,CAAC,IAAIC,IAAiB,CAACC,MAAO,CAAC,IAAI,IAAI,KAAMC,UAAW,IAAMC,SAAS,EAAMC,UAAW,CAACxC,EAAIC,EAAIC,KAAQ,IAAIkC,IAAiB,CAACC,MAAO,CAAC,IAAI,IAAI,KAAMC,UAAW,GAAKE,UAAW,CAACrC,EAAIC,EAAIC,MAC5MoC,EAAU,CAAC,IAAIC,IAAe,CAACC,EAAGR,EAAiB,GAAIS,EAAGT,EAAiB,MACjF,OACE,6BACE,6BACE,kBAAC,IAAD,CAAQ7C,UAAWkB,KAAKpB,MAAME,UAAWuD,YAAY,EAAMd,OAAQA,EAAQU,QAASA,EAASd,GAAI,aAAcmB,kBAAmB,gBAAExD,EAAF,EAAEA,UAAF,OAAiB,EAAKkC,SAAS,CAAClC,kBAEpK,yBAAKyD,UAAU,UACb,yBAAKpB,GAAG,YAAR,+CAEE,0BAAMoB,UAAU,gBAAhB,aACY,uBAAGC,KAAK,gDAAR,MADZ,4BAEW,uBAAGA,KAAK,mDAAR,MAFX,mCAGkB,uBAAGA,KAAK,mDAAR,MAHlB,IAGmF,uBAAGA,KAAK,6CAAR,gBAHnF,KAGyJ,uBAAGA,KAAK,4CAAR,oBAHzJ,MAeF,yBAAKrB,GAAG,UAAR,2BAEE,4BAAQA,GAAG,YAAYsB,SAAU,SAAAC,GAAC,OAAI,EAAK1B,SAAS,CAACnC,IAAK6D,EAAEC,OAAOC,SAASA,MAAO/D,GACjF,4BAAQ+D,MAAM,eAAd,qCACA,4BAAQA,MAAM,iBAAd,sCACA,4BAAQA,MAAM,oBAAd,qCACA,4BAAQA,MAAM,gBAAd,gCACA,4BAAQA,MAAM,mBAAd,2CACA,4BAAQA,MAAM,gBAAd,gCARJ,YAWE,+BACE,2BAAOC,KAAK,WAAWC,QAAS9C,KAAKpB,MAAMS,QAASoD,SAAU,SAAAC,GAAO,EAAK1B,SAAS,CAAC3B,QAASqD,EAAEC,OAAOG,UAAe,EAAKlE,MAAMS,SAAS,EAAKU,oBADhJ,iC,GA5HMgD,IAAMC,WCvBJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjE,QAAQiE,MAAMA,EAAMC,c","file":"static/js/main.9c962ec4.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport DeckGL from '@deck.gl/react';\nimport { TerrainLayer, TileLayer, } from '@deck.gl/geo-layers';\nimport { BitmapLayer,  } from '@deck.gl/layers';\nimport {DirectionalLight, LightingEffect} from '@deck.gl/core';\n\nconst bitmapLayerDefaults = ({\n  wrapLongitude: true,\n  renderSubLayers: props => (\n    new BitmapLayer((props), {\n      data: null,\n      image: props.data,\n      bounds: [props.tile.bbox.west, props.tile.bbox.south, props.tile.bbox.east, props.tile.bbox.north],\n    })\n  ),\n})\nconst terrainLayerDefaults = ({\n  elevationDecoder: {\n    rScaler: 0,\n    gScaler: 0,\n    bScaler: 337,\n    offset: 0,\n  },\n  meshMaxError: 1,\n  wrapLongitude: true,\n  workerUrl: \"./terrain-loader.worker.js\",\n  material: {\n    ambient: 0.2,\n    diffuse: 1,\n    shininess: 128,\n    specularColor: [255, 192, 64]\n  },\n});\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      viz: \"bumpy-light\",\n      viewState: {longitude: -122.4, latitude: 37.7, zoom: 6, pitch: 0, bearing: 0, maxZoom: 10},\n      isDrone: true,\n      fullLoopDuration: 234,\n      tickSize: 10,\n      d1x: 0, // -1\n      d1y: 5, // -3\n      d1z: -13, // -1\n      d2x: 1,\n      d2y: 8,\n      d2z: -2.5,\n    };\n  }\n  componentDidMount() {\n    setTimeout(() => this.startAnimating(), 1000);\n  }\n  async startAnimating() {\n    const {fullLoopDuration, tickSize} = this.state;\n    if((typeof fullLoopDuration) !== \"number\" || (typeof tickSize) !== \"number\") {\n      console.log({\"deckgl appearance\": \"loading\", fullLoopDuration, tickSize, time: Date.now()});\n      setTimeout(() => this.startAnimating(), 0);\n    } else {\n      let i = 0;\n      do {\n        const raf = await new Promise(resolve => requestAnimationFrame(resolve));\n        const delay = await new Promise(resolve => setTimeout(resolve, tickSize));\n        const easedsin = Math.sin(Math.PI * 2 * i / fullLoopDuration) * 5;\n        const easedcos = Math.cos(Math.PI * 2 * i / fullLoopDuration) * 5;\n        this.setState({d1x: easedsin, d1y: easedcos});\n      } while (i++ < fullLoopDuration && this.state.isDrone);\n      if(this.state.isDrone) { this.startAnimating() }\n    }\n  }\n  render() {\n    const {viz, d1x, d1y, d1z, d2x, d2y, d2z} = this.state;\n    const smog = new TileLayer({\n      ...bitmapLayerDefaults,\n      data: './tiles/greys-{z}-{x}-{y}.png',\n      maxZoom: 7,\n      id: 'smog',\n    })\n    const watercolor = new TileLayer({\n      ...bitmapLayerDefaults,\n      data: './stamen-tiles/watercolor/{z}/{x}/{y}.jpg',\n      id: 'watercolor',\n    });\n    const tonerlabel = new TileLayer({\n      ...bitmapLayerDefaults,\n      data: './stamen-tiles/toner-labels/{z}/{x}/{y}.png',\n      id: 'tonerlabel',\n    });\n    const terrain = new TileLayer({\n      ...bitmapLayerDefaults,\n      data: './stamen-tiles/terrain/{z}/{x}/{y}.png',\n      id: 'greenhills',\n    })\n    const bumpyLight = new TerrainLayer({\n      ...terrainLayerDefaults,\n      id: 'bumpyLight',\n      elevationData: './tiles/globe-{z}-{x}-{y}.png',\n      texture: './tiles/globe-{z}-{x}-{y}.png',\n      workerUrl: \"./terrain-loader.worker.js\",\n    });\n    const bumpyTerrain = new TerrainLayer({\n      ...terrainLayerDefaults,\n      id: 'bumpyTerrain',\n      elevationData: './tiles/globe-{z}-{x}-{y}.png',\n      texture: './stamen-tiles/terrain/{z}/{x}/{y}.png',\n    });\n    const bumpyWatercolor = new TerrainLayer({\n      ...terrainLayerDefaults,\n      id: 'bumpyWatercolor',\n      elevationData: './tiles/globe-{z}-{x}-{y}.png',\n      texture: './stamen-tiles/watercolor/{z}/{x}/{y}.jpg',\n    })\n    const layerMapping = ({\n      \"bumpy-light\": [bumpyLight],\n      \"bumpy-terrain\": [bumpyTerrain],\n      \"bumpy-watercolor\": [bumpyWatercolor],\n      \"hazy-terrain\": [terrain, smog],\n      \"hazy-watercolor\": [watercolor, tonerlabel, smog],\n      \"hazy-gouache\": [watercolor, smog],\n    })\n    const layers = layerMapping[viz];\n    const directionalLight = [new DirectionalLight({color: [255,255,255], intensity: 0.25, _shadow: true, direction: [d1x,d1y,d1z]}), new DirectionalLight({color: [255,255,255], intensity: 0.9, direction: [d2x,d2y,d2z]})];\n    const effects = [new LightingEffect({a: directionalLight[0], b: directionalLight[1]})];//, new LightingEffect({directionalLight: directionalLight[1]}) ]\n    return (\n      <div>\n        <div>\n          <DeckGL viewState={this.state.viewState} controller={true} layers={layers} effects={effects} id={\"maincanvas\"} onViewStateChange={({viewState}) => this.setState({viewState})} />\n        </div>\n        <div className=\"tweaks\">\n          <div id=\"colophon\">\n            Â© Lee Butterman 2020. Made in Oakland CA.\n            <span className=\"tiny-credits\">\n              Map tiles <a href=\"https://creativecommons.org/licenses/by/3.0/\">by</a> Stamen Design.\n              Map data <a href=\"https://creativecommons.org/licenses/by-sa/3.0/\">by</a> OpenStreetMap.\n              Light pollution <a href=\"https://creativecommons.org/licenses/by-nc/4.0/\">by</a> <a href=\"https://dx.doi.org/10.1126/sciadv.1600377\">Falchi et al</a>, <a href=\"https://doi.org/10.5880/GFZ.1.4.2016.001\">World Atlas 2015</a>.\n            </span>\n            {/* <div>\n              d1x <input type=\"range\" min=\"-200\" max=\"200\" step=\"0.5\" value={d1x} onChange={e => this.setState({d1x: e.target.value * 1})} /> {d1x} <br/>\n              d1y <input type=\"range\" min=\"-200\" max=\"200\" step=\"0.5\" value={d1y} onChange={e => this.setState({d1y: e.target.value * 1})} /> {d1y} <br/>\n              d1z <input type=\"range\" min=\"-200\" max=\"200\" step=\"0.5\" value={d1z} onChange={e => this.setState({d1z: e.target.value * 1})} /> {d1z} <br/>\n              d2x <input type=\"range\" min=\"-200\" max=\"200\" step=\"0.5\" value={d2x} onChange={e => this.setState({d2x: e.target.value * 1})} /> {d2x} <br/>\n              d2y <input type=\"range\" min=\"-200\" max=\"200\" step=\"0.5\" value={d2y} onChange={e => this.setState({d2y: e.target.value * 1})} /> {d2y} <br/>\n              d2z <input type=\"range\" min=\"-200\" max=\"200\" step=\"0.5\" value={d2z} onChange={e => this.setState({d2z: e.target.value * 1})} /> {d2z} <br/>\n            </div> */}\n            {/* <div id=\"legend\"><hr/>Light pollution legend (as haze):<br/><span id=\"no-human-light\">no human light</span>/<span id=\"horizon-glow\">horizon glow</span>/<span id=\"no-milky-way\">no milky way</span>/<span id=\"mesopic\">colors visible</span></div> */}\n          </div>\n          <div id=\"tweaks\">\n            View light pollution as:\n            <select id=\"viz-style\" onChange={e => this.setState({viz: e.target.value})} value={viz}>\n              <option value=\"bumpy-light\">topography, on a white/blue world</option>\n              <option value=\"bumpy-terrain\">topography, on a terrain map world</option>\n              <option value=\"bumpy-watercolor\">topography, on a watercolor world</option>\n              <option value=\"hazy-terrain\">haze, on a terrain map world</option>\n              <option value=\"hazy-watercolor\">haze, on a watercolor world with labels</option>\n              <option value=\"hazy-gouache\">haze, on a watercolor world</option>\n            </select>\n            &nbsp; &nbsp;\n            <label>\n              <input type=\"checkbox\" checked={this.state.isDrone} onChange={e => { this.setState({isDrone: e.target.checked}); if(!this.state.isDrone) this.startAnimating() } } />\n              spotlight circling&nbsp;\n            </label>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}